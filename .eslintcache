[{"/Users/basil/work/lamisplus/HTS/HTS-Module/src/index.js":"1","/Users/basil/work/lamisplus/HTS/HTS-Module/src/App.js":"2","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/reportWebVitals.js":"3","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/context/ThemeContext.js":"4","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientDetail.js":"5","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Home.js":"6","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/RegisterPatient.js":"7","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/HIVSTPatient.js":"8","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/context/ThemeDemo.js":"9","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientCard.js":"10","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/ViewEditHivst.js":"11","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/api.js":"12","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HTSList.js":"13","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientList.js":"14","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientHtsEnrollment.js":"15","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/CheckedInPatients.js":"16","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HTSML.js":"17","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/History/PatientHistory.js":"18","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Others.js":"19","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RefferalForm.js":"20","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PostTest.js":"21","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RiskStratification.js":"22","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/FamilyIndexhIstory.js":"23","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/FamilyIndexTestingForm.js":"24","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/HivTestResult.js":"25","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/ViewPnsForm.js":"26","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RefferalUnit.js":"27","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/PnsForm.js":"28","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/ViewFamilyIndexForm.js":"29","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/PNSHistory.js":"30","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PreTest.js":"31","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/BasicInfo.js":"32","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Elicitation/Index.js":"33","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/Index.js":"34","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RecencyTesting.js":"35","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/Referrall_view_update.js":"36","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/ClientReferralHistory.js":"37","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/utility/index.js":"38","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/utils/index.js":"39","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Elicitation/AddIndexContact.js":"40","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Elicitation/IndexContactList.js":"41","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Index.js":"42","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/NewlyEnrolledArtBySex.js":"43","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/ReceivingArtBySex.js":"44","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/ReceivingArtByAge.js":"45","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/NewlyEnrolledArtByAge.js":"46","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/ClientRerralList.js":"47","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Elicitation/AddIndexContact.js":"48","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/ServicesProvided.js":"49","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/PNSlist.js":"50","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/RefferalUnit.js":"51","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/FeedbackModal.js":"52","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/HIVSTPatientHistory.js":"53","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/ExistenceClientHIVSTRegistration.js":"54","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContineousRegistrationTesting.js":"55","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/History/History.js":"56","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/RiskStratification.js":"57","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/RecencyTesting.js":"58","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/PostTest.js":"59","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Others.js":"60","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/HivTestResult.js":"61","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/PreTest.js":"62","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Elicitation/Index.js":"63","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/BasicInfo.js":"64","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/HIVSTPatientRegistration.js":"65","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Others.js":"66","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/PostTest.js":"67","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Elicitation/Index.js":"68","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/BasicInfo.js":"69","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/HivTestResult.js":"70","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/RecencyTesting.js":"71","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/RiskStratification.js":"72","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/PreTest.js":"73","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/ClientReferral/ReferralUnit.js":"74","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Elicitation/AddIndexContact.js":"75","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Elicitation/IndexContactList.js":"76","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Elicitation/IndexContactList.js":"77"},{"size":715,"mtime":1750927781377,"results":"78","hashOfConfig":"79"},{"size":1469,"mtime":1750927781377,"results":"80","hashOfConfig":"79"},{"size":362,"mtime":1750927782633,"results":"81","hashOfConfig":"79"},{"size":8947,"mtime":1750927781399,"results":"82","hashOfConfig":"79"},{"size":4415,"mtime":1750927782620,"results":"83","hashOfConfig":"79"},{"size":5062,"mtime":1750927782581,"results":"84","hashOfConfig":"79"},{"size":34846,"mtime":1750927782621,"results":"85","hashOfConfig":"79"},{"size":13673,"mtime":1750927782594,"results":"86","hashOfConfig":"79"},{"size":2920,"mtime":1750927781399,"results":"87","hashOfConfig":"79"},{"size":10381,"mtime":1750927782620,"results":"88","hashOfConfig":"79"},{"size":128182,"mtime":1750927782596,"results":"89","hashOfConfig":"79"},{"size":486,"mtime":1752481208294,"results":"90","hashOfConfig":"79"},{"size":10031,"mtime":1750927782596,"results":"91","hashOfConfig":"79"},{"size":9538,"mtime":1750927782621,"results":"92","hashOfConfig":"79"},{"size":27483,"mtime":1750927782621,"results":"93","hashOfConfig":"79"},{"size":8379,"mtime":1750927782582,"results":"94","hashOfConfig":"79"},{"size":14173,"mtime":1750927782596,"results":"95","hashOfConfig":"79"},{"size":8851,"mtime":1750927782581,"results":"96","hashOfConfig":"79"},{"size":12541,"mtime":1750927782602,"results":"97","hashOfConfig":"79"},{"size":8586,"mtime":1750927782608,"results":"98","hashOfConfig":"79"},{"size":28453,"mtime":1750927782606,"results":"99","hashOfConfig":"79"},{"size":64423,"mtime":1750927782609,"results":"100","hashOfConfig":"79"},{"size":12266,"mtime":1750927782602,"results":"101","hashOfConfig":"79"},{"size":115755,"mtime":1750927782600,"results":"102","hashOfConfig":"79"},{"size":79829,"mtime":1750927782601,"results":"103","hashOfConfig":"79"},{"size":90506,"mtime":1750927782605,"results":"104","hashOfConfig":"79"},{"size":66414,"mtime":1750927782609,"results":"105","hashOfConfig":"79"},{"size":92192,"mtime":1750927782604,"results":"106","hashOfConfig":"79"},{"size":130882,"mtime":1750927782604,"results":"107","hashOfConfig":"79"},{"size":2277,"mtime":1750927782603,"results":"108","hashOfConfig":"79"},{"size":90389,"mtime":1750927782606,"results":"109","hashOfConfig":"79"},{"size":76873,"mtime":1750927782597,"results":"110","hashOfConfig":"79"},{"size":2102,"mtime":1750927782599,"results":"111","hashOfConfig":"79"},{"size":6540,"mtime":1750927782626,"results":"112","hashOfConfig":"79"},{"size":44764,"mtime":1752483508017,"results":"113","hashOfConfig":"79"},{"size":8407,"mtime":1750927782613,"results":"114","hashOfConfig":"79"},{"size":3279,"mtime":1750927782612,"results":"115","hashOfConfig":"79"},{"size":14515,"mtime":1750927782694,"results":"116","hashOfConfig":"79"},{"size":1542,"mtime":1750927782626,"results":"117","hashOfConfig":"79"},{"size":40755,"mtime":1750927782599,"results":"118","hashOfConfig":"79"},{"size":7778,"mtime":1750927782599,"results":"119","hashOfConfig":"79"},{"size":2530,"mtime":1750927782626,"results":"120","hashOfConfig":"79"},{"size":1137,"mtime":1750927782624,"results":"121","hashOfConfig":"79"},{"size":1172,"mtime":1750927782625,"results":"122","hashOfConfig":"79"},{"size":1540,"mtime":1750927782625,"results":"123","hashOfConfig":"79"},{"size":1163,"mtime":1750927782624,"results":"124","hashOfConfig":"79"},{"size":10589,"mtime":1750927782612,"results":"125","hashOfConfig":"79"},{"size":40679,"mtime":1750927782586,"results":"126","hashOfConfig":"79"},{"size":28251,"mtime":1750927782610,"results":"127","hashOfConfig":"79"},{"size":11173,"mtime":1750927782603,"results":"128","hashOfConfig":"79"},{"size":65194,"mtime":1750927782614,"results":"129","hashOfConfig":"79"},{"size":24075,"mtime":1750927782601,"results":"130","hashOfConfig":"79"},{"size":7556,"mtime":1750927782594,"results":"131","hashOfConfig":"79"},{"size":4970,"mtime":1750927782593,"results":"132","hashOfConfig":"79"},{"size":35535,"mtime":1750927782582,"results":"133","hashOfConfig":"79"},{"size":7425,"mtime":1750927782581,"results":"134","hashOfConfig":"79"},{"size":57286,"mtime":1750927782619,"results":"135","hashOfConfig":"79"},{"size":42742,"mtime":1750927782618,"results":"136","hashOfConfig":"79"},{"size":31164,"mtime":1750927782617,"results":"137","hashOfConfig":"79"},{"size":12541,"mtime":1750927782616,"results":"138","hashOfConfig":"79"},{"size":80987,"mtime":1750927782616,"results":"139","hashOfConfig":"79"},{"size":83935,"mtime":1750927782617,"results":"140","hashOfConfig":"79"},{"size":2177,"mtime":1750927782615,"results":"141","hashOfConfig":"79"},{"size":37458,"mtime":1750927782611,"results":"142","hashOfConfig":"79"},{"size":124884,"mtime":1750927782595,"results":"143","hashOfConfig":"79"},{"size":12541,"mtime":1750927782590,"results":"144","hashOfConfig":"79"},{"size":29420,"mtime":1750927782591,"results":"145","hashOfConfig":"79"},{"size":2166,"mtime":1750927782586,"results":"146","hashOfConfig":"79"},{"size":46288,"mtime":1750927782583,"results":"147","hashOfConfig":"79"},{"size":80261,"mtime":1750927782588,"results":"148","hashOfConfig":"79"},{"size":39768,"mtime":1750927782592,"results":"149","hashOfConfig":"79"},{"size":55563,"mtime":1750927782593,"results":"150","hashOfConfig":"79"},{"size":81912,"mtime":1750927782591,"results":"151","hashOfConfig":"79"},{"size":62577,"mtime":1750927782585,"results":"152","hashOfConfig":"79"},{"size":41244,"mtime":1750927782615,"results":"153","hashOfConfig":"79"},{"size":7690,"mtime":1750927782615,"results":"154","hashOfConfig":"79"},{"size":7671,"mtime":1750927782587,"results":"155","hashOfConfig":"79"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"159"},"1wrvama",{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"159"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"159"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"172","usedDeprecatedRules":"159"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"159"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"159"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"159"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"159"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"191","usedDeprecatedRules":"159"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"194","usedDeprecatedRules":"159"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"159"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"159"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"159"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"206","usedDeprecatedRules":"159"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"159"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"159"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"159"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"159"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"221","usedDeprecatedRules":"159"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":63,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"159"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"159"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"159"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"159"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"159"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":59,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"159"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"159"},{"filePath":"243","messages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"159"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"159"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"159"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"159"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"159"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"159"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"159"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"159"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"159"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"159"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"159"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"159"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"159"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"159"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"159"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"159"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"159"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"159"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"159"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"159"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"315","usedDeprecatedRules":"159"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"159"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":6,"source":"321","usedDeprecatedRules":"159"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"159"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"159"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"159"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"159"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"159"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"159"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"159"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"159"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"159"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"159"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"159"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"159"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":6,"source":"358","usedDeprecatedRules":"159"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"159"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"159"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"159"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"159"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"159"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"159"},"/Users/basil/work/lamisplus/HTS/HTS-Module/src/index.js",["377"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\n\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\nimport SimpleReactLightbox from \"simple-react-lightbox\";\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\"; \n\nReactDOM.render(\n\t<React.StrictMode>\n\n            <SimpleReactLightbox>\n                <Router basename='/'>\n                    <ThemeContext>\n                        <App />\n                    </ThemeContext>  \n                </Router>\n            </SimpleReactLightbox>\n\n\t</React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n",["378","379"],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/App.js",["380"],"import React from \"react\";\nimport { MemoryRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./main/webapp/vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\nimport \"./../src/main/webapp/css/style.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Home from \"./main/webapp/jsx/components/Home\";\nimport RegisterPatient from \"./main/webapp/jsx/components/Patient/RegisterPatient\";\n//import RegisterPatientEnrollment from './main/webapp/jsx/components/Patient/RegisterPatientEnrollment';\nimport PatientDetail from \"./main/webapp/jsx/components/Patient/PatientDetail\";\n// import HIVSTPatientRegistration from './main/webapp/jsx/components/Patient/HIVST/HIVSTPatientRegistration';\nimport HIVSTPatient from \"./main/webapp/jsx/components/Patient/HIVST/HIVSTPatient\";\n\nexport default function App() {\n  return (\n    <div>\n      <ToastContainer />\n      {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/patient-history\">\n          <PatientDetail />\n        </Route>\n        <Route path=\"/register-patient\">\n          <RegisterPatient />\n        </Route>\n        <Route path=\"/register-hivst-patient\">\n          <HIVSTPatient />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/reportWebVitals.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/context/ThemeContext.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientDetail.js",["381","382"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport PatientCardDetail from \"./PatientCard\";\nimport { useHistory } from \"react-router-dom\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport PatientHistory from \"./../History/PatientHistory\";\nimport PatientHtsEnrollment from \"./PatientHtsEnrollment\";\nimport ViewEditHivst from \"../Patient/HIVST/ViewEditHivst\";\nimport { calculate_age } from \"../utils\";\nimport moment from \"moment\";\n\nconst styles = (theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n});\n\nfunction PatientCard(props) {\n  const { classes } = props;\n  let history = useHistory();\n\n\n  const patientObject =\n    history.location && history.location.state\n      ? history.location.state.patientObject\n      : {};\n  const patientObj =\n    history.location && history.location.state\n      ? history.location.state.patientObj\n      : {};\n\n   \n  const clientCode =\n    history.location && history.location.state\n      ? history.location.state.clientCode\n      : \"\";\n\n\n      const [personInfo, setPersonInfo]=useState({})\n  const [activePage, setActivePage] = useState({\n    activePage: \"home\",\n    activeObject: {},\n    actionType: \"\",\n  });\n  useEffect(() => {}, [activePage]);\n  const patientAge = calculate_age(\n    moment(patientObj.dateOfBirth).format(\"YYYY-MM-DD\")\n  );\n\n  return (\n    <div className={classes.root}>\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              {\" \"}\n              <Link to={\"/\"}>HTS /</Link> Patient Dashboard\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <Card>\n        <CardContent>\n          <PatientCardDetail\n            patientObj={patientObj}\n            clientCode={clientCode}\n            patientObject={patientObject}\n            setPersonInfo={setPersonInfo}\n          />\n          {activePage.activePage === \"home\" && (\n            <PatientHistory\n              patientObj={patientObj}\n              activePage={\n                history?.location?.state?.activepage\n                  ? history?.location?.state?.activepage\n                  : \"home\"\n              }\n              checkedInPatient={\n                history?.location?.state?.checkedInPatient\n                  ? history?.location?.state?.checkedInPatient\n                  : \"\"\n              }\n              setActivePage={setActivePage}\n              clientCode={clientCode}\n              patientAge={patientObj.age}\n              patientObject={patientObject}\n              personInfo={personInfo}\n            />\n          )}\n          {activePage.activePage === \"view\" && (\n            <PatientHtsEnrollment\n              patientObj={patientObj}\n              activePage={activePage}\n              setActivePage={setActivePage}\n              clientCode={clientCode}\n              patientAge={patientObj.age}\n              patientObject={patientObject}\n            />\n          )}\n\n          {activePage.activePage === \"hivst_view\" && (\n            <ViewEditHivst\n              patientObj={patientObj}\n              activePage={activePage}\n              setActivePage={setActivePage}\n              clientCode={clientCode}\n              patientAge={patientAge}\n              patientObject={patientObject}\n            />\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Home.js",["383","384","385","386","387","388"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../api\";\nimport { token as token } from \"./../../api\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\nimport Dashboard from \"./Patient/PatientList\";\nimport HTSList from \"./Patient/HTSList\";\nimport VisualisationHome from \"./Visualisation/Index\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nimport HIVSTPatient from \"./Patient/HIVST/HIVSTPatient\";\nimport CheckedInPatients from \"./Patient/CheckedInPatients\";\nimport { getListOfPermission } from \"../../utility\";\nimport { getAcount } from \"../../utility\";\nimport HTSml from \"./Patient/HTSML\";\nconst divStyle = {\n  borderRadius: \"2px\",\n  fontSize: 14,\n};\n\nconst Home = () => {\n  const [key, setKey] = useState(\"home\");\n\n  const getPermissions = async () => {\n    await axios\n      .get(`${baseUrl}account`, {\n        \n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        \n        let staticPermission =[\n          \"admin_read\",\n          \"admin_delete\",\n          \"all_permission\",\n          \"admin_write\"\n      ]\n\n      localStorage.setItem(\"permissions\", staticPermission);\n      localStorage.setItem(\"FacId\", response.data.currentOrganisationUnitId);\n\n        //*** UNCOMMENT WHEN THE POC IS READY \n        // let generatedPermission = getListOfPermission(\n        //   response.data.permissions\n        // );\n        // localStorage.setItem(\"permissions\", response.data.permissions);\n            /********* THE END  */\n\n\n\n\n         let generatedPermission = getListOfPermission(\n          staticPermission\n        );\n     \n        localStorage.setItem(\n          \"generatedPermission\",\n          JSON.stringify(generatedPermission)\n        );\n        let stringifiedPermmision = generatedPermission.map((each, index) => {\n          return each.name;\n        });\n\n        localStorage.setItem(\n          \"stringifiedPermmision\",\n          JSON.stringify(stringifiedPermmision)\n        );\n\n     \n      })\n      .catch((error) => {});\n  };\n\n\n  const getFacilityAccount = () => {\n    getAcount()\n      .then((response) => {\n      })\n      .catch(() => {});\n  };\n\n\n  useEffect(() => {\n    getPermissions();\n    getFacilityAccount()\n    const permissions = localStorage.getItem(\"permissions\")?.split(\",\");\n    let obj = {\n      uuid: \"\",\n      type: \"\",\n      clientCode: \"\",\n    };\n    localStorage.setItem(\"index\", JSON.stringify(obj));\n  }, []);\n\n  return (\n    <Fragment>\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>HTS</h4>\n          </li>\n        </ol>\n      </div>\n      <Link to={\"register-patient\"}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className=\"mt-2 mr-3 mb-0 float-end\"\n          startIcon={<FaUserPlus size=\"10\" />}\n          style={{ backgroundColor: \"#014d88\" }}\n        >\n          <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\n        </Button>\n      </Link>\n      {/*  <Link to={key === \"hivst\" ? \"register-hivst-patient\" : \"register-patient\"}>*/}\n      {/*      <Button*/}\n      {/*          variant=\"contained\"*/}\n      {/*          color=\"primary\"*/}\n      {/*          className=\"mt-2 mr-3 mb-0 float-end\"*/}\n      {/*          startIcon={<FaUserPlus size=\"10\" />}*/}\n      {/*          style={{ backgroundColor: \"#014d88\" }}*/}\n      {/*      >*/}\n      {/*    <span style={{ textTransform: \"capitalize\" }}>*/}\n      {/*      {key === \"hivst\" ? \"New HIVST Patient\" : \"New Patient\"}*/}\n      {/*    </span>*/}\n      {/*      </Button>*/}\n      {/*  </Link>*/}\n      <br />\n      <br /> <br />\n      <Row>\n        <Col xl={12}>\n          <Card style={divStyle}>\n            <Card.Body>\n              <div className=\"custom-tab-1\">\n                <Tabs\n                  id=\"controlled-tab-example\"\n                  activeKey={key}\n                  onSelect={(k) => setKey(k)}\n                  className=\"mb-3\"\n                >\n                  <Tab eventKey=\"home\" title=\"Patients\">\n                    <Dashboard />\n                  </Tab>\n                  {/* <Tab eventKey=\"checkedin\" title=\"Checked-In Patients\">\n                    <CheckedInPatients />\n                  </Tab> */}\n                  <Tab eventKey=\"hts\" title=\"HTS Patients\">\n                    <HTSList />\n                  </Tab>\n\n                  <Tab eventKey=\"hivst\" title=\"HIVST Patients\">\n                    <HIVSTPatient />\n                  </Tab>\n{/* \n                  <Tab eventKey=\"hts-ml\" title=\"HTS ML\">\n                    <HTSml />\n                  </Tab> */}\n                </Tabs>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/RegisterPatient.js",["389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport ViewPNSForm from \"./NewRegistration/PartnerNotificationServices/ViewPnsForm\";\nimport { Card, CardBody } from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n//import {TiArrowBack} from 'react-icons/ti'\n//import {token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Icon, Menu, Sticky } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport BasicInfo from \"./NewRegistration/BasicInfo\";\nimport PreTest from \"./NewRegistration/PreTest\";\nimport HivTestResult from \"./NewRegistration/HivTestResult\";\nimport IndexingContactTracing from \"./NewRegistration/Elicitation/Index\";\nimport Others from \"./NewRegistration/Others\";\nimport PostTest from \"./NewRegistration/PostTest\";\nimport RecencyTesting from \"./NewRegistration/RecencyTesting\";\nimport RiskStratification from \"./NewRegistration/RiskStratification\";\nimport ClientRefferalForm from \"./NewRegistration/RefferalForm\";\nimport { getAcount } from \"../../../utility\";\nimport { getCheckModality } from \"../../../utility\";\nimport FamilyIndexTestingForm from \"./NewRegistration/FamilyIndexTestingForm\";\nimport PnsForm from \"./NewRegistration/PartnerNotificationServices/PnsForm\";\nimport RefferralUnit from \"./NewRegistration/RefferalUnit\";\nimport ClientReferralHistory from \"./NewRegistrationEnrollement/ClientReferral/ClientReferralHistory\";\nimport ViewClientReferral from \"./NewRegistrationEnrollement/ClientReferral/Referrall_view_update\";\nimport FamilyIndexHistory from \"./NewRegistration/PartnerNotificationServices/FamilyIndexhIstory\";\nimport ViewFamilyIndexTestingForm from \"./NewRegistration/PartnerNotificationServices/ViewFamilyIndexForm\";\nimport { getPreviousForm, getCurentForm } from \"../../../utility\";\nimport { calculate_age } from \"../utils\";\nimport PNSHistory from \"./NewRegistration/PartnerNotificationServices/PNSHistory\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst UserRegistration = (props) => {\n  //const classes = useStyles();\n  const location = useLocation();\n  const locationState = location.state;\n  const history = useHistory();\n  const [saving, setSaving] = useState(false);\n  const [activeItem, setactiveItem] = useState(\"risk\");\n  const [completed, setCompleted] = useState([]);\n  const [basicInfo, setBasicInfo] = useState({});\n  const [organizationInfo, setOrganizationInfo] = useState({});\n  const [patientObjAge, setPatientObjAge] = useState(0);\n  const [hideOtherMenu, setHideOtherMenu] = useState(true);\n  const [row, setRow] = useState({});\n  const [showBackButton, setShowBackButton] = useState(true);\n  const [indexInfo, setIndexInfo] = useState(\n    JSON.parse(localStorage.getItem(\"index\"))\n  );\n  const handleItemClick = (activeItem) => {\n    setactiveItem(activeItem);\n\n    //setCompleted({...completed, ...completedMenu})\n  };  \n  \n  const [action, setAction] = useState(\"\");\n\n\n  const [permissions, setPermission] = useState(\n    JSON.parse(localStorage.getItem(\"stringifiedPermmision\"))\n  );\n\n  const getFacilityAccount = () => {\n    getAcount()\n      .then((response) => {\n      })\n      .catch(() => {});\n  };\n  const [selectedRow, setSelectedRow] = useState({});\n  const [extra, setExtra] = useState({\n    risk: \"\",\n    index: \"\",\n    pre: \"\",\n    post: \"\",\n    recency: \"\",\n    elicitation: \"\",\n  });\n  const [patientObj, setPatientObj] = useState({\n    breastFeeding: \"\",\n    capturedBy: \"\",\n    riskStratificationCode: \"\",\n    cd4: {},\n    clientCode: \"\",\n    confirmatoryTest: {},\n    dateVisit: \"\",\n    extra: {},\n    firstTimeVisit: \"\",\n    hepatitisTesting: {},\n    hivTestResult: \"\",\n    id: \"\",\n    indexClient: \"\",\n    indexClientCode: \"\",\n    indexElicitation: [\n      {\n        address: \"\",\n        altPhoneNumber: \"\",\n        archived: 0,\n        currentlyLiveWithPartner: true,\n        datePartnerCameForTesting: \"\",\n        dob: \"\",\n        extra: {},\n        facilityId: 0,\n        firstName: \"\",\n        hangOutSpots: \"\",\n        htsClient: {\n          archived: 0,\n          breastFeeding: 0,\n          capturedBy: \"\",\n          cd4: {},\n          clientCode: \"\",\n          confirmatoryTest: {},\n          dateVisit: \"\",\n          extra: {},\n          facilityId: 0,\n          firstTimeVisit: true,\n          hepatitisTesting: {},\n          hivTestResult: \"\",\n          id: 0,\n          indexClient: true,\n          indexClientCode: \"\",\n          indexNotificationServicesElicitation: {},\n          knowledgeAssessment: {},\n          numChildren: 0,\n          numWives: 0,\n          others: {},\n          person: {\n            active: \"\",\n            address: {},\n            archived: 0,\n            contact: {},\n            contactPoint: {},\n            createdDate: \"\",\n            dateOfBirth: \"\",\n            dateOfRegistration: \"\",\n            deceased: true,\n            deceasedDateTime: \"\",\n            education: {},\n            employmentStatus: {},\n            emrId: \"\",\n            facilityId: 0,\n            firstName: \"string\",\n            gender: {},\n            hospitalNumber: \"\",\n            id: \"\",\n            identifier: {},\n            isDateOfBirthEstimated: true,\n            lastModifiedDate: \"\",\n            maritalStatus: {},\n            new: true,\n            ninNumber: \"\",\n            organization: {},\n            otherName: \"\",\n            sex: \"\",\n            surname: \"\",\n            uuid: \"\",\n          },\n          personUuid: \"\",\n          postTestCounselingKnowledgeAssessment: {},\n          pregnant: \"\",\n          previouslyTested: true,\n          recency: {},\n          referredFrom: \"\",\n          relationWithIndexClient: \"\",\n          riskAssessment: {},\n          sexPartnerRiskAssessment: {},\n          stiScreening: {},\n          syphilisTesting: {},\n          targetGroup: 0,\n          tbScreening: {},\n          test1: {},\n          testingSetting: \"\",\n          tieBreakerTest: {},\n          typeCounseling: \"\",\n          uuid: \"\",\n        },\n        htsClientUuid: \"\",\n        id: \"\",\n        isDateOfBirthEstimated: true,\n        lastName: \"\",\n        middleName: \"\",\n        notificationMethod: \"\",\n        partnerTestedPositive: \"\",\n        phoneNumber: \"\",\n        physicalHurt: \"\",\n        relationshipToIndexClient: \"\",\n        sex: \"\",\n        sexuallyUncomfortable: \"\",\n        threatenToHurt: \"\",\n        uuid: \"\",\n      },\n    ],\n    indexNotificationServicesElicitation: {},\n    knowledgeAssessment: {},\n    numChildren: \"\",\n    numWives: \"\",\n    others: {},\n    personId: \"\",\n    personResponseDto: {\n      active: true,\n\n      address: {\n        address: [\n          {\n            city: \"\",\n            line: [\"\"],\n            stateId: \"\",\n            district: \"\",\n            countryId: 1,\n            postalCode: \"\",\n            organisationUnitId: 0,\n          },\n        ],\n      },\n      biometricStatus: true,\n      checkInDate: \"\",\n      contact: {},\n      contactPoint: {\n        contactPoint: [\n          {\n            type: \"phone\",\n            value: \"\",\n          },\n        ],\n      },\n      dateOfBirth: \"\",\n      dateOfRegistration: \"\",\n      deceased: true,\n      deceasedDateTime: \"\",\n      education: {},\n      employmentStatus: {},\n      emrId: \"\",\n      encounterDate: \"\",\n      facilityId: \"\",\n      firstName: \"\",\n      gender: {},\n      id: \"\",\n      identifier: {},\n      isDateOfBirthEstimated: true,\n      maritalStatus: {},\n      ninNumber: \"\",\n      organization: {},\n      otherName: \"\",\n      sex: \"\",\n      surname: \"\",\n      visitId: \"\",\n    },\n    postTestCounselingKnowledgeAssessment: {},\n    pregnant: \"\",\n    previouslyTested: \"\",\n    recency: {},\n    referredFrom: \"\",\n    relationWithIndexClient: \"\",\n    riskAssessment: {},\n    sexPartnerRiskAssessment: {},\n    stiScreening: {},\n    syphilisTesting: {},\n    targetGroup: \"\",\n    tbScreening: {},\n    test1: {},\n    testingSetting: \"\",\n    tieBreakerTest: {},\n    typeCounseling: \"\",\n    riskStratificationResponseDto: null,\n  });\n  const [modalityCheck, setModalityCheck] = useState(\"\");\n\n  useEffect(() => {\n    getFacilityAccount();\n    if (locationState && locationState.patientObj) {\n      setPatientObj(locationState.patientObj);\n    }\n  }, []);\n\n\n\n  const getPrevForm=(e)=>{\n          if( activeItem === \"risk\"){\n            history.push(\"/\");\n\n          }else{\n            e.preventDefault()\n          let currentForm =   getCurentForm(activeItem)\n\n            let age = calculate_age(\n              basicInfo?.personResponseDto?.dateOfBirth\n                ? basicInfo?.personResponseDto?.dateOfBirth\n                : patientObj?.personResponseDto?.dateOfBirth\n            );\n\n            let hivStatus = patientObj?.hivTestResult;\n\n            let checkModality = patientObj?.riskStratificationResponseDto?.testingSetting? patientObj.riskStratificationResponseDto.testingSetting: \"\";\n            let isPMTCTModality =getCheckModality(checkModality)\n\n\n          let answer =  getPreviousForm(currentForm, age, isPMTCTModality, hivStatus); \n          if (answer[0]  && answer[1]) {\n            if(answer[0] === \"fit\"){\n              handleItemClick(\"fit-history\");\n\n            }else if(answer[0] === \"pns\"){\n\n              handleItemClick(\"pns-history\");\n\n            }else{\n              handleItemClick(answer[0]);\n\n            }\n          }else{\n          history.push(\"/\");\n\n          }\n}\n  } \n\nconst clearInfo=()=>{\n  setCompleted([])\n  setPatientObj({\n    breastFeeding: \"\",\n    capturedBy: \"\",\n    riskStratificationCode: \"\",\n    cd4: {},\n    clientCode: \"\",\n    confirmatoryTest: {},\n    dateVisit: \"\",\n    extra: {},\n    firstTimeVisit: \"\",\n    hepatitisTesting: {},\n    hivTestResult: \"\",\n    id: \"\",\n    indexClient: \"\",\n    indexClientCode: \"\",\n    indexElicitation: [\n      {\n        address: \"\",\n        altPhoneNumber: \"\",\n        archived: 0,\n        currentlyLiveWithPartner: true,\n        datePartnerCameForTesting: \"\",\n        dob: \"\",\n        extra: {},\n        facilityId: 0,\n        firstName: \"\",\n        hangOutSpots: \"\",\n        htsClient: {\n          archived: 0,\n          breastFeeding: 0,\n          capturedBy: \"\",\n          cd4: {},\n          clientCode: \"\",\n          confirmatoryTest: {},\n          dateVisit: \"\",\n          extra: {},\n          facilityId: 0,\n          firstTimeVisit: true,\n          hepatitisTesting: {},\n          hivTestResult: \"\",\n          id: 0,\n          indexClient: true,\n          indexClientCode: \"\",\n          indexNotificationServicesElicitation: {},\n          knowledgeAssessment: {},\n          numChildren: 0,\n          numWives: 0,\n          others: {},\n          person: {\n            active: \"\",\n            address: {},\n            archived: 0,\n            contact: {},\n            contactPoint: {},\n            createdDate: \"\",\n            dateOfBirth: \"\",\n            dateOfRegistration: \"\",\n            deceased: true,\n            deceasedDateTime: \"\",\n            education: {},\n            employmentStatus: {},\n            emrId: \"\",\n            facilityId: 0,\n            firstName: \"string\",\n            gender: {},\n            hospitalNumber: \"\",\n            id: \"\",\n            identifier: {},\n            isDateOfBirthEstimated: true,\n            lastModifiedDate: \"\",\n            maritalStatus: {},\n            new: true,\n            ninNumber: \"\",\n            organization: {},\n            otherName: \"\",\n            sex: \"\",\n            surname: \"\",\n            uuid: \"\",\n          },\n          personUuid: \"\",\n          postTestCounselingKnowledgeAssessment: {},\n          pregnant: \"\",\n          previouslyTested: true,\n          recency: {},\n          referredFrom: \"\",\n          relationWithIndexClient: \"\",\n          riskAssessment: {},\n          sexPartnerRiskAssessment: {},\n          stiScreening: {},\n          syphilisTesting: {},\n          targetGroup: 0,\n          tbScreening: {},\n          test1: {},\n          testingSetting: \"\",\n          tieBreakerTest: {},\n          typeCounseling: \"\",\n          uuid: \"\",\n        },\n        htsClientUuid: \"\",\n        id: \"\",\n        isDateOfBirthEstimated: true,\n        lastName: \"\",\n        middleName: \"\",\n        notificationMethod: \"\",\n        partnerTestedPositive: \"\",\n        phoneNumber: \"\",\n        physicalHurt: \"\",\n        relationshipToIndexClient: \"\",\n        sex: \"\",\n        sexuallyUncomfortable: \"\",\n        threatenToHurt: \"\",\n        uuid: \"\",\n      },\n    ],\n    indexNotificationServicesElicitation: {},\n    knowledgeAssessment: {},\n    numChildren: \"\",\n    numWives: \"\",\n    others: {},\n    personId: \"\",\n    personResponseDto: {\n      active: true,\n\n      address: {\n        address: [\n          {\n            city: \"\",\n            line: [\"\"],\n            stateId: \"\",\n            district: \"\",\n            countryId: 1,\n            postalCode: \"\",\n            organisationUnitId: 0,\n          },\n        ],\n      },\n      biometricStatus: true,\n      checkInDate: \"\",\n      contact: {},\n      contactPoint: {\n        contactPoint: [\n          {\n            type: \"phone\",\n            value: \"\",\n          },\n        ],\n      },\n      dateOfBirth: \"\",\n      dateOfRegistration: \"\",\n      deceased: true,\n      deceasedDateTime: \"\",\n      education: {},\n      employmentStatus: {},\n      emrId: \"\",\n      encounterDate: \"\",\n      facilityId: \"\",\n      firstName: \"\",\n      gender: {},\n      id: \"\",\n      identifier: {},\n      isDateOfBirthEstimated: true,\n      maritalStatus: {},\n      ninNumber: \"\",\n      organization: {},\n      otherName: \"\",\n      sex: \"\",\n      surname: \"\",\n      visitId: \"\",\n    },\n    postTestCounselingKnowledgeAssessment: {},\n    pregnant: \"\",\n    previouslyTested: \"\",\n    recency: {},\n    referredFrom: \"\",\n    relationWithIndexClient: \"\",\n    riskAssessment: {},\n    sexPartnerRiskAssessment: {},\n    stiScreening: {},\n    syphilisTesting: {},\n    targetGroup: \"\",\n    tbScreening: {},\n    test1: {},\n    testingSetting: \"\",\n    tieBreakerTest: {},\n    typeCounseling: \"\",\n    riskStratificationResponseDto: null,\n  })\n  setPatientObjAge(0)\n  setHideOtherMenu(true)\n  setExtra({\n    risk: \"\",\n    index: \"\",\n    pre: \"\",\n    post: \"\",\n    recency: \"\",\n    elicitation: \"\",\n  })\n  setOrganizationInfo({})\n}\n\n  useEffect(() => {\n  \n    setModalityCheck(\n      getCheckModality(patientObj?.riskStratificationResponseDto?.testingSetting)\n    );\n  }, [patientObj]);\n  return (\n    <>\n      <ToastContainer autoClose={3000} hideProgressBar />\n      <div\n        className=\"row page-titles mx-0\"\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\n      >\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item active\">\n            <h4>\n              HTS /{\" \"}\n              <span\n                style={{\n                  color: \"#014D88\",\n                  fontSize: \"1.1rem\",\n                  fontWeight: \"bolder\",\n                }}\n              >\n                NEW HTS CLIENT\n              </span>\n            </h4>\n          </li>\n        </ol>\n      </div>\n      <Card>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h3>\n                HIV COUNSELLING AND TESTING\n               {showBackButton &&  <div>\n                    {/* <Link to={\"/\"}> */}\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className=\" float-end\"\n                      //startIcon={<FaUserPlus size=\"10\"/>}\n                      onClick={getPrevForm}\n                      style={{ backgroundColor: \"#014d88\" }}\n                    >\n                      <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                    </Button>\n                    {/* </Link> */}\n                  </div>}\n              </h3>\n              <br />\n              <br />\n\n              <div className=\"col-md-3 col-sm-3 col-lg-3\">\n                <Menu\n                  size=\"large\"\n                  vertical\n                  style={{ backgroundColor: \"#014D88\" }}\n                >\n                  <Menu.Item\n                    name=\"inbox\"\n                    active={activeItem === \"risk\"}\n                    onClick={() => handleItemClick(\"risk\")}\n                    style={{\n                      backgroundColor: activeItem === \"risk\" ? \"#000\" : \"\",\n                    }}\n                    disabled={activeItem !== \"risk\" ? true : false}\n                  >\n                    <span style={{ color: \"#fff\" }}>\n                      {\" \"}\n                      Risk Stratification\n                      {completed.includes(\"risk\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item>\n\n                  {hideOtherMenu == false && (\n                    <>\n                      <Menu.Item\n                        name=\"inbox\"\n                        active={activeItem === \"basic\"}\n                        onClick={() => handleItemClick(\"basic\")}\n                        style={{\n                          backgroundColor: activeItem === \"basic\" ? \"#000\" : \"\",\n                        }}\n                        disabled={activeItem !== \"basic\" ? true : false}\n                      >\n                        <span style={{ color: \"#fff\" }}>\n                          {\" \"}\n                          Basic Information\n                          {completed.includes(\"basic\") && (\n                            <Icon name=\"check\" color=\"green\" />\n                          )}\n                        </span>\n                      </Menu.Item>\n\n                      {patientObj?.riskStratificationResponseDto?.age >= 15 &&\n                        modalityCheck == \"fill\" && (\n                          <Menu.Item\n                            name=\"spam\"\n                            active={activeItem === \"pre-test-counsel\"}\n                            onClick={() => handleItemClick(\"pre-test-counsel\")}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"pre-test-counsel\" ? \"#000\" : \"\",\n                            }}\n                            disabled={\n                              activeItem !== \"pre-test-counsel\" ? true : false\n                            }\n                          >\n                            {/* <Label>2</Label> */}\n                            <span style={{ color: \"#fff\" }}>\n                              Pre Test Counseling\n                              {completed.includes(\"pre-test-counsel\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>\n                        )}\n\n                      {permissions.includes(\"Request_and_Result_Form\") && (\n                        <Menu.Item\n                          name=\"inbox\"\n                          active={activeItem === \"hiv-test\"}\n                          onClick={() => handleItemClick(\"hiv-test\")}\n                          style={{\n                            backgroundColor:\n                              activeItem === \"hiv-test\" ? \"#000\" : \"\",\n                          }}\n                          disabled={activeItem !== \"hiv-test\" ? true : false}\n                        >\n                          <span style={{ color: \"#fff\" }}>\n                            Request {\"&\"} Result Form\n                            {completed.includes(\"hiv-test\") && (\n                              <Icon name=\"check\" color=\"green\" />\n                            )}\n                          </span>\n                        </Menu.Item>\n                      )}\n                      <Menu.Item\n                        name=\"spam\"\n                        active={activeItem === \"post-test\"}\n                        onClick={() => handleItemClick(\"post-test\")}\n                        style={{\n                          backgroundColor:\n                            activeItem === \"post-test\" ? \"#000\" : \"\",\n                        }}\n                        disabled={activeItem !== \"post-test\" ? true : false}\n                      >\n                        {/* <Label>4</Label> */}\n                        <span style={{ color: \"#fff\" }}>\n                          Post Test Counseling\n                          {completed.includes(\"post-test\") && (\n                            <Icon name=\"check\" color=\"green\" />\n                          )}\n                        </span>\n                      </Menu.Item>\n                      {patientObj.hivTestResult &&\n                        patientObj.hivTestResult.toLowerCase() === \"positive\" &&\n                        patientObj?.riskStratificationResponseDto?.age >=\n                          15 && (\n                          <Menu.Item\n                            name=\"spam\"\n                            active={activeItem === \"recency-testing\"}\n                            onClick={() => handleItemClick(\"recency-testing\")}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"recency-testing\" ? \"#000\" : \"\",\n                            }}\n                            disabled={\n                              activeItem !== \"recency-testing\" ? true : false\n                            }\n                          >\n                            {/* <Label>4</Label> */}\n                            <span style={{ color: \"#fff\" }}>\n                              HIV Recency Testing\n                              {completed.includes(\"recency-testing\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>\n                        )}\n\n                      {patientObj.hivTestResult &&\n                        patientObj.hivTestResult.toLowerCase() ===\n                          \"positive\" && (\n                          <Menu.Item\n                            name=\"inbox\"\n                            active={activeItem === \"fit\"}\n                            onClick={() => handleItemClick(\"fit\")}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"fit\" ? \"#000\" : \"\",\n                            }}\n                            disabled={completed.includes(\"fit\") ? true : false}\n                          >\n                            <span style={{ color: \"#fff\" }}>\n                              Family Index Testing form\n                              {completed.includes(\"fit\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>\n                        )}\n\n                      {permissions.includes(\"Nigeria_PNS_Form\") &&\n                        patientObj.hivTestResult &&\n                        patientObj.hivTestResult.toLowerCase() ===\n                          \"positive\" && (\n                          <Menu.Item\n                            name=\"inbox\"\n                            active={activeItem === \"pns\"}\n                            onClick={() => handleItemClick(\"pns\")}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"pns\" ? \"#000\" : \"\",\n                            }}\n                          >\n                            <span style={{ color: \"#fff\" }}>\n                              {\" \"}\n                              Partner Notification Services\n                              {completed.includes(\"pns\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>\n                        )}\n\n                      {permissions.includes(\"Referral_Form\") && (\n                        <Menu.Item\n                          name=\"inbox\"\n                          active={activeItem === \"refferal-history\"}\n                          onClick={() => handleItemClick(\"refferal-history\")}\n                          style={{\n                            backgroundColor:\n                              activeItem === \"refferal-history\" ? \"#000\" : \"\",\n                          }}\n                        >\n                          <span style={{ color: \"#fff\" }}>\n                            {\" \"}\n                            Client Referral Service\n                            {completed.includes(\"refferal\") && (\n                              <Icon name=\"check\" color=\"green\" />\n                            )}\n                          </span>\n                        </Menu.Item>\n                      )}\n                    </>\n                  )}\n                </Menu>\n              </div>\n\n              <div\n                className=\"col-md-9 col-sm-9 col-lg-9 \"\n                style={{\n                  backgroundColor: \"#fff\",\n                  margingLeft: \"-50px\",\n                  paddingLeft: \"-20px\",\n                }}\n              >\n                {activeItem === \"risk\" && (\n                  <RiskStratification\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setPatientObjAge={setPatientObjAge}\n                    setHideOtherMenu={setHideOtherMenu}\n                    setExtra={setExtra}\n                    extra={extra}\n                    setOrganizationInfo={setOrganizationInfo}\n                  />\n                )}\n                {activeItem === \"basic\" && (\n                  <BasicInfo\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setPatientObjAge={setPatientObjAge}\n                    setExtra={setExtra}\n                    extra={extra}\n                    setBasicInfo={setBasicInfo}\n                    indexInfo={indexInfo}\n                  />\n                )}\n                {activeItem === \"pre-test-counsel\" && (\n                  <PreTest\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                  />\n                )}\n\n                {activeItem === \"hiv-test\" && (\n                  <HivTestResult\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                  />\n                )}\n                {activeItem === \"post-test\" && (\n                  <PostTest\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                  />\n                )}\n                {activeItem === \"indexing\" && (\n                  <IndexingContactTracing\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                  />\n                )}\n                {activeItem === \"recency-testing\" && (\n                  <RecencyTesting\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                  />\n                )}\n                {activeItem === \"others\" && (\n                  <Others\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                  />\n                )}\n                {activeItem === \"fit\" && (\n                  <FamilyIndexTestingForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    history={false}\n                  />\n                )}\n\n                {activeItem === \"fit-history\" && (\n                  <FamilyIndexHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={true}\n                    nextButton={true}\n                    selectedRow={selectedRow}\n                    setSelectedRow={setSelectedRow}\n                    clearInfo={clearInfo}\n                    // row={row}\n                    setAction={setAction}\n                  />\n                )}\n\n                {activeItem === \"view-fit\" && (\n                  <ViewFamilyIndexTestingForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    action={action}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    row={row}\n                    selectedRow={selectedRow}\n                  />\n                )}\n\n\n              {activeItem === \"pns-history\" && (\n                                <PNSHistory\n                                  handleItemClick={handleItemClick}\n                                  setCompleted={setCompleted}\n                                  completed={completed}\n                                  setPatientObj={setPatientObj}\n                                  patientObj={patientObj}\n                                  setExtra={setExtra}\n                                  extra={extra}\n                                  basicInfo={basicInfo}\n                                  organizationInfo={organizationInfo}\n                                  activePage={props.activePage}\n                                  setActivePage={props.setActivePage}\n                                  setRow={setRow}\n                                />\n                              )}\n                {activeItem === \"pns\" && (\n                  <PnsForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                  />\n                )}\n\n                {activeItem === \"client-referral\" && (\n                  <RefferralUnit\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                  />\n                )}\n                {activeItem === \"refferal-history\" && (\n                  <ClientReferralHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    setRow={setRow}\n                    status={\"newUser\"}\n                  />\n                )}\n                {activeItem === \"view-referral\" && (\n                  <ViewClientReferral\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    row={row}\n                  />\n                )}\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/HIVSTPatient.js",["405","406"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport axios from \"axios\";\n\n// import { token as token, url as baseUrl } from \"./../../../api\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { MdDashboard } from \"react-icons/md\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\n//import moment from \"moment\";\n\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => (\n        <ChevronRight {...props} ref={ref} />\n    )),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => (\n        <ChevronLeft {...props} ref={ref} />\n    )),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\n//Dtate Picker package\nMoment.locale(\"en\");\nconst HIVSTPatient = () => {\n    //const [patientList, setPatientList] = useState([])\n    //const [loading, setLoading] = useState(false)\n    const [showPPI, setShowPPI] = useState(true);\n    //const baseUrl2 = \"http://localhost:8282/api/v2/\"\n    useEffect(() => {\n        //patients()\n    }, []);\n\n    const handleCheckBox = (e) => {\n        if (e.target.checked) {\n            setShowPPI(false);\n        } else {\n            setShowPPI(true);\n        }\n    };\n\n    return (\n        <div>\n            <MaterialTable\n                icons={tableIcons}\n                title=\"Find HTS Patient \"\n                columns={[\n                    // { title: \" ID\", field: \"Id\" },\n                    {\n                        title: \"Patient Name\",\n                        field: \"name\",\n                        hidden: showPPI,\n                    },\n                    // { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n                    { title: \"Client Code\", field: \"clientCode\", filtering: false },\n                    // { title: \"Sex\", field: \"gender\", filtering: false },\n                    { title: \"Age\", field: \"age\", filtering: false },\n\n                    //{ title: \"ART Number\", field: \"v_status\", filtering: false },\n                    { title: \"HIVST Count\", field: \"count\", filtering: false },\n                    { title: \"Actions\", field: \"actions\", filtering: false },\n                ]}\n                data={(query) =>\n                    new Promise((resolve, reject) =>\n                        axios\n                            .get(\n                                `${baseUrl}hivst/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\n                                { headers: { Authorization: `Bearer ${token}` } }\n                            )\n                            .then((response) => response)\n                            .then((result) => {\n                                //setLoading(false)\n                                resolve({\n                                    data:\n                                        result?.data?.records &&\n                                        result?.data?.records\n                                            .filter((client) => {\n                                                return client.clientCode !== null;\n                                            })\n                                            .map((row) => ({\n                                                //name:   row.hivPositive && row.hivPositive===true ? ( <><sup><b style={{color:\"red\"}}><Icon name='circle' size=\"small\"/></b></sup> { \" \" + row.personResponseDto.firstName + \" \" + row.personResponseDto.surname} </>) :row.personResponseDto.firstName + \" \" + row.personResponseDto.surname,\n                                                name: row.firstName + \" \" + row.surname,\n                                                // hospital_number: row.hospitalNumber,\n                                                clientCode: row.clientCode,\n                                                gender: row.gender,\n                                                age: row.age,\n                                                count: (\n                                                    <Label color=\"blue\" size=\"mini\">\n                                                        {row.hivstCount}\n                                                    </Label>\n                                                ),\n                                                actions: (\n                                                    <div>\n                                                        {row.hivstCount >= 0 && (\n                                                            <>\n                                                                <Link\n                                                                    to={{\n                                                                        pathname: \"/patient-history\",\n                                                                        state: {\n                                                                            patientObject: row,\n                                                                            patientObj: row,\n                                                                            clientCode: row.clientCode,\n                                                                        },\n                                                                    }}\n                                                                >\n                                                                    <ButtonGroup\n                                                                        variant=\"contained\"\n                                                                        aria-label=\"split button\"\n                                                                        style={{\n                                                                            backgroundColor: \"rgb(153, 46, 98)\",\n                                                                            height: \"30px\",\n                                                                            width: \"215px\",\n                                                                        }}\n                                                                        size=\"large\"\n                                                                    >\n                                                                        <Button\n                                                                            color=\"primary\"\n                                                                            size=\"small\"\n                                                                            aria-label=\"select merge strategy\"\n                                                                            aria-haspopup=\"menu\"\n                                                                            style={{\n                                                                                backgroundColor: \"rgb(153, 46, 98)\",\n                                                                            }}\n                                                                        >\n                                                                            <MdDashboard />\n                                                                        </Button>\n                                                                        <Button\n                                                                            style={{\n                                                                                backgroundColor: \"rgb(153, 46, 98)\",\n                                                                            }}\n                                                                        >\n                                                                            <span\n                                                                                style={{\n                                                                                    fontSize: \"12px\",\n                                                                                    color: \"#fff\",\n                                                                                    fontWeight: \"bolder\",\n                                                                                }}\n                                                                            >\n                                                                                Patient Dashboard\n                                                                            </span>\n                                                                        </Button>\n                                                                    </ButtonGroup>\n                                                                </Link>\n                                                            </>\n                                                        )}\n                                                    </div>\n                                                ),\n                                            })),\n                                    page: query.page,\n                                    totalCount: result.data.totalRecords,\n                                });\n                                //setLoading(false)\n                            })\n                    )\n                }\n                options={{\n                    headerStyle: {\n                        backgroundColor: \"#014d88\",\n                        color: \"#fff\",\n                    },\n                    searchFieldStyle: {\n                        width: \"200%\",\n                        margingLeft: \"250px\",\n                    },\n                    filtering: false,\n                    exportButton: false,\n                    searchFieldAlignment: \"left\",\n                    pageSizeOptions: [10, 20, 100],\n                    pageSize: 10,\n                    debounceInterval: 400,\n                }}\n                components={{\n                    Toolbar: (props) => (\n                        <div>\n                            <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\n                                <input\n                                    type=\"checkbox\"\n                                    className=\"form-check-input\"\n                                    name=\"showPP!\"\n                                    id=\"showPP\"\n                                    value=\"showPP\"\n                                    checked={showPPI === true ? false : true}\n                                    onChange={handleCheckBox}\n                                    style={{\n                                        border: \"1px solid #014D88\",\n                                        borderRadius: \"0.25rem\",\n                                    }}\n                                />\n                                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\n                                    <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\n                                        SHOW PII\n                                    </b>\n                                </label>\n                            </div>\n                            <MTableToolbar {...props} />\n                        </div>\n                    ),\n                }}\n            />\n        </div>\n    );\n};\nexport default HIVSTPatient","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/context/ThemeDemo.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientCard.js",["407","408","409","410","411","412"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core/styles\";\n//import classNames from 'classnames';\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n//import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n// import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import Chip from '@material-ui/core/Chip';\n//import Divider from '@material-ui/core/Divider';\nimport { Link } from \"react-router-dom\";\nimport ButtonMui from \"@material-ui/core/Button\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Col, Row } from \"reactstrap\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../api\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Label, Sticky } from \"semantic-ui-react\";\nimport { calculate_age } from \"../utils\";\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst styles = (theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n  },\n  column: {\n    flexBasis: \"20.33%\",\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: \"none\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n});\n\nfunction PatientCard(props) {\n  const { classes } = props;\n  //const patientCurrentStatus=props.patientObj && props.patientObj.currentStatus===\"Died (Confirmed)\" ? true : false ;\n  const patientObjs = props.patientObj ? props.patientObj : {};\n  //const permissions= props.permissions ? props.permissions : [];\n  const [patientObj, setPatientObj] = useState(null);\n  const [hivStatus, setHivStatus] = useState(\"false\");\n  const [htscount, setHtscount] = useState(0);\n  const [htsResult, setHtsResult] = useState(\"\");\n  const [htsResult2, setHtsResult2] = useState(\"\");\n\n  useEffect(() => {\n    PatientCurrentObject();\n  }, []);\n\n  ///GET LIST OF Patients\n  async function PatientCurrentObject() {\n    axios\n      .get(\n        `${baseUrl}hts/persons/${\n          patientObjs.personId ? patientObjs.personId : patientObjs.id\n        }`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setPatientObj(response.data);\n\n        props.setPersonInfo(response.data)\n        setHtscount(response.data.htsCount);\n        setHtsResult(\n          response.data.htsClientDtoList[\n            response.data.htsClientDtoList.length - 1\n          ].hivTestResult\n        );\n        setHtsResult2(\n          response.data.htsClientDtoList[\n            response.data.htsClientDtoList.length - 1\n          ].hivTestResult2\n        );\n      })\n      .catch((error) => {});\n  }\n\n  const getHospitalNumber = (identifier) => {\n    const identifiers = identifier;\n    const hospitalNumber = identifiers?.identifier?.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n  const getPhoneNumber = (identifier) => {\n    const identifiers = identifier;\n    const phoneNumber = identifiers?.contactPoint?.find(\n      (obj) => obj.type == \"phone\"\n    );\n    return phoneNumber ? phoneNumber.value : \"\";\n  };\n  const getAddress = (identifier) => {\n    const identifiers = identifier;\n    const address = identifiers?.address?.find((obj) => obj.city);\n    const houseAddress =\n      address && address.line[0] !== null ? address.line[0] : \"\";\n    const landMark =\n      address && address.city && address.city !== null ? address.city : \"\";\n    return address ? houseAddress + \" \" + landMark : \"\";\n  };\n\n  return (\n    <Sticky>\n      <div className={classes.root}>\n        <ExpansionPanel>\n          <ExpansionPanelSummary>\n            <Row>\n              <Col md={12}>\n                <Row className={\"mt-1\"}>\n                  {patientObj && patientObj !== null ? (\n                    <>\n                      <Col md={12} className={classes.root2}>\n                        <b\n                          style={{\n                            fontSize: \"25px\",\n                            color: \"rgb(153, 46, 98)\",\n                          }}\n                        >\n                          {patientObj.personResponseDto.firstName +\n                            \" \" +\n                            patientObj.personResponseDto.surname}\n                        </b>\n                        <Link to={\"/\"}>\n                          <ButtonMui\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className=\"float-end ms-2 mr-2 mt-2\"\n                            //startIcon={<FaUserPlus size=\"10\"/>}\n                            style={{\n                              backgroundColor: \"rgb(153, 46, 98)\",\n                              color: \"#fff\",\n                              height: \"35px\",\n                            }}\n                          >\n                            <span style={{ textTransform: \"capitalize\" }}>\n                              Back\n                            </span>\n                          </ButtonMui>\n                        </Link>\n                      </Col>\n                      <Col md={4} className={classes.root2}>\n                        <span>\n                          {\" \"}\n                          Patient ID :\n                          <b style={{ color: \"#0B72AA\" }}>\n                            {getHospitalNumber(\n                              patientObj.personResponseDto.identifier\n                            )}\n                          </b>\n                        </span>\n                      </Col>\n\n                      <Col md={4} className={classes.root2}>\n                        <span>\n                          Date Of Birth :{\" \"}\n                          <b style={{ color: \"#0B72AA\" }}>\n                            {patientObj.personResponseDto.dateOfBirth}\n                          </b>\n                        </span>\n                      </Col>\n                      <Col md={4} className={classes.root2}>\n                        <span>\n                          {\" \"}\n                          Age :{\" \"}\n                          <b style={{ color: \"#0B72AA\" }}>\n                            {calculate_age(\n                              moment(\n                                patientObj.personResponseDto.dateOfBirth\n                              ).format(\"YYYY-MM-DD\")\n                            )}\n                          </b>\n                        </span>\n                      </Col>\n                      <Col md={4}>\n                        <span>\n                          {\" \"}\n                          Gender :{\" \"}\n                          <b style={{ color: \"#0B72AA\" }}>\n                            {patientObj.personResponseDto &&\n                            patientObj.personResponseDto.sex !== null\n                              ? patientObj.personResponseDto.sex\n                              : \"\"}\n                          </b>\n                        </span>\n                      </Col>\n                      <Col md={4} className={classes.root2}>\n                        <span>\n                          {\" \"}\n                          Phone Number :{\" \"}\n                          <b style={{ color: \"#0B72AA\" }}>\n                            {getPhoneNumber(\n                              patientObj.personResponseDto.contactPoint\n                            )}\n                          </b>\n                        </span>\n                      </Col>\n                      <Col md={4} className={classes.root2}>\n                        <span>\n                          {\" \"}\n                          Address :{\" \"}\n                          <b style={{ color: \"#0B72AA\" }}>\n                            {getAddress(patientObj.personResponseDto.address)}{\" \"}\n                          </b>\n                        </span>\n                      </Col>\n                      <Col md={4} className={classes.root2}>\n                        <span>\n                          {\" \"}\n                          Client Code :{\" \"}\n                          <b style={{ color: \"#0B72AA\" }}>\n                            {patientObj && patientObj?.clientCode\n                              ? patientObj?.clientCode\n                              : \"\"}{\" \"}\n                          </b>\n                        </span>\n                      </Col>\n                      <Col md={12}>\n                        <div>\n                          <Typography variant=\"caption\">\n                            {htscount < 1 ? (\n                              <Label color=\"blue\" size={\"mini\"}>\n                                STATUS : Not Tested\n                              </Label>\n                            ) : patientObj &&\n                              (htsResult === \"Positive\" ||\n                                htsResult === \"Positive\") ? (\n                              <Label color={\"red\"} size={\"mini\"}>\n                                STATUS : Positive\n                              </Label>\n                            ) : (\n                              <Label color=\"teal\" size={\"mini\"}>\n                                STATUS : Negative\n                              </Label>\n                            )}\n                          </Typography>\n                        </div>\n                      </Col>\n                    </>\n                  ) : (\n                    <p>Loading Please wait...</p>\n                  )}\n                </Row>\n              </Col>\n            </Row>\n          </ExpansionPanelSummary>\n        </ExpansionPanel>\n      </div>\n    </Sticky>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/ViewEditHivst.js",["413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440"],"import React, {useEffect, useState} from \"react\";\nimport {CardBody, FormGroup, Input, Label} from \"reactstrap\";\nimport * as moment from \"moment/moment\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Select from 'react-select';\n\n\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl} from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport {Button, Icon, Label as LabelSui, List} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport {Modal, Table} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DualListBox from \"react-dual-listbox\";\nimport {calculate_age} from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n        \"& .card-title\": {\n            color: \"#fff\",\n            fontWeight: \"bold\",\n        },\n        \"& .form-control\": {\n            borderRadius: \"0.25rem\",\n            height: \"41px\",\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\",\n        },\n        \"& select\": {\n            \"-webkit-appearance\": \"listbox !important\",\n        },\n        \"& p\": {\n            color: \"red\",\n        },\n        \"& label\": {\n            fontSize: \"14px\",\n            color: \"#014d88\",\n            fontWeight: \"bold\",\n        },\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"12.8px\",\n    },\n    success: {\n        color: \"green\",\n        fontSize: \"12.8px\",\n        fontWeight: \"bold\",\n    },\n}));\n\nconst ViewEditHivst = (props) => {\n\n    const patient = props.patientObject;\n    const hivstObj = props.activePage.activeObject\n    const [saving, setSaving] = useState(false)\n    const classes = useStyles();\n    const history = useHistory();\n    const [errors, setErrors] = useState({});\n    let temp = { ...errors };\n    const [serialNumber, setSerialNumber] = useState(null);\n    const [createdCode, setCreatedCode] = useState(\"\");\n    const [selectedUsers, setSelectedUsers] = useState([]);\n    const [showUserInfo, setShowUserInfo] = useState(false);\n    const [otherText, setOtherText] = useState('');\n    const [otherTestKitUserInfoAvailable, setIsUserInformationAvailable] = useState(false);\n    const [kitUserInformation, setKitUserInformation] = useState([]);\n    const [serviceNeeded, setServiceNeeded] = useState([]);\n    const [hasConductedHIVST, setHasConductedHIVST] = useState(false);\n    const [maritalStatus, setMaritalStatus] = useState([]);\n    const [sexs, setSexs] = useState([]);\n    const [userInformationList, setUserInformationList] = useState([])\n    const [userInformationErrors, setUserInformationErrors] = useState({});\n    const [ageDisabled, setAgeDisabled] = useState(true);\n    const [open, setOpen] = React.useState(false);\n\n    const isView = props.activePage.actionType === 'view' ? true : false;\n    const toggle = () => setOpen(!open);\n\n    const [objValues, setObjValues] = useState(hivstObj);\n\n    const [testKitUserDetails, setUserInformation] = useState(hivstObj.testKitUserDetails[0]);\n\n    // const [objValues, setObjValues] = useState({\n    //     patientId: patient?.personId ? patient.personId : \"\",\n    //     // patientObject: {\n    //     //     surname: patient?.surname ? patient.surname : \"\",\n    //     //     firstName: patient?.firstName ? patient.firstName : \"\",\n    //     //     otherName: patient?.otherName ? patient.otherName : \"\",\n    //     //     dateOfBirth: patient?.dateOfBirth ? patient.dateOfBirth : \"\",\n    //     //     maritalStatusId: \"1\",\n    //     //     genderId: patient.gender ? patient.gender : \"\",\n    //     //     sexId: patient.personResponseDto && patient.personResponseDto.sex !== null\n    //     //         ? patient.personResponseDto.sex\n    //     //         : \"\",\n    //     //     address: \"\",\n    //     //     dateOfRegistration: \"\",\n    //     //     hospitalNumber: patient?.hospitalNumber ? patient?.hospitalNumber : \"\",\n    //     // },\n    //     dateOfVisit: \"\",\n    //     serviceDeliveryPoint: \"\",\n    //     userType: \"\",\n    //     serialNumber: \"\",\n    //     clientCode: \"\",\n    //     previouslyTestedWithin12Months: \"\",\n    //     resultOfPreviouslyTestedWithin12Months: \"\",\n    //     consentForFollowUpCalls: \"\",\n    //     typeOfHivstKitReceived: \"\",\n    //     numberOfHivstKitsReceived: \"\",\n    //     nameOfTestKit: \"\",\n    //     lotNumber: \"\",\n    //     expiryDate: \"\",\n    //     testKitUsers: null,\n    //     testKitUserDetails: [],\n    //     otherTestKitUserInfoAvailable: \"\",\n    //     hasConductedHIVST: \"\",\n    // });\n\n    // const [testKitUserDetails, setUserInformation] = useState(\n    //     {\n    //         basicUserInfo: {\n    //             id: \"\",\n    //             firstName:\"\",\n    //             surname:\"\",\n    //             otherName:\"\",\n    //             dateOfRegistration:\"\",\n    //             otherCategory: \"\",\n    //             clientCode: \"\",\n    //             dateOfBirth: \"\",\n    //             age: \"\",\n    //             sex: \"\",\n    //             maritalStatusId: \"\",\n    //             typeOfHivst: \"\",\n    //             userCategory: \"\",\n    //             isDateOfBirthEstimated: \"\"\n    //         },\n    //         postTestAssessment: {\n    //             everUsedHivstKit: \"\",\n    //             everUsedHivstKitForSelfOrOthers: \"\",\n    //             otherHivstKitUserCategory: \"\",\n    //             otherHivstKitUserCategoryText: \"\",\n    //             resultOfHivstTest: \"\",\n    //             accessConfirmatoryHts: \"\",\n    //             referPreventionServices: \"\",\n    //             referralInformation: {\n    //                 referredForConfirmatoryHts: \"\",\n    //                 dateReferredForConfirmatoryHts: \"\",\n    //                 referredForPreventionServices: \"\",\n    //                 dateReferredForPreventionServices: \"\"\n    //             }\n    //         }\n    //     }\n    // );\n\n\n    const options = [\n        {value: 'myself', label: 'For myself'},\n        {value: 'spouse', label: 'Spouse'},\n        {value: 'children', label: 'Children'},\n        {value: 'sexual partner', label: 'Sexual Partner'},\n        {value: 'social network', label: 'Social Network'},\n        {value: 'others', label: 'Others (Please specify)'},\n    ];\n\n    const matches = useMediaQuery('(max-width:600px)');\n    const style = {fontSize: matches ? '12px' : '16px',};\n\n\n    const SERVICE_NEEDED = () => {\n        axios\n            .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            })\n            .then((response) => {\n                if (response.data) {\n                    // create array of objects from the response\n                    const serviceNeeded = response.data.map((service) => {\n                        return {\n                            value: service.display,\n                            label: service.display\n                        }\n                    });\n                    setServiceNeeded(serviceNeeded);\n                }\n            })\n            .catch((e) => {\n                // handle error\n            });\n    };\n\n\n    useEffect(() => {\n        SERVICE_NEEDED();\n    }, []);\n\n    const validateObjValues = () => {\n        temp.dateOfVisit = objValues.dateOfVisit ? \"\" : \"This field is required.\";\n        temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\n        temp.serviceDeliveryPoint = objValues.serviceDeliveryPoint ? \"\" : \"This field is required.\";\n        temp.userType = objValues.userType ? \"\" : \"This field is required.\";\n        // temp.serialNumber = objValues.serialNumber ? \"\" : \"This field is required.\";\n        temp.previouslyTestedWithin12Months = objValues.previouslyTestedWithin12Months ? \"\" : \"This field is required.\";\n        temp.consentForFollowUpCalls = objValues.consentForFollowUpCalls ? \"\" : \"This field is required.\";\n        if (objValues.previouslyTestedWithin12Months !== \"\" && objValues.previouslyTestedWithin12Months !== \"No\") {\n            temp.resultOfPreviouslyTestedWithin12Months = objValues.resultOfPreviouslyTestedWithin12Months ? \"\" : \"This field is required.\";\n        }\n        temp.nameOfTestKit = objValues.nameOfTestKit ? \"\" : \"This field is required.\";\n        temp.typeOfHivstKitReceived = objValues.typeOfHivstKitReceived ? \"\" : \"This field is required.\";\n        temp.numberOfHivstKitsReceived = objValues.numberOfHivstKitsReceived ? \"\" : \"This field is required.\";\n        // temp.expiryDate = objValues.expiryDate ? \"\" : \"This field is required.\";\n        temp.lotNumber = objValues.lotNumber ? \"\" : \"This field is required.\";\n        if(selectedUsers.length === 0) {\n            temp.selectedUsers =   objValues.testKitUsers ? \"\" : \"Please select at least one user\"\n        }\n      \n        setErrors({ ...temp });\n        return Object.values(temp).every((x) => x == \"\");\n    }\n\n    // validate testKitUserDetails\n    const validateUserInformation = () => {\n        // if (objValues.otherTestKitUserInfoAvailable === \"Yes\") {\n        let temp = {};\n        temp.firstName = testKitUserDetails.basicUserInfo.firstName ?  \"\" : \"This field is required.\";\n        // temp.surname = testKitUserDetails.basicUserInfo.surname ?  \"\" : \"This field is required.\";\n        // temp.userCategory = testKitUserDetails.basicUserInfo.userCategory ? \"\" : \"This field is required.\";\n        // temp.otherCategory = testKitUserDetails.basicUserInfo.userCategory === \"Others\" ? testKitUserDetails.basicUserInfo.otherCategory ? \"\" : \"This field is required.\" : \"\";\n        temp.clientCode = testKitUserDetails.basicUserInfo.clientCode ? \"\" : \"This field is required.\";\n        // temp.dateOfBirth = testKitUserDetails.basicUserInfo.dateOfBirth ? \"\" : \"This field is required.\";\n        temp.typeOfHivst = testKitUserDetails.basicUserInfo.typeOfHivst ? \"\" : \"This field is required.\";\n        // Check if the selected user category is in the selectedUsers array\n        // if (!selectedUsers.includes(testKitUserDetails.basicUserInfo.userCategory) && testKitUserDetails.basicUserInfo.userCategory !== \"\" ) {\n        //     temp.userCategory = \"The selected user category does not match the selected kit users.\";\n        // }\n        // the number of kit is empty\n        setUserInformationErrors({...temp});\n        return Object.values(temp).every((x) => x == \"\");\n        // }\n    }\n    const handleInputChange = (e) => {\n        const {name, value} = e.target;\n        let newObjectValues = {...objValues};\n        if (name in objValues) {\n            newObjectValues[name] = value;\n        } else if (name in objValues.postTestAssessment) {\n            newObjectValues.postTestAssessment[name] = value;\n        } else if (name in objValues.postTestAssessment.referralInformation) {\n            newObjectValues.postTestAssessment.referralInformation[name] = value;\n        }\n\n        // Check if the name is \"previouslyTestedWithin12Months\"\n        if (name === \"previouslyTestedWithin12Months\") {\n            newObjectValues.resultOfPreviouslyTestedWithin12Months = \"\";\n        }\n        if (name === \"typeOfHivstKitReceived\") {\n            newObjectValues.numberOfHivstKitsReceived = \"\";\n            newObjectValues.nameOfTestKit = \"\";\n            newObjectValues.lotNumber = \"\";\n            newObjectValues.expiryDate = \"\";\n        }\n        // Check if the name is \"hasConductedHIVST\" and objValues.hasConductedHIVST is \"No\"\n        if (name === \"hasConductedHIVST\") {\n            testKitUserDetails.postTestAssessment = {\n                ...testKitUserDetails.postTestAssessment,\n                everUsedHivstKitForSelfOrOthers: \"\",\n                otherHivstKitUserCategory: \"\",\n                otherHivstKitUserCategoryText: \"\",\n                resultOfHivstTest: \"\",\n                accessConfirmatoryHts: \"\",\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n        }\n// Validate the field and remove the error message if the field is filled\n        if (value) {\n            let tempErrors = {...errors};\n            tempErrors[name] = \"\";\n            setErrors(tempErrors);\n        }\n\n        setObjValues(newObjectValues);\n    }\n\n\n    const handleUserInformationInputChange = (e, section) => {\n        const {name, value} = e.target;\n        let newUserInformation = {...testKitUserDetails};\n\n        if (section === 'postTestAssessment' && name in newUserInformation[section].referralInformation) {\n            newUserInformation[section].referralInformation[name] = value;\n        } else {\n            newUserInformation[section][name] = value;\n        }\n\n        // if everUsedHivstKitForSelfOrOthers  clear otherHivstKitUserCategory\n        if (name === \"everUsedHivstKitForSelfOrOthers\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                otherHivstKitUserCategory: \"\",\n                otherHivstKitUserCategoryText: \"\"\n            };\n        }\n\n        // if  resultOfHivstTestchnages clear all the feilds below\n        if (name === \"resultOfHivstTest\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                accessConfirmatoryHts: \"\",\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n\n        }\n        // if  accessConfirmatoryHtschnages clear all the feilds below\n        if (name === \"accessConfirmatoryHts\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n\n        }\n        // if  referPreventionServiceschnages clear all the feilds below\n        if (name === \"referPreventionServices\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n        }\n\n        // any change in referredForPreventionServices clear dateReferredForPreventionServices\n        if (name === \"referredForPreventionServices\") {\n            newUserInformation.postTestAssessment.referralInformation = {\n                ...newUserInformation.postTestAssessment.referralInformation,\n                dateReferredForPreventionServices: \"\"\n            };\n        }\n\n        if (name === \"hasConductedHIVST\" && value === \"No\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                everUsedHivstKitForSelfOrOthers: \"\",\n                otherHivstKitUserCategory: \"\",\n                otherHivstKitUserCategoryText: \"\",\n                resultOfHivstTest: \"\",\n                accessConfirmatoryHts: \"\",\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                }\n            };\n        }\n        // if userCategory changes clear all other fields in basicUserInfo\n        if (name === \"userCategory\") {\n            newUserInformation.basicUserInfo = {\n                ...newUserInformation.basicUserInfo,\n                otherCategory: \"\",\n                clientCode: \"\",\n                dateOfBirth: \"\",\n                age: \"\",\n            }\n        }\n        // validate and remove error message if the field is filled\n        if (value) {\n            let tempErrors = {...userInformationErrors};\n            tempErrors[name] = \"\";\n            setUserInformationErrors(tempErrors);\n        }\n\n        setUserInformation(newUserInformation);\n    };\n\n\n// Function to add a testKitUserDetails object to the list\n\n    const addUserInformation = () => {\n        if(validateUserInformation()) {\n            if(userInformationList.length <= objValues.numberOfHivstKitsReceived) {\n                let newUserInformation = {\n                    basicUserInfo: {\n                        id: \"\",\n                        firstName:testKitUserDetails.basicUserInfo.firstName,\n                        surname:testKitUserDetails.basicUserInfo.surname,\n                        otherName:testKitUserDetails.basicUserInfo.otherName,\n                        dateOfRegistration:testKitUserDetails.basicUserInfo.dateOfRegistration,\n                        otherCategory: testKitUserDetails.basicUserInfo.otherCategory,\n                        clientCode: testKitUserDetails.basicUserInfo.clientCode,\n                        dateOfBirth: testKitUserDetails.basicUserInfo.dateOfBirth,\n                        age: testKitUserDetails.basicUserInfo.age,\n                        sex: testKitUserDetails.basicUserInfo.sex,\n                        maritalStatusId: testKitUserDetails.basicUserInfo.maritalStatusId,\n                        typeOfHivst: testKitUserDetails.basicUserInfo.typeOfHivst,\n                        userCategory: testKitUserDetails.basicUserInfo.userCategory\n                    },\n                    postTestAssessment: {\n                        everUsedHivstKit: testKitUserDetails.postTestAssessment.everUsedHivstKit,\n                        everUsedHivstKitForSelfOrOthers: testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers,\n                        otherHivstKitUserCategory: testKitUserDetails.postTestAssessment.otherHivstKitUserCategory,\n                        otherHivstKitUserCategoryText: testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText,\n                        resultOfHivstTest: testKitUserDetails.postTestAssessment.resultOfHivstTest,\n                        accessConfirmatoryHts: testKitUserDetails.postTestAssessment.accessConfirmatoryHts,\n                        referPreventionServices: testKitUserDetails.postTestAssessment.referPreventionServices,\n                        referralInformation: {\n                            referredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts,\n                            dateReferredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts,\n                            referredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices,\n                            dateReferredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices\n                        }\n                    }\n                }\n                setUserInformationList([...userInformationList, newUserInformation]);\n                setObjValues({...objValues, testKitUserDetails: [...userInformationList, newUserInformation]});\n\n                // clear testKitUserDetails after adding to the list and also set the hasConductedHIVST to No\n                setUserInformation({\n                    basicUserInfo: {\n                        firstName:\"\",\n                        surname:\"\",\n                        otherName:\"\",\n                        dateOfRegistration:\"\",\n                        otherCategory: \"\",\n                        clientCode: \"\",\n                        dateOfBirth: \"\",\n                        age: \"\",\n                        sex: \"\",\n                        maritalStatusId: \"\",\n                        typeOfHivst: \"\",\n                        userCategory: \"\",\n                        isDateOfBirthEstimated: \"\"\n                    },\n                    postTestAssessment: {\n                        everUsedHivstKit: \"\",\n                        everUsedHivstKitForSelfOrOthers: \"\",\n                        otherHivstKitUserCategory: \"\",\n                        otherHivstKitUserCategoryText: \"\",\n                        resultOfHivstTest: \"\",\n                        accessConfirmatoryHts: \"\",\n                        referPreventionServices: \"\",\n                        referralInformation: {\n                            referredForConfirmatoryHts: \"\",\n                            dateReferredForConfirmatoryHts: \"\",\n                            referredForPreventionServices: \"\",\n                            dateReferredForPreventionServices: \"\"\n                        }\n                    }\n                });\n                setObjValues({...objValues, hasConductedHIVST: \"No\"});\n            } else {\n                // console.log(\"Cannot add more user information as it exceeds the number of HIVST kits received.\");\n            }\n\n        } else{\n            toast.error(\"Please fill all the required fields\");\n        }\n\n    }\n// Function to remove a testKitUserDetails object from the list based on index\n    const removeUserInformation = (index) => {\n        const updatedUserInformationList = userInformationList.filter((_, i) => i !== index);\n        setUserInformationList(updatedUserInformationList);\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\n    };\n\n// Function to update a testKitUserDetails object in the list based on index\n    const updateUserInformation = (index, updatedUserInformation) => {\n        const updatedUserInformationList = userInformationList.map((testKitUserDetails, i) =>\n            i === index ? updatedUserInformation : testKitUserDetails\n        );\n        setUserInformationList(updatedUserInformationList);\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\n    };\n\n// Function to clear the testKitUserDetails list\n    const clearUserInformationList = () => {\n        setUserInformationList([]);\n        setObjValues({...objValues, testKitUserDetails: []});\n    };\n\n\n    const handleKitSelectUserChange = selectedUsers => {\n        setSelectedUsers(selectedUsers);\n        let newValues = {...objValues, testKitUsers: selectedUsers};\n        if (!selectedUsers || selectedUsers.length === 0) {\n            setShowUserInfo(false);\n            newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\n        } else if (selectedUsers.length === 1 && selectedUsers[0] === 'myself') {\n            setShowUserInfo(false);\n            newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\n        } else {\n            setShowUserInfo(true);\n        }\n        if (!showUserInfo) {\n            testKitUserDetails.userCategory = \"\";\n            testKitUserDetails.otherCategory = \"\";\n            testKitUserDetails.clientCode = \"\";\n            testKitUserDetails.dateOfBirth = \"\";\n            testKitUserDetails.age = \"\";\n            testKitUserDetails.sex = \"\";\n            testKitUserDetails.maritalStatus = \"\";\n            testKitUserDetails.clientCode = \"\";\n            testKitUserDetails.typeOfHivSelfTest = \"\";\n        }\n        // always clear the userInformationList when the user selects a new user\n        // setUserInformationList([]);\n        setObjValues(newValues);\n        // }\n    };\n    const checkClientCode = (e) => {\n        let code = \"\";\n        if (e.target.name === \"serialNumber\") {\n            code = createdCode + e.target.value;\n            setCreatedCode(code);\n            setObjValues({...objValues, clientCode: code});\n        }\n\n        async function getIndexClientCode() {\n            const indexClientCode = objValues.clientCode;\n            const response = await axios.get(\n                `${baseUrl}hts/client/${indexClientCode}`,\n                {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                        \"Content-Type\": \"text/plain\",\n                    },\n                }\n            );\n        }\n\n        getIndexClientCode();\n    };\n\n\n    const Sex = () => {\n        axios\n            .get(`${baseUrl}application-codesets/v2/SEX`, {\n                headers: {Authorization: `Bearer ${token}`},\n            })\n            .then((response) => {\n                setSexs(response.data);\n            })\n            .catch((error) => {\n                //// console.log(error);\n            });\n    };\n\n    const MARITALSTATUS = () => {\n        axios\n            .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\n                headers: {Authorization: `Bearer ${token}`},\n            })\n            .then((response) => {\n                setMaritalStatus(response.data);\n            })\n            .catch((error) => {\n                //// console.log(error);\n            });\n    };\n\n    useEffect(() => {\n        Sex();\n        MARITALSTATUS();\n    }, []);\n\n\n    const setAge = () => {\n        const age = calculate_age(testKitUserDetails.basicUserInfo?.dateOfBirth);\n        setUserInformation(prevState => ({\n            ...prevState,\n            basicUserInfo: {\n                ...prevState.basicUserInfo,\n                age: age\n            }\n        }));\n        return age;\n    }\n\n    const handleDateOfBirthChange1 = (e) => {\n        let newUserInformation = {...testKitUserDetails};\n        newUserInformation.basicUserInfo[e.target.name] = e.target.value;\n        if (e.target.value && new Date(e.target.value) <= new Date()) {\n            const age_now = calculate_age(e.target.value);\n            newUserInformation.basicUserInfo.age = age_now;\n        } else {\n            newUserInformation.basicUserInfo.age = \"\";\n        }\n        setUserInformation(newUserInformation);\n    }\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (validateObjValues()) {\n            // const userInfoList = userInformationList;\n            objValues.testKitUserDetails = [testKitUserDetails] ;\n            setSaving(true)\n            axios\n                .put(`${baseUrl}hivst/${props.activePage.activeObject.id}`, objValues, {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                        \"Content-Type\": \"application/json\",\n                    },\n                })\n                .then((response) => {\n                    if (response.status === 200) {\n                        setSaving(false)\n                        toast.success(\"HIVST Updated Successful\");\n                        history.push(\"/patient/hivst\");\n                    }\n                })\n                .catch((error) => {\n                    setSaving(false)\n                    toast.error(\"An error occurred. Please try again.\");\n                });\n\n        }\n\n    }\n\n    const handleDobChange = (e) => {\n        if (e.target.value) {\n            const today = new Date();\n            const birthDate = new Date(e.target.value);\n            let age_now = today.getFullYear() - birthDate.getFullYear();\n            const m = today.getMonth() - birthDate.getMonth();\n            if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n                age_now--;\n            }\n            // objValues.age = age_now;\n            testKitUserDetails.basicUserInfo.age = age_now;\n        } else {\n            setUserInformation({ ...testKitUserDetails, age: \"\" });\n            // setObjValues({ ...objValues, age: \"\" });\n        }\n        // setObjValues({ ...objValues, [e.target.name]: e.target.value });\n        setUserInformation({ ...testKitUserDetails, [e.target.name]: e.target.value });\n        setUserInformation({ ...testKitUserDetails, dateOfBirth: e.target.value });\n        // setObjValues({ ...objValues, dob: e.target.value });\n        if (testKitUserDetails.basicUserInfo.age !== \"\" && testKitUserDetails.basicUserInfo.age >= 85) {\n            toggle();\n        }\n    };\n    const handleDateOfBirthChange = (e) => {\n        if (e.target.value == \"Actual\") {\n            testKitUserDetails.basicUserInfo.isDateOfBirthEstimated = false;\n            setAgeDisabled(true);\n        } else if (e.target.value == \"Estimated\") {\n            // objValues.isDateOfBirthEstimated = true;\n            testKitUserDetails.basicUserInfo.isDateOfBirthEstimated = true;\n            setAgeDisabled(false);\n        }\n    };\n    const handleAgeChange = (e) => {\n        if (!ageDisabled && e.target.value) {\n            if (e.target.value !== \"\" && e.target.value >= 85) {\n                toggle();\n            }\n            const currentDate = new Date();\n            currentDate.setDate(15);\n            currentDate.setMonth(5);\n            const estDob = moment(currentDate.toISOString());\n            const dobNew = estDob.add(e.target.value * -1, \"years\");\n            setUserInformation({ ...testKitUserDetails, dateOfBirth: moment(dobNew).format(\"YYYY-MM-DD\") });\n            // setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n            // objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\")\n            testKitUserDetails.basicUserInfo.dateOfBirth = moment(dobNew).format(\"YYYY-MM-DD\");\n        }\n        // setObjValues({ ...objValues, age: e.target.value });\n        setUserInformation({ ...testKitUserDetails, age: e.target.value });\n    };\n\n\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n                    <h2 style={{color: \"#000\"}}>\n                        HIV SELF - TEST AND RESPONSE CARD {isView ? \" - View\" : \" - Update\"} </h2>\n                    <br/>\n                    <form>\n                        <div className=\"row mb-7\">\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Visit Date <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                        name=\"dateOfVisit\"\n                                        id=\"dateOfVisit\"\n                                        // value={objValues.dateOfVisit}\n                                        value={hivstObj.dateOfVisit}\n                                        onChange={handleInputChange}\n                                        min=\"1929-12-31\"\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                        disabled={isView}\n                                    />\n                                    {errors.dateOfVisit !== \"\" ? (\n                                        <span className={classes.error}>{errors.dateOfVisit}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label >\n                                        Service Delivery Point\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"serviceDeliveryPoint\"\n                                        id=\"serviceDeliveryPoint\"\n                                        value={objValues.serviceDeliveryPoint}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                        disabled={isView}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Health Facility\">Health Facility</option>\n                                        <option value=\"Comunity Pharmacy\">Community Pharmacy</option>\n                                        <option value=\"PPMV\">PPMV</option>\n                                        <option value=\"Mobile Distribution\">Mobile Distribution</option>\n                                        <option value=\"Workplace\">WorkPlace</option>\n                                        <option value=\"Others\">Others</option>\n                                        <option value=\"Home based\">Home based</option>\n                                        <option value=\"Door to Door\">Door to Door</option>\n                                    </select>\n                                    {errors.serviceDeliveryPoint !== \"\" ? (\n                                        <span className={classes.error}>{errors.serviceDeliveryPoint}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>\n                                        User Type\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"userType\"\n                                        id=\"userType\"\n                                        value={objValues.userType}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                        disabled={isView}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Primary User\">Primary User (collector)</option>\n                                        <option value=\"Secondary User\">secondary user\n                                        </option>\n                                    </select>\n                                    {errors.userType !== \"\" ? (\n                                        <span className={classes.error}>{errors.userType}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Serial Number\n                                        {/*<span style={{color: \"red\"}}> *</span> */}\n                                    </Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"serialNumber\"\n                                        id=\"serialNumber\"\n                                        value={serialNumber}\n                                        //value={Math.floor(Math.random() * 1093328)}\n                                        onBlur={checkClientCode}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                        disabled={isView}\n                                    />\n                                    {/*{errors.serialNumber !== \"\" ? (*/}\n                                    {/*    <span className={classes.error}>{errors.serialNumber}</span>*/}\n                                    {/*) : (*/}\n                                    {/*    \"\"*/}\n                                    {/*)}*/}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Client Code <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"clientCode\"\n                                        id=\"clientCode\"\n                                        value={objValues.clientCode}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                        disabled={isView}\n                                    />\n                                    {errors.clientCode !== \"\" ? (\n                                        <span className={classes.error}>{errors.clientCode}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>\n                                        Have you previously tested for HIV in the last 12 months?\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"previouslyTestedWithin12Months\"\n                                        id=\"previouslyTestedWithin12Months\"\n                                        value={objValues.previouslyTestedWithin12Months}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                        disabled={isView}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">YES</option>\n                                        <option value=\"No\">NO</option>\n                                    </select>\n                                    {errors.previouslyTestedWithin12Months !== \"\" ? (\n                                        <span className={classes.error}>{errors.previouslyTestedWithin12Months}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            {objValues?.previouslyTestedWithin12Months === \"Yes\" ? (\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label >\n                                            What was the test result?\n                                            <span style={{color: \"red\"}}> *</span>\n                                        </Label>\n                                        <select\n                                            className=\"form-control\"\n                                            name=\"resultOfPreviouslyTestedWithin12Months\"\n                                            id=\"resultOfPreviouslyTestedWithin12Months\"\n                                            value={objValues.resultOfPreviouslyTestedWithin12Months}\n                                            onChange={handleInputChange}\n                                            style={{\n                                                border: \"1px solid #014D88\",\n                                                borderRadius: \"0.2rem\",\n                                            }}\n                                            disabled={isView}\n                                        >\n                                            <option value={\"\"}></option>\n                                            <option value=\"Positive\">Positive</option>\n                                            <option value=\"Negative\">Negative</option>\n                                            <option value=\"Unknown\">Unknown</option>\n                                        </select>\n                                        {errors.resultOfPreviouslyTestedWithin12Months !== \"\" ? (\n                                            <span className={classes.error}>{errors.resultOfPreviouslyTestedWithin12Months}</span>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </FormGroup>\n                                </div>\n                            ) : \"\"}\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label >\n                                        Do you consent to be followed-up via phone calls?\n                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"consentForFollowUpCalls\"\n                                        id=\"consentForFollowUpCalls\"\n                                        value={objValues.consentForFollowUpCalls}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                        disabled={isView}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">YES</option>\n                                        <option value=\"No\">NO</option>\n                                    </select>\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label >\n                                        What type of HIVST kit did you receive/purchase today?\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"typeOfHivstKitReceived\"\n                                        id=\"typeOfHivstKitReceived\"\n                                        value={objValues.typeOfHivstKitReceived}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                        disabled={isView}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Oral fluid\">Oral fluid</option>\n                                        <option value=\"Blood\">Blood</option>\n                                    </select>\n                                    {errors.typeOfHivstKitReceived !== \"\" ? (\n                                        <span className={classes.error}>{errors.typeOfHivstKitReceived}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Number of individual HIV self-test kits received? {\" \"}\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"number\"\n                                        name=\"numberOfHivstKitsReceived\"\n                                        id=\"numberOfHivstKitsReceived\"\n                                        value={objValues.numberOfHivstKitsReceived}\n                                        min=\"1\"\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                        disabled={isView}\n                                    />\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"providerNameCompletingForm\">\n                                        Name of Test Kit ?\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"nameOfTestKit\"\n                                        id=\"nameOfTestKit\"\n                                        value={objValues.nameOfTestKit}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                        disabled={isView}\n                                    />\n                                    {errors.nameOfTestKit !== \"\" ? (\n                                        <span className={classes.error}>\n                                            {errors.nameOfTestKit}\n                                        </span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"providerNameCompletingForm\">\n                                        Lot No\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"lotNumber\"\n                                        id=\"\" lotNumber\n                                        value={objValues.lotNumber}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                        disabled={isView}\n                                    />\n                                    {errors.lotNumber !== \"\" ? (\n                                        <span className={classes.error}>\n                                            {errors.lotNumber}\n                                        </span>\n                                    ) : (\n                                        \"\"\n                                    )}\n\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Expiry Date\n                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                    </Label>\n                                    <Input\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                        name=\"expiryDate\"\n                                        id=\"expirtyDate\"\n                                        value={objValues.expiryDate}\n                                        onChange={handleInputChange}\n                                        min={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                        max={moment(new Date()).add(5, 'years').format(\"YYYY-MM-DD\")}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                        disabled={isView}\n                                    />\n                                    {/*{errors.expiryDate !== \"\" ? (*/}\n                                    {/*    <span className={classes.error}>{errors.expiryDate}</span>*/}\n                                    {/*) : (*/}\n                                    {/*    \"\"*/}\n                                    {/*)}*/}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-12\">\n                                <FormGroup>\n                                    <Label for=\"dualListBox\">\n                                        Who do you want to use the kit for?\n                                    </Label>\n                                    <DualListBox\n                                        options={options}\n                                        // selected={selectedUsers}\n                                        selected = {objValues.testKitUsers}\n                                        onChange={handleKitSelectUserChange}\n                                        disabled={isView}\n                                        // disabled={objValues.userType === \"Secondary User\" ? true : false}\n                                    />\n                                    {errors.testKitUsers !== \"\" ? (\n                                        <span className={classes.error}>\n                                            {errors.testKitUsers}\n                                        </span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n\n                            {/*<div className=\"form-group mb-7 col-md-4\">*/}\n                            {/*    <FormGroup>*/}\n                            {/*        <Label for=\"testKitUsers\">*/}\n                            {/*            Who do you want to use the kit for?*/}\n                            {/*        </Label>*/}\n                            {/*        <Select*/}\n                            {/*            isMulti*/}\n                            {/*            name=\"whoDoYouWantToUseTheKitFor\"*/}\n                            {/*            options={options}*/}\n                            {/*            className=\"basic-multi-select\"*/}\n                            {/*            classNamePrefix=\"select\"*/}\n                            {/*            onChange={handleKitSelectUserChange}*/}\n                            {/*            styles={{*/}\n                            {/*                control: (provided) => ({*/}\n                            {/*                    ...provided,*/}\n                            {/*                    border: \"1px solid #014D88\",*/}\n                            {/*                    borderRadius: \"0.25rem\",*/}\n                            {/*                }),*/}\n                            {/*            }}*/}\n                            {/*        />*/}\n                            {/*    </FormGroup>*/}\n                            {/*</div>*/}\n\n                            {selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === 'others' &&\n                                <div className=\"form-group mb-3 col-md-4\">\n                                    <FormGroup>\n                                        <Label for=\"testKitUsers\">\n                                            Please Specify\n                                        </Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"otherText\"\n                                            id=\"otherText\"\n                                            value={otherText}\n                                            onChange={e => setOtherText(e.target.value)}\n                                            placeholder=\"Please specify\"\n                                            style={{\n                                                border: \"1px solid #014D88\",\n                                                borderRadius: \"0.25rem\",\n                                            }}\n                                            disabled={isView}\n                                        />\n                                    </FormGroup>\n                                </div>\n                            }\n                            {showUserInfo &&\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label >\n                                            Is user information available?\n                                            <span style={{color: \"red\"}}> *</span>\n                                        </Label>\n                                        <select\n                                            className=\"form-control\"\n                                            name=\"otherTestKitUserInfoAvailable\"\n                                            id=\"otherTestKitUserInfoAvailable\"\n                                            value={objValues.otherTestKitUserInfoAvailable}\n                                            onChange={handleInputChange}\n                                            style={{\n                                                border: \"1px solid #014D88\",\n                                                borderRadius: \"0.2rem\",\n                                            }}\n                                            disabled={isView}\n                                            // disabled={objValues.userType === \"Secondary User\" ? true : false}\n                                        >\n                                            <option value={\"\"}></option>\n                                            <option value=\"Yes\">YES</option>\n                                            <option value=\"No\">NO</option>\n                                        </select>\n                                        {/*                {errors.firstTimeVisit !== \"\" ? (*/}\n                                        {/*                    <span className={classes.error}>*/}\n                                        {/*  {errors.firstTimeVisit}*/}\n                                        {/*</span>*/}\n                                        {/*                ) : (*/}\n                                        {/*                    \"\"*/}\n                                        {/*                )}*/}\n                                    </FormGroup>\n                                </div>\n                            }\n                            {/*{objValues?.otherTestKitUserInfoAvailable === \"Yes\" &&*/}\n                            {/*{selectedUsers.length === 0 ? (\"\") :*/}\n                                {objValues && objValues.testKitUserDetails &&\n                                (\n                                  <>\n                                    <div className=\"row center\">\n                                        <div\n                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\n                                            style={{\n                                                backgroundColor: \"#992E62\",\n                                                width: \"125%\",\n                                                height: \"35px\",\n                                                color: \"#fff\",\n                                                fontWeight: \"bold\",\n                                            }}\n                                        >\n                                            Intended Kit User Information\n                                        </div>\n                                    </div>\n                                      <div className=\"row\">\n                                          <div className=\"form-group mb-3 col-md-4\">\n                                              <FormGroup>\n                                                  <Label for=\"\">\n                                                      Registration Date\n                                                      {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                  </Label>\n                                                  <Input\n                                                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                      name=\"dateOfRegistration\"\n                                                      id=\"dateOfRegistration\"\n                                                      min=\"1929-12-31\"\n                                                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                      value={testKitUserDetails.basicUserInfo.dateOfRegistration}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n\n                                                  />\n                                                  {/*{errors.dateOfVisit !== \"\" ? (*/}\n                                                  {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\n                                                  {/*) : (*/}\n                                                  {/*    \"\"*/}\n                                                  {/*)}*/}\n                                              </FormGroup>\n                                          </div>\n                                          <div className=\"form-group col-md-4\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      First Name\n                                                      <span style={{color: \"red\"}}> *</span>\n                                                  </Label>\n                                                  <input\n                                                      type=\"text\"\n                                                      className=\"form-control\"\n                                                      name=\"firstName\"\n                                                      id=\"firstName\"\n                                                      value={testKitUserDetails.basicUserInfo.firstName}\n                                                      // onChange={handleInputChange1}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n                                                  />\n                                                  {userInformationErrors.firstName !== \"\" ? (\n                                                      <span\n                                                          className={classes.error}>{userInformationErrors.firstName}</span>\n                                                  ) : (\n                                                      \"\"\n                                                  )}\n                                              </FormGroup>\n                                          </div>\n                                          <div className=\"form-group col-md-4\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      Surname\n                                                      <span style={{color: \"red\"}}> *</span>\n                                                  </Label>\n                                                  <input\n                                                      type=\"text\"\n                                                      className=\"form-control\"\n                                                      name=\"surname\"\n                                                      id=\"surname\"\n                                                      value={testKitUserDetails.basicUserInfo.surname}\n                                                      // onChange={handleInputChange1}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n                                                  />\n                                                  {userInformationErrors.surname !== \"\" ? (\n                                                      <span\n                                                          className={classes.error}>{userInformationErrors.surname}</span>\n                                                  ) : (\n                                                      \"\"\n                                                  )}\n                                              </FormGroup>\n                                          </div>\n                                          <div className=\"form-group col-md-4\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      Other name\n                                                  </Label>\n                                                  <input\n                                                      type=\"text\"\n                                                      className=\"form-control\"\n                                                      name=\"otherName\"\n                                                      id=\"otherName\"\n                                                      value={testKitUserDetails.basicUserInfo.otherName}\n                                                      // onChange={handleInputChange1}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n                                                  />\n                                              </FormGroup>\n                                          </div>\n\n                                          <div className=\"form-group  col-md-4\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      user Category\n                                                      <span style={{color: \"red\"}}> *</span>\n                                                  </Label>\n                                                  <select\n                                                      className=\"form-control\"\n                                                      name=\"userCategory\"\n                                                      id=\"userCategory\"\n                                                      value={testKitUserDetails.basicUserInfo.userCategory}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n                                                  >\n                                                      <option value={\"\"}></option>\n                                                      {/*{options.map(option => (*/}\n                                                      {/*    <option key={option.value} value={option.value}>*/}\n                                                      {/*        {option.label}*/}\n                                                      {/*    </option>*/}\n                                                      {/*))}*/}\n                                                      {selectedUsers.map((user, index) => (\n                                                          <option key={index} value={user}>{user}</option>\n                                                      ))}\n                                                      ))\n                                                  </select>\n                                                  {userInformationErrors.userCategory !== \"\" ? (\n                                                      <span\n                                                          className={classes.error}>{userInformationErrors.userCategory}</span>\n                                                  ) : (\n                                                      \"\"\n                                                  )}\n                                              </FormGroup>\n                                          </div>\n                                          {testKitUserDetails.basicUserInfo.userCategory === \"others\" ? (\n                                              <div className=\"form-group col-md-4\">\n                                                  <FormGroup>\n                                                      <Label>\n                                                          Specify Other Category\n                                                          {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                      </Label>\n                                                      <input\n                                                          type=\"text\"\n                                                          className=\"form-control\"\n                                                          name=\"otherCategory\"\n                                                          id=\"otherCategory\"\n                                                          value={testKitUserDetails.basicUserInfo.otherCategory}\n                                                          // onChange={handleInputChange1}\n                                                          onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                          style={{\n                                                              border: \"1px solid #014D88\",\n                                                              borderRadius: \"0.2rem\",\n                                                          }}\n                                                          disabled={isView}\n                                                      />\n                                                  </FormGroup>\n                                              </div>\n                                          ) : \"\"}\n                                          <div className=\"form-group col-md-4\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      Client Code\n                                                      <span style={{color: \"red\"}}> *</span>\n                                                  </Label>\n                                                  <input\n                                                      type=\"text\"\n                                                      className=\"form-control\"\n                                                      name=\"clientCode\"\n                                                      id=\"clientCode\"\n                                                      value={testKitUserDetails.basicUserInfo.clientCode}\n                                                      // onChange={handleInputChange1}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n                                                  />\n                                                  {userInformationErrors.clientCode !== \"\" ? (\n                                                      <span\n                                                          className={classes.error}>{userInformationErrors.clientCode}</span>\n                                                  ) : (\n                                                      \"\"\n                                                  )}\n                                              </FormGroup>\n                                          </div>\n\n                                          <div className=\"form-group mb-2 col-md-2\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      Date Of Birth <span style={{color: \"red\"}}> *</span>\n                                                  </Label>\n                                                  <div className=\"radio\">\n                                                      <label>\n                                                          <input\n                                                              type=\"radio\"\n                                                              value=\"Actual\"\n                                                              name=\"dateOfBirth\"\n                                                              defaultChecked\n                                                              onChange={(e) => handleDateOfBirthChange(e)}\n                                                              style={{\n                                                                  border: \"1px solid #014D88\",\n                                                                  borderRadius: \"0.2rem\",\n                                                              }}\n                                                          />{\" \"}\n                                                          Actual\n                                                      </label>\n                                                  </div>\n                                                  <div className=\"radio\">\n                                                      <label>\n                                                          <input\n                                                              type=\"radio\"\n                                                              value=\"Estimated\"\n                                                              name=\"dateOfBirth\"\n                                                              onChange={(e) => handleDateOfBirthChange(e)}\n                                                              style={{\n                                                                  border: \"1px solid #014D88\",\n                                                                  borderRadius: \"0.2rem\",\n                                                              }}\n                                                          />{\" \"}\n                                                          Estimated\n                                                      </label>\n                                                  </div>\n                                              </FormGroup>\n                                          </div>\n                                          <div className=\"form-group mb-3 col-md-3\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      Date <span style={{color: \"red\"}}> *</span>\n                                                  </Label>\n                                                  <input\n                                                      className=\"form-control\"\n                                                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                      name=\"dob\"\n                                                      id=\"dob\"\n                                                      min=\"1929-12-31\"\n                                                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                      value={testKitUserDetails.basicUserInfo.dateOfBirth}\n                                                      onChange={handleDobChange}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                  />\n                                              </FormGroup>\n                                          </div>\n                                          <div className=\"form-group mb-3 col-md-3\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      Age <span style={{color: \"red\"}}> *</span>\n                                                  </Label>\n                                                  <input\n                                                      className=\"form-control\"\n                                                      type=\"number\"\n                                                      name=\"age\"\n                                                      id=\"age\"\n                                                      value={testKitUserDetails.basicUserInfo.age}\n                                                      disabled={ageDisabled}\n                                                      onChange={handleAgeChange}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                  />\n                                              </FormGroup>\n                                          </div>\n\n                                          <div className=\"form-group  col-md-4\">\n                                              <FormGroup>\n                                                  <Label>\n                                                      Sex\n                                                      {/*<span style={{color: \"red\"}}> *</span> */}\n                                                  </Label>\n                                                  <select\n                                                      className=\"form-control\"\n                                                      name=\"sex\"\n                                                      id=\"sex\"\n                                                      value={testKitUserDetails.basicUserInfo.sex}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n                                                  >\n                                                      <option value={\"\"}></option>\n                                                      {sexs.map((value) => (\n                                                          <option key={value.id} value={value.display}>\n                                                              {value.display}\n                                                          </option>\n                                                      ))}\n                                                  </select>\n                                              </FormGroup>\n                                          </div>\n                                          {testKitUserDetails.basicUserInfo.age > 9 && (\n                                              <div className=\"form-group  col-md-4\">\n                                                  <FormGroup>\n                                                      <Label>Marital Status</Label>\n                                                      <select\n                                                          className=\"form-control\"\n                                                          name=\"maritalStatusId\"\n                                                          id=\"maritalStatusId\"\n                                                          value={testKitUserDetails.basicUserInfo.maritalStatusId}\n                                                          // onChange={handleInputChange1}\n                                                          onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                          style={{\n                                                              border: \"1px solid #014D88\",\n                                                              borderRadius: \"0.2rem\",\n                                                          }}\n                                                          disabled={isView}\n                                                      >\n                                                          <option value={\"\"}></option>\n                                                          {maritalStatus.map((value) => (\n                                                              <option key={value.id} value={value.id}>\n                                                                  {value.display}\n                                                              </option>\n                                                          ))}\n                                                      </select>\n                                                  </FormGroup>\n                                              </div>\n                                          )}\n                                          <div className=\"form-group  col-md-4\">\n                                              <FormGroup>\n                                                  <Label> Type of HIV Self-Test </Label>\n                                                  <select\n                                                      className=\"form-control\"\n                                                      name=\"typeOfHivst\"\n                                                      id=\"typeOfHivst\"\n                                                      value={testKitUserDetails.basicUserInfo.typeOfHivst}\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                      style={{\n                                                          border: \"1px solid #014D88\",\n                                                          borderRadius: \"0.2rem\",\n                                                      }}\n                                                      disabled={isView}\n                                                  >\n                                                      <option value={\"\"}></option>\n                                                      <option value=\"Assisted\">\n                                                          Assisted\n                                                      </option>\n                                                      <option value=\"Unassisted\">\n                                                          Unassisted\n                                                      </option>\n                                                  </select>\n                                                  {\n                                                      userInformationErrors.typeOfHivst !== \"\" ? (\n                                                          <span\n                                                              className={classes.error}>{userInformationErrors.typeOfHivst}</span>\n                                                      ) : (\"\")\n\n                                                  }\n                                              </FormGroup>\n                                          </div>\n                                          {/*<div className=\"form-group mb-3 col-md-6\">*/}\n                                          {/*    <LabelSui*/}\n                                          {/*        as=\"a\"*/}\n                                          {/*        color=\"black\"*/}\n                                          {/*        // onClick={handleSubmitfamilyIndexRequestDto}*/}\n                                          {/*        size=\"small\"*/}\n                                          {/*        style={{marginTop: 35}}*/}\n                                          {/*    >*/}\n                                          {/*        <Icon name=\"plus\"/> Add*/}\n                                          {/*    </LabelSui>*/}\n                                          {/*</div>*/}\n                                      </div>\n\n\n                                  </>\n                                )\n                                }\n\n                            {/*Checkbox to select if the User has conducted the HIVST – if checked, display the*/}\n                            {/*following questions, else the user should be able to save the form.*/}\n                            {/*<div className=\"row mb-7\">*/}\n                            {/*    <div className=\"form-group mb-3 col-md-4\">*/}\n                            {/*        <FormGroup>*/}\n                            {/*            <label>*/}\n                            {/*                <input*/}\n                            {/*                    type=\"checkbox\"*/}\n                            {/*                    checked={objValues.hasConductedHIVST}*/}\n                            {/*                    onChange={() => {*/}\n                            {/*                        setObjValues(prevState => ({*/}\n                            {/*                            ...prevState,*/}\n                            {/*                            hasConductedHIVST: !prevState.hasConductedHIVST*/}\n                            {/*                        }));*/}\n                            {/*                        // // console.log(\"Has Conducted HIVST\", !objValues.hasConductedHIVST);*/}\n                            {/*                    }}*/}\n                            {/*                    style={{marginRight: \"10px\"}}*/}\n                            {/*                />*/}\n                            {/*                Have you conducted the HIVST ?*/}\n                            {/*            </label>*/}\n                            {/*        </FormGroup>*/}\n                            {/*    </div>*/}\n                            {/*</div>*/}\n                            {objValues?.otherTestKitUserInfoAvailable === \"No\" &&\n                                <div className=\"row mb-7\">\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <Button\n                                            content=\"Save wihout user Info\"\n                                            icon=\"save\"\n                                            labelPosition=\"right\"\n                                            style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\n                                            onClick={handleSubmit}\n                                            disabled={saving}\n                                        />\n                                    </div>\n                                </div>\n                            }\n\n                            {objValues && objValues.otherTestKitUserInfoAvailable === \"Yes\" &&\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\n                                    <hr style={{width: '100%'}}/>\n                                </div>\n                            }\n                            {/*{objValues && selectedUsers.length > 0 &&*/}\n                            {objValues && objValues.testKitUserDetails &&\n                                <div className=\"row mb-7\">\n                                    <div className=\"form-group  col-md-4\">\n                                        <FormGroup>\n                                            <Label>\n                                                Have you conducted the HIVST ?\n                                                {/*<span style={{color: \"red\"}}> *</span>*/}\n                                            </Label>\n                                            <select\n                                                className=\"form-control\"\n                                                name=\"hasConductedHIVST\"\n                                                id=\"hasConductedHIVST\"\n                                                value={objValues.hasConductedHIVST}\n                                                onChange={handleInputChange}\n                                                style={{\n                                                    border: \"1px solid #014D88\",\n                                                    borderRadius: \"0.2rem\",\n                                                }}\n                                                disabled={isView}\n                                            >\n                                                <option value={\"\"}></option>\n                                                <option value=\"Yes\">YES</option>\n                                                <option value=\"No\">NO</option>\n                                            </select>\n                                        </FormGroup>\n                                    </div>\n                                </div>\n                            }\n                            <div className=\"row mb-7\">\n                                {/*{objValues.hasConductedHIVST === \"Yes\" ? (*/}\n                                {objValues && objValues.testKitUserDetails.postTestAssessment !== null ? (\n                                    // Display the following questions if the checkbox is checked\n                                    <>\n                                        <div className=\"row center\">\n                                            <div\n                                                className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\n                                                style={{\n                                                    backgroundColor: \"green\",\n                                                    width: \"125%\",\n                                                    height: \"35px\",\n                                                    color: \"#fff\",\n                                                    fontWeight: \"bold\",\n                                                }}\n                                            >\n\n                                                Section B : HIVST Post Test Assessment\n                                            </div>\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label >\n                                                        Have you ever used HIVST kit?\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                    </Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"everUsedHivstKit\"\n                                                        id=\"everUsedHivstKitl\"\n                                                        // value={objValues.hasConductedHIVST ? \"Yes\" : \"No\"}\n                                                        value={testKitUserDetails?.postTestAssessment?.everUsedHivstKit}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                        disabled={isView}\n                                                    >\n                                                        <option value={\"\"}></option>\n                                                        <option value=\"Yes\">YES</option>\n                                                        <option value=\"No\">NO</option>\n                                                    </select>\n                                                </FormGroup>\n                                            </div>\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label >\n                                                        Did you use the HIVST kit for yourself or someone else?\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                    </Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"everUsedHivstKitForSelfOrOthers\"\n                                                        id=\"everUsedHivstKitForSelfOrOthers\"\n                                                        value={testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                        disabled={isView}\n                                                    >\n                                                        <option value={\"\"}></option>\n                                                        <option value=\"Self\">Self</option>\n                                                        <option value=\"Someone else\">Someone else</option>\n                                                    </select>\n                                                </FormGroup>\n                                            </div>\n                                            {testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers === \"Someone else\" &&\n                                                <div className=\"form-group  col-md-4\">\n                                                    <FormGroup>\n                                                        <Label >\n                                                            Who did you give it to?\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"otherHivstKitUserCategory\"\n                                                            id=\"otherHivstKitUserCategory\"\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategory}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                            disabled={isView}\n                                                        >\n                                                            <option value={\"\"}></option>\n                                                            {options.map(option => (\n                                                                <option key={option.value} value={option.value}>\n                                                                    {option.label}\n                                                                </option>\n                                                            ))}\n                                                        </select>\n                                                    </FormGroup>\n                                                </div>\n                                            }\n                                            {testKitUserDetails.postTestAssessment?.otherHivstKitUserCategory === \"others\" ? (\n                                                <div className=\"form-group col-md-4\">\n                                                    <FormGroup>\n                                                        <Label>\n                                                            Please Specify Other Category\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <input\n                                                            type=\"text\"\n                                                            className=\"form-control\"\n                                                            name=\"otherHivstKitUserCategoryText\"\n                                                            id=\"otherHivstKitUserCategoryText\"\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                            disabled={isView}\n                                                        />\n                                                    </FormGroup>\n                                                </div>\n                                            ) : \"\"}\n\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label >\n                                                        What was the result of the HIVST?\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                    </Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"resultOfHivstTest\"\n                                                        id=\"resultOfHivstTest\"\n                                                        value={testKitUserDetails.postTestAssessment.resultOfHivstTest}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                        disabled={isView}\n                                                    >\n                                                        <option value={\"\"}></option>\n                                                        <option value=\"Reactive\">Reactive</option>\n                                                        <option value=\"Non-Reactive\">Non Reactive</option>\n                                                        <option value=\"Indeterminate\">Indeterminate</option>\n                                                    </select>\n                                                </FormGroup>\n                                            </div>\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Reactive\" &&\n                                                <div className=\"form-group  col-md-4\">\n                                                    <FormGroup>\n                                                        <Label >\n                                                            Would you like to access HIV testing to confirm my HIVST\n                                                            result?\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"accessConfirmatoryHts\"\n                                                            id=\"accessConfirmatoryHts\"\n                                                            value={testKitUserDetails.postTestAssessment.accessConfirmatoryHts}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                            disabled={isView}\n                                                        >\n                                                            <option value={\"\"}></option>\n                                                            <option value=\"Yes\">YES</option>\n                                                            <option value=\"No\">NO</option>\n                                                        </select>\n                                                    </FormGroup>\n                                                </div>\n                                            }\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Non-Reactive\" &&\n                                                <div className=\"form-group  col-md-4\">\n                                                    <FormGroup>\n                                                        <Label >\n                                                            Would you like to be referred for prevention services\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"referPreventionServices\"\n                                                            id=\"referPreventionServices\"\n                                                            value={testKitUserDetails.postTestAssessment.referPreventionServices}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                            disabled={isView}\n                                                        >\n                                                            <option value={\"\"}></option>\n                                                            <option value=\"Yes\">YES</option>\n                                                            <option value=\"No\">NO</option>\n                                                        </select>\n                                                    </FormGroup>\n                                                </div>\n                                            }\n\n                                        </div>\n                                        {\n                                            testKitUserDetails.postTestAssessment\n                                            && testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\"\n                                            || testKitUserDetails.postTestAssessment.referPreventionServices === \"Yes\" ?\n                                                (\n                                                    <div className=\"row center\">\n                                                        <div\n                                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\n                                                            style={{\n                                                                backgroundColor: \"rgba(25, 96, 176, 0.8)\",\n                                                                width: \"125%\",\n                                                                height: \"35px\",\n                                                                color: \"#fff\",\n                                                                fontWeight: \"bold\",\n                                                            }}\n                                                        >\n                                                            Section C : Referral Information\n                                                        </div>\n                                                        {testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\" && <div className=\"form-group  col-md-4\">\n                                                            <FormGroup>\n                                                                <Label >\n                                                                    Referred for Confirmatory HTS Testing\n                                                                    {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                </Label>\n                                                                <select\n                                                                    className=\"form-control\"\n                                                                    name=\"referredForConfirmatoryHts\"\n                                                                    id=\"referredForConfirmatoryHts\"\n                                                                    value={testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts}\n                                                                    onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                                    style={{\n                                                                        border: \"1px solid #014D88\",\n                                                                        borderRadius: \"0.2rem\",\n                                                                    }}\n                                                                    disabled={isView}\n                                                                >\n                                                                    <option value={\"\"}></option>\n                                                                    <option value=\"Yes\">YES</option>\n                                                                    <option value=\"No\">NO</option>\n                                                                </select>\n                                                            </FormGroup>\n                                                        </div>}\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts === \"Yes\" &&\n                                                            <div className=\"form-group mb-3 col-md-4\">\n                                                                <FormGroup>\n                                                                    <Label for=\"\">\n                                                                        Date referred for confirmatory HTS testing\n                                                                        field\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                    </Label>\n                                                                    <Input\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                                        name=\"dateReferredForConfirmatoryHts\"\n                                                                        id=\"dateReferredForConfirmatoryHts\"\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts}\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n\n                                                                        min={objValues.dateOfVisit}\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                                        style={{\n                                                                            border: \"1px solid #014D88\",\n                                                                            borderRadius: \"0.25rem\",\n                                                                        }}\n                                                                        disabled={isView}\n                                                                    />\n                                                                </FormGroup>\n                                                            </div>}\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails?.postTestAssessment?.referPreventionServices === \"Yes\" &&\n                                                            <div className=\"form-group  col-md-4\">\n                                                                <FormGroup>\n                                                                    <Label >\n                                                                        Referred for Prevention Services\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                    </Label>\n                                                                    <select\n                                                                        className=\"form-control\"\n                                                                        name=\"referredForPreventionServices\"\n                                                                        id=\"referredForPreventionServices\"\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices}\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n\n                                                                        style={{\n                                                                            border: \"1px solid #014D88\",\n                                                                            borderRadius: \"0.2rem\",\n                                                                        }}\n                                                                        disabled={isView}\n                                                                    >\n                                                                        <option value={\"\"}></option>\n                                                                        <option value=\"Yes\">YES</option>\n                                                                        <option value=\"No\">NO</option>\n                                                                    </select>\n                                                                </FormGroup>\n                                                            </div>\n                                                        }\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices === \"Yes\" &&\n                                                            <div className=\"form-group mb-3 col-md-4\">\n                                                                <FormGroup>\n                                                                    <Label for=\"\">\n                                                                        Date referred for prevention services\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                    </Label>\n                                                                    <Input\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                                        name=\"dateReferredForPreventionServices\"\n                                                                        id=\"dateReferredForPreventionServices\"\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices}\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                                        min={objValues.dateOfVisit}\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                                        style={{\n                                                                            border: \"1px solid #014D88\",\n                                                                            borderRadius: \"0.25rem\",\n                                                                        }}\n                                                                        disabled={isView}\n                                                                    />\n                                                                    {/*{errors.dateOfVisit !== \"\" ? (*/}\n                                                                    {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\n                                                                    {/*) : (*/}\n                                                                    {/*    \"\"*/}\n                                                                    {/*)}*/}\n                                                                </FormGroup>\n                                                            </div>\n                                                        }\n\n                                                    </div>) : \"\"}\n                                    </>\n                                ) : ( \"\"\n                                    // Display the save form button if the checkbox is not checked\n                                    // <div className=\"row\">\n                                    //     {// if selected user  is myself only show save button and save secondary user information\n                                    //         selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === \"myself\" &&\n                                    //         <div className=\"form-group mb-3 col-md-6\">\n                                    //             <Button\n                                    //                 content=\"save myself information\"\n                                    //                 icon=\"save\"\n                                    //                 labelPosition=\"right\"\n                                    //                 style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\n                                    //                 onClick={handleSubmit}\n                                    //                 disabled={saving}\n                                    //             />\n                                    //         </div>\n                                    //     }\n                                    //\n                                    // </div>\n                                )}\n                            </div>\n                            {selectedUsers.length > 0 && <div className=\"row\">\n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <LabelSui\n                                        as=\"a\"\n                                        color=\"black\"\n                                        onClick={addUserInformation}\n                                        size=\"small\"\n                                        style={{marginTop: 35}}\n                                    >\n                                        <Icon name=\"plus\"/> Add\n                                    </LabelSui>\n                                </div>\n                            </div>\n                            }\n                            {/*added kit user */}\n                            {userInformationList.length > 0 ? (\n                                <div class=\"row\">\n                                    <List className=\"mb-5\">\n                                        <Table striped responsive>\n                                            <thead style={{\n                                                backgroundColor: \"#014D88\",\n                                                color: \"white\",\n                                                fontSize: \"10px\"\n                                            }}>\n                                            <tr>\n                                                <th>Client Code</th>\n                                                <th>HIV Self Test Type</th>\n                                                {/*<th>Ever used HIVST Kit</th>*/}\n                                                <th>User Category</th>\n                                                <th>Action</th>\n                                            </tr>\n                                            </thead>\n                                            <tbody>\n                                            {userInformationList.map((item, index) => (\n                                                <tr key={index}>\n                                                    <td>{item.basicUserInfo.clientCode}</td>\n                                                    <td>{item.basicUserInfo.typeOfHivst}</td>\n                                                    {/*<th>{item.postTestAssessment.everUsedHivstKit}</th>*/}\n                                                    <td>{item.basicUserInfo.userCategory}</td>\n                                                    <td>\n                                                        <IconButton\n                                                            aria-label=\"delete\"\n                                                            size=\"small\"\n                                                            color=\"error\"\n                                                            onClick={() => removeUserInformation(index)}\n                                                        >\n                                                            <DeleteIcon fontSize=\"inherit\"/>\n                                                        </IconButton>\n                                                        <IconButton>\n                                                            <EditIcon fontSize=\"inherit\"/>\n                                                        </IconButton>\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                            </tbody>\n                                        </Table>\n                                    </List>\n                                </div>\n                            ) : \" \"}\n                            {/*{selectedUsers.length > 0 &&*/}\n                            { !isView &&\n                                <div className=\"row\">\n                                    <div className=\"form-group mb-3 col-md-6\">\n                                        <Button\n                                            content=\"update\"\n                                            icon=\"save\"\n                                            labelPosition=\"right\"\n                                            style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\n                                            onClick={handleSubmit}\n                                            // disabled={saving}\n                                            disabled={userInformationList.length === 0}\n                                        />\n                                    </div>\n                                </div>\n                            }\n\n                        </div>\n\n                    </form>\n                </CardBody>\n            </Card>\n\n            <Modal\n                show={open}\n                toggle={toggle}\n                className=\"fade\"\n                size=\"sm\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Notification!\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h4>Are you Sure of the Age entered?</h4>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        onClick={toggle}\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    >\n                        Yes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\nexport default ViewEditHivst;","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/api.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HTSList.js",["441","442"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport axios from \"axios\";\n\nimport { token as token, url as baseUrl } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { MdDashboard } from \"react-icons/md\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\n//import moment from \"moment\";\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst HTSList = (props) => {\n  //const [patientList, setPatientList] = useState([])\n  //const [loading, setLoading] = useState(false)\n  const [showPPI, setShowPPI] = useState(true);\n  //const baseUrl2 = \"http://localhost:8282/api/v2/\"\n  useEffect(() => {\n    //patients()\n  }, []);\n\n  const handleCheckBox = (e) => {\n    if (e.target.checked) {\n      setShowPPI(false);\n    } else {\n      setShowPPI(true);\n    }\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Find HTS Patient \"\n        columns={[\n          // { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Patient Name\",\n            field: \"name\",\n            hidden: showPPI,\n          },\n          // { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n          { title: \"Client Code\", field: \"clientCode\", filtering: false },\n          { title: \"Sex\", field: \"gender\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\n          { title: \"HTS Count\", field: \"count\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        data={(query) =>\n          new Promise((resolve, reject) =>\n            axios\n              .get(\n                `${baseUrl}hts/only/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\n                { headers: { Authorization: `Bearer ${token}` } }\n              )\n              .then((response) => response)\n              .then((result) => {\n\n                resolve({\n                  data:\n                    result?.data?.records &&\n                    result?.data?.records\n                      .filter((client) => {\n                        return client.clientCode !== null;\n                      })\n                      .map((row) => ({\n                        //name:   row.hivPositive && row.hivPositive===true ? ( <><sup><b style={{color:\"red\"}}><Icon name='circle' size=\"small\"/></b></sup> { \" \" + row.personResponseDto.firstName + \" \" + row.personResponseDto.surname} </>) :row.personResponseDto.firstName + \" \" + row.personResponseDto.surname,\n                        name: row.firstName + \" \" + row.surname,\n                        // hospital_number: row.hospitalNumber,\n                        clientCode: row.clientCode,\n                        gender: row.gender,\n                        age: row.age,\n                        count: (\n                          <Label color=\"blue\" size=\"mini\">\n                            {row.htsCount}\n                          </Label>\n                        ),\n                        actions: (\n                          <div>\n                            {row.htsCount >= 0 && (\n                              <>\n                                <Link\n                                  to={{\n                                    pathname: \"/patient-history\",\n                                    state: {\n                                      patientObject: row,\n                                      patientObj: row,\n                                      clientCode: row.clientCode,\n                                    },\n                                  }}\n                                >\n                                  <ButtonGroup\n                                    variant=\"contained\"\n                                    aria-label=\"split button\"\n                                    style={{\n                                      backgroundColor: \"rgb(153, 46, 98)\",\n                                      height: \"30px\",\n                                      width: \"215px\",\n                                    }}\n                                    size=\"large\"\n                                  >\n                                    <Button\n                                      color=\"primary\"\n                                      size=\"small\"\n                                      aria-label=\"select merge strategy\"\n                                      aria-haspopup=\"menu\"\n                                      style={{\n                                        backgroundColor: \"rgb(153, 46, 98)\",\n                                      }}\n                                    >\n                                      <MdDashboard />\n                                    </Button>\n                                    <Button\n                                      style={{\n                                        backgroundColor: \"rgb(153, 46, 98)\",\n                                      }}\n                                    >\n                                      <span\n                                        style={{\n                                          fontSize: \"12px\",\n                                          color: \"#fff\",\n                                          fontWeight: \"bolder\",\n                                        }}\n                                      >\n                                        Patient Dashboard\n                                      </span>\n                                    </Button>\n                                  </ButtonGroup>\n                                </Link>\n                              </>\n                            )}\n                          </div>\n                        ),\n                      })),\n                  page: query.page,\n                  totalCount: result.data.totalRecords,\n                });\n                //setLoading(false)\n              })\n          )\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        components={{\n          Toolbar: (props) => (\n            <div>\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  name=\"showPP!\"\n                  id=\"showPP\"\n                  value=\"showPP\"\n                  checked={showPPI === true ? false : true}\n                  onChange={handleCheckBox}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                />\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\n                    SHOW PII\n                  </b>\n                </label>\n              </div>\n              <MTableToolbar {...props} />\n            </div>\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nexport default HTSList;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientList.js",["443","444"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport axios from \"axios\";\n\nimport { token as token, url as baseUrl } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { MdDashboard } from \"react-icons/md\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from \"semantic-ui-react\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\n//import moment from \"moment\";\n\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst Patients = (props) => {\n  //const [patientList, setPatientList] = useState([])\n  //const [loading, setLoading] = useState(false)\n  const [showPPI, setShowPPI] = useState(true);\n  //const baseUrl2 = \"http://localhost:8282/api/v2/\"\n  useEffect(() => {\n    //patients()\n  }, []);\n\n  const handleCheckBox = (e) => {\n    if (e.target.checked) {\n      setShowPPI(false);\n    } else {\n      setShowPPI(true);\n    }\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Find Patient \"\n        columns={[\n          // { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Patient Name\",\n            field: \"name\",\n            hidden: showPPI,\n\n          },\n          // { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n          { title: \"Patient ID\", field: \"clientCode\", filtering: false },\n          { title: \"\", field: \"\", filtering: false },\n\n          { title: \"Sex\", field: \"gender\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\n          { title: \"HTS Count\", field: \"count\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        data={(query) =>\n          new Promise((resolve, reject) =>\n            axios\n              .get(\n                `${baseUrl}hts/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\n                { headers: { Authorization: `Bearer ${token}` } }\n              )\n              .then((response) => response)\n              .then((result) => {\n                resolve({\n                  data: result.data.records\n                    .filter((a) => {\n                      return a.personId !== null;\n                    })\n                    .map((row) => ({\n                      name: row.firstName + \" \" + row.surname,\n                      // hospital_number: row.hospitalNumber,\n\n                      clientCode: row.hospitalNumber,\n                      gender: row.gender,\n                      age: row.age,\n                      count: (\n                        <Label color=\"blue\" size=\"mini\">\n                          {0}\n                        </Label>\n                      ),\n                      actions: (\n                        <div>\n                          {row.htsCount >= 0 && (\n                            <>\n                              <Link\n                                to={{\n                                  pathname: \"/patient-history\",\n                                  state: {\n                                    patientObject: row,\n                                    patientObj: row,\n                                    clientCode: row.clientCode,\n                                  },\n                                }}\n                              >\n                                <ButtonGroup\n                                  variant=\"contained\"\n                                  aria-label=\"split button\"\n                                  style={{\n                                    backgroundColor: \"rgb(153, 46, 98)\",\n                                    height: \"30px\",\n                                    width: \"215px\",\n                                  }}\n                                  size=\"large\"\n                                >\n                                  <Button\n                                    color=\"primary\"\n                                    size=\"small\"\n                                    aria-label=\"select merge strategy\"\n                                    aria-haspopup=\"menu\"\n                                    style={{\n                                      backgroundColor: \"rgb(153, 46, 98)\",\n                                    }}\n                                  >\n                                    <MdDashboard />\n                                  </Button>\n                                  <Button\n                                    style={{\n                                      backgroundColor: \"rgb(153, 46, 98)\",\n                                    }}\n                                  >\n                                    <span\n                                      style={{\n                                        fontSize: \"12px\",\n                                        color: \"#fff\",\n                                        fontWeight: \"bolder\",\n                                      }}\n                                    >\n                                      Patient Dashboard\n                                    </span>\n                                  </Button>\n                                </ButtonGroup>\n                              </Link>\n                            </>\n                          )}\n                        </div>\n                      ),\n                    })),\n                  page: query.page,\n                  totalCount: result.data.totalRecords,\n                });\n                //setLoading(false)\n              })\n          )\n        }\n        options={{\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n        components={{\n          Toolbar: (props) => (\n            <div>\n              <div className=\"form-check custom-checkbox  float-left mt-4 ml-3 \">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  name=\"showPP!\"\n                  id=\"showPP\"\n                  value=\"showPP\"\n                  checked={showPPI === true ? false : true}\n                  onChange={handleCheckBox}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                />\n                <label className=\"form-check-label\" htmlFor=\"basic_checkbox_1\">\n                  <b style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\n                    SHOW PII\n                  </b>\n                </label>\n              </div>\n              <MTableToolbar {...props} />\n            </div>\n          ),\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Patients;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/PatientHtsEnrollment.js",["445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { Card, CardBody } from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useLocation } from \"react-router-dom\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { getCheckModality } from \"../../../utility\";\n//import {TiArrowBack} from 'react-icons/ti'\n//import {token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Icon, Menu, Sticky } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport BasicInfo from \"./NewRegistrationEnrollement/BasicInfo\";\nimport PreTest from \"./NewRegistrationEnrollement/PreTest\";\nimport HivTestResult from \"./NewRegistrationEnrollement/HivTestResult\";\nimport IndexingContactTracing from \"./NewRegistrationEnrollement/Elicitation/Index\";\nimport Others from \"./NewRegistrationEnrollement/Others\";\nimport PostTest from \"./NewRegistrationEnrollement/PostTest\";\nimport RecencyTesting from \"./NewRegistrationEnrollement/RecencyTesting\";\nimport RiskStratification from \"./NewRegistrationEnrollement/RiskStratification\";\n// import FamilyIndexTesting from \"./NewRegistrationEnrollement/familyIndexTesting\";\n// import PartnerNotificationService from \"./NewRegistrationEnrollement/partnerNotificationService\";\nimport PnsForm from \"./NewRegistration/PartnerNotificationServices/PnsForm\";\nimport PNSHistory from \"./NewRegistration/PartnerNotificationServices/PNSHistory\";\nimport ViewPNSForm from \"./NewRegistration/PartnerNotificationServices/ViewPnsForm\";\nimport ViewFamilyIndexTestingForm from \"./NewRegistration/PartnerNotificationServices/ViewFamilyIndexForm\";\nimport ViewClientReferral from \"./NewRegistrationEnrollement/ClientReferral/Referrall_view_update\";\nimport ClientReferralHistory from \"./NewRegistrationEnrollement/ClientReferral/ClientReferralHistory\";\nimport RefferralUnit from \"./NewRegistration/RefferalUnit\";\nimport FamilyIndexHistory from \"./NewRegistration/PartnerNotificationServices/FamilyIndexhIstory\";\nimport FamilyIndexTestingForm from \"./NewRegistration/FamilyIndexTestingForm\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../api\";\nimport { getPreviousForm, getCurentForm } from \"../../../utility\";\nimport { calculate_age } from \"../utils\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst UserRegistration = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const location = useLocation();\n\n  const locationState = location.state;\n  const [activeItem, setactiveItem] = useState(\"basic\");\n  const [completed, setCompleted] = useState([]);\n  const [hideOtherMenu, setHideOtherMenu] = useState(true);\n  const [patientObj, setPatientObj] = useState(props.activePage.activeObject);\n  const [extra, setExtra] = useState({\n    risk: \"\",\n    index: \"\",\n    pre: \"\",\n    post: \"\",\n    recency: \"\",\n    elicitation: \"\",\n    familyIndexTesting: \"\",\n    pns: \"\",\n  });\n  const [showBackButton, setShowBackButton] = useState(true);\n\n  const [modalityCheck, setModalityCheck] = useState(\"\");\n  const [permissions, setPermission] = useState(\n    JSON.parse(localStorage.getItem(\"stringifiedPermmision\"))\n  );\n  const [selectedRow, setSelectedRow] = useState({});\n\n  const [basicInfo, setBasicInfo] = useState({});\n  const [organizationInfo, setOrganizationInfo] = useState({});\n  const [row, setRow] = useState({});\n  const [action, setAction] = useState(\"\");\n  const [familyIndexList, setFamilyIndexList] = useState([]);\n  const handleItemClick = (activeItem) => {\n    setactiveItem(activeItem);\n    //setCompleted({...completed, ...completedMenu})\n  };\n\n  const handleAction = (activeItem) => {\n    setactiveItem(activeItem);\n    //setCompleted({...completed, ...completedMenu})\n  };\n\n  const LoadViewPage = (row, actionType) => {\n    props.setActivePage({\n      ...props.activePage,\n      activePage: \"home\",\n      activeObject: row,\n      actionType: actionType,\n    });\n  };\n\n  const getPrevForm=(e)=>{\n          if( activeItem === \"risk\"){\n            history.push(\"/\");\n\n          }else{\n            e.preventDefault()\n          let currentForm =   getCurentForm(activeItem)\n\n            let age = calculate_age(\n              basicInfo?.personResponseDto?.dateOfBirth\n                ? basicInfo?.personResponseDto?.dateOfBirth\n                : patientObj?.personResponseDto?.dateOfBirth\n            );\n            let checkModality = patientObj?.riskStratificationResponseDto?.testingSetting? patientObj.riskStratificationResponseDto.testingSetting: \"\";\n            let isPMTCTModality =getCheckModality(checkModality)\n          \n\n\n\n            let hivStatus = patientObj?.hivTestResult;\n          let answer =  getPreviousForm(currentForm, age, isPMTCTModality, hivStatus); \n          if (answer[0]  && answer[1]) {\n            if(answer[0] === \"fit\"){\n              handleItemClick(\"fit-history\");\n\n            }else if(answer[0] === \"pns\"){\n\n              handleItemClick(\"pns-history\");\n\n            }else{\n              handleItemClick(answer[0]);\n\n            }\n          }else{\n          history.push(\"/\");\n\n          }\n}\n  } \n  useEffect(() => {\n    setModalityCheck(\n      getCheckModality(patientObj?.riskStratificationResponseDto?.testingSetting)\n    );\n  }, [patientObj]);\n  return (\n    <>\n      <ToastContainer autoClose={3000} hideProgressBar />\n\n      <Card>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h3>\n                HIV COUNSELLING AND TESTING -{\" \"}\n                {patientObj && patientObj.dateVisit ? patientObj.dateVisit : \"\"}\n                {showBackButton &&  <div>\n                    {/* <Link to={\"/\"}> */}\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className=\" float-end\"\n                      //startIcon={<FaUserPlus size=\"10\"/>}\n                      onClick={getPrevForm}\n                      style={{ backgroundColor: \"#014d88\" }}\n                    >\n                      <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                    </Button>\n                    {/* </Link> */}\n                  </div>}\n            \n              </h3>\n              <br />\n              <br />\n\n              <div className=\"col-md-3 col-sm-3 col-lg-3\">\n                <Menu\n                  size=\"large\"\n                  vertical\n                  style={{ backgroundColor: \"#014D88\" }}\n                >\n                  <Menu.Item\n                    name=\"inbox\"\n                    active={activeItem === \"risk\"}\n                    onClick={() => handleItemClick(\"risk\")}\n                    style={{\n                      backgroundColor: activeItem === \"risk\" ? \"#000\" : \"\",\n                    }}\n                  >\n                    <span style={{ color: \"#fff\" }}>\n                      {\" \"}\n                      Risk Stratification\n                      {completed.includes(\"risk\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item>\n                  <Menu.Item\n                    name=\"inbox\"\n                    active={activeItem === \"basic\"}\n                    onClick={() => handleItemClick(\"basic\")}\n                    style={{\n                      backgroundColor: activeItem === \"basic\" ? \"#000\" : \"\",\n                    }}\n                  >\n                    <span style={{ color: \"#fff\" }}>\n                      {\" \"}\n                      Basic Information\n                      {completed.includes(\"basic\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item>\n\n                  {props.patientAge >= 15 && modalityCheck == \"fill\" && (\n                    <Menu.Item\n                      name=\"spam\"\n                      active={activeItem === \"pre-test-counsel\"}\n                      onClick={() => handleItemClick(\"pre-test-counsel\")}\n                      style={{\n                        backgroundColor:\n                          activeItem === \"pre-test-counsel\" ? \"#000\" : \"\",\n                      }}\n                      //disabled={activeItem !== 'pre-test-counsel' ? true : false}\n                    >\n                      {/* <Label>2</Label> */}\n                      <span style={{ color: \"#fff\" }}>\n                        Pre Test Counseling\n                        {completed.includes(\"pre-test-counsel\") && (\n                          <Icon name=\"check\" color=\"green\" />\n                        )}\n                      </span>\n                    </Menu.Item>\n                  )}\n                  {permissions.includes(\"Request_and_Result_Form\") && (\n                    <Menu.Item\n                      name=\"inbox\"\n                      active={activeItem === \"hiv-test\"}\n                      onClick={() => handleItemClick(\"hiv-test\")}\n                      style={{\n                        backgroundColor:\n                          activeItem === \"hiv-test\" ? \"#000\" : \"\",\n                      }}\n                      //disabled={activeItem !== 'hiv-test' ? true : false}\n                    >\n                      <span style={{ color: \"#fff\" }}>\n                        Request {\"&\"} Result Form\n                        {completed.includes(\"hiv-test\") && (\n                          <Icon name=\"check\" color=\"green\" />\n                        )}\n                      </span>\n                      {/* <Label color='teal'>3</Label> */}\n                    </Menu.Item>\n                  )}\n                  <Menu.Item\n                    name=\"spam\"\n                    active={activeItem === \"post-test\"}\n                    onClick={() => handleItemClick(\"post-test\")}\n                    style={{\n                      backgroundColor: activeItem === \"post-test\" ? \"#000\" : \"\",\n                    }}\n                    //disabled={activeItem !== 'post-test' ? true : false}\n                  >\n                    {/* <Label>4</Label> */}\n                    <span style={{ color: \"#fff\" }}>\n                      Post Test Counseling\n                      {completed.includes(\"post-test\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item>\n\n                  {patientObj.hivTestResult &&\n                    patientObj.hivTestResult.toLowerCase() === \"positive\" &&\n                    patientObj.riskStratificationResponseDto?.age >= 15 && (\n                      <Menu.Item\n                        name=\"spam\"\n                        active={activeItem === \"recency-testing\"}\n                        onClick={() => handleItemClick(\"recency-testing\")}\n                        style={{\n                          backgroundColor:\n                            activeItem === \"recency-testing\" ? \"#000\" : \"\",\n                        }}\n                        //disabled={activeItem !== 'recency-testing' ? true : false}\n                      >\n                        {/* <Label>4</Label> */}\n                        <span style={{ color: \"#fff\" }}>\n                          HIV Recency Testing\n                          {completed.includes(\"recency-testing\") && (\n                            <Icon name=\"check\" color=\"green\" />\n                          )}\n                        </span>\n                      </Menu.Item>\n                    )}\n                  {/* \n                  <Menu.Item\n                    name=\"spam\"\n                    active={activeItem === \"indexing\"}\n                    onClick={() => handleItemClick(\"indexing\")}\n                    style={{\n                      backgroundColor: activeItem === \"indexing\" ? \"#000\" : \"\",\n                    }}\n                  > */}\n                  {/* <Label>4</Label> */}\n                  {/* <span style={{ color: \"#fff\" }}>\n                      Index Notification Services - Elicitation\n                      {completed.includes(\"indexing\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item> */}\n\n                  {/* <Menu.Item\n                    name=\"inbox\"\n                    active={activeItem === \"pns-history\"}\n                    onClick={() => handleItemClick(\"pns-history\")}\n                    style={{\n                      backgroundColor:\n                        activeItem === \"pns-history\" ? \"#000\" : \"\",\n                    }}\n                  >\n                    <span style={{ color: \"#fff\" }}>\n                      {\" \"}\n                      Partner Notification Services\n                      {completed.includes(\"pns\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item> */}\n                  {/* Family Index Testing form */}\n                  {/* {patientObj.hivTestResult && patientObj.hivTestResult.toLowerCase() ===\n                    \"positive\" &&  <Menu.Item\n                    name=\"inbox\"\n                    active={activeItem === \"fit-history\"}\n                    onClick={() => handleItemClick(\"fit-history\")}\n                    style={{\n                      backgroundColor:\n                        activeItem === \"fit-history\" ? \"#000\" : \"\",\n                    }}\n                  >\n                    <span style={{ color: \"#fff\" }}>\n                      {\" \"}\n                      Family Index Testing form\n                      {completed.includes(\"fit\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item>}  */}\n\n                  {permissions.includes(\"Nigeria_PNS_Form\") &&\n                    patientObj.hivTestResult &&\n                    patientObj.hivTestResult.toLowerCase() === \"positive\" && (\n                      <Menu.Item\n                        name=\"inbox\"\n                        active={activeItem === \"fit-history\"}\n                        onClick={() => handleItemClick(\"fit-history\")}\n                        style={{\n                          backgroundColor:\n                            activeItem === \"fit-history\" ? \"#000\" : \"\",\n                        }}\n                      >\n                        <span style={{ color: \"#fff\" }}>\n                          {\" \"}\n                          Family Index Testing form\n                          {completed.includes(\"fit\") && (\n                            <Icon name=\"check\" color=\"green\" />\n                          )}\n                        </span>\n                      </Menu.Item>\n                    )}\n\n                  {patientObj.hivTestResult &&\n                    patientObj.hivTestResult.toLowerCase() === \"positive\" && (\n                      <Menu.Item\n                        name=\"inbox\"\n                        active={activeItem === \"pns-history\"}\n                        onClick={() => handleItemClick(\"pns-history\")}\n                        style={{\n                          backgroundColor:\n                            activeItem === \"pns-history\" ? \"#000\" : \"\",\n                        }}\n                      >\n                        <span style={{ color: \"#fff\" }}>\n                          {\" \"}\n                          Partner Notification Services\n                          {completed.includes(\"pns\") && (\n                            <Icon name=\"check\" color=\"green\" />\n                          )}\n                        </span>\n                      </Menu.Item>\n                    )}\n                  {permissions.includes(\"Referral_Form\") && (\n                    <Menu.Item\n                      name=\"inbox\"\n                      active={activeItem === \"refferal-history\"}\n                      onClick={() => handleItemClick(\"refferal-history\")}\n                      style={{\n                        backgroundColor:\n                          activeItem === \"refferal-history\" ? \"#000\" : \"\",\n                      }}\n                    >\n                      <span style={{ color: \"#fff\" }}>\n                        {\" \"}\n                        Client Referral Service\n                        {completed.includes(\"refferal\") && (\n                          <Icon name=\"check\" color=\"green\" />\n                        )}\n                      </span>\n                    </Menu.Item>\n                  )}\n                </Menu>\n              </div>\n\n              <div\n                className=\"col-md-9 col-sm-9 col-lg-9 \"\n                style={{\n                  backgroundColor: \"#fff\",\n                  margingLeft: \"-50px\",\n                  paddingLeft: \"-20px\",\n                }}\n              >\n                {activeItem === \"risk\" && (\n                  <RiskStratification\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setHideOtherMenu={setHideOtherMenu}\n                    setExtra={setExtra}\n                    extra={extra}\n                    activePage={props.activePage}\n                    patientObject={locationState.patientObject}\n\n                    setActivePage={props.setActivePage}\n                    patientAge={props.patientAge}\n                    setOrganizationInfo={setOrganizationInfo}\n                  />\n                )}\n                {activeItem === \"basic\" && (\n                  <BasicInfo\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    patientAge={props.patientAge}\n                    setBasicInfo={setBasicInfo}\n                  />\n                )}\n                {activeItem === \"pre-test-counsel\" && (\n                  <PreTest\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"hiv-test\" && (\n                  <HivTestResult\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"post-test\" && (\n                  <PostTest\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"indexing\" && (\n                  <IndexingContactTracing\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"recency-testing\" && (\n                  <RecencyTesting\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"others\" && (\n                  <Others\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                  />\n                )}\n                {activeItem === \"pns-history\" && (\n                  <PNSHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    setRow={setRow}\n                  />\n                )}\n\n                {activeItem === \"pns\" && (\n                  <PnsForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    history={true}\n                  />\n                )}\n\n                {activeItem === \"view-pns\" && (\n                  <ViewPNSForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    row={row}\n                  />\n                )}\n\n                {activeItem === \"view-fit\" && (\n                  <ViewFamilyIndexTestingForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    action={action}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    row={row}\n                    setRow={setRow}\n                    selectedRow={selectedRow}\n                  />\n                )}\n\n                {activeItem === \"fit-history\" && (\n                  <FamilyIndexHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    selectedRow={selectedRow}\n                    setSelectedRow={setSelectedRow}\n                    // row={row}\n                    setAction={setAction}\n                  />\n                )}\n\n                {activeItem === \"fit\" && (\n                  <FamilyIndexTestingForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    history={true}\n                  />\n                )}\n                {activeItem === \"view-referral\" && (\n                  <ViewClientReferral\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    row={row}\n                  />\n                )}\n                {activeItem === \"refferal-history\" && (\n                  <ClientReferralHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    setRow={setRow}\n                    status={\"existing\"}\n\n                  />\n                )}\n                {activeItem === \"client-referral\" && (\n                  <RefferralUnit\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj}\n                    patientObj={patientObj}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                  />\n                )}\n              </div>\n            </div>{\" \"}\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/CheckedInPatients.js",["461","462","463","464","465","466","467","468","469","470","471","472","473","474"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../api\";\nimport { calculate_age } from \"../../components/utils\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Link } from \"react-router-dom\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { Card, CardBody } from \"reactstrap\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport { TiArrowForward } from \"react-icons/ti\";\nimport { MdDashboard } from \"react-icons/md\";\nimport { Menu, MenuList, MenuButton, MenuItem } from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst CheckedInPatients = (props) => {\n  const permissions = localStorage.getItem(\"permissions\")?.split(\",\");\n  const [patientList, setPatientList] = useState([]);\n\n  const getServiceCode = () => {\n    axios\n      .get(`${baseUrl}opd-setting`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        let data = response.data;\n        let htsCode = data.find(\n          (item) => item.moduleServiceName.toUpperCase() === \"HTS\"\n        )?.moduleServiceCode;\n        if (htsCode !== null || htsCode !== null) {\n          patients(htsCode);\n        }\n      })\n      .catch((error) => {});\n  };\n\n  useEffect(() => {\n    getServiceCode();\n  }, []);\n  ///GET LIST OF Patients\n  async function patients(htsCode) {\n    axios\n      .get(`${baseUrl}patient/checked-in-by-service/${htsCode}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n\n        setPatientList(response.data.reverse());\n      })\n      .catch((error) => {});\n  }\n\n  const getHospitalNumber = (identifier) => {\n    const identifiers = identifier;\n    const hospitalNumber = identifiers.identifier.find(\n      (obj) => obj.type == \"HospitalNumber\"\n    );\n    return hospitalNumber ? hospitalNumber.value : \"\";\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Checked In Patients \"\n        columns={[\n          // { title: \" ID\", field: \"Id\" },\n          {\n            title: \"Patient Name\",\n            field: \"name\",\n          },\n          {\n            title: \"Hospital Number\",\n            field: \"hospital_number\",\n            filtering: false,\n          },\n          { title: \"Sex\", field: \"gender\", filtering: false },\n          { title: \"Age\", field: \"age\", filtering: false },\n          //   { title: \"ART Status\", field: \"status\", filtering: false },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        data={patientList.map((row) => ({\n          name: row.fullname,\n          hospital_number: row.hospitalNumber,\n          gender: row.sex,\n          age:\n            row.dateOfBirth === 0 ||\n            row.dateOfBirth === undefined ||\n            row.dateOfBirth === null ||\n            row.dateOfBirth === \"\"\n              ? 0\n              : calculate_age(row.dateOfBirth),\n\n          actions: (\n            <div>\n              <>\n                <Link\n                  to={{\n                    pathname: \"/patient-history\",\n                    state: {\n                      patientObject: row,\n                      patientObj: row,\n                      clientCode: row?.clientCode,\n                      activepage: \"NEW HTS\",\n                      checkedInPatient: true\n                    },\n                  }}\n                >\n                  <ButtonGroup\n                    variant=\"contained\"\n                    aria-label=\"split button\"\n                    style={{\n                      backgroundColor: \"rgb(153, 46, 98)\",\n                      height: \"30px\",\n                      width: \"215px\",\n                    }}\n                    size=\"large\"\n                  >\n                    <Button\n                      color=\"primary\"\n                      size=\"small\"\n                      aria-label=\"select merge strategy\"\n                      aria-haspopup=\"menu\"\n                      style={{\n                        backgroundColor: \"rgb(153, 46, 98)\",\n                      }}\n                    >\n                      <TiArrowForward />\n                    </Button>\n                    <Button\n                      style={{\n                        backgroundColor: \"rgb(153, 46, 98)\",\n                      }}\n                    >\n                      <span\n                        style={{\n                          fontSize: \"12px\",\n                          color: \"#fff\",\n                          fontWeight: \"bolder\",\n                        }}\n                      >\n                        Enroll Patient\n                      </span>\n                    </Button>\n                  </ButtonGroup>\n                </Link>\n              </>\n            </div>\n          ),\n        }))}\n        options={{\n          search: true,\n          headerStyle: {\n            backgroundColor: \"#014d88\",\n            color: \"#fff\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default CheckedInPatients;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HTSML.js",["475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../api\";\n\n\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\nimport { error } from \"highcharts\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst HTSml = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  let temp = { ...errors };\n\n// New payload \nconst [payload, setPayload] = useState({\n    IsclientHIVscreeningfirsttime: \"\",\n    clientPreviousRiskScore: \"\",\n    clientpreviouslytested: \"\",\n    primaryBasisforDecisionToTest: \"\",\n    // \n    clientTestedmainReason: \"\",\n    clientNotTestedmainReason: \"\",\n    MLRiskScoreCausereassessClient: \"\",\n    MlModelPrediction: \"\",\n    MlRiskScoreContributeToDecision: \"\",\n    agreeWithMLModelRiskScore: \"\",\n    confidentUsingMlRiskAssessment: \"\",\n    \n\n});\n\nconst validate = () => {\n\n  payload.IsclientHIVscreeningfirsttime  === \"Yes\" &&   (temp.clientPreviousRiskScore = payload.clientPreviousRiskScore\n    ? \"\"\n    : \"This field is required.\");\n\n    payload.IsclientHIVscreeningfirsttime  === \"Yes\" &&   (temp.clientpreviouslytested = payload.clientpreviouslytested\n    ? \"\"\n    : \"This field is required.\");\n\n  setErrors({ ...temp });\n  return Object.values(temp).every((x) => x == \"\");\n};\n\n\n\nconst handlePayload=(e)=>{\n  setErrors({ ...temp, [e.target.name]: \"\" });\n\n    e.preventDefault();\n    setPayload({\n      ...payload,\n      [e.target.name]: e.target.value,\n    });\n    if(e.target.name === \"IsclientHIVscreeningfirsttime\"){\n      setErrors({ ...temp, clientPreviousRiskScore: \"\", clientpreviouslytested: \"\" });\n\n\n    }\n\n  \n}\n\n\n// \n\n\n\n\n\n\n\n  const handleSubmit = (e) => {\n   e.preventDefault();\n\n  };\n  \n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>HTS ML FEEDBACK QUESTIONS</h2>\n          <br />\n       <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\n              </LabelRibbon>\n          <form>\n   <div className=\"row mt-5\"> \n   <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"IsclientHIVscreeningfirsttime? \">Is this client undergoing HIV screening for the first time?  </Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"IsclientHIVscreeningfirsttime\"\n                      name=\"IsclientHIVscreeningfirsttime\"\n                      onChange={handlePayload}\n                      value={payload?.IsclientHIVscreeningfirsttime}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n     \n                    </select>\n                  </FormGroup>\n                </div>\n\n{payload?.IsclientHIVscreeningfirsttime  === \"Yes\" &&\n        <> \n         <div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"clientPreviousRiskScore ? \">What was the previous risk score for this client  </Label>\n        <select\n          className=\"form-control\"\n          id=\"clientPreviousRiskScore\"\n          name=\"clientPreviousRiskScore\"\n          onChange={handlePayload}\n          value={payload?.clientPreviousRiskScore}\n        >\n          <option value=\"\">Select</option>\n          <option value=\"High\">High</option>\n          <option value=\"Low\">Low</option>\n\n        </select>\n        {errors.clientPreviousRiskScore !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.clientPreviousRiskScore}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n      </FormGroup>\n    </div>\n    <div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"clientpreviouslytested\">Was the client previously tested at the last encounter?</Label>\n        <select\n          className=\"form-control\"\n          id=\"clientpreviouslytested\"\n          name=\"clientpreviouslytested\"\n          onChange={handlePayload}\n          value={payload?.clientpreviouslytested}\n        >\n          <option value=\"\">Select</option>\n          <option value=\"Yes\">Yes</option>\n          <option value=\"No\">No</option>\n\n        </select>\n        {errors.clientpreviouslytested !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.clientpreviouslytested}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n\n      </FormGroup>\n    </div>\n\n    \n</>\n}\n\n    \n<div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"primaryBasisforDecisionToTest \">What was the primary basis for your decision to test or not test this client? </Label>\n        <select\n          className=\"form-control\"\n          id=\"primaryBasisforDecisionToTest\"\n          name=\"primaryBasisforDecisionToTest\"\n          onChange={handlePayload}\n          value={payload?.primaryBasisforDecisionToTest}\n        >\n\n\n          <option value=\"\">Select</option>\n          <option value=\"ML risk score\">\tML risk score</option>\n          <option value=\"Clinical judgment\">Clinical judgment</option>\n          <option value=\"Client history\">Client history</option>\n          <option value=\"External factors\">External factors</option>\n\n        </select>\n      </FormGroup>\n    </div>\n    <div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"clientTestedmainReason \">Was the client tested despite a low-risk score, what was the main reason?   </Label>\n        <select\n          className=\"form-control\"\n          id=\" clientTestedmainReason?\"\n          name=\"clientTestedmainReason\"\n          onChange={handlePayload}\n          value={payload?.clientTestedmainReason}\n        >\n\n\n\n          <option value=\"\">Select</option>\n          <option value=\"Clinical symptom\">Clinical symptoms</option>\n          <option value=\"Client’s request\">Client’s request</option>\n          <option value=\"High exposure risk\">High exposure risk</option>\n          <option value=\"Others – Free text to specifys\">Others – Free text to specifys</option>\n\n        </select>\n      </FormGroup>\n    </div>  \n\n\n        <div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"clientNotTestedmainReason \">Was the client NOT- Tested despite a high-risk score, what was the main reason?   </Label>\n        <select\n          className=\"form-control\"\n          id=\"clientNotTestedmainReason?\"\n          name=\"clientNotTestedmainReason\"\n          onChange={handlePayload}\n          value={payload?.clientNotTestedmainReason}\n        >\n\n\n          <option value=\"\">Select</option>\n          <option value=\"Lack of trust in the ML score\">Lack of trust in the ML score</option>\n          <option value=\"Lack of symptoms\">Lack of symptoms</option>\n          <option value=\"Client refusal\">Client refusal</option>\n          <option value=\"Health-care provider’s decision – free text to specify\">\tHealth-care provider’s decision – free text to specify</option>\n          <option value=\"Other priorities – free text to specify\">Other priorities – free text to specify</option>\n\n        </select>\n      </FormGroup>\n    </div>  \n\n\n    \n        <div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"MLRiskScoreCausereassessClient \"> Did the ML risk score cause you to reassess any initial impressions about this client?\n\t\n </Label>\n        <select\n          className=\"form-control\"\n          id=\"MLRiskScoreCausereassessClient?\"\n          name=\"MLRiskScoreCausereassessClient\"\n          onChange={handlePayload}\n          value={payload?.MLRiskScoreCausereassessClient}\n        >\n\n\n          <option value=\"\">Select</option>\n          <option value=\"Yes, significantly\">Yes, significantly</option>\n          <option value=\"Yes, slightly\">Yes, slightly</option>\n          <option value=\"No change\">No change</option>\n          <option value=\"Caused doubt\">\tCaused doubt</option>\n\n        </select>\n      </FormGroup>\n    </div>  \n      \n\n        \n        <div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"MlModelPrediction \">After the test result, how would you rate the ML model’s prediction?\n\t\n </Label>\n        <select\n          className=\"form-control\"\n          id=\"MlModelPrediction?\"\n          name=\"MlModelPrediction\"\n          onChange={handlePayload}\n          value={payload?.MlModelPrediction}\n        >\n\n\n          <option value=\"\">Select</option>\n          <option value=\"Highly accurate\">Highly accurate</option>\n          <option value=\"Mostly accurate\">Mostly accurate </option>\n          <option value=\"Somewhat accurate\">Somewhat accurate</option>\n          <option value=\"Inaccurate\">\tInaccurate</option>\n\n        </select>\n      </FormGroup>\n    </div>  \n\n\n\n    <div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"MlRiskScoreContributeToDecision \">For this client, did the ML model’s risk score contribute to a more informed testing decision?\n\t\n </Label>\n        <select\n          className=\"form-control\"\n          id=\"MlRiskScoreContributeToDecision?\"\n          name=\"MlRiskScoreContributeToDecision\"\n          onChange={handlePayload}\n          value={payload?.MlRiskScoreContributeToDecision}\n        >\n\n\n          <option value=\"\">Select</option>\n          <option value=\"Yes, significantly\">Yes, significantly</option>\n          <option value=\"Yes, slightly \">Yes, slightly </option>\n          <option value=\"\tNo change\">\tNo change</option>\n          <option value=\"\tCaused doubt\">\t\tCaused doubt</option>\n\n        </select>\n      </FormGroup>\n    </div> \n \n\n\n<div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"agreeWithMLModelRiskScore\">Based on your clinical judgment, did you agree with the ML model’s risk score for this client?\n\t\n </Label>\n        <select\n          className=\"form-control\"\n          id=\"agreeWithMLModelRiskScore?\"\n          name=\"agreeWithMLModelRiskScore\"\n          onChange={handlePayload}\n          value={payload?.agreeWithMLModelRiskScore}\n        >\n\n\n          <option value=\"\">Select</option>\n          <option value=\"\tYes\">Yes </option>\n          <option value=\"No\">No </option>\n          <option value=\"Somewhat\">Somewhat</option>\n\n        </select>\n      </FormGroup>\n    </div> \n\n<div className=\"form-group col-md-4\">\n      <FormGroup>\n        <Label for=\"confidentUsingMlRiskAssessment\">How confident are you in using the AI/ML risk assessment for this patient? \n\t\n </Label>\n        <select\n          className=\"form-control\"\n          id=\"confidentUsingMlRiskAssessment?\"\n          name=\"confidentUsingMlRiskAssessment\"\n          onChange={handlePayload}\n          value={payload?.confidentUsingMlRiskAssessment}\n        >\n\n\n          <option value=\"\">Select</option>\n          <option value=\"Very confident\">Very confident</option>\n          <option value=\"Somewhat confident\">Somewhat confident</option>\n          <option value=\"Not confident\">Not confident</option>\n          <option value=\"\tNot confident\">Not confident</option>\n\n        </select>\n      </FormGroup>\n    </div> \n     {/*  */}\n            <br />\n\n            <div className=\"row\">\n              <div className=\"form-group mb-3 col-md-6 mt-5\">\n                <Button\n                  content=\"Done\"\n                  type=\"Done\"\n                  icon=\"right arrowe\"\n                  labelPosition=\"right\"\n                  style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                  onClick={() => {\n                    history.push(\"/\");\n                  }}\n                  disabled={saving}\n                />\n                <Button\n                  content=\"Save\"\n                  type=\"submit\"\n                  icon=\"right arrow\"\n                  labelPosition=\"right\"\n                  style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                />\n              </div>\n            </div>\n   </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default HTSml;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/History/PatientHistory.js",["491","492","493","494","495","496","497","498","499"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\n//import { makeStyles } from \"@material-ui/core/styles\";\nimport { Row, Col, Card, Tab, Tabs } from \"react-bootstrap\";\nimport History from \"./History\";\nimport ContineousRegistrationTesting from \"./../Patient/ContineousRegistrationTesting\";\n//import CheckedInPatients from './Patient/CheckedInPatients'\nimport * as moment from \"moment\";\nimport ExistenceClientHIVSTRegistration from \"../Patient/HIVST/ExistenceClientHIVSTRegistration\";\nimport HIVSTPatientHistory from \"../Patient/HIVST/HIVSTPatientHistory\";\nimport { getCheckModalityForHTS } from \"../../../utility\";\n\nconst divStyle = {\n  borderRadius: \"2px\",\n  fontSize: 14,\n};\n\n\n\nconst Home = (props) => {\n\n  // State definitions\n  const [patientList, setPatientList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newHTSType, setNewHTSType] = useState(\"NEW HTS\");\n  const [LMP, setLMP] = useState(\"\");\n\n  const patientId =\n    props.patientObj && props.patientObj.personId\n      ? props.patientObj.personId\n      : props.patientObj.id\n      ? props.patientObj.id\n        : \"\";\n  \n  console.log(\"patientId\", patientId);\n\n  const [key, setKey] = useState(\n    props.activePage === \"NEW HTS\" ? \"new\" : \"home\"\n  );\n\n  const [lastHts, setLastHTS] = useState({});\n  const [patientInfo, setPatientInfo] = useState(null);\n  const [permissions, setPermission] = useState(\n    JSON.parse(localStorage.getItem(\"stringifiedPermmision\"))\n  );\n  const [lastVisitCount, setLastVisitCount] = useState(null);\n  const [checkModality, setCheckModality] = useState(\"\");\n  const [lastVistAndModality, setLastVistAndModality] = useState(false);\n  const [lastVisitModalityAndCheckedIn, setLastVisitModalityAndCheckedIn] = useState(false);\n\n\n\n  const calculateLastVisitDate = (visitDate) => {\n    if (!visitDate) return 0;\n    \n    const monthDifference = moment(\n      new Date(moment(new Date()).format(\"YYYY-MM-DD\"))\n    ).diff(new Date(visitDate), \"months\", true);\n    \n  \n    \n    return monthDifference;\n  };\n\n\n  // Main function to determine retesting status\n  const determineRetestingStatus = async (lastRecord) => {\n\n    let htsType = \"NEW HTS\";\n\n   \n    let hivResult = lastRecord?.hivTestResult || lastRecord?.hivTestResult2;\n\n\n    if (lastRecord?.id && hivResult && hivResult.toLowerCase() === \"negative\") {\n     \n      \n      try {\n     \n        const response = await axios.get(\n          `${baseUrl}hts/get-anc-lmp?personUuid=${props.patientObj.personUuid}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n        \n        // If LMP data exists, calculate retesting date range\n        if (response.data.result) {\n          let lmpDate = moment(response.data.result);\n          let retestingRangeDate = moment(lmpDate).add(40 + 52, \"weeks\");\n          let today = moment();\n\n          // If today is within the retesting range (today is before the end date)\n          if (retestingRangeDate.diff(today, \"days\") > 0) {\n            htsType = \"RETESTING\";\n          } \n        } \n        // Set LMP data\n        setLMP(response.data);\n      } catch (error) {\n        console.error(\"Error fetching ANC LMP data:\", error);\n      }\n    } else {\n      setLastVisitModalityAndCheckedIn(true)\n      console.log(\n        \"Patient either has no record, no HIV result, or result isn't negative. Keeping type as NEW HTS\"\n      );\n    }\n\n    setNewHTSType(htsType);\n\n    return htsType;\n  };\n\n  useEffect(() => {\n    patients();\n    patientsCurrentHts();\n    \n    if (props.activePage.activePage === \"home\") {\n      setKey(\"home\");\n    }\n    if (props.activePage.activePage === \"NEW HTS\") {\n      setKey(\"new\");\n    }\n  }, [props.patientObj, props.activePage]);\n\n  // Get list of patients\n  async function patients() {\n    setLoading(true);\n    \n    try {\n      const response = await axios.get(\n        `${baseUrl}hts/persons/${patientId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n      setPatientList(response.data.htsClientDtoList);\n    } catch (error) {\n      console.error(\"Error fetching patient list:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n\n  async function patientsCurrentHts() {\n\n    setLoading(true);\n    \n    try {\n      const response = await axios.get(\n        `${baseUrl}hts/persons/${patientId}/current-hts`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      );\n\n      // \n      // Set patient info\n      setPatientInfo(response.data);\n      \n      // Calculate visit metrics\n      const visitCount = Math.round(calculateLastVisitDate(response.data.dateVisit));\n      setLastVisitCount(visitCount);\n      \n      \n      // Check modality\n      const modality = getCheckModalityForHTS(\n        response.data.riskStratificationResponseDto?.testingSetting\n      );\n      setCheckModality(modality);\n\n\n      // Calculate condition for showing tabs\n      const condition =\n        visitCount >= 3 || modality === \"show\"\n          ? true\n          : false;\n      \n \n      setLastVistAndModality(condition);\n      \n      const finalCondition = condition || props.checkedInPatient;\n        setLastVisitModalityAndCheckedIn(finalCondition);\n\n      await determineRetestingStatus(response.data);\n      \n      setLastHTS(response.data);\n      \n    } catch (error) {\n      console.error(\"Error fetching current HTS:\", error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n\n\n  return (\n    <Fragment>\n      <br />\n      <Row>\n        <Col xl={12}>\n          <Card style={divStyle}>\n            <Card.Body>\n              {/* <!-- Nav tabs --> */}\n              <div className=\"custom-tab-1\">\n                <Tabs\n                  id=\"controlled-tab-example\"\n                  activeKey={key}\n                  onSelect={(k) => {\n                    setKey(k);\n                  }}\n                  className=\"mb-3\"\n                >\n                  <Tab eventKey=\"home\" title=\"HTS HISTORY\">\n                    <History\n                      patientObj={props.patientObj}\n                      setPatientObj={props.setPatientObj}\n                      activePage={props.activePage}\n                      setActivePage={props.setActivePage}\n                      clientCode={props.clientCode}\n                      patientAge={props.patientAge}\n                      patients={patients}\n                      patientList={patientList}\n                      loading={loading}\n                    />\n                  </Tab>\n                  \n\n                  {lastVisitModalityAndCheckedIn && (\n                    <Tab \n                      eventKey=\"new\" \n                      title={newHTSType}\n                       tabClassName={newHTSType === \"RETESTING\" ? \"retesting-tab\" : \"\"}\n                    >\n                      <ContineousRegistrationTesting\n                        patientObj={patientInfo}\n                        activePage={props.activePage}\n                        setActivePage={props.setActivePage}\n                        patientInfo={props.patientInfo}\n                        clientCode={props.clientCode}\n                        patientAge={props.patientAge}\n                        patients={patients}\n                        patientList={patientList}\n                        checkedInPatient={props.checkedInPatient}\n                        personInfo={props.personInfo}\n                        newHTSType={newHTSType}\n                      />\n                    </Tab>\n                  )}\n                  \n                  <Tab eventKey=\"hivst-history\" title=\"HIVST HISTORY\">\n                    <HIVSTPatientHistory\n                      patientObj={props.patientObj}\n                      setPatientObj={props.setPatientObj}\n                      activePage={props.activePage}\n                      setActivePage={props.setActivePage}\n                      clientCode={props.clientCode}\n                      patientAge={props.patientAge}\n                      patients={patients}\n                      patientList={patientList}\n                      loading={loading}\n                    />\n                  </Tab>\n                  \n                  <Tab eventKey=\"new-hivst\" title=\"NEW HIVST\">\n                    <ExistenceClientHIVSTRegistration\n                      patientObj={props.patientObj}\n                      activePage={props.activePage}\n                      setActivePage={props.setActivePage}\n                      clientCode={props.clientCode}\n                      patientAge={props.patientAge}\n                      patients={patients}\n                    />\n                  </Tab>\n                </Tabs>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Others.js",["500","501","502","503","504","505","506","507","508","509"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport Button from \"@material-ui/core/Button\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport * as moment from 'moment';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\n// import {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\n\nconst BasicInfo = (props) => {\n    const classes = useStyles();\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n               \n                <h3 >OTHERS - (Resquest {\"& \"} Result Form)</h3>\n               <hr/>\n                <br/>\n                    <form >\n                        <div className=\"row\">\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>Syphilis Testing</h5>\n                        </LabelRibbon>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Syphilis test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"syphilisTestResult\"\n                                        id=\"syphilisTestResult\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Reactive</option>\n                                        <option value=\"No\">Non-Reactive</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <hr/>\n                            <br/>\n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\n                            <h5 style={{color:'#fff'}}>Hepatitis B Testing</h5>\n                            </LabelRibbon>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Hepatitis B virus test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hepatitisBTestResult\"\n                                        id=\"hepatitisBTestResult\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Positive</option>\n                                        <option value=\"No\">Negative</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Hepatitis C virus test result *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hepatitisCTestResult\"\n                                        id=\"hepatitisCTestResult\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                       <option value={\"\"}></option>\n                                        <option value=\"Yes\">Positive</option>\n                                        <option value=\"No\">Negative</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>HIV Request and Result form filled with CT Intake Form *</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"hivRequestResultCT\"\n                                        id=\"hivRequestResultCT\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Completed By</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"completedBy\"\n                                    id=\"completedBy\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Longitude</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"longitude\"\n                                    id=\"longitude\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Latitude</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"latitude\"\n                                    id=\"latitude\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\">Adhoc Code</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"adhocCode\"\n                                    id=\"adhocCode\"\n                                    // value={objValues.lastViralLoad}\n                                    // onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                   \n                                />\n                                \n                                </FormGroup>\n                            </div>\n                                                      \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-6\">\n                            <MatButton\n                            type=\"button\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.button}\n                            startIcon={<SaveIcon />}\n                            onClick={()=>handleItemClick('basic','others')}\n                            style={{backgroundColor:\"#014d88\"}}\n                            //disabled={objValues.dateOfEac1===\"\" ? true : false}\n                            >\n                            {!saving ? (\n                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                            ) : (\n                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                            )}\n                            </MatButton>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default BasicInfo","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RefferalForm.js",["510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport ServicesProvided from \"./ServicesProvided\";\nimport RefferralUnit from \"./RefferalUnit\";\nimport Cookies from \"js-cookie\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst ClientRefferalForm = (props) => {\n  const classes = useStyles();\n  const [content, setContent] = useState({\n    showReferringUnit: false,\n    showServiceProviderUnit: false,\n  });\n  const patientObj = props.patientObj;\n  const [kP, setKP] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = {...errors};\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [genders, setGenders] = useState([]);\n  const [targetGroupValue, setTargetGroupValue] = useState(null);\n\n\n  const [contentDropDown, setContentDropDown] = useState(\"\");\n  // const [formInfo, setFormInfo] = useState({\n  //   dateVisit: \"\",\n  //   firstName: props?.patientObj?.personResponseDto?.firstName,\n  //   middleName:  props?.patientObj?.personResponseDto?.otherName,\n  //   lastName:  props?.patientObj?.personResponseDto?.surname,\n  //   hospitalNumber:props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\n  //   countryId: \"1\",\n  //   stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\n  //   province: Number(props?.patientObj?.personResponseDto?.address?.address[0]?.district) ,\n  //   address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\n  //   landmark: \"\",\n  //   phoneNumber:  props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]?.value,\n  //   sexId:  props?.patientObj?.personResponseDto?.gender?.id,\n  //   dob: props?.patientObj.personResponseDto?.dateOfBirth,\n  //   age:  \"\",\n  //   dateOfBirth:props?.patientObj.personResponseDto?.dateOfBirth,\n  //   hivStatus:props?.patientObj?.hivTestResult2 ? props?.patientObj?.hivTestResult2 :\n  //       props?.patientObj?.hivTestResult ? props?.patientObj?.hivTestResult : \"\",\n  //   referredFromFacility: \"\",\n  //   nameOfPersonReferringClient: \"\",\n  //   nameOfReferringFacility: Cookies.get(\"facilityName\"),\n  //   addressOfReferringFacility: \"\",\n  //   phoneNoOfReferringFacility: \"\",\n  //   referredTo: \"\",\n  //   nameOfContactPerson: \"\",\n  //   nameOfReceivingFacility: \"\",\n  //   addressOfReceivingFacility: \"\",\n  //   phoneNoOfReceivingFacility: \"\",\n  //   isDateOfBirthEstimated: false,\n  //   serviceNeeded: \"\",\n  //   comments: \"\",\n  //   receivingStateFacility: \"\",\n  //   receivingLgaFacility: \"\",\n  //   htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n  //   htsClientUuid:props && props.patientObj ? props.patientObj?.uuid : \"\"\n  // });\n  // const viewReferralInfo = () => {\n  //   axios\n  //       .get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\n  //         headers: { Authorization: `Bearer ${token}` },\n  //       })\n  //       .then((response) => {\n  //         // setObjValues(response.data);\n  //         console.log(\" form information\", response.data);\n  //         // setFormInfo(response.data);\n  //         // setReceivingOrganization(response.data.receivingOrganization);\n  //       })\n  //       .catch((error) => {\n  //         //console.log(error);\n  //       });\n  // };\n  // useEffect(() => {\n  //   viewReferralInfo();\n  // }, []);\n\n  const handleContentChange = (e) => {\n    setContentDropDown(e.target.value);\n    if (e.target.value === \"showReferringUnit\") {\n      setContent({\n        showReferringUnit: true,\n        showServiceProviderUnit: false,\n      });\n    }\n\n    if (e.target.value === \"showServiceProviderUnit\") {\n      setContent({\n        showReferringUnit: false,\n        showServiceProviderUnit: true,\n      });\n    }\n  };\n\n  return (\n      <>\n        <div>\n          <div className=\"form-group  col-md-8\">\n            <FormGroup>\n              <Label>\n                Referral Type <span style={{ color: \"red\" }}> *</span>\n              </Label>\n              <select\n                  className=\"form-control\"\n                  name=\"contentDropDown\"\n                  id=\"contentDropDown\"\n                  onChange={handleContentChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n              >\n                <option value={\"\"}>Select Refarral form type</option>\n                <option value={\"showReferringUnit\"}>Referral form</option>\n                <option value={\"showServiceProviderUnit\"}>\n                  Service Provider form\n                </option>\n              </select>\n            </FormGroup>\n          </div>\n        </div>\n        <Card className={classes.root}>\n          {content.showReferringUnit\n              && <RefferralUnit\n                  patientObj={patientObj}\n                  // formInfo={formInfo}\n                  // row={props.row}\n                  handleClicked={props.handleClicked}\n              />}\n          {content.showServiceProviderUnit && (\n              <CardBody>\n                <ServicesProvided\n                    patientObj = {patientObj}\n                    // formInfo={props.formInfo}\n                    // row={props.row}\n                />\n              </CardBody>\n          )}\n          {/* recieving facility  */}\n        </Card>\n        <Modal\n            show={open}\n            toggle={toggle}\n            className=\"fade\"\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n          <Modal.Header>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              Notification!\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <h4>Are you Sure of the Age entered?</h4>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n                onClick={toggle}\n                style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n            >\n              Yes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n  );\n};\n\n\nexport default ClientRefferalForm;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PostTest.js",["546","547","548","549","550","551","552","553","554"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst PostTest = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [saving, setSaving] = useState(false);\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\n  );\n  const [nextForm, setNextForm] = useState([]);\n  ///const [errors, setErrors] = useState({});\n  const [objValues, setObjValues] = useState({\n    htsClientId: clientId,\n    postTestCounselingKnowledgeAssessment: {},\n    personId: patientID,\n  });\n  console.log(\"postTest\",props )\n  const [postTest, setPostTest] = useState({\n    hivTestResult: \"\",\n    hivTestBefore:\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\n        ?.lastHivTestDone !== \"Never\" &&\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\n        ?.whatWasTheResult === \"Positive\"\n        ? \"Previously tested positive in HIV care\"\n        : \"\",\n    hivRequestResult: \"\",\n    hivRequestResultCt: \"\",\n    clientReceivedHivTestResult: \"\",\n    postTestCounseling: \"\",\n    riskReduction: \"\",\n    postTestDisclosure: \"\",\n    bringPartnerHivtesting: \"\",\n    childrenHivtesting: \"\",\n    informationFp: \"\",\n    partnerFpThanCondom: \"\",\n    partnerFpUseCondom: \"\",\n    correctCondomUse: \"\",\n    condomProvidedToClient: \"\",\n    unprotectedSexRegularPartnerLastThreeMonth: \"\",\n    referredToServices: \"\",\n    condomProvidedToClientCount: \"\",\n    lubricantProvidedToClientCount: \"\",\n  });\n  useEffect(() => {\n    if (\n      props.patientObj &&\n      props.patientObj.postTestCounselingKnowledgeAssessment\n    ) {\n      setPostTest(props.patientObj.postTestCounselingKnowledgeAssessment);\n    } else {\n      ///setPostTest(props.patientObj && props.patientObj.postTestCounselingKnowledgeAssessment!==null ? props.patientObj.postTestCounselingKnowledgeAssessment : {})\n      if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult2 !== \"\" &&\n        props.patientObj.hivTestResult2 !== null &&\n        props.patientObj.hivTestResult2 === \"Positive\"\n      ) {\n        postTest.hivTestResult = \"true\";\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\n      } else if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult2 !== \"\" &&\n        props.patientObj.hivTestResult2 !== null &&\n        props.patientObj.hivTestResult2 === \"Negative\"\n      ) {\n        postTest.hivTestResult = \"false\";\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\n      } else if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult !== \"\" &&\n        props.patientObj.hivTestResult !== null &&\n        props.patientObj.hivTestResult === \"Positive\"\n      ) {\n        postTest.hivTestResult = \"true\";\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\n      } else if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult !== \"\" &&\n        props.patientObj.hivTestResult !== null &&\n        props.patientObj.hivTestResult === \"Negative\"\n      ) {\n        postTest.hivTestResult = \"false\";\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\n      }\n    }\n  }, [props.patientObj, postTest.hivTestResult]);\n  const handleInputChangePostTest = (e) => {\n    if (e.target.name === \"lubricantProvidedToClientCount\") {\n      if (e.target.value >= 0) {\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\n      }\n    } else if (e.target.name === \"condomProvidedToClientCount\") {\n      if (e.target.value >= 0) {\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\n      } else {\n        setPostTest({ ...postTest, [e.target.name]: 0 });\n      }\n    } else {\n      setPostTest({ ...postTest, [e.target.name]: e.target.value });\n    }\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSaving(true);\n     let latestForm = getNextForm(\n       \"Post_Test_Counseling\",\n       props?.patientObj?.riskStratificationResponseDto?.age,\n       '',\n       props?.patientObj?.hivTestResult\n     );\n\n    objValues.htsClientId = props.patientObj.id;\n    objValues.postTestCounselingKnowledgeAssessment = postTest;\n    objValues.personId = props.patientObj.personResponseDto.id;\n    axios\n      .put(\n        `${baseUrl}hts/${props.patientObj.id}/post-test-counseling`,\n        objValues,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setSaving(false);\n        props.setPatientObj(response.data);\n        toast.success(\"Post test  successful\");\n        \n      handleItemClick(latestForm[0], latestForm[1]);\n\n\n      })\n      .catch((error) => {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage);\n        } else {\n          toast.error(\"Something went wrong. Please try again...\");\n        }\n      });\n    // }else{\n    //     toast.error(\"All post test fields are required\")\n\n    // }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2>POST TEST COUNSELING</h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\n              </LabelRibbon>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>HIV test result </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivTestResult\"\n                    id=\"hivTestResult\"\n                    value={postTest.hivTestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={true}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Positive</option>\n                    <option value=\"false\">Negative</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Have you been tested for HIV before within this year?{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivTestBefore\"\n                    id=\"hivTestBefore\"\n                    value={postTest.hivTestBefore}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Not previously tested\">\n                      Not previously tested\n                    </option>\n                    <option value=\"Previously tested negative\">\n                      Previously tested negative\n                    </option>\n                    <option value=\"Previously tested positive in HIV care\">\n                      Previously tested positive in HIV care\n                    </option>\n                    <option value=\"Previously tested positive not in HIV care\">\n                      Previously tested positive not in HIV care\n                    </option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>HIV Request and Result form signed by tester </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivRequestResult\"\n                    id=\"hivRequestResult\"\n                    value={postTest.hivRequestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    HIV Request and Result form filled with CT Intake Form{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivRequestResultCt\"\n                    id=\"hivRequestResultCt\"\n                    value={postTest.hivRequestResultCt}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client received HIV test result </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"clientReceivedHivTestResult\"\n                    id=\"clientReceivedHivTestResult\"\n                    value={postTest.clientReceivedHivTestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Post test counseling done </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"postTestCounseling\"\n                    id=\"postTestCounseling\"\n                    value={postTest.postTestCounseling}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Risk reduction plan developed </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"riskReduction\"\n                    id=\"riskReduction\"\n                    value={postTest.riskReduction}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Post test disclosure plan developed </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"postTestDisclosure\"\n                    id=\"postTestDisclosure\"\n                    value={postTest.postTestDisclosure}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Will bring partner(s) for HIV testing </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"bringPartnerHivtesting\"\n                    id=\"bringPartnerHivtesting\"\n                    value={postTest.bringPartnerHivtesting}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Will bring own children {\"<5\"} years for HIV testing{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"childrenHivtesting\"\n                    id=\"childrenHivtesting\"\n                    value={postTest.childrenHivtesting}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Provided with information on FP and dual contraception{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"informationFp\"\n                    id=\"informationFp\"\n                    value={postTest.informationFp}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Client/Partner use FP methods (other than condom)\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"partnerFpThanCondom\"\n                    id=\"partnerFpThanCondom\"\n                    value={postTest.partnerFpThanCondom}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client/Partner use condoms as (one) FP method </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"partnerFpUseCondom\"\n                    id=\"partnerFpUseCondom\"\n                    value={postTest.partnerFpUseCondom}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Correct condom use demonstrated </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"correctCondomUse\"\n                    id=\"correctCondomUse\"\n                    value={postTest.correctCondomUse}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Condoms provided to client </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"condomProvidedToClient\"\n                    id=\"condomProvidedToClient\"\n                    value={postTest.condomProvidedToClient}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              {postTest.condomProvidedToClient !== null &&\n                postTest.condomProvidedToClient === \"true\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>How many condoms were provided to client </Label>\n                      <Input\n                        type=\"number\"\n                        name=\"condomProvidedToClientCount\"\n                        id=\"condomProvidedToClientCount\"\n                        value={postTest.condomProvidedToClientCount}\n                        onChange={handleInputChangePostTest}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Lubricant were provided to client </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"lubricantProvidedToClient\"\n                    id=\"lubricantProvidedToClient\"\n                    value={postTest.lubricantProvidedToClient}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              {postTest.lubricantProvidedToClient !== null &&\n                postTest.lubricantProvidedToClient === \"true\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>How many lubricant provided to client </Label>\n                      <Input\n                        type=\"number\"\n                        name=\"lubricantProvidedToClientCount\"\n                        id=\"lubricantProvidedToClientCount\"\n                        value={postTest.lubricantProvidedToClientCount}\n                        onChange={handleInputChangePostTest}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n              {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        id=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        value={postTest.unprotectedSexRegularPartnerLastThreeMonth}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n              {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular particular in the last 3 months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sex\"\n                                        id=\"sex\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client referred to other services </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"referredToServices\"\n                    id=\"referredToServices\"\n                    value={postTest.referredToServices}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <Message success>\n                <h4>\n                  If client tests HIV negative, and HIV Risk Assessment Score{\" \"}\n                  {\">0\"} or there is evidence for a STI syndrome, recommend\n                  re-testing after 3 months\n                </h4>\n              </Message>\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* <Button\n                    content=\"Back\"\n                    icon=\"left arrow\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={() => handleItemClick(\"hiv-test\", \"hiv-test\")}\n                  /> */}\n\n                  <Button\n                    content=\"Save & Continue\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default PostTest;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RiskStratification.js",["555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\n\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport Cookies from \"js-cookie\";\nimport {calculate_age, generateDobFromAge, validateVisitDateWithDOB} from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst BasicInfo = (props) => {\n\n  const classes = useStyles();\n \n  const [enrollSetting, setEnrollSetting] = useState([]);\n  const [entryPoint, setEntryPoint] = useState([]);\n  const [entryPointCommunity, setEntryPointCommunity] = useState([]);\n  const [entryPointSetting, setEntryPointSetting] = useState([]);\n\n  let riskCountQuestion = [];\n  const [kP, setKP] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [riskCount, setRiskCount] = useState(0);\n  const [isPMTCTModality, setIsPMTCTModality] = useState(false);\n  const [showRiskAssessment, setShowRiskAssessment] = useState(false);\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\n  );\n  const [spokeFacList, setSpokeFacList] = useState([]);\n  const [showHealthFacility, setShowHealthFacility] = useState(false);\n\n  const [nextForm, setNextForm] = useState([]);\n  const [targetGroupValue, setTargetGroupValue] = useState(null);\n\n  const [objValues, setObjValues] = useState({\n    age: \"\",\n    dob: \"\",\n    code: \"\",\n    visitDate: \"\",\n    dateOfBirth: null,\n    dateOfRegistration: null,\n    isDateOfBirthEstimated: \"\",\n    targetGroup: \"\",\n    testingSetting: \"\",\n    modality: \"\",\n    careProvider: \"\",\n    personId: \"\",\n    id: \"\",\n    riskAssessment: {},\n    entryPoint: \"\",\n    communityEntryPoint: \"\",\n    spokeFacility: \"\",\n    healthFacility: \"\",\n  });\n\n  const [riskAssessment, setRiskAssessment] = useState({\n    lastHivTestForceToHaveSex: \"\",\n    lastHivTestHadAnal: \"\",\n    lastHivTestInjectedDrugs: \"\",\n    whatWasTheResult: \"\",\n    lastHivTestDone: \"\",\n    diagnosedWithTb: \"\",\n    lastHivTestPainfulUrination: \"\",\n    lastHivTestBloodTransfusion: \"\",\n    lastHivTestVaginalOral: \"\",\n    lastHivTestBasedOnRequest: \"\",\n  });\n  useEffect(() => {\n    if (objValues.age !== \"\") {\n      props.setPatientObjAge(objValues.age);\n    }\n    if (props?.patientObj?.riskStratificationResponseDto !== null) {\n      if (\n        props?.activePage?.activeObject?.riskStratificationResponseDto\n          ?.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\"\n      ) {\n        HTS_ENTRY_POINT_COMMUNITY();\n      } else if (\n        props?.activePage?.activeObject?.riskStratificationResponseDto\n          ?.entryPoint === \"HTS_ENTRY_POINT_FACILITY\"\n      ) {\n        HTS_ENTRY_POINT_FACILITY();\n      }\n      setObjValues(props.patientObj.riskStratificationResponseDto);\n\n      setRiskAssessment(\n        props.patientObj.riskStratificationResponseDto.riskAssessment\n      );\n    }\n  }, [objValues.age]);\n\n  useEffect(() => {\n    KP();\n    TargetGroupSetup();\n    PregnancyStatus();\n    EntryPoint();\n  }, []);\n  //Get list of HIV STATUS ENROLLMENT\n  const EnrollmentSetting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        let pregnancyUsed = \"\";\n        if (response.data.length > 0) {\n          response.data.map((each, index) => {\n            if (each.code === \"PREGANACY_STATUS_PREGNANT\") {\n              pregnancyUsed = each.id;\n            }\n          });\n        }\n        localStorage.setItem(\"pregnancyCode\", pregnancyUsed);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const EntryPoint = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/HTS_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEntryPoint(response.data);\n        if (\n          props?.patientObj?.riskStratificationResponseDto?.entryPoint ===\n          \"HTS_ENTRY_POINT_COMMUNITY\"\n        ) {\n          HTS_ENTRY_POINT_COMMUNITY();\n        } else if (\n          props?.patientObj?.riskStratificationResponseDto?.entryPoint ===\n          \"HTS_ENTRY_POINT_FACILITY\"\n        ) {\n          HTS_ENTRY_POINT_FACILITY();\n        } else {\n          setEntryPointSetting([]);\n        }\n      })\n      .catch((error) => {});\n  };\n\n  const getSpokeFaclityByHubSite = () => {\n    let facility = Cookies.get(\"facilityName\");\n    axios\n      .get(`${baseUrl}hts/spoke-site?hubSite=${facility}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSpokeFacList(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        let facilityList = [];\n\n        setEntryPointSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(\n        `${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setEntryPointSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const TargetGroupSetup = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setTargetGroupValue(response.data);\n\n        props.setOrganizationInfo(response.data);\n      })\n      .catch((error) => {});\n  };\n  //Get list of KP\n  const KP = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setKP(response.data);\n      })\n      .catch((error) => {});\n  };\n\n\n\n  //Set HTS menu registration\n  const getMenuLogic = () => {\n    props.setHideOtherMenu(false);\n  };\n\n  const checkPMTCTModality = (setting) => {\n    if (\n      setting === \"FACILITY_HTS_TEST_SETTING_ANC\" ||\n      setting === \"FACILITY_HTS_TEST_SETTING_L&D\" ||\n      setting === \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\n    ) {\n      setErrors({\n        ...errors,\n        lastHivTestDone: \"\",\n        whatWasTheResult: \"\",\n        lastHivTestVaginalOral: \"\",\n        lastHivTestBloodTransfusion: \"\",\n        lastHivTestPainfulUrination: \"\",\n        diagnosedWithTb: \"\",\n        lastHivTestInjectedDrugs: \"\",\n        lastHivTestHadAnal: \"\",\n        lastHivTestForceToHaveSex: \"\",\n      });\n      setIsPMTCTModality(true);\n      return true;\n    } else {\n      setIsPMTCTModality(false);\n      return false;\n    }\n  };\n\n  const RESTRICTED_SETTINGS = [\n    \"FACILITY_HTS_TEST_SETTING_ANC\",\n    \"FACILITY_HTS_TEST_SETTING_L&D\",\n    \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\n  ];\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n\n    if (name === \"targetGroup\") {\n      const isRestrictedSetting =\n          objValues.testingSetting &&\n          RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n      if (value === \"TARGET_GROUP_MSM\" && isRestrictedSetting) {\n        toast.error(\n            \"MSM cannot be selected when ANC, L&D, or Postnatal Ward/Breastfeeding is chosen.\",\n            {\n              position: toast.POSITION.BOTTOM_CENTER,\n            }\n        );\n        return;\n      }\n    }\n\n    setErrors({ ...temp, [name]: \"\" });\n\n    if (name === \"testingSetting\" && value !== \"\") {\n      setErrors({ ...temp, spokeFacility: \"\", healthFacility: \"\" });\n\n      SettingModality(value);\n      setObjValues({ ...objValues, [name]: value });\n      let ans = checkPMTCTModality(value);\n\n      if (\n          value === \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\n          value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\n          value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\n          value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\"\n      ) {\n        setShowHealthFacility(true);\n      } else {\n        setShowHealthFacility(false);\n      }\n\n      displayRiskAssessment(\n          riskAssessment.lastHivTestBasedOnRequest,\n          objValues.age,\n          ans\n      );\n\n      // Get spoke sites\n      if (\n          value === \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" ||\n          value === \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\n          value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\n          value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\n          value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\"\n      ) {\n        getSpokeFaclityByHubSite();\n      }\n\n      // Set risk count\n      if (\n          value === \"COMMUNITY_HTS_TEST_SETTING_STANDALONE_HTS\" ||\n          value === \"FACILITY_HTS_TEST_SETTING_STANDALONE_HTS\"\n      ) {\n        setRiskCount(1);\n      } else if (\n          value === \"COMMUNITY_HTS_TEST_SETTING_CT\" ||\n          value === \"FACILITY_HTS_TEST_SETTING_CT\"\n      ) {\n        setRiskCount(1);\n      } else if (value === \"FACILITY_HTS_TEST_SETTING_TB\") {\n        setRiskCount(1);\n      } else if (value === \"FACILITY_HTS_TEST_SETTING_STI\") {\n        setRiskCount(1);\n      } else if (value === \"COMMUNITY_HTS_TEST_SETTING_OUTREACH\") {\n        setRiskCount(1);\n      } else {\n        setRiskCount(0);\n      }\n\n      return;\n    }\n\n    if (name === \"entryPoint\") {\n      if (value === \"HTS_ENTRY_POINT_COMMUNITY\") {\n        HTS_ENTRY_POINT_COMMUNITY();\n      } else if (value === \"HTS_ENTRY_POINT_FACILITY\") {\n        HTS_ENTRY_POINT_FACILITY();\n      } else {\n        setEntryPointSetting([]);\n      }\n    }\n\n    setObjValues({ ...objValues, [name]: value });\n  };\n\n\n  // display risk assement function\n\n  const displayRiskAssessment = (lastVisit, age, isPMTCTModalityValue) => {\n    let SecAge = age !== \"\" ? age : 0;\n    let ans;\n\n    // for the section to show\n\n    if (lastVisit === \"false\") {\n      if (SecAge < 15 || isPMTCTModalityValue) {\n        setShowRiskAssessment(false);\n        ans = false;\n\n        //\n        if (age !== \"\") {\n          setRiskAssessment({\n            ...riskAssessment,\n            lastHivTestForceToHaveSex: \"\",\n            lastHivTestHadAnal: \"\",\n            lastHivTestInjectedDrugs: \"\",\n            whatWasTheResult: \"\",\n            lastHivTestDone: \"\",\n            diagnosedWithTb: \"\",\n            lastHivTestPainfulUrination: \"\",\n            lastHivTestBloodTransfusion: \"\",\n            lastHivTestVaginalOral: \"\",\n          });\n        }\n      } else if (SecAge > 15) {\n        setShowRiskAssessment(true);\n        ans = true;\n      } else if (lastVisit === \"false\") {\n        setShowRiskAssessment(true);\n        ans = true;\n      } else {\n        setShowRiskAssessment(false);\n        ans = false;\n      }\n    } else {\n      setShowRiskAssessment(false);\n      ans = false;\n    }\n  };\n  //Date of Birth and Age handle\n\n\n const validateAgeRestriction = (formData) => {\n   // Check if we have a restricted target group with age > 14\n   if (\n     formData &&\n     (formData.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n       formData.targetGroup === \"TARGET_GROUP_PD\") &&\n     formData.age > 14\n   ) {\n     return false;\n   }\n   return true;\n };\n\nconst handleDobChange = (e) => {\n  const dobValue = e.target.value;\n\n  if (dobValue) {\n \n    const age_now = calculate_age(dobValue);\n\n    if (\n      (objValues.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n        objValues.targetGroup === \"TARGET_GROUP_PD\") &&\n      age_now > 14\n    ) {\n\n      setErrors({\n        ...errors,\n        age: \"For this target group, age cannot be greater than 14 years\",\n      });\n      return;\n    }\n\n\n    setErrors({\n      ...errors,\n      age: \"\",\n    });\n\n \n    setObjValues((prevState) => ({\n      ...prevState,\n      dob: dobValue,\n      age: age_now,\n    }));\n\n\n    displayRiskAssessment(\n      riskAssessment.lastHivTestBasedOnRequest,\n      age_now,\n      isPMTCTModality\n    );\n  } else {\n\n    setObjValues((prevState) => ({\n      ...prevState,\n      dob: \"\",\n      age: \"\",\n    }));\n  }\n};\n\nconst handleDateOfBirthChange = (e) => {\n  const dateType = e.target.value;\n  const isEstimated = dateType === \"Estimated\";\n\n  // Toggle age input disabled state - this is critical\n  setAgeDisabled(!isEstimated);\n\n  // Use setState with function to ensure we capture the latest state\n  setObjValues((prevState) => {\n    let updatedState = {\n      ...prevState,\n      isDateOfBirthEstimated: isEstimated,\n    };\n\n    // Check if current age exceeds limit for restricted groups\n    if (\n      (prevState.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n        prevState.targetGroup === \"TARGET_GROUP_PD\") &&\n      prevState.age > 14\n    ) {\n      // Clear age and DOB instead of adjusting\n      updatedState.age = \"\";\n      updatedState.dob = \"\";\n\n      // Set error in state instead of showing toast\n      setErrors({\n        ...errors,\n        age: \"The current age exceeds the limit of 14 for this target group\",\n      });\n    } else {\n      // Clear any existing age errors\n      setErrors({\n        ...errors,\n        age: \"\",\n      });\n    }\n\n    return updatedState;\n  });\n};\n\nconst handleAgeChange = (e) => {\n  let newAge = e.target.value === \"\" ? \"\" : parseInt(e.target.value);\n\n\n  if (newAge === \"\" || !isNaN(newAge)) {\n\n    setObjValues((prevState) => {\n      let updatedState = { ...prevState };\n\n\n      if (newAge !== \"\" && !isNaN(newAge)) {\n  \n        if (\n          (prevState.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n            prevState.targetGroup === \"TARGET_GROUP_PD\") &&\n          newAge > 14\n        ) {\n     \n          setErrors({\n            ...errors,\n            age: \"For this target group, age cannot be greater than 14 years\",\n          });\n\n\n          return {\n            ...prevState,\n            age: \"\",\n            dob: \"\",\n          };\n        }\n\n\n        setErrors({\n          ...errors,\n          age: \"\",\n        });\n\n\n        updatedState.age = newAge;\n\n        // If we're not using actual DOB (i.e., age is editable), update the DOB too\n        if (!ageDisabled) {\n          if (newAge >= 85) {\n            setTimeout(() => toggle(), 0);\n          }\n          updatedState.dob = generateDobFromAge(newAge);\n        }\n\n        \n        setTimeout(() => {\n          displayRiskAssessment(\n            riskAssessment.lastHivTestBasedOnRequest,\n            newAge,\n            isPMTCTModality\n          );\n        }, 0);\n      } else {\n        updatedState.age = \"\";\n      }\n\n      return updatedState;\n    });\n  }\n};\n\nconst handleTargetGroupChange = (e) => {\n  // Clear any errors\n  setErrors({ ...temp, [e.target.name]: \"\" });\n\n  // Get the new target group value\n  const newTargetGroup = e.target.value;\n\n  // First, let's get the current age\n  const currentAge = objValues.age;\n\n  // Update the target group immediately\n  // Important: Use a callback form of setState to ensure we're working with the latest state\n  setObjValues((prevState) => {\n    let updatedState = { ...prevState, targetGroup: newTargetGroup };\n\n    // If selecting a restricted group and age is over 14, clear the age and DOB\n    if (\n      (newTargetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n        newTargetGroup === \"TARGET_GROUP_PD\") &&\n      currentAge > 14\n    ) {\n      // Clear age and DOB instead of adjusting\n      updatedState.age = \"\";\n      updatedState.dob = \"\";\n\n      // Set error in state instead of showing toast\n      setErrors({\n        ...errors,\n        age: \"The current age exceeds the limit of 14 for this target group\",\n      });\n    } else if (newTargetGroup === \"\") {\n      // If target group is cleared, also clear age and DOB\n      updatedState.age = \"\";\n      updatedState.dob = \"\";\n    } else {\n      // For other target groups or valid age, keep existing values\n\n      // If age is not set but DOB is estimated, calculate a default DOB\n      // (maintaining your original logic for this case)\n      if (!updatedState.age && prevState.isDateOfBirthEstimated) {\n        const currentDate = new Date();\n        currentDate.setDate(15);\n        currentDate.setMonth(5);\n        const estDob = moment(currentDate.toISOString());\n        // Don't set a specific age since we want the user to enter it\n        updatedState.dob = moment(estDob).format(\"YYYY-MM-DD\");\n      }\n\n      // Clear any existing age errors if group changes to non-restricted\n      setErrors({\n        ...errors,\n        age: \"\",\n      });\n    }\n\n    return updatedState;\n  });\n};\n   const isAgeValid = validateAgeRestriction(objValues);\n  //Get list of DSD Model Type\n  function SettingModality(settingId) {\n    const setting = settingId;\n    axios\n      .get(`${baseUrl}application-codesets/v2/${setting}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n const validate = () => {\n   //HTS FORM VALIDATION\n   let temp = { ...errors };\n\n   temp.visitDate = objValues.visitDate ? \"\" : \"This field is required.\";\n   temp.entryPoint = objValues.entryPoint ? \"\" : \"This field is required.\";\n   temp.testingSetting = objValues.testingSetting\n     ? \"\"\n     : \"This field is required.\";\n\n   temp.dob = objValues.dob ? \"\" : \"This field is required.\";\n   temp.age = objValues.age ? \"\" : \"This field is required.\";\n\n   // Check age restriction only if target group and age are provided\n   if (\n     objValues.targetGroup &&\n     objValues.age &&\n     (objValues.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n       objValues.targetGroup === \"TARGET_GROUP_PD\") &&\n     objValues.age > 14\n   ) {\n     temp.age = \"For this target group, age cannot be greater than 14 years\";\n   }\n\n   temp.lastHivTestBasedOnRequest = riskAssessment.lastHivTestBasedOnRequest\n     ? \"\"\n     : \"This field is required.\";\n\n   objValues.age > 15 &&\n     (temp.targetGroup = objValues.targetGroup\n       ? \"\"\n       : \"This field is required.\");\n\n   // Remaining validation logic...\n   objValues.testingSetting ===\n     \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" &&\n     (temp.spokeFacility = objValues.spokeFacility\n       ? \"\"\n       : \"This field is required.\");\n\n   showHealthFacility &&\n     (temp.healthFacility = objValues.healthFacility\n       ? \"\"\n       : \"This field is required.\");\n\n   //Risk Assement section\n   if (\n     objValues.age > 15 &&\n     riskAssessment.lastHivTestBasedOnRequest === \"false\" &&\n     showRiskAssessment\n   ) {\n     temp.lastHivTestDone = riskAssessment.lastHivTestDone\n       ? \"\"\n       : \"This field is required.\";\n     riskAssessment.lastHivTestDone !== \"\" &&\n       riskAssessment.lastHivTestDone !== \"Never\" &&\n       (temp.whatWasTheResult = riskAssessment.whatWasTheResult\n         ? \"\"\n         : \"This field is required.\");\n\n     temp.lastHivTestVaginalOral = riskAssessment.lastHivTestVaginalOral\n       ? \"\"\n       : \"This field is required.\";\n\n     temp.lastHivTestBloodTransfusion =\n       riskAssessment.lastHivTestBloodTransfusion\n         ? \"\"\n         : \"This field is required.\";\n\n     temp.lastHivTestPainfulUrination =\n       riskAssessment.lastHivTestPainfulUrination\n         ? \"\"\n         : \"This field is required.\";\n\n     temp.diagnosedWithTb = riskAssessment.diagnosedWithTb\n       ? \"\"\n       : \"This field is required.\";\n\n     temp.lastHivTestInjectedDrugs = riskAssessment.lastHivTestInjectedDrugs\n       ? \"\"\n       : \"This field is required.\";\n\n     temp.lastHivTestHadAnal = riskAssessment.lastHivTestHadAnal\n       ? \"\"\n       : \"This field is required.\";\n\n     temp.lastHivTestForceToHaveSex = riskAssessment.lastHivTestForceToHaveSex\n       ? \"\"\n       : \"This field is required.\";\n   }\n\n   setErrors({ ...temp });\n   return Object.values(temp).every((x) => x == \"\");\n };\n\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  // Getting the number count of riskAssessment True\n  const actualRiskCountTrue = Object.values(riskAssessment);\n  riskCountQuestion = actualRiskCountTrue.filter((x) => x === \"true\");\n\n  const handleInputChangeRiskAssessment = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n\n    if (e.target.name === \"lastHivTestBasedOnRequest\") {\n      displayRiskAssessment(e.target.value, objValues.age, isPMTCTModality);\n      setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n    }\n  };\n\n  const handleInputChangeRiskAssessment2 = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Validate restricted setting + target group combo\n    const isRestrictedSetting =\n        objValues.testingSetting &&\n        RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n    const isMSMSelected =\n        objValues.targetGroup === \"TARGET_GROUP_MSM\";\n\n    if (isRestrictedSetting && isMSMSelected) {\n      toast.error(\n          \"MSM cannot be selected when ANC, L&D, or Postnatal Ward/Breastfeeding is chosen.\",\n          {\n            position: toast.POSITION.BOTTOM_CENTER,\n          }\n      );\n      return;\n    }\n\n    // validate date\n    const visitDateError = validateVisitDateWithDOB(objValues.dob, objValues.visitDate);\n\n    if (visitDateError) {\n      toast.error(visitDateError, {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n      return;\n    }\n    if (!validate()) {\n      // Check specifically if it's an age restriction error\n      if (\n        (objValues.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n          objValues.targetGroup === \"TARGET_GROUP_PD\") &&\n        objValues.age > 14\n      ) {\n        toast.dismiss();\n        toast.error(\n          \"Cannot save: For the selected target group, age must not exceed 14 years.\"\n        );\n      } else {\n        toast.error(\"Please correct the errors in the form\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n      }\n      return;\n    }\n\n    // get next form\n    let newModality = isPMTCTModality ? \"skip\" : \"fill\";\n\n    let latestForm = getNextForm(\n      \"Risk_Stratification\",\n      objValues.age,\n      newModality,\n      \"unknown\"\n    );\n\n\n\n    getMenuLogic(objValues);\n    props.patientObj.riskStratificationResponseDto = objValues;\n    props.patientObj.personResponseDto.dob = objValues.dob;\n    props.patientObj.personResponseDto.dateOfBirth = objValues.dob;\n    props.patientObj.personResponseDto.isDateOfBirthEstimated =\n      objValues.isDateOfBirthEstimated;\n    props.patientObj.targetGroup = objValues.targetGroup;\n    props.patientObj.testingSetting = objValues.testingSetting;\n    props.patientObj.modality = objValues.modality;\n    props.patientObj.dateVisit = objValues.visitDate;\n\n    //props.patientObj.riskAssessment =riskAssessment\n    objValues.riskAssessment = riskAssessment;\n\n    //Check if riskStratificationResponseDto is null or empty then call the update method\n    if (\n      props.patientObj.riskStratificationResponseDto &&\n      props.patientObj.riskStratificationResponseDto !== null &&\n      props.patientObj.riskStratificationResponseDto.id !== \"\"\n    ) {\n      if (validate()) {\n        setSaving(true);\n\n        props.setHideOtherMenu(false);\n        axios\n          .put(\n            `${baseUrl}risk-stratification/${props.patientObj.riskStratificationResponseDto.id}`,\n            objValues,\n            { headers: { Authorization: `Bearer ${token}` } }\n          )\n          .then((response) => {\n            setSaving(false);\n            props.patientObj.riskStratificationResponseDto = response.data;\n            objValues.code = response.data.code;\n            props.setExtra(objValues);\n            handleItemClick(latestForm[0], latestForm[1]);\n\n            toast.success(\"Risk stratification save succesfully!\");\n          })\n          .catch((error) => {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          });\n      }\n    } else {\n      //if riskStratificationResponseDto is null then make a new call to save the record\n      if (\n        (riskCount > 0 || riskCountQuestion.length > 0) &&\n        objValues.age > 15\n      ) {\n        if (validate()) {\n          setSaving(true);\n\n          props.setHideOtherMenu(false);\n          axios\n            .post(`${baseUrl}risk-stratification`, objValues, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setSaving(false);\n              props.patientObj.riskStratificationResponseDto = response.data;\n              objValues.code = response.data.code;\n              props.setExtra(objValues);\n\n              handleItemClick(latestForm[0], latestForm[1]);\n\n              toast.success(\"Risk stratification save succesfully!\");\n            })\n            .catch((error) => {\n              setSaving(false);\n              if (error.response && error.response.data) {\n                let errorMessage =\n                  error.response.data.apierror &&\n                  error.response.data.apierror.message !== \"\"\n                    ? error.response.data.apierror.message\n                    : \"Something went wrong, please try again\";\n                toast.error(errorMessage, {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              } else {\n                toast.error(\"Something went wrong. Please try again...\", {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              }\n            });\n        } else {\n          toast.error(\"All fields are required\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      } else if (objValues.age < 15) {\n        if (validate()) {\n          setSaving(true);\n          axios\n            .post(`${baseUrl}risk-stratification`, objValues, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setSaving(false);\n              props.patientObj.riskStratificationResponseDto = response.data;\n              objValues.code = response.data.code;\n              props.setExtra(objValues);\n              handleItemClick(latestForm[0], latestForm[1]);\n              //toast.success(\"Risk stratification save succesfully!\");\n            })\n            .catch((error) => {\n              setSaving(false);\n              if (error.response && error.response.data) {\n                let errorMessage =\n                  error.response.data.apierror &&\n                  error.response.data.apierror.message !== \"\"\n                    ? error.response.data.apierror.message\n                    : \"Something went wrong, please try again\";\n                toast.error(errorMessage, {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              } else {\n                toast.error(\"Something went wrong. Please try again...\", {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              }\n            });\n        } else {\n          toast.error(\"All fields are required\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      } else {\n        props.setHideOtherMenu(false);\n        props.setExtra(objValues);\n        if (validate()) {\n          setSaving(true);\n          axios\n            .post(`${baseUrl}risk-stratification`, objValues, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setSaving(false);\n              props.patientObj.riskStratificationResponseDto = response.data;\n              objValues.code = response.data.code;\n              props.setExtra(objValues);\n              toast.success(\"Risk stratification save succesfully!\");\n              handleItemClick(latestForm[0], latestForm[1]);\n            })\n            .catch((error) => {\n              setSaving(false);\n              if (error.response && error.response.data) {\n                let errorMessage =\n                  error.response.data.apierror &&\n                  error.response.data.apierror.message !== \"\"\n                    ? error.response.data.apierror.message\n                    : \"Something went wrong, please try again\";\n                toast.error(errorMessage, {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              } else {\n                toast.error(\"Something went wrong. Please try again...\", {\n                  position: toast.POSITION.BOTTOM_CENTER,\n                });\n              }\n            });\n        } else {\n          toast.error(\"All fields are required\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>RISK STRATIFICATION</h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Modality\n              </div>\n              <div className=\"row\">\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Entry Point <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"entryPoint\"\n                      id=\"entryPoint\"\n                      value={objValues.entryPoint}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {entryPoint.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.entryPoint !== \"\" ? (\n                      <span className={classes.error}>{errors.entryPoint}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Visit Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"visitDate\"\n                      id=\"visitDate\"\n                      value={objValues.visitDate}\n                      onChange={handleInputChange}\n                      min={\n                        props?.personInfo?.personResponseDto?.dateOfRegistration\n                      }\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                    />\n                    {errors.visitDate !== \"\" ? (\n                      <span className={classes.error}>{errors.visitDate}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Setting <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"testingSetting\"\n                      id=\"testingSetting\"\n                      value={objValues.testingSetting}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"} key={0}>\n                        {\" \"}\n                        Select\n                      </option>\n                      {entryPointSetting &&\n                        entryPointSetting.map((value) => (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.testingSetting !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.testingSetting}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/*  */}\n\n                {objValues.testingSetting ===\n                  \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Spoke Health Facility{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n\n                      {spokeFacList.length > 0 ? (\n                        <>\n                          {\" \"}\n                          <select\n                            className=\"form-control\"\n                            name=\"spokeFacility\"\n                            id=\"spokeFacility\"\n                            value={objValues.spokeFacility}\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                              textTransform: \"capitalize  !important\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {spokeFacList.map((value) => (\n                              <option key={value.id} value={value.spokeSite}>\n                                {value.spokeSite}\n                              </option>\n                            ))}\n                          </select>\n                        </>\n                      ) : (\n                        <Input\n                          type=\"text\"\n                          name=\"spokeFacility\"\n                          id=\"spokeFacility\"\n                          value={objValues.spokeFacility}\n                          //value={Math.floor(Math.random() * 1093328)}\n                          // onBlur={checkClientCode}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      )}\n                      {errors.spokeFacility !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.spokeFacility}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n                {showHealthFacility && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Health Facility <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      {spokeFacList.length > 0 ? (\n                        <select\n                          className=\"form-control\"\n                          name=\"healthFacility\"\n                          id=\"healthFacility\"\n                          value={objValues.healthFacility}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                            textTransform: \"capitalize  !important\",\n                          }}\n                        >\n                          <option value={\"\"}>Select</option>\n                          {spokeFacList.map((value) => (\n                            <option key={value.id} value={value.spokeSite}>\n                              {value.spokeSite}\n                            </option>\n                          ))}\n                        </select>\n                      ) : (\n                        <Input\n                          type=\"text\"\n                          name=\"healthFacility\"\n                          id=\"healthFacility\"\n                          value={objValues.healthFacility}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      )}\n                      {errors.healthFacility !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.healthFacility}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n              </div>\n              <br />\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Target Group <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"targetGroup\"\n                    id=\"targetGroup\"\n                    onChange={handleInputChange}\n                    value={objValues.targetGroup}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    {kP\n                      .filter((value) => {\n                        if (\n                          props.patientAge > 14 &&\n                          (value.id === 961 || value.id === 475)\n                        ) {\n                          return false;\n                        }\n                        return true;\n\n                        // Check if MSM should be hidden\n                        const isRestrictedSetting =\n                            objValues.testingSetting &&\n                            RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n                        if (isRestrictedSetting && value.code === \"TARGET_GROUP_MSM\") {\n                          return false;\n                        }\n\n                        return true;\n                      })\n\n                      .map((value) => {\n                        return (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        );\n                      })}\n                  </select>\n                  {errors.targetGroup !== \"\" ? (\n                    <span className={classes.error}>{errors.targetGroup}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-2 col-md-2\">\n                <FormGroup>\n                  <Label>\n                    Date Of Birth <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Actual\"\n                        name=\"dateOfBirth\"\n                        defaultChecked\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />{\" \"}\n                      Actual\n                    </label>\n                  </div>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Estimated\"\n                        name=\"dateOfBirth\"\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />{\" \"}\n                      Estimated\n                    </label>\n                  </div>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-3\">\n                <FormGroup>\n                  <Label>\n                    Date <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"dob\"\n                    id=\"dob\"\n                    min=\"1929-12-31\"\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    value={objValues.dob}\n                    onChange={handleDobChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  />\n                  {errors.dob !== \"\" ? (\n                    <span className={classes.error}>{errors.dob}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-3\">\n                <FormGroup>\n                  <Label>\n                    Age <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <input\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"age\"\n                    id=\"age\"\n                    value={objValues.age}\n                    disabled={ageDisabled}\n                    onChange={handleAgeChange}\n                    // Add max attribute based on target group\n                    max={\n                      objValues.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n                      objValues.targetGroup === \"TARGET_GROUP_PD\"\n                        ? 14\n                        : undefined\n                    }\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  />\n                  {errors.age !== \"\" ? (\n                    <span className={classes.error}>{errors.age}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Is this HIV test based on a Clinician/Doctor/Health Care\n                    Provider's request ?{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"lastHivTestBasedOnRequest\"\n                    id=\"lastHivTestBasedOnRequest\"\n                    value={riskAssessment.lastHivTestBasedOnRequest}\n                    onChange={handleInputChangeRiskAssessment}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.lastHivTestBasedOnRequest !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.lastHivTestBasedOnRequest}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <br />\n\n              {showRiskAssessment && (\n                <>\n                  <div\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                    style={{\n                      backgroundColor: \"#992E62\",\n                      width: \"125%\",\n                      height: \"35px\",\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    HIV Risk Assessment (Last 3 months)\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        When was your last HIV test done?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestDone\"\n                        id=\"lastHivTestDone\"\n                        value={riskAssessment.lastHivTestDone}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"<1\"> {\"< 1\"} month</option>\n                        <option value=\"1-3 Months\">1-3 Months</option>\n                        <option value=\"4-6 Months\">4-6 Months</option>\n                        <option value=\">6 Months\"> {\">6\"} Months</option>\n                        <option value=\"Never\">Never</option>\n                      </select>\n                      {errors.lastHivTestDone !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestDone}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {riskAssessment.lastHivTestDone !== \"\" &&\n                    riskAssessment.lastHivTestDone !== \"Never\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            What was the result?{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"whatWasTheResult\"\n                            id=\"whatWasTheResult\"\n                            value={riskAssessment.whatWasTheResult}\n                            onChange={handleInputChangeRiskAssessment2}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"Positive\">Positive</option>\n                            <option value=\"Negative\">Negative</option>\n                          </select>\n                          {errors.whatWasTheResult !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.whatWasTheResult}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had anal or vaginal\n                        or oral sex without a condom with someone who was HIV\n                        positive or unaware of their HIV status?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestVaginalOral\"\n                        id=\"lastHivTestVaginalOral\"\n                        value={riskAssessment.lastHivTestVaginalOral}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestVaginalOral !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestVaginalOral}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had a blood or blood\n                        product transfusion?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestBloodTransfusion\"\n                        id=\"lastHivTestBloodTransfusion\"\n                        value={riskAssessment.lastHivTestBloodTransfusion}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestBloodTransfusion !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestBloodTransfusion}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you experienced painful\n                        urination, lower abdominal pain, vaginal or penile\n                        discharge, pain during sexual intercourse, thick,\n                        cloudy, or foul smelling discharge and/or small bumps or\n                        blisters near the mouth, penis, vagina, or anal areas?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestPainfulUrination\"\n                        id=\"lastHivTestPainfulUrination\"\n                        value={riskAssessment.lastHivTestPainfulUrination}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestPainfulUrination !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestPainfulUrination}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you been diagnosed with TB or currently have any of\n                        the following symptoms : cough, fever, weight loss,\n                        night sweats? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"diagnosedWithTb\"\n                        id=\"diagnosedWithTb\"\n                        value={riskAssessment.diagnosedWithTb}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.diagnosedWithTb !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.diagnosedWithTb}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you ever injected drugs,\n                        shared needles or other sharp objects with someone known\n                        to be HIV positive or who you didn’t know their HIV\n                        status? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestInjectedDrugs\"\n                        value={riskAssessment.lastHivTestInjectedDrugs}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestInjectedDrugs !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestInjectedDrugs}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had anal, oral or\n                        vaginal sex in exchange for money or other benefits?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestHadAnal\"\n                        id=\"lastHivTestHadAnal\"\n                        value={riskAssessment.lastHivTestHadAnal}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestHadAnal !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestHadAnal}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you been forced to have\n                        sex? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestForceToHaveSex\"\n                        value={riskAssessment.lastHivTestForceToHaveSex}\n                        onChange={handleInputChangeRiskAssessment2}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestForceToHaveSex !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestForceToHaveSex}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <br />\n                </>\n              )}\n              <br />\n              <Message warning>\n                <h4> Risk assessment score </h4>\n                <b>\n                  Score :\n                  {riskCount +\n                    (objValues.age > 14 ? riskCountQuestion.length : 0)}\n                </b>\n              </Message>\n              <hr />\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                  <Button\n                    content=\"Save\"\n                    type=\"submit\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={\n                      saving ||\n                      !isAgeValid ||\n                      ((objValues.targetGroup ===\n                        \"TARGET_GROUP_CHILDREN_OF_KP\" ||\n                        objValues.targetGroup === \"TARGET_GROUP_PD\") &&\n                        objValues.age > 14)\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default BasicInfo;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/FamilyIndexhIstory.js",["578","579","580","581"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../../../api\";\nimport { token as token } from \"./../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst FamilyIndexHistory = (props) => {\n  let history = useHistory();\n  const [familyIndexList, setFamilyIndexList] = useState([]);\n  const toggle = () => setOpen(!open);\n  const [recordSelected, setRecordSelected] = useState({});\n  const [open, setOpen] = React.useState(false);\n\n  const getListoFFamilyIndexInfo = () => {\n    axios\n      .get(\n        `${baseUrl}hts-family-index-testing/${props.patientObj.id}/hts-client`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          setFamilyIndexList([response.data]);\n          getListOfFamliyIndices(response.data.uuid);\n          props.handleItemClick(\"fit-history\");\n        } else {\n          setFamilyIndexList([]);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const convertRelationship = (relationship) => {\n    if (relationship === \"FAMILY_RELATIONSHIP_FATHER\") {\n      return \"Father\";\n    } else if (relationship === \"FAMILY_RELATIONSHIP_MOTHER\") {\n      return \"Mother\";\n    } else if (relationship === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\") {\n      return \"Child\";\n    } else {\n      return relationship;\n    }\n  };\n\n  const getListOfFamliyIndices = (uuid) => {\n    axios\n      .get(\n        `${baseUrl}hts-family-index-testing/family-index?familyIndexTestingUuid=${uuid}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          setFamilyIndexList(response.data);\n          props.handleItemClick(\"fit-history\");\n        } else {\n          setFamilyIndexList([]);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n  const enrollEllicitedPatient = (row, actionType) => {\n    console.log(row);\n    let obj = {\n      uuid: row.uuid,\n      type: \"family\",\n      clientCode: props?.patientObj?.clientCode,\n    };\n    localStorage.setItem(\"index\", JSON.stringify(obj));\n\n\n\n    if(history.location.pathname === \"/register-patient\"){\n\n      props.clearInfo()\n \n      props.handleItemClick(\"risk\")\n \n    }else{\n      history.push(\"/register-patient\");\n    }\n\n\n\n  };\n  useEffect(() => {\n    getListoFFamilyIndexInfo();\n  }, [props.patientObj]);\n\n  const LoadViewPage = (row, actionType) => {\n    console.log(row);\n    console.log(props);\n\n    props.handleItemClick(\"view-fit\");\n    props.setSelectedRow(row);\n    props.setAction(actionType);\n  };\n\n\n\n\n  const LoadModal = (row) => {\n    toggle();\n    setRecordSelected(row);\n  };\n  const LoadDeletePage = (row) => {\n    // setSaving(true);\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n    axios\n      .delete(\n        `${baseUrl}hts-family-index-testing/family-index/${recordSelected.id}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        toast.success(\"Record Deleted Successfully\");\n        getListoFFamilyIndexInfo();\n\n        toggle();\n      })\n      .catch((error) => {\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage);\n        } else {\n          toast.error(\"Something went wrong. Please try again...\");\n        }\n      });\n  };\n\n  return (\n    <>\n      <div>\n        <div className=\"form-group mb-3 col-md-12\">\n          {console.log(familyIndexList)}\n          {\n            <Button\n              content=\"Add New form\"\n              icon=\"left add\"\n              labelPosition=\"left\"\n              style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n              onClick={() => props.handleItemClick(\"fit\")}\n            />\n          }\n          {/* <Button\n            content=\"Done\"\n            icon=\"list\"\n            labelPosition=\"left\"\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n            onClick={() => handleDone()}\n          /> */}\n        </div>\n        <MaterialTable\n          icons={tableIcons}\n          // title=''\n          columns={[\n            { title: \"ID\", field: \"id\" },\n            { title: \"Contact Id\", field: \"contactId\"},\n            { title: \"Date Of Birth\", field: \"date\" },\n            { title: \"family Relationship\", field: \"familyRelationship\" },\n            \n\n            { title: \"Actions\", field: \"actions\", filtering: false },\n          ]}\n          isLoading={props.loading}\n          data={familyIndexList.map((row) => ({\n            id: row.id,\n            contactId:row.contactId,\n            date: row.dateOfBirth,\n            familyRelationship: convertRelationship(row.familyRelationship),\n\n            //indexNotifiation:row.indexNotificationServicesElicitation ? \"Filled\":\"Not Filled \",\n\n            actions: (\n              <div>\n                <Menu.Menu position=\"right\">\n                  <Menu.Item>\n                    <div\n                      style={{\n                        backgroundColor: \"rgb(153,46,98)\",\n                        color: \"white\",\n                        borderRadius: \"5px\",\n                        width: \"100px\",\n                      }}\n                      primary\n                      className=\"px-3 py-2\"\n                    >\n                      <Dropdown item text=\"Action\">\n                        <Dropdown.Menu style={{ marginTop: \"10px\" }}>\n                        {row?.isHtsClient === \"No\"&&  \n                        <>\n                        <Dropdown.Item onClick={() =>\n                              enrollEllicitedPatient(row, \"enroll\")\n                            }>       \n                               <Icon name=\"save\" />\n  \n                              Enroll\n                          </Dropdown.Item>\n                          \n                          </>}\n                          <Dropdown.Item\n                            onClick={() => LoadViewPage(row, \"view\")}\n                          >\n                            {\" \"}\n                            <Icon name=\"eye\" />\n                            View\n                          </Dropdown.Item>\n                          <Dropdown.Item\n                            onClick={() => LoadViewPage(row, \"update\")}\n                          >\n                            <Icon name=\"edit\" />\n                            Edit\n                          </Dropdown.Item>\n                          <Dropdown.Item onClick={() => LoadModal(row)}>\n                            <Icon name=\"delete\" />\n                            Delete\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </div>\n                  </Menu.Item>\n                </Menu.Menu>\n              </div>\n            ),\n          }))}\n          options={{\n            toolbar: false,\n            search: false,\n            headerStyle: {\n              //backgroundColor: \"#9F9FA5\",\n              color: \"#000\",\n            },\n            searchFieldStyle: {\n              width: \"200%\",\n              margingLeft: \"250px\",\n            },\n            filtering: false,\n            exportButton: false,\n            searchFieldAlignment: \"left\",\n            pageSizeOptions: [10, 20, 100],\n            pageSize: 10,\n            debounceInterval: 400,\n          }}\n        />\n      </div>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>\n            Are you Sure you want to delete ?\n            {/* <b>{row && record.activityName}</b> */}\n          </h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => LoadDeletePage(recordSelected)}\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\n            // disabled={saving}\n          >\n            Yes\n            {/* {saving === false ? \"Yes\" : \"Deleting...\"} */}\n          </Button>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n            // disabled={saving}\n          >\n            No\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default FamilyIndexHistory;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/FamilyIndexTestingForm.js",["582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport { Table } from \"react-bootstrap\";\nimport { Icon, List, Label as LabelSui } from \"semantic-ui-react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport Select from \"react-select\";\n// import { getAcount } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\nimport {\n  getAllStateByCountryId,\n  getAllCountry,\n  getAllProvinces,\n  getAllGenders,\n  alphabetOnly,\n} from \"../../../../utility\";\n\nimport { calculate_age } from \"../../utils/index.js\";\nimport { LiveHelp } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst FamilyIndexTestingForm = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  let VL = \"\";\n  const [errors, setErrors] = useState({});\n  const [ageDisabled2, setAgeDisabled2] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [maritalStatus, setMaritalStatus] = useState([]);\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [isClientCurrentlyOnHiv, setClientCurrentlyOnHiv] = useState(true);\n  const [states, setStates] = useState([]);\n  const [genders, setGenders] = useState([]);\n  const [hivStatus, setHivStatus] = useState([]);\n  const [indexClientConfirmedHivPositive, setIndexClientConfirmedHivPositive] =\n    useState(false);\n  const [familyRelationship, setFamilyRelationship] = useState([]);\n  const [selectedFamilyIndex, setSelectedFamilyIndex] = useState({});\n  const [statusOfContact, setFamilyIndexHivStatus] = useState([]);\n  const [familyIndex, setFamilyIndex] = useState([]);\n  const [followUpAppointmentLocation, setFollowUpAppointmentLocation] =\n    useState([]);\n  const [childNumber, setChildNumber] = useState([]);\n  const [indexVisitAttempt, setIndexVisitAttempt] = useState([]);\n  const [isWillingToHaveChildrenTested, setIsWillingToHaveChildrenTested] =\n    useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [retrieveFromIdToCode, setRetrieveFromIdToCode] = useState(true);\n\n  const [stateInfo, setStateInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n  );\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"permissions\")?.split(\",\")\n  );\n\n  const [lgaInfo, setLgaInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0].district\n      ? props?.basicInfo?.personResponseDto?.address?.address[0].district\n      : props?.patientObj?.personResponseDto?.address?.address[0].district\n  );\n  const [facilityName, setFacilityName] = useState(Cookies.get(\"facilityName\"));\n  const [facilityInfo, setFacilityInfo] = useState(props?.organizationInfo);\n  const [contactId, setContactId] = useState(\"\");\n  const [familyIndexRequestDto, setFamilyIndexRequestDto] = useState({\n    childNumber: \"\",\n    otherChildNumber: \"\",\n    age: \"\",\n    childDead: \"\",\n    dateOfBirth: \"\",\n    dateOfHts: \"\",\n    familyRelationship: \"\",\n    statusOfContact: \"\",\n    motherDead: \"\",\n    yearMotherDead: \"\",\n    yearChildDead: \"\",\n    uan: \"\",\n    liveWithParent: \"\",\n    isDateOfBirthEstimated: \"\",\n    firstName: props?.patientObj?.personResponseDto?.firstName,\n    middleName: props?.patientObj?.personResponseDto?.otherName,\n    lastName: props?.patientObj?.personResponseDto?.surname,\n  });\n\n  const [arrayFamilyIndexRequestDto, setArrayFamilyIndexRequestDto] = useState(\n    []\n  );\n  const [\n    arrayFamilyTestingTrackerRequestDTO,\n    setArrayFamilyTestingTrackerRequestDTO,\n  ] = useState([]);\n  const [errorFamilyIndexDTO, setErrorFamilyIndexDTO] = useState({});\n  const [errorFamilyIndexTracker, setErrorFamilyIndexDTOTracker] = useState({});\n\n  const [addIndexTracker, setaAddIndexTracker] = useState(false);\n  const [addIndexTracker2, setaAddIndexTracker2] = useState(false);\n  const [disableCurrenTreatment, setDisableCurrenTreatment] = useState(false);\n  const [disableVL, setDisableVL] = useState(false);\n  const [htsClientUUID, setHtsClientUUID] = useState(\"\");\n  const [familyTestingTrackerRequestDTO, setFamilyTestingTrackerRequestDTO] =\n    useState({\n      attempt: \"\",\n      dateEnrolledInOVC: \"\",\n      dateEnrolledOnArt: \"\",\n      dateTested: \"\",\n      dateVisit: \"\",\n      facilityId: \"\",\n      followUpAppointmentLocation: \"\",\n      hiveTestResult: \"\",\n      knownHivPositive: \"\",\n      ovcId: \"\",\n      positionOfChildEnumerated: \"\",\n      scheduleVisitDate: \"\",\n      trackerAge: \"\",\n      trackerSex: \"\",\n    });\n  const [payload, setPayload] = useState({\n    age: null,\n    alternatePhoneNumber: \"\",\n    dateClientEnrolledOnTreatment: \"\",\n    dateIndexClientConfirmedHivPositiveTestResult:\n      props?.patientObj?.confirmatoryTest2?.date2,\n    dateOfBirth: props?.patientObj?.personResponseDto?.dateOfBirth,\n    extra: {},\n    facilityName: \"\",\n    familyIndexClient: \"\",\n    familyIndexRequestDto: {\n      childNumber: 0,\n      otherChildNumber: 0,\n      familyRelationship: \"\",\n      motherDead: \"\",\n      yearMotherDead: \"\",\n\n      familyTestingTrackerRequestDTOs: [],\n\n      // not there\n      statusOfContact: \"\",\n      familyIndexTestingUuid: \"\",\n    },\n\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    htsClientUuid: props?.patientObj?.htsClientUUid\n      ? props?.patientObj?.htsClientUUid\n      : props?.basicInfo?.htsClientUUid\n      ? props?.basicInfo?.htsClientUUid\n      : JSON.parse(localStorage.getItem(\"htsClientUUid\")),\n    indexClientId: props?.patientObj?.clientCode,\n    isClientCurrentlyOnHivTreatment: \"\",\n    lga: \"\",\n    maritalStatus: props?.patientObj?.personResponseDto?.maritalStatus?.id,\n    name: props?.patientObj?.personResponseDto?.firstName,\n    phoneNumber:\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n        ?.value,\n    recencyTesting: (() => {\n      if (\n        props?.patientObj?.recency?.finalRecencyResult &&\n        props?.patientObj?.recency?.finalRecencyResult !== \"\"\n      ) {\n        return props.patientObj.recency.finalRecencyResult;\n      } else if (\n        props?.patientObj?.recency?.rencencyInterpretation &&\n        props?.patientObj?.recency?.rencencyInterpretation !== \"\"\n      ) {\n        return props.patientObj.recency.rencencyInterpretation;\n      } else {\n        return \"Not Done\";\n      }\n    })(),\n    setting: props.patientObj.testingSetting,\n    // chnage position\n    visitDate: \"\",\n    sex: props?.patientObj?.personResponseDto?.gender?.id,\n    state: \"\",\n    willingToHaveChildrenTestedElseWhere: \"\",\n\n    reasonForIndexClientDateHivConfirmedNotSelected: \"\",\n    address: props?.patientObj?.personResponseDto?.address?.address[0].city,\n    // recencyTesting: \"\",\n    virallyUnSuppressed: \"\",\n  });\n\n  const fetchHtsClientUuid = async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}hts-family-index-testing/hts-client-uuid?uuid=${props?.patientObj?.personResponseDto?.uuid}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      setHtsClientUUID(response.data.uuid);\n    } catch (error) {\n      console.error(\"Error fetching HTS client UUID\", error);\n      return \"\";\n    }\n  };\n\n  const [lgas, setLGAs] = useState([]);\n  const [facilities, setFacilities1] = useState([]);\n  const [selectedState, setSelectedState] = useState({});\n  const [selectedFacility, setSelectedFacility] = useState({});\n  const [selectedLga, setSelectedLga] = useState({});\n  const [showHTSDate, setShowHTSDate] = useState(false);\n  const [showOther, setShowOther] = useState(false);\n\n  const loadStates = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setStates(response.data);\n        }\n      })\n      .catch((e) => {});\n  };\n\n  const loadOtherForm = (row) => {\n    // setSaving(true);\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n    toggle();\n  };\n  const loadLGA = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setLGAs(response.data);\n          // const selectedLga = response.data.find(lga => lga.id === id);\n          // setPayload(prevPayload => ({ ...prevPayload, lgaTransferTo: selectedLga ? selectedLga.name : \"\" }));\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch LGA error\" + e);\n      });\n  };\n  const handleItemClick = (next, present) => {\n    props.handleItemClick(next);\n    if (props.completed.includes(present)) {\n    } else {\n      props.setCompleted([...props.completed, present]);\n    }\n  };\n\n  //Date of Birth and Age handle\n  const handleDobChange2 = (e) => {\n    setErrors({ ...errors, [e.target.value]: \"\" });\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      familyIndexRequestDto.age = age_now;\n      familyTestingTrackerRequestDTO.trackerAge = age_now;\n\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setFamilyIndexRequestDto({ ...familyIndexRequestDto, age: \"\" });\n    }\n    setFamilyIndexRequestDto({\n      ...familyIndexRequestDto,\n      dateOfBirth: e.target.value,\n    });\n\n    // if (familyIndexRequestDto.age !== \"\" && familyIndexRequestDto.age >= 85) {\n    //   toggle();\n    // }\n  };\n\n  const loadFacilities = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setFacilities1(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const getIntPosition = (ex) => {\n    let code = [];\n\n    let main = childNumber.map((each, index) => {\n      if (each.code !== \"CHILD_NUMBER_OTHERS\") {\n        code.push({\n          id: each.id,\n          value: index + 1,\n        });\n      }\n    });\n\n    if (ex) {\n      let ans = code.filter((each) => {\n        return each.id === parseInt(ex);\n      });\n\n      let result = ans.length > 0 ? ans[0].value : \"\";\n      return result;\n    } else {\n      return \"\";\n    }\n  };\n  const TargetGroupSetup = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFacilityInfo(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const loadFamilyIndexSetting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const getMaritalStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setMaritalStatus(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const getFamilyRelationship = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FAMILY_RELATIONSHIP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFamilyRelationship(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  // get family index hiv status\n  const FAMILY_INDEX_HIV_STATUS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FAMILY_INDEX_HIV_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFamilyIndexHivStatus(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  // get family index\n\n  const FAMILY_INDEX = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FAMILY_INDEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFamilyIndex(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const FOLLOW_UP_APPOINTMENT_LOCATION = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FOLLOW UP_APPOINTMENT_LOCATION`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFollowUpAppointmentLocation(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const GET_CHILD_NUMBER = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CHILD_NUMBER`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setChildNumber(response.data);\n\n        let ans = response.data.filter((each) => {\n          return each.code === \"CHILD_NUMBER_OTHERS\";\n        });\n\n        setRetrieveFromIdToCode(ans[0]?.id);\n      })\n      .catch((error) => {});\n  };\n\n  // GET\n  const INDEX_VISIT_ATTEMPTS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_VISIT_ATTEMPTS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexVisitAttempt(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  // generate index client Id using the HTS client code/family index client unique ART number\n  const generateIndexClientId = () => {\n    const indexClientId = Math.floor(1000 + Math.random() * 9000);\n  };\n\n  const loadGenders = useCallback(async () => {\n    getAllGenders()\n      .then((response) => {\n        setGenders(response);\n      })\n      .catch(() => {});\n  }, []);\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(\n        `${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getSettings = () => {\n    if (props.patientObj.testingSetting.includes(\"FACILITY\")) {\n      HTS_ENTRY_POINT_FACILITY();\n    } else if (props.patientObj.testingSetting.includes(\"COMMUNITY\")) {\n      HTS_ENTRY_POINT_COMMUNITY();\n    }\n  };\n\n  useEffect(() => {\n    getContactId();\n    fetchHtsClientUuid();\n  }, []);\n\n  const getContactId = async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}hts-family-index-testing/get-contact-id?htsClientId=${\n          props.patientObj.id ? props.patientObj.id : props.basicInfo.id\n        }&clientCode=${\n          props?.patientObj?.clientCode\n            ? props?.patientObj?.clientCode\n            : props?.basicInfo?.clientCode\n        }`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n\n      const newContactId = response.data;\n\n      setContactId(newContactId);\n\n      setFamilyIndexRequestDto((prevState) => ({\n        ...prevState,\n        contactId: newContactId,\n      }));\n\n      setPayload((prevState) => ({\n        ...prevState,\n        contactId: newContactId,\n        familyIndexRequestDto: {\n          ...prevState.familyIndexRequestDto,\n          contactId: newContactId,\n        },\n      }));\n\n      return newContactId;\n    } catch (error) {\n      console.error(\"Error fetching contact ID:\", error);\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    loadGenders();\n    loadStates();\n    // loadFamilyIndexSetting();\n    getCountry();\n    getStateByCountryId();\n    getMaritalStatus();\n    getFamilyRelationship();\n    FAMILY_INDEX_HIV_STATUS();\n    FAMILY_INDEX();\n    FOLLOW_UP_APPOINTMENT_LOCATION();\n    INDEX_VISIT_ATTEMPTS();\n    GET_CHILD_NUMBER();\n    getVL();\n    getCurrentTreatment();\n    getSettings();\n    if (\n      props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId ||\n      props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n    ) {\n      loadLGA(\n        props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n      );\n    }\n\n    if (props.organizationInfo) {\n      TargetGroupSetup();\n    }\n  }, []);\n\n  //Get list of State\n  const getStateByCountryId = () => {\n    getAllStateByCountryId()\n      .then((res) => {\n        setStates(res);\n      })\n      .catch(() => {});\n  };\n  const checkPhoneNumberBasic = (e, inputName) => {\n    if (e) {\n      setErrors({ ...errors, phoneNumber: \"\" });\n    }\n    const limit = 10;\n\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\n    } else if (inputName === \"alternatePhoneNumber\") {\n      setPayload({ ...payload, alternatePhoneNumber: e.slice(0, limit) });\n    } else if (inputName === \"phoneNoOfReferrringFacility\") {\n      setPayload({\n        ...payload,\n        phoneNoOfReferrringFacility: e.slice(0, limit),\n      });\n    } else if (inputName === \"phoneNoOfRecievingFacility\") {\n      setPayload({ ...payload, phoneNoOfRecievingFacility: e.slice(0, limit) });\n    }\n  };\n\n  // handle Facility Name to slect drop down\n  const handleInputChangeObject = (e) => {\n    setPayload({\n      ...payload,\n      nameOfRecievingFacility: e.name,\n      addressOfRecievingFacility: e.parentParentOrganisationUnitName,\n      // lgaTransferTo: e.parentOrganisationUnitName,\n    });\n    setErrors({ ...errors, nameOfRecievingFacility: \"\" });\n    // setSelectedState(e.parentParentOrganisationUnitName);\n    // setSelectedLga(e.parentOrganisationUnitName);\n  };\n\n  const convertIdToCode = (id) => {\n    if (id) {\n      let ans = childNumber.filter((each) => {\n        return each.code === \"CHILD_NUMBER_OTHERS\";\n      });\n\n      if (ans[0].id === parseInt(id)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  // handlefamilyIndexRequestDto\n  const handlefamilyIndexRequestDto = (e) => {\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    setErrorFamilyIndexDTO({ ...errorFamilyIndexDTO, [e.target.name]: \"\" });\n    setaAddIndexTracker(false);\n    // console.log(e);\n\n    if (e.target.name === \"childNumber\") {\n      setErrors({ ...errors, otherChildNumber: \"\" });\n\n      let res = convertIdToCode(e.target.value);\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n        otherChildNumber: \"\",\n      });\n\n      if (res) {\n        setShowOther(true);\n      } else {\n        let deductedValue = getIntPosition(e.target.value);\n        //set position to child number\n        setFamilyTestingTrackerRequestDTO({\n          ...familyTestingTrackerRequestDTO,\n          positionOfChildEnumerated: deductedValue,\n        });\n        setShowOther(false);\n      }\n    } else if (e.target.name === \"otherChildNumber\") {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n      });\n      setFamilyTestingTrackerRequestDTO({\n        ...familyTestingTrackerRequestDTO,\n        positionOfChildEnumerated: e.target.value,\n      });\n    } else if (e.target.name === \"statusOfContact\") {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n      });\n\n      if (\n        e.target.value === \"FAMILY_INDEX_HIV_STATUS_CURRENT_ON_ART\" ||\n        e.target.value === \"FAMILY_INDEX_HIV_STATUS_HIV_POSITIVE\" ||\n        e.target.value === \"FAMILY_INDEX_HIV_STATUS_HIV_POSITIVE\" ||\n        e.target.value === \"FAMILY_INDEX_HIV_STATUS_HIV_POSITIVE\" ||\n        e.target.value ===\n          \"FAMILY_INDEX_HIV_STATUS_REFERRED_ESCORTED_FOR_ART_INITIATION\"\n      ) {\n        setShowHTSDate(true);\n      }\n    } else {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n      });\n    }\n\n    // clearf the error with e.target.name\n    setErrors({ ...errors, [e.target.name]: \"\" });\n  };\n  // handlefamilyIndexRequestDto\n  const handlefamilyTestingTrackerRequestDTO = (e) => {\n    setErrorFamilyIndexDTOTracker({\n      ...errorFamilyIndexTracker,\n      [e.target.name]: \"\",\n    });\n    setaAddIndexTracker2(false);\n\n    if (e.target.name === \"positionOfChildEnumerated\") {\n      if (e.target.value > -1) {\n        setFamilyTestingTrackerRequestDTO({\n          ...familyTestingTrackerRequestDTO,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else if (e.target.name === \"trackerAge\") {\n      if (e.target.value > -1) {\n        setFamilyTestingTrackerRequestDTO({\n          ...familyTestingTrackerRequestDTO,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else {\n      setFamilyTestingTrackerRequestDTO({\n        ...familyTestingTrackerRequestDTO,\n        [e.target.name]: e.target.value,\n      });\n    }\n\n    // clearf the error with e.target.name\n    setErrors({ ...errors, [e.target.name]: \"\" });\n  };\n\n  const handleDone = () => {\n    toggle();\n    handleItemClick(\"new-referral\", \"\");\n  };\n\n  const loadNextForm = (row) => {\n    handleItemClick(\"pns\", \"fit\");\n  };\n\n  const getSelectedDFamilyIndex = (relationship) => {\n    // use the code to get object in the codeset\n    let result = familyIndex.filter((each, index) => {\n      return each.code === relationship;\n    });\n    // filter family relationship\n    let result2 = familyRelationship.filter((each, index) => {\n      if (\n        each.display === \"Biological Child\" &&\n        result[0].display === \"Child\"\n      ) {\n        return each;\n      } else {\n        return each.display === result[0].display;\n      }\n    });\n\n    if (result2.length > 0) {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        familyRelationship: result2[0].code,\n      });\n    }\n  };\n\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    if (e.target.value) {\n      setErrors({ ...errors, stateId: \"\" });\n    }\n    setPayload({ ...payload, stateId: e.target.value });\n    getAllProvinces(stateId)\n      .then((res) => {\n        setProvinces(res);\n      })\n      .catch((e) => {});\n  };\n  const getCountry = () => {\n    getAllCountry()\n      .then((res) => {\n        setCountries(res);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const handleFamilyRelationshipChange = (e) => {\n    const { name, value } = e.target;\n    setPayload((prevPayload) => ({\n      ...prevPayload,\n      [name]: value,\n      // Reset childNumber when family relationship changes\n      childNumber:\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\"\n          ? \"\"\n          : prevPayload.childNumber,\n      // Reset statusOfContact when family relationship changes, where mother = '1293', father = '1294', biological child = '1295', siblings = '1296'\n      statusOfContact: [\n        \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\",\n        \"FAMILY_RELATIONSHIP_FATHER\",\n        \"FAMILY_RELATIONSHIP_MOTHER\",\n        \"FAMILY_RELATIONSHIP_SIBLINGS\",\n      ].includes(value)\n        ? \"\"\n        : prevPayload.statusOfContact,\n      // Reset uan when family relationship changes\n      uan:\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" ||\n        value === \"FAMILY_RELATIONSHIP_FATHER\" ||\n        value === \"FAMILY_RELATIONSHIP_MOTHER\" ||\n        value === \"FAMILY_RELATIONSHIP_SIBLINGS\"\n          ? \"\"\n          : prevPayload.uan,\n      // Reset motherDead when family relationship changes\n      motherDead:\n        value === \"FAMILY_RELATIONSHIP_MOTHER\" ||\n        value === \"FAMILY_RELATIONSHIP_FATHER\" ||\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\"\n          ? \"\"\n          : prevPayload.motherDead,\n      // Reset yearMotherDied when family relationship changes\n      yearMotherDied:\n        value === \"FAMILY_RELATIONSHIP_MOTHER\" ||\n        value === \"FAMILY_RELATIONSHIP_FATHER\" ||\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\"\n          ? \"\"\n          : prevPayload.yearMotherDied,\n    }));\n  };\n\n  //Get list of HIV STATUS ENROLLMENT\n\n  const convertCodeToDisplay = (type, value) => {\n    let data = \"\";\n    if (type === \"familyRelationship\") {\n      data = familyRelationship.filter((each) => {\n        if (each.code === value) {\n          return each;\n        }\n      });\n\n      return data[0].display;\n    }\n    if (type === \"statusOfContact\") {\n      data = statusOfContact.filter((each) => {\n        if (each.code === value) {\n          return each;\n        }\n      });\n\n      return data[0].display;\n    }\n    if (type === \"statusOfContact\") {\n      data = statusOfContact.filter((each) => {\n        if (each.code === value) {\n          return each;\n        }\n      });\n\n      return data[0].display;\n    }\n  };\n\n  // const removeFamilyIndexRow = (index) => {\n  //   arrayFamilyIndexRequestDto.splice(index, 1);\n  //   setArrayFamilyIndexRequestDto([...arrayFamilyIndexRequestDto]);\n  // };\n\n  // const removeFamilyTrackerRow = (index) => {\n  //   arrayFamilyTestingTrackerRequestDTO.splice(index, 1);\n  //   setArrayFamilyTestingTrackerRequestDTO([\n  //     ...arrayFamilyTestingTrackerRequestDTO,\n  //   ]);\n  // };\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    const { name, value } = e.target;\n\n    if (name === \"contactId\") {\n      setContactId(value);\n\n      setFamilyIndexRequestDto((prevState) => ({\n        ...prevState,\n        contactId: value,\n      }));\n\n      setPayload((prevState) => ({\n        ...prevState,\n        contactId: value,\n        familyIndexRequestDto: {\n          ...prevState.familyIndexRequestDto,\n          contactId: value,\n        },\n      }));\n    } else if (e.target.name === \"name\" || e.target.name === \"lastName\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload((prevState) => ({\n        ...prevState,\n        [e.target.name]: name,\n      }));\n    } else if (name === \"willingToHaveChildrenTested\") {\n      setPayload((prevState) => ({\n        ...prevState,\n        [name]: value,\n        familyIndexTracker: {\n          ...prevState.familyIndexTracker,\n          positionOfChildEnumerated:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.positionOfChildEnumerated\n              : \"\",\n          trackerSex:\n            value === \"Yes\" ? prevState.familyIndexTracker.trackerSex : \"\",\n          trackerAge:\n            value === \"Yes\" ? prevState.familyIndexTracker.trackerAge : \"\",\n          scheduleVisitDate:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.scheduleVisitDate\n              : \"\",\n          followUpAppointmentLocation:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.followUpAppointmentLocation\n              : \"\",\n          dateVisit:\n            value === \"Yes\" ? prevState.familyIndexTracker.dateVisit : \"\",\n          knownHivPositive:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.knownHivPositive\n              : \"\",\n          dateTested:\n            value === \"Yes\" ? prevState.familyIndexTracker.dateTested : \"\",\n          hivTestResult:\n            value === \"Yes\" ? prevState.familyIndexTracker.hivTestResult : \"\",\n          dateEnrolledInOVC:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.dateEnrolledInOVC\n              : \"\",\n          dateEnrolledOnArt:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.dateEnrolledOnArt\n              : \"\",\n          attempt: value === \"Yes\" ? prevState.familyIndexTracker.attempt : \"\",\n        },\n      }));\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"indexClientId\" && e.target.value !== \"\") {\n      //    setPayload({...payload, [e.target.name]: name })\n    } else if (e.target.name === \"dateIndexConfirmedHiv\") {\n      if (e.target.value !== \"\") {\n        const name = e.target.name;\n        setPayload({ ...payload, [e.target.name]: name });\n        setIndexClientConfirmedHivPositive(false); // Hide extra fields when date is selected\n      } else {\n        setIndexClientConfirmedHivPositive(true); // Show extra fields if date is not selected\n      }\n    } else if (\n      e.target.name === \"nameOfContactPerson\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfPersonRefferringClient\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}patient/exist/hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n        }\n      }\n\n      getHosiptalNumber();\n    } else if (e.target.name === \"familyIndexClient\" && e.target.value !== \"\") {\n      getSelectedDFamilyIndex(e.target.value);\n\n      setPayload({\n        ...payload,\n        [e.target.name]: e.target.value,\n        trackerSex:\n          e.target.value === \"FAMILY_INDEX_MOTHER\"\n            ? \"SEX_FEMALE\"\n            : e.target.value === \"FAMILY_INDEX_FATHER\"\n            ? \"SEX_MALE\"\n            : \"\",\n      });\n    } else {\n      setPayload({ ...payload, [e.target.name]: e.target.value });\n    }\n  };\n\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      payload.age = age_now;\n\n      //setpayload({...payload, age: age_now});\n    } else {\n      setPayload({ ...payload, age: \"\" });\n    }\n    setPayload({ ...payload, [e.target.name]: e.target.value });\n\n    setPayload({ ...payload, dateOfBirth: e.target.value });\n    if (payload.age !== \"\" && payload.age <= 15) {\n      // props.setHideOtherMenu(true);\n    } else if (payload.age !== \"\" && payload.age > 15) {\n      // props.setHideOtherMenu(true);\n    } else {\n      // props.setHideOtherMenu(true);\n    }\n\n    // if (payload.age !== \"\" && payload.age >= 85) {\n    //   toggle();\n    // }\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      familyIndexRequestDto.isDateOfBirthEstimated = false;\n      setAgeDisabled2(true);\n    } else if (e.target.value == \"Estimated\") {\n      familyIndexRequestDto.isDateOfBirthEstimated = true;\n      setAgeDisabled2(false);\n    }\n  };\n  useEffect(() => {\n    // Only run this if we haven't initialized yet\n    if (payload.age === null) {\n      const dob =\n        props?.basicInfo?.personResponseDto?.dateOfBirth ||\n        props?.patientObj?.personResponseDto?.dateOfBirth;\n\n      if (dob) {\n        const calculatedAge = calculate_age(dob);\n        setPayload({\n          ...payload,\n          age: calculatedAge,\n          dateOfBirth: dob,\n        });\n      }\n    }\n  }, []);\n\n  const handleAgeChange = (e) => {\n    e.preventDefault();\n    if (!ageDisabled) {\n      const enteredAge = e.target.value;\n\n      // Get current year and subtract age\n      const currentYear = new Date().getFullYear();\n      const birthYear = currentYear - enteredAge;\n\n      // Always set to January 1st\n      const dobNew = `${birthYear}-01-01`;\n\n      setPayload({\n        ...payload,\n        dateOfBirth: dobNew,\n        age: enteredAge,\n      });\n    }\n  };\n\n  const getCurrentTreatment = async () => {\n    await axios\n      .get(\n        `${baseUrl}hts-family-index-testing/getCurrentTreatment?personUuid=${props.patientObj.personResponseDto.uuid}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          setPayload({\n            ...payload,\n            isClientCurrentlyOnHivTreatment: \"Yes\",\n            dateClientEnrolledOnTreatment: response.data,\n            virallyUnSuppressed: VL,\n          });\n          setDisableCurrenTreatment(true);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const getVL = async () => {\n    await axios\n      .get(\n        `${baseUrl}hts-family-index-testing/getViralLoad?personUuid=${props.patientObj.personResponseDto.uuid}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          if (parseInt(response.data) >= 0) {\n            if (parseInt(response.data) > 1000) {\n              setPayload({ ...payload, virallyUnSuppressed: \"Yes\" });\n              setDisableVL(true);\n              VL = \"Yes\";\n            } else if (parseInt(response.data) < 1000) {\n              setPayload({ ...payload, virallyUnSuppressed: \"No\" });\n              setDisableVL(true);\n              VL = \"No\";\n            }\n          }\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  // NU-23-0064\n\n  const handleAgeChange2 = (e) => {\n    e.preventDefault();\n\n    setErrors({ ...errors, [e.target.name]: \"\" });\n    if (!ageDisabled2) {\n      // if (e.target.value !== \"\" && e.target.value >= 85) {\n      //   toggle();\n\n      // }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        dateOfBirth: moment(dobNew).format(\"YYYY-MM-DD\"),\n      });\n      familyIndexRequestDto.dateOfBirth = moment(dobNew).format(\"YYYY-MM-DD\");\n\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        age: e.target.value,\n      });\n      setFamilyTestingTrackerRequestDTO({\n        ...familyTestingTrackerRequestDTO,\n        trackerAge: e.target.value,\n      });\n    }\n  };\n\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n  const validate = () => {\n    temp.familyIndexClient = payload.familyIndexClient\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.familyRelationship = familyIndexRequestDto.familyRelationship\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.dateOfBirth = familyIndexRequestDto.dateOfBirth\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.statusOfContact = familyIndexRequestDto.statusOfContact\n      ? \"\"\n      : \"This field is required.\";\n\n    //  familyIndexRequestDto.childNumber == retrieveFromIdToCode && ( temp.otherChildNumber= familyIndexRequestDto.otherChildNumber\n    //       ? \"\"\n    //       : \"This field is required.\")\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const postPayload = (payload) => {\n    axios\n      .post(`${baseUrl}hts-family-index-testing`, payload, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSaving(false);\n\n        toast.success(\"Family Index form save succesfully!\");\n        handleItemClick(\"fit-history\", \"fit\");\n\n        // if (props.history) {\n        //   handleItemClick(\"pns-history\", \"fit\");\n        // } else {\n        //   loadOtherForm();\n        // }\n\n        // history.push({pathName: \"/patient-history\",\n        //   state: {\n        //     patientObject: props.basicInfo,\n        //     patientObj: props.basicInfo,\n        //     clientCode: props.basicInfo.clientCode,\n        //   },}\n        // );\n      })\n      .catch((error) => {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage, {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        } else {\n          toast.error(\"Something went wrong. Please try again...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      });\n  };\n\n  useEffect(() => {\n    if (\n      props?.patientObj?.testingSetting ===\n      \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\"\n    ) {\n      setPayload((prevPayload) => ({\n        ...prevPayload,\n        familyIndexClient: \"FAMILY_INDEX_CHILD\",\n      }));\n\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        familyIndexClient: \"\",\n      }));\n    }\n  }, [props?.patientObj?.testingSetting]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Create an array with the single tracker\n    let arrOfFamilyTrackers = [familyTestingTrackerRequestDTO];\n\n    familyTestingTrackerRequestDTO.facilityId =\n      facilityInfo.currentOrganisationUnitId;\n\n    let currentContactId;\n    try {\n      currentContactId = await getContactId();\n    } catch (error) {\n      console.error(\"Error getting contactId:\", error);\n      toast.error(\"Failed to get contactId. Please try again.\");\n      return;\n    }\n\n    if (!currentContactId) {\n      console.error(\"Failed to get contactId\");\n      toast.error(\"Failed to get contactId. Please try again.\");\n      return;\n    }\n\n    const submissionPayload = {\n      ...payload,\n      htsClientUuid: htsClientUUID,\n      contactId: currentContactId,\n      familyIndexRequestDto: {\n        ...familyIndexRequestDto,\n        contactId: currentContactId,\n        familyTestingTrackerRequestDTOs: arrOfFamilyTrackers,\n      },\n      state: stateInfo,\n      lga: lgaInfo,\n    };\n\n    // Validate and submit if valid\n    if (validate()) {\n      postPayload(submissionPayload);\n    }\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setPayload({ ...payload, [inputName]: NumberValue });\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, [inputName]: NumberValue });\n    }\n    if (inputName === \"alternatePhoneNumber\") {\n      setPayload({ ...payload, [inputName]: NumberValue });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}> Family Index Testing Form</h2>\n          <br />\n\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                SECTION A\n              </div>\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      State <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"stateId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      value={stateInfo}\n                      required\n                      // onChange={loadLGA1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterState = states.filter((st) => {\n                            return Number(st.id) === Number(e.target.value);\n                          });\n                          setSelectedState(filterState);\n\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            stateId: filterState[0].id,\n                          }));\n                        }\n                        loadLGA(e.target.value);\n                      }}\n                      disabled\n                    >\n                      <option>Select State</option>\n                      {states.map((state) => (\n                        <option key={state.id} value={state.id}>\n                          {state.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.stateTransferTo !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.stateTransferTo}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      LGA <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"lgaId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      value={lgaInfo}\n                      // onChange={loadFacilities1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterlga = lgas.filter((lg) => {\n                            return Number(lg.id) === Number(e.target.value);\n                          });\n                          setSelectedLga(filterlga);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            lgaId: filterlga[0].id,\n                          }));\n                        }\n                        loadFacilities(e.target.value);\n                      }}\n                      disabled\n                    >\n                      <option>Select LGA</option>\n                      {lgas.map((lga) => (\n                        <option key={lga.id} value={lga.id}>\n                          {lga.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.lgaId !== \"\" ? (\n                      <span className={classes.error}>{errors.lgaId}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      Facility Name\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"facilityName\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      value={facilityInfo.currentOrganisationUnitName}\n                      required\n                      onChange={(e) => {\n                        // setPayload(prevPayload => ({ ...prevPayload, facilityTransferTo: e.target.value }));\n                        if (e.target.value !== \"\") {\n                          const filterFacility = facilities.filter((fa) => {\n                            return Number(fa.id) === Number(e.target.value);\n                          });\n                          setSelectedFacility(filterFacility);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            facilityName: filterFacility[0].name,\n                          }));\n                        }\n                      }}\n                      disabled\n                    >\n                      {/* <option>Select Facility</option>\n                                          {facilities.map((facility) => (\n                                              <option key={facility.id} value={facility.id}>\n                                                  {facility.name}\n                                              </option>\n                                          ))} */}\n                    </Input>\n                    {errors.facilityTransferTo !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.facilityTransferTo}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"visitDate\"\n                      id=\"visitDate\"\n                      value={payload.visitDate}\n                      onChange={handleInputChange}\n                      min={props?.patientObj?.confirmatoryTest2?.date2}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      required\n                      // disabled\n                    />\n                    {errors.visitDate !== \"\" ? (\n                      <span className={classes.error}>{errors.visitDate}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Setting <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"setting\"\n                      id=\"setting\"\n                      value={payload.setting}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={true}\n                    >\n                      <option value={\"\"}></option>\n                      {setting.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.setting !== \"\" ? (\n                      <span className={classes.error}>{errors.setting}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Family Index client{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"familyIndexClient\"\n                      id=\"familyIndexClient\"\n                      onChange={handleInputChange}\n                      value={\n                        props?.patientObj?.testingSetting ===\n                        \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\"\n                          ? \"FAMILY_INDEX_CHILD\"\n                          : payload.familyIndexClient\n                      }\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={\n                        props?.patientObj?.testingSetting ===\n                        \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\"\n                      }\n                    >\n                      <option value={\"\"}>Select</option>\n                      {familyIndex &&\n                        familyIndex.map((x, index) => (\n                          <option key={x.id} value={x.code}>\n                            {x.display}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.familyIndexClient !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.familyIndexClient}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      First Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"firstName\"\n                      id=\"firstName\"\n                      value={familyIndexRequestDto.firstName}\n                      onChange={handlefamilyIndexRequestDto}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.name !== \"\" ? (\n                      <span className={classes.error}>{errors.name}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"lastName\">Middle Name</Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"name\"\n                      id=\"name\"\n                      value={familyIndexRequestDto.middleName}\n                      onChange={handlefamilyIndexRequestDto}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.name !== \"\" ? (\n                      <span className={classes.error}>{errors.name}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"lastName\">\n                      Last Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"name\"\n                      id=\"name\"\n                      value={familyIndexRequestDto.lastName}\n                      onChange={handlefamilyIndexRequestDto}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.name !== \"\" ? (\n                      <span className={classes.error}>{errors.name}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Index Client ID\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"indexClientId\"\n                      id=\"indexClientId\"\n                      value={payload.indexClientId}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.indexClientId !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.indexClientId}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Sex <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"sex\"\n                      id=\"sex\"\n                      onChange={handleInputChange}\n                      value={payload.sex}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    >\n                      <option value={\"\"}>Select</option>\n                      {genders &&\n                        genders.map((gender, index) => (\n                          <option key={gender.id} value={gender.id}>\n                            {gender.display}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.sex !== \"\" ? (\n                      <span className={classes.error}>{errors.sex}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Date Of Birth<span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"dateOfBirth\"\n                      id=\"dateOfBirth\"\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={payload.dateOfBirth}\n                      onChange={handleDobChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {/* {errors.dateOfBirth !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.dateOfBirth}\n                    </span>\n                  ) : (\n                    \"\"\n                  )} */}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Age <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      name=\"age\"\n                      id=\"age\"\n                      value={payload.age}\n                      disabled={ageDisabled}\n                      onChange={handleAgeChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.age !== \"\" ? (\n                      <span className={classes.error}>{errors.age}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Marital Status <span style={{ color: \"red\" }}> </span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"maritalStatus\"\n                      id=\"maritalStatus\"\n                      value={payload.maritalStatus}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                      // disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      {maritalStatus.map((value) => (\n                        <option key={value.id} value={value.id}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNumber\"\n                      id=\"phoneNumber\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(e, \"phoneNumber\");\n                      }}\n                      value={payload.phoneNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.phoneNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Alternative Contact Number\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"alternatePhoneNumber\"\n                      id=\"alternatePhoneNumber\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(e, \"alternatePhoneNumber\");\n                      }}\n                      value={payload.alternatePhoneNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Descriptive Residential Address{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"address\"\n                      id=\"address\"\n                      value={payload.address}\n                      disabled\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.address !== \"\" ? (\n                      <span className={classes.error}>{errors.address}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Date Of Index Client's confrimed HIV-positive test results{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"dateIndexClientConfirmedHivPositiveTestResult\"\n                      id=\"dateIndexClientConfirmedHivPositiveTestResult\"\n                      value={\n                        payload.dateIndexClientConfirmedHivPositiveTestResult\n                      }\n                      onChange={handleInputChange}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.dateIndexClientConfirmedHivPositiveTestResult !==\n                    \"\" ? (\n                      <span className={classes.error}>\n                        {errors.referralDate}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {indexClientConfirmedHivPositive && (\n                  <div className=\"form-group col-md-4\">\n                    <Label>\n                      {\" \"}\n                      Reason for not selecting Index client Hiv confirmed test\n                      result Date ?{\" \"}\n                    </Label>\n                    <FormGroup>\n                      <select\n                        className=\"form-control\"\n                        name=\"reasonForIndexClientDateHivConfirmedNotSelected\"\n                        id=\"reasonForIndexClientDateHivConfirmedNotSelected\"\n                        onChange={handleInputChange}\n                        value={\n                          payload.reasonForIndexClientDateHivConfirmedNotSelected\n                        }\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value=\"\">Select</option>\n                        <option value=\"Result not confirmed yet\">\n                          Result not confirmed yet\n                        </option>\n                        <option value=\"NA\">NA</option>\n                      </select>\n                      {errors.reasonForIndexClientDateHivConfirmedNotSelected !==\n                      \"\" ? (\n                        <span className={classes.error}>\n                          {\n                            errors.reasonForIndexClientDateHivConfirmedNotSelected\n                          }\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n                {/* )} */}\n\n                <div className=\"form-group col-md-4 \">\n                  <Label>\n                    {\" \"}\n                    Recency Testing{\" \"}\n                    <span> (for newly tested HIV-positive only) </span>{\" \"}\n                  </Label>\n\n                  {/* {\n                  <FormGroup>\n                    <Input\n                      className=\"form-control\"\n                      name=\"finalRecencyResult\"\n                      id=\"finalRecencyResult\"\n                      type=\"text\"\n                      disabled\n                      // value={recency.finalRecencyResult}\n                      // onChange={handleInputChangeRecency}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                  </FormGroup>\n                } */}\n                  <FormGroup>\n                    <Input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"recencyTesting\"\n                      id=\"reccencyTesting\"\n                      onChange={handleInputChange}\n                      value={payload.recencyTesting}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled\n                    />\n                  </FormGroup>\n                </div>\n\n                {/* if index client is hiv positive, and date is selected */}\n                <div className=\"form-group col-md-4 \">\n                  <Label>Is client current on HIV treatment ?</Label>\n                  <FormGroup>\n                    <select\n                      className=\"form-control\"\n                      name=\"isClientCurrentlyOnHivTreatment\"\n                      id=\"isClientCurrentlyOnHivTreatment\"\n                      onChange={handleInputChange}\n                      value={payload.isClientCurrentlyOnHivTreatment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={disableCurrenTreatment}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </select>\n                  </FormGroup>\n                </div>\n\n                {payload.isClientCurrentlyOnHivTreatment &&\n                  payload.isClientCurrentlyOnHivTreatment === \"Yes\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Date of Treatment Initiation{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>{\" \"}\n                        </Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateClientEnrolledOnTreatment\"\n                          id=\"dateClientEnrolledOnTreatment\"\n                          value={payload.dateClientEnrolledOnTreatment}\n                          onChange={handleInputChange}\n                          min={\n                            payload.dateIndexClientConfirmedHivPositiveTestResult\n                          }\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={disableCurrenTreatment}\n                        />\n                        {errors.treatmentDate !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.referralDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                {payload.isClientCurrentlyOnHivTreatment &&\n                  payload.isClientCurrentlyOnHivTreatment === \"Yes\" && (\n                    <div className=\"form-group col-md-4 \">\n                      <Label>virally unsuppressed</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"virallyUnSuppressed\"\n                          id=\"virallyUnSuppressed\"\n                          onChange={handleInputChange}\n                          value={payload.virallyUnSuppressed}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={disableVL}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes\">Yes</option>\n                          <option value=\"No\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                  )}\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"willingToHaveChildrenTestedElseWhere\">\n                      Are you willing to have your children tested elsewhere by\n                      a health care worker?\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"willingToHaveChildrenTestedElseWhere\"\n                      name=\"willingToHaveChildrenTestedElseWhere\"\n                      onChange={handleInputChange}\n                      value={payload.willingToHaveChildrenTestedElseWhere}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </select>\n                  </FormGroup>\n                </div>\n              </div>\n\n              <br />\n            </div>\n            <div className=\"row\">\n              <div\n                className=\"form-group col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                SECTION B: FAMILY INDEX\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"form-group col-md-4\">\n                <FormGroup>\n                  <Label for=\"familyRelationship\">\n                    Family Relationship\n                    <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    id=\"familyRelationship\"\n                    name=\"familyRelationship\"\n                    onChange={handlefamilyIndexRequestDto}\n                    value={familyIndexRequestDto.familyRelationship}\n                  >\n                    <option value=\"\">Select</option>\n                    {/* Filter family relationship options based on selected family index */}\n                    {familyRelationship\n                      .filter((relationship) => {\n                        // Define mapping of family index codes to relationship display names to exclude\n                        const familyIndexToRelationshipMap = {\n                          FAMILY_INDEX_CHILD: [\"Biological Child\"],\n                          FAMILY_INDEX_FATHER: [\"Father\"],\n                          FAMILY_INDEX_MOTHER: [\"Mother\"],\n                        };\n\n                        // Get the effective family index value (considering auto-populated value)\n                        const effectiveFamilyIndex =\n                          props.patientObj.targetGroup === \"TARGET_GROUP_PD\"\n                            ? \"FAMILY_INDEX_CHILD\"\n                            : payload.familyIndexClient;\n\n                        // Get relationships to exclude based on selected family index\n                        const excludedRelationshipDisplays =\n                          familyIndexToRelationshipMap[effectiveFamilyIndex] ||\n                          [];\n\n                        // Return true if this relationship should be included (not excluded)\n                        return !excludedRelationshipDisplays.includes(\n                          relationship.display\n                        );\n                      })\n                      .map((value, index) => (\n                        <option key={index} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                  </select>\n                  {errors.familyRelationship && (\n                    <span className={classes.error}>\n                      {errors.familyRelationship}\n                    </span>\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-2 col-md-4\">\n                <FormGroup>\n                  <Label>Date Of Birth</Label>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Actual\"\n                        name=\"dateOfBirth\"\n                        defaultChecked\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />{\" \"}\n                      Actual\n                    </label>\n                  </div>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Estimated\"\n                        name=\"dateOfBirth\"\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />{\" \"}\n                      Estimated\n                    </label>\n                  </div>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"dateOfBirth\"\n                    id=\"dateOfBirth\"\n                    // min={familyIndexRequestDto.dateVisit}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    value={familyIndexRequestDto.dateOfBirth}\n                    onChange={handleDobChange2}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  />\n                  {errors.dateOfBirth && (\n                    <span className={classes.error}>{errors.dateOfBirth}</span>\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label>Age</Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"age\"\n                    id=\"age\"\n                    value={familyIndexRequestDto.age}\n                    disabled={ageDisabled2}\n                    // onKeyUp={handleSubmitForm}\n                    //  onKeyDown={testing}\n                    // onKeyPress={testing}\n                    onChange={handleAgeChange2}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  />\n                </FormGroup>\n              </div>\n\n              {familyIndexRequestDto.familyRelationship ===\n                \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"childNumber\">Child Number</Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"childNumber\"\n                      name=\"childNumber\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.childNumber}\n                    >\n                      <option value=\"\">Select</option>\n                      {childNumber.map((each) => (\n                        <option key={each.id} value={each.id}>\n                          {each.display}\n                        </option>\n                      ))}\n\n                      {/* <option value=\"others\">Others</option> */}\n                    </select>\n                    {errorFamilyIndexDTO.childNumber && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.childNumber}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n\n              {showOther && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Others\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"number\"\n                      name=\"otherChildNumber\"\n                      id=\"otherChildNumber\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.otherChildNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.otherChildNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.otherChildNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              {familyIndexRequestDto.familyRelationship ===\n                \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"childNumber\">Child Dead</Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"childDead\"\n                      name=\"childDead\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.childDead}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"yes\">Yes</option>\n                      <option value=\"no\">No</option>\n                    </select>\n                    {/* {errorFamilyIndexDTO.childNumber && (\n                    <span className={classes.error}>\n                      {errorFamilyIndexDTO.childNumber}\n                    </span>\n                  )} */}\n                  </FormGroup>\n                </div>\n              )}\n              {/* <div className=\"form-group col-md-4\">\n              <FormGroup>\n                <Label for=\"DateofHTS\">Other Child Number </Label>\n                <Input\n                  type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                  name=\"otherChildNumber\"\n                  id=\"otherChildNumber\"\n                  value={familyIndexRequestDto.otherChildNumber}\n                  onChange={handlefamilyIndexRequestDto}\n                  min=\"1929-12-31\"\n                  max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                  // disabled\n                />\n                {errorFamilyIndexDTO.familyRelationship && (\n                  <span className={classes.error}>\n                    {errorFamilyIndexDTO.familyRelationship}\n                  </span>\n                )}\n              </FormGroup>\n            </div> */}\n              {familyIndexRequestDto.familyRelationship ===\n                \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"liveWithParent\">Live with Parent</Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"liveWithParent\"\n                      name=\"liveWithParent\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.liveWithParent}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"yes\">Yes</option>\n                      <option value=\"no\">No</option>\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"firstName\">\n                    Contact ID\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"contactId\"\n                    id=\"contactId\"\n                    value={contactId}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled\n                  />\n                  {errors.indexClientId !== \"\" ? (\n                    <span className={classes.error}>{errors.contactId}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group col-md-4\">\n                <FormGroup>\n                  <Label for=\"statusOfContact\">\n                    Contact HIV Status <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    id=\"statusOfContact\"\n                    name=\"statusOfContact\"\n                    onChange={handlefamilyIndexRequestDto}\n                    value={familyIndexRequestDto.statusOfContact}\n                  >\n                    <option value=\"\">Select</option>\n                    {statusOfContact.map((value, index) => (\n                      <option key={index} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.statusOfContact && (\n                    <span className={classes.error}>\n                      {errors.statusOfContact}\n                    </span>\n                  )}\n                </FormGroup>\n              </div>\n              {showHTSDate && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"DateofHTS\">Date of HTS</Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"dateOfHts\"\n                      id=\"dateOfHts\"\n                      value={familyIndexRequestDto.dateOfHts}\n                      onChange={handlefamilyIndexRequestDto}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      // disabled\n                    />\n                    {errorFamilyIndexDTO.familyRelationship && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.familyRelationship}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n\n              {familyIndexRequestDto.statusOfContact &&\n                familyIndexRequestDto.statusOfContact ===\n                  \"FAMILY_INDEX_HIV_STATUS_CURRENT_ON_ART\" && (\n                  <div className=\"form-group col-md-4\">\n                    <FormGroup>\n                      <Label for=\"uan\">Unique Art No (UAN)</Label>\n                      <input\n                        className=\"form-control\"\n                        id=\"uan\"\n                        type=\"text\"\n                        name=\"uan\"\n                        value={familyIndexRequestDto.uan}\n                        onChange={handlefamilyIndexRequestDto}\n                        disabled={\n                          familyIndexRequestDto.statusOfContact !==\n                          \"FAMILY_INDEX_HIV_STATUS_CURRENT_ON_ART\"\n                        }\n                      />\n                      {errors.uan && (\n                        <span className={classes.error}>{errors.uan}</span>\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n              {familyIndexRequestDto.familyRelationship &&\n                familyIndexRequestDto.familyRelationship !==\n                  \"FAMILY_RELATIONSHIP_MOTHER\" && (\n                  <div className=\"form-group col-md-4\">\n                    <FormGroup>\n                      <Label for=\"motherDead\">Mother Dead?</Label>\n                      <select\n                        className=\"form-control\"\n                        id=\"motherDead\"\n                        name=\"motherDead\"\n                        onChange={handlefamilyIndexRequestDto}\n                        value={familyIndexRequestDto.motherDead}\n                      >\n                        <option value=\"\">Select</option>\n                        <option value=\"Yes\">Yes</option>\n                        <option value=\"No\">No</option>\n                      </select>\n                      {errorFamilyIndexDTO.motherDead && (\n                        <span className={classes.error}>\n                          {errorFamilyIndexDTO.motherDead}\n                        </span>\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n              {familyIndexRequestDto.motherDead === \"Yes\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"yearMotherDied\">Year Mother Died</Label>\n                    <input\n                      className=\"form-control\"\n                      id=\"yearMotherDied\"\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      name=\"yearMotherDead\"\n                      value={familyIndexRequestDto.yearMotherDead}\n                      onChange={handlefamilyIndexRequestDto}\n                    />\n                    {errorFamilyIndexDTO.yearMotherDead && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.yearMotherDead}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n\n              {familyIndexRequestDto.childDead === \"yes\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"yearMotherDied\">Year Child Died</Label>\n                    <input\n                      className=\"form-control\"\n                      id=\"yearMotherDied\"\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      name=\"yearChildDead\"\n                      value={familyIndexRequestDto.yearChildDead}\n                      onChange={handlefamilyIndexRequestDto}\n                    />\n                    {errorFamilyIndexDTO.yearChildDead && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.yearChildDead}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              {/* {addIndexTracker && (\n              <div className=\"form-group mb-3 col-md-12\">\n                <p style={{ color: \"red\" }}>Fill input in section B</p>\n              </div>\n            )}\n            <div className=\"form-group mb-3 col-md-6\">\n              <LabelSui\n                as=\"a\"\n                color=\"black\"\n                onClick={handleSubmitfamilyIndexRequestDto}\n                size=\"small\"\n                style={{ marginTop: 35 }}\n              >\n                <Icon name=\"plus\" /> Add\n              </LabelSui>\n            </div> */}\n              {/* <div className=\"form-group mb-3 col-md-6\">\n              <Button\n                content=\"Add\"\n                type=\"submit\"\n                icon=\"right plus\"\n                labelPosition=\"left\"\n                style={{ backgroundColor: \"#000\", color: \"white\" }}\n                onClick={handleSubmitfamilyIndexRequestDto}\n                //   disabled={saving}\n              />\n            </div> */}\n\n              {/* {arrayFamilyIndexRequestDto &&\n              arrayFamilyIndexRequestDto.length > 0 && (\n                <List className=\"mb-5\">\n                  <Table striped responsive>\n                    <thead>\n                      <tr>\n                        <th>Family Relationship</th>\n                        <th>Family Index HIV Status</th>\n                        <th>Mother Dead</th>\n\n                        <th>Action</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {arrayFamilyIndexRequestDto.length > 0 &&\n                        arrayFamilyIndexRequestDto.map((each, index) => {\n                          return (\n                            <tr key={index}>\n                              <td>\n                                {convertCodeToDisplay(\n                                  \"familyRelationship\",\n                                  each.familyRelationship\n                                )}\n                              </td>\n                              <td>\n                                {convertCodeToDisplay(\n                                  \"statusOfContact\",\n                                  each.statusOfContact\n                                )}\n                              </td>\n                              <td>{each.motherDead}</td>\n                              <td>\n                                {\" \"}\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  size=\"small\"\n                                  color=\"error\"\n                                  onClick={() => removeFamilyIndexRow(index)}\n                                >\n                                  <DeleteIcon fontSize=\"inherit\" />\n                                </IconButton>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                    </tbody>\n                  </Table>\n                </List>\n              )} */}\n            </div>\n\n            <div className=\"row\">\n              <div\n                className=\"form-group col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                SECTION C: FAMILY INDEX TRACKER\n              </div>\n\n              {/* SECTION C INPUT FILEDS  */}\n              <div className=\"row\">\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"positionOfChildEnumerated\">\n                      Position of the Child Enumerated\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      id=\"positionOfChildEnumerated\"\n                      type=\"number\"\n                      name=\"positionOfChildEnumerated\"\n                      value={\n                        familyTestingTrackerRequestDTO?.positionOfChildEnumerated\n                      }\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                    />\n                  </FormGroup>\n                </div>\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"sexTrackeer\">Sex </Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"trackerSex\"\n                      name=\"trackerSex\"\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                      value={familyTestingTrackerRequestDTO?.trackerSex}\n                    >\n                      <option value=\"\">Select</option>\n                      {genders.map((value, index) => (\n                        <option key={index} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"sex\">Age</Label>\n                    <input\n                      className=\"form-control\"\n                      id=\"trackerAge\"\n                      type=\"number\"\n                      name=\"trackerAge\"\n                      value={familyTestingTrackerRequestDTO?.trackerAge}\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={true}\n                    />\n                  </FormGroup>\n                </div>\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"followUpAppointmentLocation\">\n                      Follow Up Appointment Location\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"followUpAppointmentLocation\"\n                      name=\"followUpAppointmentLocation\"\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                      value={\n                        familyTestingTrackerRequestDTO?.followUpAppointmentLocation\n                      }\n                    >\n                      <option value=\"\">Select</option>\n                      {followUpAppointmentLocation.map((value, index) => (\n                        <option key={index} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Schedule Visit Date\n                      {/* <span style={{ color: \"red\" }}> *</span>{\" \"} */}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"scheduleVisitDate\"\n                      id=\"scheduleVisitDate\"\n                      value={familyTestingTrackerRequestDTO?.scheduleVisitDate}\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                      min={\n                        payload?.visitDate ||\n                        props?.patientObj?.confirmatoryTest2?.date2\n                      }\n                      // max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      // disabled\n                    />\n                    {/* {errors.referralDate !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.referralDate}\n                      </span>\n                    ) : (\n                      \"\"\n                    )} */}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">Date visited</Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"dateVisit\"\n                      id=\"dateVisit\"\n                      value={familyTestingTrackerRequestDTO?.dateVisit}\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                      min={props?.patientObj?.confirmatoryTest2?.date2}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      // disabled\n                    />\n                    {errorFamilyIndexTracker.dateVisit !== \"\" ? (\n                      <span className={classes.error}>\n                        {errorFamilyIndexTracker.dateVisit}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Attempts\n                      {/* <span style={{ color: \"red\" }}> *</span>{\" \"} */}\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"attempt\"\n                      id=\"attempt\"\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                      value={familyTestingTrackerRequestDTO?.attempt}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value=\"\">Select</option>\n                      {indexVisitAttempt.map((value, index) => (\n                        <option key={index} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n                <div className=\"form-group col-md-4 \">\n                  <Label>Known HIV Status ?</Label>\n                  <FormGroup>\n                    <select\n                      className=\"form-control\"\n                      name=\"knownHivPositive\"\n                      id=\"knownHivPositive\"\n                      onChange={handlefamilyTestingTrackerRequestDTO}\n                      value={familyTestingTrackerRequestDTO?.knownHivPositive}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </select>\n                  </FormGroup>\n                </div>\n                {familyTestingTrackerRequestDTO.knownHivPositive &&\n                  familyTestingTrackerRequestDTO.knownHivPositive === \"Yes\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Date Tested</Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateTested\"\n                          id=\"dateTested\"\n                          value={familyTestingTrackerRequestDTO?.dateTested}\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          min={\n                            familyTestingTrackerRequestDTO?.dateVisit ||\n                            props?.patientObj?.confirmatoryTest2?.date2\n                          }\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                        {errors.dateTested !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.dateTested}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                {familyTestingTrackerRequestDTO?.knownHivPositive &&\n                  familyTestingTrackerRequestDTO?.knownHivPositive ===\n                    \"Yes\" && (\n                    <div className=\"form-group col-md-4 \">\n                      <Label>HIV Test Result </Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"hiveTestResult\"\n                          id=\"hiveTestResult\"\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          value={familyTestingTrackerRequestDTO.hiveTestResult}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Positive\">Tested Positive</option>\n                          <option value=\"Negative\">Tested Negative</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                  )}\n                {familyTestingTrackerRequestDTO?.knownHivPositive === \"Yes\" &&\n                  familyTestingTrackerRequestDTO.hiveTestResult ===\n                    \"Positive\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Date Enrolled On ART</Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateEnrolledOnArt\"\n                          id=\"dateEnrolledOnArt\"\n                          value={\n                            familyTestingTrackerRequestDTO?.dateEnrolledOnArt\n                          }\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          min={\n                            familyTestingTrackerRequestDTO?.dateTested ||\n                            props?.patientObj?.confirmatoryTest2?.date2\n                          }\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled\n                        />\n                        {errors.referralDate !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.referralDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                {familyTestingTrackerRequestDTO?.trackerAge < 21 && (\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Date Enrolled In Ovc</Label>\n                      <Input\n                        type=\"date\"\n                        onKeyPress={(e) => {\n                          e.preventDefault();\n                        }}\n                        name=\"dateEnrolledInOVC\"\n                        id=\"dateEnrolledInOVC\"\n                        value={\n                          familyTestingTrackerRequestDTO?.dateEnrolledInOVC\n                        }\n                        onChange={handlefamilyTestingTrackerRequestDTO}\n                        min={\n                          familyTestingTrackerRequestDTO?.dateVisit ||\n                          props?.patientObj?.confirmatoryTest2?.date2\n                        }\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        // disabled\n                      />\n                      {errors.referralDate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.referralDate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n                {/* {addIndexTracker2 && (\n                <div className=\"form-group mb-3 col-md-12\">\n                  <p style={{ color: \"red\" }}>\n                    Fill section C; Index Tracker\n                  </p>\n                </div>\n              )}{\" \"}\n              <div className=\"form-group mb-3 col-md-6\">\n                <LabelSui\n                  as=\"a\"\n                  color=\"black\"\n                  onClick={handleSubmitfamilyTestingTrackerRequestDTO}\n                  size=\"small\"\n                  style={{ marginTop: 35 }}\n                >\n                  <Icon name=\"plus\" /> Add\n                </LabelSui>\n              </div> */}\n              </div>\n            </div>\n\n            {/* {arrayFamilyTestingTrackerRequestDTO.length > 0 && (\n            <List>\n              <Table striped responsive>\n                <thead>\n                  <tr>\n                    <th>Position of the child</th>\n                    <th>Sex</th>\n                    <th>Age</th>\n\n                    <th>Action</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {arrayFamilyTestingTrackerRequestDTO.map((each, index) => {\n                    return (\n                      <tr key={index}>\n                        <td>{each.positionOfChildEnumerated}</td>\n                        <td>{each.trackerSex}</td>\n                        <td>{each.trackerAge}</td>\n                        <td>\n                          {\" \"}\n                          <IconButton\n                            aria-label=\"delete\"\n                            size=\"small\"\n                            color=\"error\"\n                            onClick={() => removeFamilyTrackerRow(index)}\n                          >\n                            <DeleteIcon fontSize=\"inherit\" />\n                          </IconButton>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </List>\n          )} */}\n\n            <br />\n            <div className=\"row\">\n              <div className=\"form-group mb-3 col-md-6\">\n                <Button\n                  content=\"Done\"\n                  type=\"Done\"\n                  icon=\"right arrowe\"\n                  labelPosition=\"right\"\n                  style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                  onClick={() => {\n                    history.push(\"/\");\n                  }}\n                  disabled={saving}\n                />\n                <Button\n                  content=\"Save\"\n                  type=\"submit\"\n                  icon=\"right arrow\"\n                  labelPosition=\"right\"\n                  style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                />\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Would you like to fill the Partner Service Form?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => loadNextForm()}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n\n          <Button\n            onClick={() => handleDone()}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Skip\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default FamilyIndexTestingForm;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/HivTestResult.js",["645","646","647","648","649","650","651","652","653","654","655"],"import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport { getNextForm } from \"../../../../utility\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { toast } from \"react-toastify\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { calculate_age } from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst HivTestResult = (props) => {\n\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  let temp = { ...errors };\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  const [showCD4Count, setShowCD4Count] = useState(true);\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\n  );\n  const [nextForm, setNextForm] = useState([]);\n\n  const patientAge = calculate_age(\n    moment(\n      props.patientObj.personResponseDto &&\n        props.patientObj.personResponseDto.dateOfBirth\n        ? props.patientObj.personResponseDto.dateOfBirth\n        : 0\n    ).format(\"DD-MM-YYYY\")\n  );\n\n \n\n  const [objValues, setObjValues] = useState({\n    confirmatoryTest: {},\n    confirmatoryTest2: {},\n    hivTestResult: \"\",\n    hivTestResult2: \"\",\n    htsClientId: \"\",\n    personId: props.patientObj ? props.patientObj.id : \"\",\n    test1: {},\n    test2: {},\n    tieBreakerTest: {},\n    tieBreakerTest2: {},\n    syphilisTesting: {},\n    hepatitisTesting: {},\n    others: {},\n    cd4: {},\n    prepOffered: \"\",\n    prepAccepted: \"\",\n  });\n  const handleInputChange = (e) => {\n    // setErrors({...temp, [e.target.name]:\"\"})\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  const [initialTest1, setInitailTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [initialTest12, setInitailTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeCd4Count = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setCd4Count({ ...cd4Count, [e.target.name]: e.target.value });\n  };\n  const [cd4Count, setCd4Count] = useState({\n    cd4Count: \"\",\n    cd4SemiQuantitative: \"\",\n    cd4FlowCyteometry: \"\",\n  });\n\n  const [finalResult, setFinalResult] = useState(\"\");\n\n  const handleInputChangeInitial = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n    if (e.target.name === \"result\") {\n      //  clear the all other fields if there changes in initialTest1 result is changes\n      setConfirmatoryTest({\n        date: \"\",\n        result: \"\",\n      });\n      setTieBreakerTest({\n        date: \"\",\n        result: \"\",\n      });\n      setInitailTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n        confirmatoryTestdate: \"\",\n        confirmatoryTestresult: \"\",\n        retestingDate: \"\",\n        retestingResult: \"\",\n        tieBreakerDate: \"\",\n        tieBreakerResult: \"\",\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n        prepOffered: \"\",\n        prepAccepted: \"\",\n      });\n      setInitailTest({ ...initialTest1, [e.target.name]: e.target.value });\n\n      if (e.target.value === \"No\") {\n        //This is to show cd4 count section\n        setShowCD4Count(false);\n      }\n    } else {\n      setInitailTest({ ...initialTest1, [e.target.name]: e.target.value });\n      setErrors({ date: \"\", prepOffered: \"\", prepAccepted: \"\" });\n      //This is to show cd4 count section\n      setShowCD4Count(true);\n    }\n  };\n\n  const handleInputChangeInitial2 = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n\n    if (e.target.name === \"result2\") {\n      //clear the all other the input fields that follows the initialTest2, if there changes in initialTest12 result is changes\n      setInitailTest2({ ...initialTest12, [e.target.name]: e.target.value });\n\n      //  setTieBreakerTest({\n      //     date: \"\",\n      //     result: \"\",\n      // })\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n\n        tieBreakerDate: \"\",\n        tieBreakerResult: \"\",\n        confirmatoryTest2Date: \"\",\n        confirmatoryTest2Result: \"\",\n      });\n\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n      if (e.target.value === \"No\") {\n        setConfirmatoryTest2({\n          date: \"\",\n          result: \"\",\n        });\n        setTieBreakerTest2({\n          date: \"\",\n          result: \"\",\n        });\n\n        //This is to show cd4 count section\n        setShowCD4Count(false);\n      }\n    } else {\n      setInitailTest2({ ...initialTest12, [e.target.name]: e.target.value });\n      //This is to show cd4 count section\n      setShowCD4Count(true);\n    }\n  };\n  const [confirmatoryTest, setConfirmatoryTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [confirmatoryTest2, setConfirmatoryTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeConfirmatory = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n    setConfirmatoryTest({\n      ...confirmatoryTest,\n      [e.target.name]: e.target.value,\n    });\n\n    // clear all the input fields that follows the confirmatoryTest, if there changes in confirmatoryTest result is changes.\n    if (e.target.name === \"result\") {\n      setInitailTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest({\n        date: \"\",\n        result: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n        retestingDate: \"\",\n        retestingResult: \"\",\n        tieBreakerDate: \"\",\n        tieBreakerResult: \"\",\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n      });\n    }\n\n    //This is to show cd4 count section\n    if (initialTest1.result === \"Yes\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const handleInputChangeConfirmatory2 = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n\n    if (e.target.name === \"result2\") {\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n    }\n    setConfirmatoryTest2({\n      ...confirmatoryTest2,\n      [e.target.name]: e.target.value,\n    });\n    //This is to show cd4 count section\n    if (initialTest12.result2 === \"Yes\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const [tieBreakerTest, setTieBreakerTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [tieBreakerTest2, setTieBreakerTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeTie = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n    setTieBreakerTest({ ...tieBreakerTest, [e.target.name]: e.target.value });\n\n    if (e.target.name === \"result\") {\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      // added\n      setInitailTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n      });\n    }\n    //This is to show cd4 count section\n    if (confirmatoryTest.result === \"No\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else if (confirmatoryTest.result === \"No\" && e.target.value === \"No\") {\n      setShowCD4Count(false);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const handleInputChangeTie2 = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setTieBreakerTest2({ ...tieBreakerTest2, [e.target.name]: e.target.value });\n    //This is to show cd4 count section\n    if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"No\") {\n      setShowCD4Count(false);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const [syphills, setSyphills] = useState({\n    syphilisTestResult: \"\",\n    // result  :\"\",\n  });\n  const handleInputChangeSyphills = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setSyphills({ ...syphills, [e.target.name]: e.target.value });\n  };\n  const [hepatitis, setHepatitis] = useState({\n    hepatitisCTestResult: \"\",\n    hepatitisBTestResult: \"\",\n    longitude: \"\",\n    latitude: \"\",\n    adhocCode: \"\",\n  });\n  const handleInputChangeHepatitis = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setHepatitis({ ...hepatitis, [e.target.name]: e.target.value });\n  };\n  const [others, setOthers] = useState({\n    longitude: \"\",\n    latitude: \"\",\n    adhocCode: \"\",\n  });\n  useEffect(() => {\n    if (props.patientObj) {\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\n        setHivTestDate(props.patientObj.dateVisit);\n      } else {\n        setHivTestDate(\"\");\n      }\n      setCd4Count(\n        props.patientObj && props.patientObj.cd4 !== null\n          ? props.patientObj.cd4\n          : {}\n      );\n      setInitailTest(\n        props.patientObj && props.patientObj.test1 !== null\n          ? props.patientObj.test1\n          : {}\n      );\n      setConfirmatoryTest(\n        props.patientObj && props.patientObj.confirmatoryTest !== null\n          ? props.patientObj.confirmatoryTest\n          : {}\n      );\n      setTieBreakerTest(\n        props.patientObj && props.patientObj.tieBreakerTest !== null\n          ? props.patientObj.tieBreakerTest\n          : {}\n      );\n      setSyphills(\n        props.patientObj && props.patientObj.syphilisTesting !== null\n          ? props.patientObj.syphilisTesting\n          : {}\n      );\n      setHepatitis(\n        props.patientObj && props.patientObj.hepatitisTesting !== null\n          ? props.patientObj.hepatitisTesting\n          : {}\n      );\n      setOthers(\n        props.patientObj && props.patientObj.others !== null\n          ? props.patientObj.others\n          : {}\n      );\n\n      setInitailTest2(\n        props.patientObj && props.patientObj.test2 !== null\n          ? props.patientObj.test2\n          : {}\n      );\n      setConfirmatoryTest2(\n        props.patientObj && props.patientObj.confirmatoryTest2 !== null\n          ? props.patientObj.confirmatoryTest2\n          : {}\n      );\n      setTieBreakerTest2(\n        props.patientObj && props.patientObj.tieBreakerTest2 !== null\n          ? props.patientObj.tieBreakerTest2\n          : {}\n      );\n    }\n  }, [props.patientObj]); //initialTest12, tieBreakerTest2, confirmatoryTest2,\n\n  const handleInputChangeOthers = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setOthers({ ...others, [e.target.name]: e.target.value });\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  function CheckTestResult() {\n    //Logic to show CD4 Count\n    // else if(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result===''){\n    //     objValues.hivTestResult=\"Negative\"\n    // }\n  }\n  function CheckTestResult2() {\n    //Logic to show CD4 Count\n    if (initialTest12.result2 === \"No\") {\n      setShowCD4Count(false);\n    } else if (\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      setShowCD4Count(true);\n    }\n    // else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2===''){\n    //     objValues.hivTestResult2=\"Negative\"\n    // }\n    else if (\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"Yes\"\n    ) {\n      setShowCD4Count(true);\n    } else if (\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"No\"\n    ) {\n      setShowCD4Count(false);\n    } else {\n      setShowCD4Count(true);\n    }\n  }\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n    // initialTest1.date !== \"\" &&\n    //   initialTest1.result === \"No\" &&\n    //   (temp.prepOffered = objValues.prepOffered\n    //     ? \"\"\n    //     : \"The Prep Offered field is required.\");\n    // initialTest1.date !== \"\" &&\n    //   initialTest1.result === \"No\" &&\n    //   objValues.prepOffered === \"true\" &&\n    //   (temp.prepAccepted = objValues.prepAccepted\n    //     ? \"\"\n    //     : \"The Prep Accepted field is required.\");\n\n    //if the initial test date is filled then the initial test result should be compulsory and vice versa\n    initialTest1.date !== \"\" &&\n      (temp.initialResult = initialTest1.result\n        ? \"\"\n        : \"This field is required.\");\n    initialTest1.result !== \"\" &&\n      (temp.initialDate = initialTest1.date ? \"\" : \"This field is required.\");\n    //if the initial test result === reactive/yes then confirmatory test should be compulsory\n    initialTest1.result === \"Yes\" &&\n      (temp.confirmatoryTestdate = confirmatoryTest.date\n        ? \"\"\n        : \"This field is required.\");\n\n    //if comfirmatory date is filled then the result is compulsory\n    confirmatoryTest.date !== \"\" &&\n      (temp.confirmatoryTestresult = confirmatoryTest.result\n        ? \"\"\n        : \"This field is required.\");\n\n    //if confirmatory test =reactive the  Retesting is compulsory\n    confirmatoryTest.result === \"Yes\" &&\n      (temp.retestingDate = initialTest12.date2\n        ? \"\"\n        : \"This field is required.\");\n    initialTest12.date2 !== \"\" &&\n      (temp.retestingResult = initialTest12.result2\n        ? \"\"\n        : \"This field is required.\");\n\n    //if confirmatory test = non-reactive the  Retesting is compulsory\n    confirmatoryTest.result === \"No\" &&\n      (temp.tieBreakerDate = tieBreakerTest.date\n        ? \"\"\n        : \"This field is required.\");\n\n    tieBreakerTest.date !== \"\" &&\n      (temp.tieBreakerResult = tieBreakerTest.result\n        ? \"\"\n        : \"This field is required.\");\n\n    //if retesting = reactive then confirmatory 2 should be compulsory\n    initialTest12.result2 === \"Yes\" &&\n      (temp.confirmatoryTest2Date = confirmatoryTest2.date2\n        ? \"\"\n        : \"This field is required.\");\n\n    confirmatoryTest2.date2 !== \"\" &&\n      (temp.confirmatoryTest2Result = confirmatoryTest2.result2\n        ? \"\"\n        : \"This field is required.\");\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  // track and set final result\n  useEffect(() => {\n    let result = \"\";\n\n    if (initialTest1.result === \"No\") {\n      result = \"Negative\";\n    } else if (\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"No\" &&\n      (initialTest1.result === \"Yes\" || initialTest1.result !== \"\")\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"No\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"No\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    }\n    setFinalResult(result);\n  }, [\n    initialTest1.result,\n    confirmatoryTest.result,\n    tieBreakerTest.result,\n    initialTest12.result2,\n    confirmatoryTest2.result2,\n    tieBreakerTest2.result2,\n  ]);\n  // clear the all other fields if there changes in initialTest1 result is changes\n  // useEffect(() => {\n  //   setConfirmatoryTest({\n  //     date: \"\",\n  //     result: \"\",\n  //   });\n  //   setTieBreakerTest({\n  //     date: \"\",\n  //     result: \"\",\n  //   });\n  //   setInitailTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setConfirmatoryTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setTieBreakerTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   // clear the prepOffered and prepAccepted fields\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n  // }, [initialTest1.result]);\n\n  // clear the all other the input fields that follows the initialTest2, if there changes in initialTest12 result is changes\n\n  // useEffect(() => {\n  //   setTieBreakerTest({\n  //     date: \"\",\n  //     result: \"\",\n  //   });\n  //   setInitailTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setConfirmatoryTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setTieBreakerTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n  // }, [confirmatoryTest.result]);\n\n  // clear all the input fields that follows the confirmatoryTest, if there changes in confirmatoryTest result is changes.\n  // useEffect(() => {\n  //   setInitailTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n\n  //   setConfirmatoryTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n\n  //   setTieBreakerTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n  // }, [tieBreakerTest.result]);\n\n  // useEffect(() => {\n  //   setConfirmatoryTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setTieBreakerTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n  // }, [initialTest12.result2]);\n\n  // useEffect(() => {\n  //   setTieBreakerTest2({\n  //     date2: \"\",\n  //     result2: \"\",\n  //   });\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n  // }, [confirmatoryTest2.result2]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    //GET NEXT FORM\n    let latestForm = getNextForm(\n      \"Request_and_Result_Form\",\n      objValues.age,\n      \"\",\n      \"unknown\"\n    );\n    //SUBMIT FORM\n\n    if (validate()) {\n      if (finalResult === \"\") {\n        toast.error(\"Final result is required for submission.\");\n        return;\n      }\n\n      //logic to get Hiv result test\n      if (initialTest12.result2 === \"No\") {\n        objValues.hivTestResult2 = \"Negative\";\n      } else if (\n        initialTest12.result2 === \"Yes\" &&\n        confirmatoryTest2.result2 === \"Yes\"\n      ) {\n        objValues.hivTestResult2 = \"Positive\";\n      }\n      // else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2===''){\n      //     objValues.hivTestResult2=\"Negative\"\n      // }\n      else if (\n        confirmatoryTest2.result2 === \"No\" &&\n        tieBreakerTest2.result2 === \"Yes\"\n      ) {\n        objValues.hivTestResult2 = \"Positive\";\n      } else if (\n        confirmatoryTest2.result2 === \"No\" &&\n        tieBreakerTest2.result2 === \"No\"\n      ) {\n        objValues.hivTestResult2 = \"Negative\";\n      } else {\n        objValues.hivTestResult2 = \"\";\n      }\n\n      if (initialTest1.result === \"No\") {\n        objValues.hivTestResult = \"Negative\";\n      } else if (\n        initialTest1.result === \"Yes\" &&\n        confirmatoryTest.result === \"Yes\"\n      ) {\n        objValues.hivTestResult = \"Positive\";\n      }\n      // else if(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result===''){\n      //     objValues.hivTestResult=\"Negative\"\n      // }\n      else if (\n        confirmatoryTest.result === \"No\" &&\n        tieBreakerTest.result === \"Yes\"\n      ) {\n        objValues.hivTestResult = \"Positive\";\n      } else if (\n        confirmatoryTest.result === \"No\" &&\n        tieBreakerTest.result === \"No\"\n      ) {\n        objValues.hivTestResult = \"Negative\";\n      } else {\n        objValues.hivTestResult = \"\";\n      }\n      objValues.htsClientId = clientId;\n      objValues.confirmatoryTest = confirmatoryTest;\n      objValues.confirmatoryTest2 = confirmatoryTest2;\n      objValues.personId = patientID;\n      objValues.test1 = initialTest1;\n      objValues.test2 = initialTest12;\n      objValues.tieBreakerTest = tieBreakerTest;\n      objValues.tieBreakerTest2 = tieBreakerTest2;\n      objValues.syphilisTesting = syphills;\n      objValues.hepatitisTesting = hepatitis;\n\n      objValues.cd4 = cd4Count;\n      objValues.others = others;\n      setSaving(true);\n      axios\n        .put(`${baseUrl}hts/${clientId}/request-result`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          props.setPatientObj(response.data);\n          handleItemClick(latestForm[0], latestForm[1]);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>REQUEST AND RESULT FORM</h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h4 style={{ color: \"#fff\" }}>HIV TEST RESULT</h4>\n              </LabelRibbon>\n              <br />\n              <div className=\"form-group  col-md-2\"></div>\n              <h4>Initial Test : </h4>\n              <div className=\"form-group mb-3 col-md-5\">\n                <FormGroup>\n                  <Label for=\"\"> Date </Label>\n                  <Input\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"date\"\n                    id=\"initialDate\"\n                    value={initialTest1.date}\n                    onChange={handleInputChangeInitial}\n                    min={props?.patientObj?.dateVisit}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    required\n                  />\n                  {errors.initialDate !== \"\" ? (\n                    <span className={classes.error}>{errors.initialDate}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {initialTest1.date && (\n                <div className=\"form-group  col-md-5\">\n                  <FormGroup>\n                    <Label>Result </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"result\"\n                      id=\"initialResult\"\n                      value={initialTest1.result}\n                      onChange={handleInputChangeInitial}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={initialTest1.date === \"\" ? true : false}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"Yes\">Reactive</option>\n                      <option value=\"No\">Non Reactive</option>\n                    </select>\n                    {errors.initialResult !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.initialResult}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              <div className=\"form-group  col-md-2\"></div>\n              {initialTest1.result === \"Yes\" && (\n                <>\n                  <h4>Confirmatory Test:</h4>\n                  <div className=\"form-group mb-3 col-md-5\">\n                    <FormGroup>\n                      <Label for=\"\"> Date </Label>\n                      <Input\n                        type=\"date\"\n                        onKeyPress={(e) => {\n                          e.preventDefault();\n                        }}\n                        name=\"date\"\n                        id=\"confirmatoryTestdate\"\n                        value={confirmatoryTest.date}\n                        onChange={handleInputChangeConfirmatory}\n                        min={initialTest1.date}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        required\n                      />\n                      {errors.confirmatoryTestdate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.confirmatoryTestdate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {confirmatoryTest.date && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>Result </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"result\"\n                          id=\"confirmatoryTestresult\"\n                          value={confirmatoryTest.result}\n                          onChange={handleInputChangeConfirmatory}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={confirmatoryTest.date === \"\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"Yes\">Reactive</option>\n                          <option value=\"No\">Non Reactive</option>\n                        </select>\n                        {errors.confirmatoryTestresult !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.confirmatoryTestresult}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-2\"></div>\n                </>\n              )}\n              {confirmatoryTest.result === \"No\" && (\n                <>\n                  <h4>Tie Breaker Test:</h4>\n                  <div className=\"form-group mb-3 col-md-5\">\n                    <FormGroup>\n                      <Label for=\"\"> Date </Label>\n                      <Input\n                        type=\"date\"\n                        onKeyPress={(e) => {\n                          e.preventDefault();\n                        }}\n                        name=\"date\"\n                        id=\"tieBreakerDate\"\n                        value={tieBreakerTest.date}\n                        onChange={handleInputChangeTie}\n                        min={confirmatoryTest.date}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        required\n                      />\n                      {errors.tieBreakerDate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.tieBreakerDate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {tieBreakerTest.date && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>Result </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"result\"\n                          id=\"tieBreakerResult\"\n                          value={tieBreakerTest.result}\n                          onChange={handleInputChangeTie}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={tieBreakerTest.date === \"\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"Yes\">Reactive</option>\n                          <option value=\"No\">Non Reactive</option>\n                        </select>\n                        {errors.tieBreakerResult !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.tieBreakerResult}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-2\"></div>\n                </>\n              )}\n              <div className=\"row\">\n                <div className=\"form-group  col-md-12\">\n                  {initialTest1.result === \"No\" && (\n                    <>\n                      <b> Result : </b>\n                      <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                      <b> Final Result : </b>\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      <br />\n                    </>\n                  )}\n                  {initialTest1.result === \"No\" &&\n                    confirmatoryTest.result === \"No\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                      </>\n                    )}\n\n                  {initialTest1.result === \"Yes\" &&\n                    confirmatoryTest.result === \"Yes\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\n                        <br />\n                        <hr />\n                        <div className=\"row\">\n                          <h4>RETESTING:</h4>\n                          <div className=\"form-group mb-3 col-md-5\">\n                            <FormGroup>\n                              <Label for=\"\"> Date </Label>\n                              <Input\n                                type=\"date\"\n                                onKeyPress={(e) => {\n                                  e.preventDefault();\n                                }}\n                                name=\"date2\"\n                                id=\"retestingDate\"\n                                value={initialTest12.date2}\n                                onChange={handleInputChangeInitial2}\n                                min={confirmatoryTest.date}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.25rem\",\n                                }}\n                                required\n                              />\n                              {errors.retestingDate !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingDate}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n\n                          <div className=\"form-group  col-md-5\">\n                            <FormGroup>\n                              <Label>Result </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"result2\"\n                                id=\"retestingResult\"\n                                value={initialTest12.result2}\n                                onChange={handleInputChangeInitial2}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                disabled={\n                                  initialTest12.date2 === \"\" ? true : false\n                                }\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"Yes\">Reactive</option>\n                                <option value=\"No\">Non Reactive</option>\n                              </select>\n                              {errors.retestingResult !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingResult}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n\n                          <div className=\"form-group  col-md-2\"></div>\n                          {initialTest12.result2 === \"Yes\" && (\n                            <>\n                              <h4>Confirmatory Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"confirmatoryTest2Date\"\n                                    value={confirmatoryTest2.date2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    min={initialTest12.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                  {errors.confirmatoryTest2Date !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.confirmatoryTest2Date}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"confirmatoryTest2Result\"\n                                    value={confirmatoryTest2.result2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      confirmatoryTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                                {errors.confirmatoryTest2Result !== \"\" ? (\n                                  <span className={classes.error}>\n                                    {errors.confirmatoryTest2Result}\n                                  </span>\n                                ) : (\n                                  \"\"\n                                )}\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                          {confirmatoryTest2.result2 === \"No\" && (\n                            <>\n                              <h4>Tie Breaker Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"tieBreaker2Date\"\n                                    value={tieBreakerTest2.date2}\n                                    onChange={handleInputChangeTie2}\n                                    min={confirmatoryTest2.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                  {errors.tieBreaker2Date !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.tieBreaker2Date}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={tieBreakerTest2.result2}\n                                    onChange={handleInputChangeTie2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      tieBreakerTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                  {errors.tieBreaker2Result !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.tieBreaker2Result}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    )}\n                  {/* This is result for Test 1 */}\n                  {/* {(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result==='' ) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )} */}\n                  {confirmatoryTest.result === \"No\" &&\n                    tieBreakerTest.result === \"Yes\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\n                        <br />\n                        <hr />\n\n                        <div className=\"row\">\n                          <h4>Retesting:</h4>\n                          <div className=\"form-group mb-3 col-md-5\">\n                            <FormGroup>\n                              <Label for=\"\"> Date </Label>\n                              <Input\n                                type=\"date\"\n                                onKeyPress={(e) => {\n                                  e.preventDefault();\n                                }}\n                                name=\"date2\"\n                                id=\"retestingDate\"\n                                value={initialTest12.date2}\n                                onChange={handleInputChangeInitial2}\n                                min={tieBreakerTest.date}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.25rem\",\n                                }}\n                                required\n                              />\n                              {errors.retestingDate !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingDate}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          <div className=\"form-group  col-md-5\">\n                            <FormGroup>\n                              <Label>Result </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"result2\"\n                                id=\"retestingResult\"\n                                value={initialTest12.result2}\n                                onChange={handleInputChangeInitial2}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                disabled={\n                                  initialTest12.date2 === \"\" ? true : false\n                                }\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"Yes\">Reactive</option>\n                                <option value=\"No\">Non Reactive</option>\n                              </select>\n                              {errors.result2 !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.result2}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          <div className=\"form-group  col-md-2\"></div>\n                          {initialTest12.result2 === \"Yes\" && (\n                            <>\n                              <h4>Confirmatory Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={confirmatoryTest2.date2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    min={initialTest12.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={confirmatoryTest2.result2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      confirmatoryTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                          {confirmatoryTest2.result2 === \"No\" && (\n                            <>\n                              <h4>Tie Breaker Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={tieBreakerTest2.date2}\n                                    onChange={handleInputChangeTie2}\n                                    min={confirmatoryTest2.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={tieBreakerTest2.result2}\n                                    onChange={handleInputChangeTie2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      tieBreakerTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    )}\n                  {errors.prepOffered !== \"\" ? (\n                    <span className={classes.error}>{errors.prepOffered}</span>\n                  ) : (\n                    \"\"\n                  )}\n                  {errors.prepAccepted !== \"\" ? (\n                    <span className={classes.error}>{errors.prepAccepted}</span>\n                  ) : (\n                    \"\"\n                  )}\n\n                  {confirmatoryTest.result === \"No\" &&\n                    tieBreakerTest.result === \"No\" &&\n                    (initialTest1.result === \"Yes\" ||\n                      initialTest1.result !== \"\") && (\n                      <>\n                        <>\n                          <b> Result : </b>\n                          <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                          <b> Final Result : </b>\n                          <LabelRibbon color=\"green\"> Negative</LabelRibbon>\n                        </>\n                        <br />\n                        <div className=\"row\">\n                          <div className=\"form-group  col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Prep Offered{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"prepOffered\"\n                                id=\"prepOffered\"\n                                value={objValues.prepOffered}\n                                onChange={handleInputChange}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"true\">Yes</option>\n                                <option value=\"false\">No</option>\n                              </select>\n                            </FormGroup>\n                          </div>\n                          {objValues.prepOffered !== \"\" &&\n                            objValues.prepOffered === \"true\" && (\n                              <div className=\"form-group  col-md-6\">\n                                <FormGroup>\n                                  <Label>\n                                    Prep Accepted{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"prepAccepted\"\n                                    id=\"prepAccepted\"\n                                    value={objValues.prepAccepted}\n                                    onChange={handleInputChange}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"true\">Yes</option>\n                                    <option value=\"false\">No</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                            )}\n                        </div>\n                      </>\n                    )}\n                  {/* END of  result for Test 1 */}\n                  {/* This is result for Test 2 */}\n                  {initialTest12.result2 === \"No\" && (\n                    <>\n                      <b> Final Result : </b>\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      <br />\n                      <br />\n                      <div className=\"row\">\n                        <div className=\"form-group  col-md-5\">\n                          <FormGroup>\n                            <Label>\n                              Prep Offered{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"prepOffered\"\n                              id=\"prepOffered\"\n                              value={objValues.prepOffered}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                        {objValues.prepOffered !== \"\" &&\n                          objValues.prepOffered === \"true\" && (\n                            <div className=\"form-group  col-md-5\">\n                              <FormGroup>\n                                <Label>\n                                  Prep Accepted{\" \"}\n                                  <span style={{ color: \"red\" }}> *</span>\n                                </Label>\n                                <select\n                                  className=\"form-control\"\n                                  name=\"prepAccepted\"\n                                  id=\"prepAccepted\"\n                                  value={objValues.prepAccepted}\n                                  onChange={handleInputChange}\n                                  style={{\n                                    border: \"1px solid #014D88\",\n                                    borderRadius: \"0.2rem\",\n                                  }}\n                                >\n                                  <option value={\"\"}></option>\n                                  <option value=\"true\">Yes</option>\n                                  <option value=\"false\">No</option>\n                                </select>\n                              </FormGroup>\n                            </div>\n                          )}\n                      </div>\n                    </>\n                  )}\n                  {initialTest12.result2 === \"No\" &&\n                    confirmatoryTest2.result2 === \"No\" && (\n                      <>\n                        <b> FinalnResult : </b>\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      </>\n                    )}\n\n                  {initialTest12.result2 === \"Yes\" &&\n                    confirmatoryTest2.result2 === \"Yes\" && (\n                      <>\n                        <b> Final Result : </b>\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\n                        <br />\n                      </>\n                    )}\n                  {/* {(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='' ) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )} */}\n                  {confirmatoryTest2.result2 === \"No\" &&\n                    tieBreakerTest2.result2 === \"Yes\" && (\n                      <>\n                        <b>Final Result : </b>\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\n                      </>\n                    )}\n                  {confirmatoryTest2.result2 === \"No\" &&\n                    tieBreakerTest2.result2 === \"No\" &&\n                    (initialTest12.result2 === \"Yes\" ||\n                      initialTest12.result2 === \"Yes\" ||\n                      initialTest12.result2 === \"\") && (\n                      <>\n                        <b>Final Result : </b>\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      </>\n                    )}\n\n                  {/* END of  result for Test 2*/}\n                </div>\n              </div>\n              {initialTest1.result === \"No\" && patientAge >= 10 && (\n                <>\n                  <div className=\"row\">\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Prep Offered <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"prepOffered\"\n                          id=\"prepOffered\"\n                          value={objValues.prepOffered}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props?.activePage?.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {objValues.prepOffered !== \"\" &&\n                      objValues.prepOffered === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Prep Accepted{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"prepAccepted\"\n                              id=\"prepAccepted\"\n                              value={objValues.prepAccepted}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props?.activePage?.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                      )}\n                  </div>\n                </>\n              )}\n              {confirmatoryTest2.result2 === \"No\" &&\n                tieBreakerTest2.result2 === \"No\" && (\n                  <>\n                    <div className=\"row\">\n                      <div className=\"form-group  col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Prep Offered{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"prepOffered\"\n                            id=\"prepOffered\"\n                            value={objValues.prepOffered}\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                        </FormGroup>\n                      </div>\n                      {objValues.prepOffered !== \"\" &&\n                        objValues.prepOffered === \"true\" && (\n                          <div className=\"form-group  col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Prep Accepted{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"prepAccepted\"\n                                id=\"prepAccepted\"\n                                value={objValues.prepAccepted}\n                                onChange={handleInputChange}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"true\">Yes</option>\n                                <option value=\"false\">No</option>\n                              </select>\n                            </FormGroup>\n                          </div>\n                        )}\n                    </div>\n                  </>\n                )}\n              {showCD4Count && (\n                <>\n                  <LabelRibbon\n                    as=\"a\"\n                    color=\"blue\"\n                    style={{ width: \"106%\", height: \"35px\" }}\n                    ribbon\n                  >\n                    <h5 style={{ color: \"#fff\" }}>CD4 Count</h5>\n                  </LabelRibbon>\n                  <br /> <br />\n                  <div className=\"form-group  col-md-5\">\n                    <FormGroup>\n                      <Label>CD4 Type </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"cd4Count\"\n                        id=\"cd4Count\"\n                        value={cd4Count.cd4Count}\n                        onChange={handleInputChangeCd4Count}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"Semi-Quantitative\">\n                          Semi-Quantitative\n                        </option>\n                        <option value=\"Flow Cyteometry\">Flow cytometry</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  {cd4Count.cd4Count === \"Semi-Quantitative\" && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>CD4 Type Value</Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"cd4SemiQuantitative\"\n                          id=\"cd4SemiQuantitative\"\n                          value={cd4Count.cd4SemiQuantitative}\n                          onChange={handleInputChangeCd4Count}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"<200\">{\"<200\"}</option>\n                          <option value=\">=200\">{\">=200\"}</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                  )}\n                  {cd4Count.cd4Count === \"Flow Cyteometry\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">CD4 Type Value</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"cd4FlowCyteometry\"\n                          id=\"cd4FlowCyteometry\"\n                          value={cd4Count.cd4FlowCyteometry}\n                          onChange={handleInputChangeCd4Count}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-7\"></div>\n                </>\n              )}\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Syphilis Testing</h5>\n              </LabelRibbon>\n              <br /> <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Syphilis test result <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"syphilisTestResult\"\n                    id=\"syphilisTestResult\"\n                    value={syphills.syphilisTestResult}\n                    onChange={handleInputChangeSyphills}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Reactive</option>\n                    <option value=\"No\">Non-Reactive</option>\n                  </select>\n                  {errors.syphilisTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.syphilisTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Hepatitis Testing</h5>\n              </LabelRibbon>\n              <br /> <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis B virus test result{\" \"}\n                    <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hepatitisBTestResult\"\n                    id=\"hepatitisBTestResult\"\n                    value={hepatitis.hepatitisBTestResult}\n                    onChange={handleInputChangeHepatitis}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Positive</option>\n                    <option value=\"No\">Negative</option>\n                  </select>\n                  {errors.hepatitisBTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.hepatitisBTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis C virus test result{\" \"}\n                    <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hepatitisCTestResult\"\n                    id=\"hepatitisCTestResult\"\n                    value={hepatitis.hepatitisCTestResult}\n                    onChange={handleInputChangeHepatitis}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Positive</option>\n                    <option value=\"No\">Negative</option>\n                  </select>\n                  {errors.hepatitisCTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.hepatitisCTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Others</h5>\n              </LabelRibbon>\n              <br /> <br />\n              {props?.patientObj?.riskStratificationResponseDto !== null &&\n                props?.patientObj?.riskStratificationResponseDto\n                  ?.communityEntryPoint !== \"\" && (\n                  <>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Longitude</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"longitude\"\n                          id=\"longitude\"\n                          value={others.longitude}\n                          onChange={handleInputChangeOthers}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Latitude</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"latitude\"\n                          id=\"latitude\"\n                          value={others.latitude}\n                          onChange={handleInputChangeOthers}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">Adhoc Code</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"adhocCode\"\n                    id=\"adhocCode\"\n                    value={others.adhocCode}\n                    onChange={handleInputChangeOthers}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                  />\n                </FormGroup>\n              </div>\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* {patientAge <= 15 ? (\n                    <>\n                      <Button\n                        content=\"Back\"\n                        icon=\"left arrow\"\n                        labelPosition=\"left\"\n                        style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                        onClick={() => handleItemClick(\"basic\", \"basic\")}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <Button\n                        content=\"Back\"\n                        icon=\"left arrow\"\n                        labelPosition=\"left\"\n                        style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                        onClick={() =>\n                          handleItemClick(\n                            \"pre-test-counsel\",\n                            \"pre-test-counsel\"\n                          )\n                        }\n                      />\n                    </>\n                  )} */}\n\n                  <Button\n                    content=\"Save & Continue\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default HivTestResult;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/ViewPnsForm.js",["656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport Badge from \"@mui/material/Badge\";\n\nimport { calculate_age } from \"../../../utils\";\nimport PersonIcon from \"@mui/icons-material/Person\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst ViewPNSForm = (props) => {\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [sexs, setSexs] = useState([]);\n  const [notificationContact, setNotificationContact] = useState([]);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [indexTesting, setIndexTesting] = useState([]);\n  const [consent, setConsent] = useState([]);\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  const [errors, setErrors] = useState({});\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [elicitedCount, setElicitedCount] = useState(0);\n  const [setting, setSetting] = useState([]);\n  const [isClientCurrentlyOnHiv, setIsClientCurrentlyOnHiv] = useState(true);\n  const [maritalStatus, setMaritalStatus] = useState([]);\n  const [roleProvider, setRoleProvider] = useState([]);\n  const [facilityInfo, setFacilityInfo] = useState(\n    props?.organizationInfo.currentOrganisationUnitName\n  );\n  const [stateInfo, setStateInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n  );\n\n  const [lgaInfo, setLgaInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0].district\n      ? props?.basicInfo?.personResponseDto?.address?.address[0].district\n      : props?.patientObj?.personResponseDto?.address?.address[0].district\n  );\n  const [partnerId, setPartnerId] = useState(\"\");\n\n  let temp = { ...errors };\n  const [objValuesIndex, setObjValuesIndex] = useState({\n    htsClientId: null,\n    indexNotificationServicesElicitation: {},\n    personId: null,\n  });\n  const [contactTracing, setContactTracing] = useState({\n    partnerPhoneNumber: \"\",\n    numberOfAttempt: \"\",\n  });\n\n  const [objValues, setObjValues] = useState({\n    acceptedHts: \"\",\n    offeredPns: \"\",\n    reasonForDecline: \"\",\n    otherReasonForDecline: \"\",\n    acceptedPns: \"\",\n    address: \"\", //\n    contactTracing: {\n      partnerPhoneNumber: \"\",\n      numberOfAttempt: \"\",\n    },\n    dateEnrollmentOnART: \"\",\n    dateOfElicitation: \"\",\n    datePartnerTested: \"\",\n    dob: props?.basicInfo?.personResponseDto?.dateOfBirth,\n    facilityId: props?.organizationInfo.currentOrganisationUnitId,\n    phoneNumber:\n      props?.basicInfo?.personResponseDto?.contactPoint?.contactPoint[0]?.value,\n    alternatePhoneNumber: \"\",\n    firstName: props?.basicInfo?.personResponseDto?.firstName,\n    hivTestResult: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    indexClientId: props?.basicInfo?.indexClientCode,\n    intermediatePartnerViolence: {\n      DeprivedOfBasicNeedsEmotional: \"\",\n      DeniedBasicNecessitiesForHealthcareEmotional: \"\",\n      ForcedSexualActsSexual: \"\",\n    },\n    knownHivPositive: \"\",\n    lastName: props?.basicInfo?.personResponseDto?.surname,\n    middleName: props?.basicInfo?.personResponseDto?.otherName,\n    notificationMethod: \"\",\n    partnerId: \"\",\n    relationshipToIndexClient: \"\",\n    sex: props?.basicInfo?.personResponseDto?.gender.id,\n    htsClientInformation: {\n      testingSetting: \"\",\n      providerNameCompletingForm: \"\",\n      providerRoleCompletingForm: \"\",\n      maritalStatus: props?.basicInfo?.personResponseDto?.maritalStatus.id,\n      descriptiveResidentialAddress:\n        props?.basicInfo?.personResponseDto?.address?.address[0].city,\n      dateIndexClientConfirmedHiv: \"\",\n      isClientCurrentlyOnHiv: \"\",\n      DateOfTreatmentInitiation: \"\",\n      recencyTesting: \"\",\n      artEnrollmentNumber: \"\",\n      facilityOfEnrollment: \"\",\n      numberOfPartnerIdentifiedFromClientIndex: \"\",\n\n      partnerName: \"\",\n      partnerSex: \"\",\n      partnerAge: \"\",\n      partnerAddress: \"\",\n      relativeToIndexClient: \"\",\n      contactTracingType: \"\",\n      freedomDenial: \"\",\n      threatenToHurt: \"\",\n      sexuallyUncomfortable: \"\",\n\n      //\n\n      partnerNotification: \"\",\n      viralllyUnsppressed: \"\",\n\n      numberOfPartnerIdentifiedFromClientIndex: \"\",\n    },\n  });\n\n  const [htsClientInformation, sethtsClientInformation] = useState({\n    testingSetting: props.patientObj.testingSetting,\n    providerNameCompletingForm: \"\",\n    providerRoleCompletingForm: \"\",\n    maritalStatus: props?.basicInfo?.personResponseDto?.maritalStatus.id,\n    descriptiveResidentialAddress:\n      props?.basicInfo?.personResponseDto?.address?.address[0].city,\n    dateIndexClientConfirmedHiv: \"\",\n    isClientCurrentlyOnHiv: \"\",\n    DateOfTreatmentInitiation: \"\",\n    recencyTesting: \"\",\n    artEnrollmentNumber: \"\",\n    facilityOfEnrollment: \"\",\n    numberOfPartnerIdentifiedFromClientIndex: \"\",\n    partnerName: \"\",\n    partnerSex: \"\",\n    partnerAge: \"\",\n    partnerAddress: \"\",\n    relativeToIndexClient: \"\",\n    contactTracingType: \"\",\n    freedomDenial: \"\",\n    threatenToHurt: \"\",\n    sexuallyUncomfortable: \"\",\n\n    //\n\n    partnerNotification: \"\",\n    viralllyUnsppressed: \"\",\n\n    numberOfPartnerIdentifiedFromClientIndex: \"\",\n  });\n\n  //   const getPNSInfo = (id) => {\n  //     axios\n  //       .get(`${baseUrl}hts-personal-notification-service/${id}/hts-client`, {\n  //         headers: { Authorization: `Bearer ${token}` },\n  //       })\n  //       .then((response) => {\n  //         setMaritalStatus(response.data);\n  //       })\n  //       .catch((error) => {});\n  //   };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setObjValues({ ...objValues, [inputName]: NumberValue });\n    if (inputName === \"phoneNumber\") {\n      setObjValues({ ...objValues, [inputName]: NumberValue });\n    }\n    if (inputName === \"alternatePhoneNumber\") {\n      setObjValues({ ...objValues, [inputName]: NumberValue });\n    }\n  };\n\n  const TargetGroupSetup = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFacilityInfo(response.data.currentOrganisationUnitName);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getPartnerId = (id) => {\n    axios\n      .get(\n        `${baseUrl}hts-personal-notification-service/get-partner-id?htsClientId=${props.patientObj?.id}&clientCode=${props?.patientObj?.clientCode}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setPartnerId(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  useEffect(() => {\n    // getPartnerId();\n    Sex();\n    getStates();\n    NotificationContact();\n    IndexTesting();\n    Consent();\n    getMaritalStatus();\n    PROVIDER_ROLE();\n    viewPnIsnfo();\n    // if (props.patientObj) {\n    //   if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\n    //     setHivTestDate(props.patientObj.dateVisit);\n    //   } else {\n    //     setHivTestDate(\"\");\n    //   }\n\n    //   setObjValues({\n    //     ...objValues,\n    //     firstName: props.patientObj.personResponseDto.firstName,\n    //     middleName: props?.patientObj?.personResponseDto?.otherName,\n    //     lastName: props?.patientObj?.personResponseDto?.surname,\n    //     sex: props?.patientObj?.personResponseDto?.gender.id,\n    //     dob: props?.patientObj?.personResponseDto?.dateOfBirth,\n    //     phoneNumber:\n    //       props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n    //         ?.value,\n    //   });\n\n    //   sethtsClientInformation({\n    //     ...htsClientInformation,\n    //     maritalStatus: props?.patientObj?.personResponseDto?.maritalStatus.id,\n    //     descriptiveResidentialAddress:\n    //       props?.patientObj?.personResponseDto?.address?.address[0].city,\n    //   });\n\n    // offeredPns: props.patientObj.personResponseDto.firstName\n\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    // })\n    // }\n\n    if (\n      props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId ||\n      props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n    ) {\n      getProvincesId(\n        props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n      );\n    }\n\n    if (props.organizationInfo) {\n      TargetGroupSetup();\n    }\n  }, [props.patientObj]);\n\n  useEffect(() => {\n    loadFamilyIndexSetting();\n  }, []);\n\n  // console.log(props.basicInfo);\n  const handleHTSClientInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (\n      e.target.name === \"partnerAge\" ||\n      e.target.name === \"numberOfAttempt\" ||\n      e.target.name === \"numberOfPartnerIdentifiedFromClientIndex\"\n    ) {\n      if (e.target.value > -1) {\n        sethtsClientInformation({\n          ...htsClientInformation,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else {\n      sethtsClientInformation({\n        ...htsClientInformation,\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n\n  const loadFamilyIndexSetting = () => {\n    let testingSetting = props?.patientObj?.testingSetting;\n    let testingType = \"\";\n    // COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\n    if (testingSetting.includes(\"COMMUNITY\")) {\n      testingType = \"COMMUNITY_HTS_TEST_SETTING\";\n    }\n\n    if (testingSetting.includes(\"FACILITY\")) {\n      testingType = \"FACILITY_HTS_TEST_SETTING\";\n    }\n    axios\n      .get(`${baseUrl}application-codesets/v2/${testingType}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const getMaritalStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setMaritalStatus(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const PROVIDER_ROLE = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PROVIDER_ROLE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setRoleProvider(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  function getStateByCountryId(getCountryId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setStates(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  function getProvincesId(getStateId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    setErrors({ ...temp, stateId: \"\" });\n    setObjValues({ ...objValues, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(\n          response.data.sort((x, y) => {\n            return x.id - y.id;\n          })\n        );\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getStates = () => {\n    getStateByCountryId(\"1\");\n    // setObjValues({ ...objValues, countryId: 1 });\n  };\n\n  //Get list of Genders from\n  const Sex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSexs(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  console.log(props);\n  //Get all recorcd by htsClientId\n  const getAllRecordByHTSClientId = () => {\n    axios\n      .get(`${baseUrl}hts-personal-notification-service/{id}/hts-client`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get view pns info\n  const viewPnIsnfo = () => {\n    axios\n      .get(`${baseUrl}hts-personal-notification-service/${props.row.row.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setObjValues(response.data);\n        sethtsClientInformation(response.data.htsClientInformation);\n        setContactTracing(response.data.contactTracing);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  ///CONSENT\tYes\t\ten\tCONSENT\n  const Consent = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setConsent(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const NotificationContact = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setNotificationContact(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n\n  const handleInputContactChanges = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"numberOfAttempt\") {\n      if (e.target.value > -1) {\n        setContactTracing({\n          ...contactTracing,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else {\n      setContactTracing({ ...contactTracing, [e.target.name]: e.target.value });\n    }\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (\n      e.target.name === \"providerNameCompletingForm\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"clientName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n\n    if (e.target.name === \"offeredPns\") {\n      setObjValues({\n        ...objValues,\n        reasonForDecline: \"\",\n        [e.target.name]: e.target.value,\n        otherReasonForDecline: \"\",\n        acceptedPns: \"\",\n      });\n    }\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\n    //     setHideNumChild(true)\n    // }else{\n    //     setHideNumChild(false)\n    // }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age_now--;\n      }\n      objValues.age = age_now;\n\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setObjValues({ ...objValues, age: \"\" });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n\n    setObjValues({ ...objValues, dob: e.target.value });\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value === \"Actual\") {\n      objValues.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value === \"Estimated\") {\n      objValues.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  //End of Date of Birth and Age handling\n  const checkPhoneNumberBasic = (e, inputName) => {\n    const limit = 10;\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\n  };\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n  const validate = () => {\n    //HTS FORM VALIDATION\n    // temp.stateId = objValues.stateId ? \"\" : \"This field is required.\";\n    // temp.lga = objValues.lga ? \"\" : \"This field is required.\";\n    // temp.facilityId = objValues.facilityId ? \"\" : \"This field is required.\";\n    if (objValues.offeredPns !== \"No\") {\n      temp.testingSetting = htsClientInformation.testingSetting\n        ? \"\"\n        : \"This field is required.\";\n      temp.providerRoleCompletingForm =\n        htsClientInformation.providerRoleCompletingForm\n          ? \"\"\n          : \"This field is required.\";\n      temp.relativeToIndexClient = htsClientInformation.relativeToIndexClient\n        ? \"\"\n        : \"This field is required.\";\n    }\n    if (objValues.offeredPns === \"No\") {\n      temp.reasonForDecline = objValues.reasonForDecline\n        ? \"\"\n        : \"This field is required.\";\n      temp.otherReasonForDecline =\n        objValues.reasonForDecline === \"others\" &&\n        objValues.otherReasonForDecline\n          ? \"\"\n          : \"This field is required.\";\n    }\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   objValues.htsClientInformation = htsClientInformation;\n  //   objValues.contactTracing = contactTracing;\n\n  //   console.log(objValues);\n  // };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    objValues.htsClientInformation = htsClientInformation;\n    objValues.contactTracing = contactTracing;\n    objValues.htsClientId =\n      props && props.patientObj ? props.patientObj?.id : \"\";\n\n    if (validate()) {\n      setSaving(true);\n      objValues.isDateOfBirthEstimated =\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\n      axios\n        .put(\n          `${baseUrl}hts-personal-notification-service/${props.row.row.id}`,\n          objValues,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        )\n        .then((response) => {\n          setSaving(false);\n          toast.success(\"Record save successfully\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n\n          handleItemClick(\"pns-history\");\n\n          if (\n            objValues.offeredPns !== \"No\" &&\n            objValues.acceptedPns !== \"No\"\n            // objValues.elicited !== \"No\"\n          ) {\n            // setElicitedCount(elicitedCount + 1);\n            // setObjValues({\n            //   providerNameCompletingForm: \"\",\n            //   clientName: \"\",\n            //   lastName: \"\",\n            //   dob: \"\",\n            //   phoneNumber: \"\",\n            //   altPhoneNumber: \"\",\n            //   sex: \"\",\n            //   htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\n            // physicalHurt: \"\",\n            // threatenToHurt: \"\",\n            // descriptiveResidentialAddress: \"\",\n            // hangOutSpots: \"\",\n            // relativeToIndexClient: \"\",\n            // currentlyLiveWithPartner: \"\",\n            // partnerTestedPositive: \"\",\n            // sexuallyUncomfortable: \"\",\n            // notificationMethod: \"\",\n            // datePartnerCameForTesting: \"\",\n            // age: \"\",\n            // isDateOfBirthEstimated: false,\n            // //offeredPns:\"\",\n            //acceptedPns:\"\",\n            //elicited: \"\",\n            // stateId: \"\",\n            // lga: \"\",\n            // datePartnerTested: \"\",\n            //   // partnerCurrentHivStatus: \"\",\n            // });\n          }\n          //handleItemClickPage('list')\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>\n            Partner Notification Services\n            {/*<Button*/}\n            {/*    variant=\"contained\"*/}\n            {/*    color=\"primary\"*/}\n            {/*    className=\" float-end  mr-2 mt-2\"*/}\n            {/*    onClick={() => handleItemClickPage(\"list\")}*/}\n            {/*//startIcon={<FaUserPlus size=\"10\"/>}*/}\n            {/*>*/}\n            {/*    <span style={{ textTransform: \"capitalize\" }}>*/}\n            {/*        {\" \"}*/}\n            {/*        Back To Client List*/}\n            {/*    </span>*/}\n            {/*</Button>*/}\n          </h2>\n\n          <br />\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"form-group  col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Offered PNS ? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"offeredPns\"\n                    id=\"offeredPns\"\n                    value={objValues.offeredPns}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.row.action === \"view\" ? true : false}\n                  >\n                    <option value={\"\"}></option>\n                    {consent.map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.offeredPns !== \"\" ? (\n                    <span className={classes.error}>{errors.offeredPns}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              {objValues.offeredPns !== \"\" && objValues.offeredPns !== \"No\" && (\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Accepted PNS ? <span style={{ color: \"red\" }}> </span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"acceptedPns\"\n                      id=\"acceptedPns\"\n                      value={objValues.acceptedPns}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.row.action === \"view\" ? true : false}\n                    >\n                      <option value={\"\"}></option>\n                      {consent.map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n\n              {objValues.offeredPns.toLowerCase() === \"no\" && (\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Reason for decline{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"select\"\n                      name=\"reasonForDecline\"\n                      id=\"reasonForDecline \"\n                      value={objValues.reasonForDecline}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.row.action === \"view\" ? true : false}\n                    >\n                      <option value={\"\"}>Select</option>\n\n                      <option key={1} value={\"others\"}>\n                        Others\n                      </option>\n                    </select>\n                    {errors.reasonForDecline !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.reasonForDecline}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n\n              {objValues.offeredPns.toLowerCase() === \"no\" &&\n                objValues.offeredPns.toLowerCase() === \"no\" && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Other reason For Decline\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"otherReasonForDecline\"\n                        id=\"otherReasonForDecline\"\n                        value={objValues.otherReasonForDecline}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                      />\n                      {errors.otherReasonForDecline !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.otherReasonForDecline}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n              {/*{objValues.acceptedPns !== \"\" &&*/}\n              {/*    objValues.acceptedPns !== \"No\" && (*/}\n              {/*        <div className=\"form-group  col-md-4\">*/}\n              {/*            <FormGroup>*/}\n              {/*                <Label>*/}\n              {/*                    Elicited ? <span style={{ color: \"red\" }}> </span>*/}\n              {/*                </Label>*/}\n              {/*                <select*/}\n              {/*                    className=\"form-control\"*/}\n              {/*                    name=\"elicited\"*/}\n              {/*                    id=\"elicited\"*/}\n              {/*                    value={objValues.elicited}*/}\n              {/*                    onChange={handleInputChange}*/}\n              {/*                    style={{*/}\n              {/*                        border: \"1px solid #014D88\",*/}\n              {/*                        borderRadius: \"0.2rem\",*/}\n              {/*                    }}*/}\n              {/*                >*/}\n              {/*                    <option value={\"\"}></option>*/}\n              {/*                    {consent.map((value) => (*/}\n              {/*                        <option key={value.id} value={value.display}>*/}\n              {/*                            {value.display}*/}\n              {/*                        </option>*/}\n              {/*                    ))}*/}\n              {/*                </select>*/}\n              {/*            </FormGroup>*/}\n              {/*        </div>*/}\n              {/*    )}*/}\n            </div>\n\n            <div className=\"row\">\n              {objValues.offeredPns !== \"\" &&\n                objValues.offeredPns === \"Yes\" &&\n                objValues.acceptedPns !== \"\" &&\n                objValues.acceptedPns === \"Yes\" && (\n                  <>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          State <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"state\"\n                          id=\"state\"\n                          onChange={getProvinces}\n                          value={stateInfo}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        >\n                          <option value={\"\"}></option>\n                          {states.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.stateId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.stateId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          LGA <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"lga\"\n                          id=\"lga\"\n                          value={lgaInfo}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        >\n                          <option value={\"\"}></option>\n                          {provinces.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.lga !== \"\" ? (\n                          <span className={classes.error}>{errors.lga}</span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"providerNameCompletingForm\">\n                          Facility Name\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <Input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"facilityId\"\n                          id=\"facilityId\"\n                          value={facilityInfo}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        />\n                        {errors.facilityId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.facilityId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    {/* <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label>Date</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                          name=\"dob\"\n                          id=\"dob\"\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          value={objValues.dob}\n                          onChange={handleDobChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div> */}\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Setting <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"testingSetting\"\n                          id=\"testingSetting\"\n                          value={htsClientInformation.testingSetting}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {setting.map((value) => (\n                            <option key={value.id} value={value.code}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.testingSetting !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.testingSetting}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Name of provider completing the form\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"providerNameCompletingForm\"\n                          id=\"providerNameCompletingForm\"\n                          value={\n                            htsClientInformation.providerNameCompletingForm\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Role of the provider completing Form\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"providerRoleCompletingForm\"\n                          id=\"providerRoleCompletingForm\"\n                          value={\n                            htsClientInformation.providerRoleCompletingForm\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {roleProvider.map((value) => (\n                            <option key={value.id} value={value.code}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.providerRoleCompletingForm !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.providerRoleCompletingForm}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                      style={{\n                        backgroundColor: \"#992E62\",\n                        width: \"125%\",\n                        height: \"35px\",\n                        color: \"#fff\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      SECTION 1 : INFORMATION ABOUT THE INDEX CLIENT\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Client's Firstname </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"firstName\"\n                          id=\"firstName\"\n                          value={objValues.firstName}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Client's Middlename </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"middleName\"\n                          id=\"middleName\"\n                          value={objValues.middleName}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Client's Lastname</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"lastName\"\n                          id=\"lastName\"\n                          value={objValues.lastName}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Index Client ID </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"indexClientId\"\n                          id=\"indexClientId\"\n                          value={props?.patientObj?.clientCode || \"\"}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled={props.row.action === \"view\" ? true : false}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Sex </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"sex\"\n                          id=\"sex\"\n                          value={objValues.sex}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        >\n                          <option value={\"\"}></option>\n                          {sexs.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                    {/*    <FormGroup>*/}\n                    {/*        <Label for=\"\">Last Name</Label>*/}\n                    {/*        <Input*/}\n                    {/*            type=\"text\"*/}\n                    {/*            name=\"lastName\"*/}\n                    {/*            id=\"lastName\"*/}\n                    {/*            value={objValues.lastName}*/}\n                    {/*            onChange={handleInputChange}*/}\n                    {/*            style={{*/}\n                    {/*                border: \"1px solid #014D88\",*/}\n                    {/*                borderRadius: \"0.25rem\",*/}\n                    {/*            }}*/}\n                    {/*        />*/}\n                    {/*    </FormGroup>*/}\n                    {/*</div>*/}\n                    {/* <div className=\"form-group mb-2 col-md-4\">\n                      <FormGroup>\n                        <Label>Date Of Birth</Label>\n                        <div className=\"radio\">\n                          <label>\n                            <input\n                              type=\"radio\"\n                              value=\"Actual\"\n                              name=\"dateOfBirth\"\n                              defaultChecked\n                              onChange={(e) => handleDateOfBirthChange(e)}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />{\" \"}\n                            Actual\n                          </label>\n                        </div>\n                        <div className=\"radio\">\n                          <label>\n                            <input\n                              type=\"radio\"\n                              value=\"Estimated\"\n                              name=\"dateOfBirth\"\n                              onChange={(e) => handleDateOfBirthChange(e)}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />{\" \"}\n                            Estimated\n                          </label>\n                        </div>\n                      </FormGroup>\n                    </div> */}\n                    <div className=\"form-group mb-2 col-md-4\">\n                      <FormGroup>\n                        <Label>Date Of Birth</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dob\"\n                          id=\"dob\"\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          value={objValues.dob}\n                          onChange={handleDobChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-2 col-md-4\">\n                      <FormGroup>\n                        <Label>Age</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"number\"\n                          name=\"age\"\n                          id=\"age\"\n                          value={calculate_age(\n                            props?.basicInfo?.personResponseDto?.dateOfBirth\n                              ? props?.basicInfo?.personResponseDto?.dateOfBirth\n                              : props?.patientObj?.personResponseDto\n                                  ?.dateOfBirth\n                          )}\n                          // disabled={ageDisabled}\n                          disabled\n                          onChange={handleAgeChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Marital Status <span style={{ color: \"red\" }}> </span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"maritalStatus\"\n                          id=\"maritalStatus\"\n                          value={htsClientInformation.maritalStatus}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                          // disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          {maritalStatus.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                        {/* {errors.testingSetting !== \"\" ? (\n                                            <span className={classes.error}>\n                                                {errors.testingSetting}\n                                            </span>\n                                        ) : (\n                                            \"\"\n                                        )} */}\n                      </FormGroup>\n                    </div>\n                    {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                    {/*  <FormGroup>*/}\n                    {/*    <Label for=\"\">Phone Number</Label>*/}\n\n                    {/*    <PhoneInput*/}\n                    {/*        containerStyle={{*/}\n                    {/*          width: \"100%\",*/}\n                    {/*          border: \"1px solid #014D88\",*/}\n                    {/*        }}*/}\n                    {/*        inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                    {/*        country={\"ng\"}*/}\n                    {/*        placeholder=\"(234)7099999999\"*/}\n                    {/*        minLength={10}*/}\n                    {/*        name=\"phoneNumber\"*/}\n                    {/*        disabled*/}\n                    {/*        id=\"phoneNumber\"*/}\n                    {/*        masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                    {/*        value={objValues.phoneNumber}*/}\n                    {/*        onChange={(e) => {*/}\n                    {/*          checkPhoneNumberBasic(e, \"phoneNumber\");*/}\n                    {/*        }}*/}\n                    {/*        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                    {/*    />*/}\n                    {/*    {errors.phoneNumber !== \"\" ? (*/}\n                    {/*        <span className={classes.error}>*/}\n                    {/*    {errors.phoneNumber}*/}\n                    {/*  </span>*/}\n                    {/*    ) : (*/}\n                    {/*        \"\"*/}\n                    {/*    )}*/}\n                    {/*  </FormGroup>*/}\n                    {/*</div>*/}\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Phone Number\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"phoneNumber\"\n                          id=\"phoneNumber\"\n                          onChange={(e) => {\n                            handleInputChangePhoneNumber(e, \"phoneNumber\");\n                          }}\n                          value={objValues.phoneNumber}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        />\n                        {errors.phoneNumber !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.phoneNumber}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                    {/*  <FormGroup>*/}\n                    {/*    <Label for=\"\">Alternative Phone Number</Label>*/}\n                    {/*    <PhoneInput*/}\n                    {/*        disabled={props.row.action === \"view\" ? true : false}*/}\n                    {/*        containerStyle={{*/}\n                    {/*          width: \"100%\",*/}\n                    {/*          border: \"1px solid #014D88\",*/}\n                    {/*        }}*/}\n                    {/*        inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                    {/*        country={\"ng\"}*/}\n                    {/*        placeholder=\"(234)7099999999\"*/}\n                    {/*        minLength={10}*/}\n                    {/*        name=\"alternatePhoneNumber\"*/}\n                    {/*        id=\"altPhoneNumber\"*/}\n                    {/*        masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                    {/*        value={objValues.alternatePhoneNumber}*/}\n                    {/*        onChange={(e) => {*/}\n                    {/*          checkPhoneNumberBasic(e, \"alternatePhoneNumber\");*/}\n                    {/*        }}*/}\n                    {/*        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                    {/*    />*/}\n                    {/*  </FormGroup>*/}\n                    {/*</div>*/}\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Alternative Contact Number\n                          {/* <span style={{color: \"red\"}}> *</span> */}\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"alternatePhoneNumber\"\n                          id=\"alternatePhoneNumber\"\n                          onChange={(e) => {\n                            handleInputChangePhoneNumber(\n                              e,\n                              \"alternatePhoneNumber\"\n                            );\n                          }}\n                          value={objValues.alternatePhoneNumber}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> Descriptive Residential Address </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"descriptiveResidentialAddress\"\n                          id=\"descriptiveResidentialAddress\"\n                          value={\n                            htsClientInformation.descriptiveResidentialAddress\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Date Of Index Client's confirmed HIV-positive test\n                          results <span style={{ color: \"red\" }}> *</span>{\" \"}\n                        </Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateIndexClientConfirmedHiv\"\n                          id=\"dateIndexClientConfirmedHiv\"\n                          value={\n                            props?.patientObj?.confirmatoryTest2?.date2 || \"\"\n                          }\n                          onChange={handleHTSClientInputChange}\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled={props.row.action === \"view\" ? true : false}\n                          disabled\n                        />\n                        {errors.dateIndexClientConfrimedHiv !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.referralDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    {/* {indexClientConfirmedHivPositive && ( */}\n\n                    {/* )} */}\n                    {/* if index client is hiv positive, and date is selected */}\n                    <div className=\"form-group col-md-4 \">\n                      <Label>Is client current on HIV treatment?</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"isClientCurrentlyOnHiv\"\n                          id=\"isClientCurrentlyOnHiv\"\n                          onChange={handleHTSClientInputChange}\n                          value={htsClientInformation.isClientCurrentlyOnHiv}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes\">Yes</option>\n                          <option value=\"No\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {htsClientInformation.isClientCurrentlyOnHiv &&\n                      htsClientInformation.isClientCurrentlyOnHiv === \"Yes\" && (\n                        <div className=\"form-group mb-3 col-md-4\">\n                          <FormGroup>\n                            <Label for=\"\">\n                              Date of Treatment Initiation{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>{\" \"}\n                            </Label>\n                            <Input\n                              type=\"date\"\n                              onKeyPress={(e) => {\n                                e.preventDefault();\n                              }}\n                              name=\"DateOfTreatmentInitiation\"\n                              id=\"DateOfTreatmentInitiation\"\n                              value={\n                                htsClientInformation.DateOfTreatmentInitiation\n                              }\n                              onChange={handleHTSClientInputChange}\n                              min={props?.patientObj?.confirmatoryTest2?.date2}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.25rem\",\n                              }}\n                              disabled={\n                                props.row.action === \"view\" ? true : false\n                              }\n                            />\n                            {/* {errors.treatmentDateI !== \"\" ? (\n                                          <span className={classes.error}>\n                                            {errors.referralDate}\n                                          </span>\n                                        ) : (\n                                          \"\"\n                                        )} */}\n                          </FormGroup>\n                        </div>\n                      )}\n\n                    <div className=\"form-group col-md-4 \">\n                      <Label>Recency Testing</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"recencyTesting\"\n                          id=\"recencyTesting\"\n                          onChange={handleHTSClientInputChange}\n                          value={htsClientInformation.recencyTesting}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Recent Infection\">\n                            Recent Infection\n                          </option>\n                          <option value=\"Long Infection\">Long Infection</option>\n                          <option value=\"Not Done\">Not Done</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> ART Enrollment Number </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"artEnrollmentNumber\"\n                          id=\"artEnrollmentNumber\"\n                          value={htsClientInformation.artEnrollmentNumber}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> Facility Of Enrollment </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"facilityOfEnrollment\"\n                          id=\"facilityOfEnrollment\"\n                          value={htsClientInformation.facilityOfEnrollment}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Notification Method selected </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"notificationMethod\"\n                          id=\"notificationMethod\"\n                          value={objValues.notificationMethod}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {notificationContact.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          {\" \"}\n                          Number of Partner{\" \"}\n                          <span>\n                            {\" \"}\n                            (sexual or social) identified/elicited from index{\" \"}\n                          </span>\n                        </Label>\n                        <Input\n                          type=\"number\"\n                          name=\"numberOfPartnerIdentifiedFromClientIndex\"\n                          id=\"numberOfPartnerIdentifiedFromClientIndex\"\n                          value={\n                            htsClientInformation.numberOfPartnerIdentifiedFromClientIndex\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n\n                    <div\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                      style={{\n                        backgroundColor: \"#992E62\",\n                        width: \"125%\",\n                        height: \"35px\",\n                        color: \"#fff\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      SECTION 2 : LISTING INDEX CLIENT PARTNER\n                    </div>\n                    <p style={{ color: \"black\", marginBottom: \"20px\" }}>\n                      <i>\n                        Instruction: Ask index client to list all the client\n                        that have had sex with in the last 12 months. who may be\n                        risk to HIV and or partners who they share needle for\n                        injection of drugs where index client alluded to\n                        injection drugs\n                      </i>\n                    </p>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Date of Elicitation</Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateOfElicitation\"\n                          id=\"dateOfElicitation\"\n                          value={objValues.dateOfElicitation}\n                          onChange={handleInputChange}\n                          min={props?.patientObj?.confirmatoryTest2?.date2}\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled\n                        />\n                        {errors?.dateOfElicitation !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors?.dateOfElicitation}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Partner ID </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"partnerId\"\n                          id=\"partnerId\"\n                          value={objValues.partnerId}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={true}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          {\" \"}\n                          Name of Partner <span> (Enter surname first) </span>\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"partnerName\"\n                          id=\"partnerName\"\n                          value={htsClientInformation.partnerName}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Sex </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"partnerSex\"\n                          id=\"partnerSex\"\n                          value={htsClientInformation.partnerSex}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {sexs.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Age <span> (In years) </span>{\" \"}\n                        </Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"number\"\n                          name=\"partnerAge\"\n                          id=\"partnerAge\"\n                          value={htsClientInformation.partnerAge}\n                          // disabled={ageDisabled}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          {\" \"}\n                          Home/Contact Address <span> include landmark </span>\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"partnerAddress\"\n                          id=\"partnerAddress\"\n                          value={htsClientInformation.partnerAddress}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> Contact Phone Number</Label>\n\n                      \n                        <PhoneInput\n                          containerStyle={{\n                            width: \"100%\",\n                            border: \"1px solid #014D88\",\n                          }}\n                          inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                          country={\"ng\"}\n                          placeholder=\"(234)7099999999\"\n                          minLength={10}\n                          name=\"partnerPhoneNumber\"\n                          id=\"partnerPhoneNumber\"\n                          masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                          value={contactTracing.partnerPhoneNumber}\n                          onChange={(e) => {\n                            checkPhoneNumberBasic(e, \"partnerPhoneNumber\");\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n\n                          //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                        />\n                        {errors.partnerPhoneNumber !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.partnerPhoneNumber}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Relationship to Index Client{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"relativeToIndexClient\"\n                          id=\"relativeToIndexClient\"\n                          value={htsClientInformation.relativeToIndexClient}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {indexTesting.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                      {errors.relativeToIndexClient !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.relativeToIndexClient}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Contact tracing</Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"contactTracingType\"\n                          id=\"contactTracingType\"\n                          value={htsClientInformation.contactTracingType}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}>select</option>\n                          <option value=\"Phone calls\">Phone calls</option>\n                          <option value=\"Physical visit\">Physical visit</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> Number of Attempt</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"numberOfAttempt\"\n                          id=\"numberOfAttempt\"\n                          value={contactTracing.numberOfAttempt}\n                          onChange={handleInputContactChanges}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n\n                          // disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Has this partner ever denied you of food, shelter,\n                          freedom of movement,livehood?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"freedomDenial\"\n                          id=\"freedomDenial\"\n                          value={htsClientInformation.freedomDenial}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Has this partner ever threatened to hurt you? *\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"threatenToHurt\"\n                          id=\"threatenToHurt\"\n                          value={htsClientInformation.threatenToHurt}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Has this partner ever threatened to rape and force to\n                          have sex with you ? *\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"sexuallyUncomfortable\"\n                          id=\"sexuallyUncomfortable\"\n                          value={htsClientInformation.sexuallyUncomfortable}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group col-md-4 \">\n                      <Label>Known HIV Positive ?</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"knownHivPositive\"\n                          id=\"knownHivPositive\"\n                          onChange={handleInputChange}\n                          value={objValues.knownHivPositive}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes\">Yes</option>\n                          <option value=\"No\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Accepted HTS ? <span style={{ color: \"red\" }}> </span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"acceptedHts\"\n                          id=\"acceptedHts\"\n                          value={objValues.acceptedHts}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          HIV Test Result{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"hivTestResult\"\n                          id=\"hivTestResult \"\n                          value={objValues.hivTestResult}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"negative\">Negative</option>\n                          <option value=\"positive\">Positive</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    {objValues.partnerCurrentHivStatus !== \"\" &&\n                      objValues.partnerCurrentHivStatus === \"positive\" && (\n                        <div className=\"form-group mb-3 col-md-4\">\n                          <FormGroup>\n                            <Label for=\"\">\n                              Date Tested?{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <Input\n                              type=\"date\"\n                              onKeyPress={(e) => {\n                                e.preventDefault();\n                              }}\n                              name=\"datePartnerTested\"\n                              id=\"datePartnerTested\"\n                              value={objValues.datePartnerTested}\n                              onChange={handleInputChange}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.25rem\",\n                              }}\n                              disabled={\n                                props.row.action === \"view\" ? true : false\n                              }\n                            />\n                          </FormGroup>\n                        </div>\n                      )}\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Date Enrolled On ART</Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateEnrollmentOnART\"\n                          id=\"dateEnrollmentOnART\"\n                          value={objValues.dateEnrollmentOnART}\n                          onChange={handleInputChange}\n                          min=\"1929-12-31\"\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.row.action === \"view\" ? true : false}\n\n                          // disabled\n                        />\n                        {errors.referralDate !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.referralDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              {props.row.action === \"update\" && (\n                <div className=\"row\">\n                  <div className=\"form-group mb-3 col-md-6\">\n                    <Button\n                      content=\"Update\"\n                      icon=\"save\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default ViewPNSForm;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RefferalUnit.js",["683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport Select from \"react-select\";\n// import { getAcount } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\nimport {\n  getAllStateByCountryId,\n  getAllCountry,\n  getAllProvinces,\n  getAllGenders,\n  alphabetOnly,\n} from \"../../../../utility\";\nimport { calculate_age } from \"../../utils\";\nimport { useHistory } from \"react-router-dom\";\nimport DualListBox from \"react-dual-listbox\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst RefferralUnit = (props) => {\n  const patientObj = props.patientObj;\n  const classes = useStyles();\n  const [errors, setErrors] = useState({});\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n\n  const [states, setStates] = useState([]);\n  const [genders, setGenders] = useState([]);\n  const [hivStatus, setHivStatus] = useState([]);\n\n  const [facilityName, setFacilityName] = useState(Cookies.get(\"facilityName\"));\n  const [allFacilities, setAllFacilities] = useState([]);\n  const [statesOfTheReceivingFacility, setStateOfTheReceivingFacility] =\n    useState([]);\n  const [lgasOfTheReceivingFacility, setLgasOfTheReceivingFacility] = useState(\n    []\n  );\n  const [receivingFacilities, setReceivingFacilities] = useState([]);\n  const [receivingFacility, setReceivingFacility] = useState([]);\n  const [selectedReceivingState, setSelectedReceivingState] = useState({});\n  const [selectedReceivingFacility, setSelectedReceivingFacility] = useState(\n    {}\n  );\n  const [selectedReceivingLga, setSelectedReceivingLga] = useState({});\n  const history = useHistory();\n  const [serviceNeeded, setServiceNeeded] = useState([]);\n  const [selectedServiceNeeded, setSelectServiceNeeded] = useState([]);\n\n  const [payload, setPayload] = useState({\n    dateVisit: \"\",\n    firstName: props?.patientObj?.personResponseDto?.firstName,\n    middleName: props?.patientObj?.personResponseDto?.otherName,\n    lastName: props?.patientObj?.personResponseDto?.surname,\n    hospitalNumber:\n      props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\n    countryId: \"1\",\n    stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\n    province:\n      props?.patientObj?.personResponseDto?.address?.address[0]?.district\n    ,\n    address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\n    landmark: \"\",\n    phoneNumber:\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n        ?.value,\n    sexId: props?.patientObj?.personResponseDto?.gender?.id,\n    dob: props?.patientObj.personResponseDto?.dateOfBirth,\n    age: \"\",\n    dateOfBirth: props?.patientObj.personResponseDto?.dateOfBirth,\n    hivStatus: props?.patientObj?.hivTestResult2\n      ? props?.patientObj?.hivTestResult2\n      : props?.patientObj?.hivTestResult\n      ? props?.patientObj?.hivTestResult\n      : \"\",\n    referredFromFacility: \"\",\n    nameOfPersonReferringClient: \"\",\n    nameOfReferringFacility: Cookies.get(\"facilityName\"),\n    addressOfReferringFacility: \"\",\n    phoneNoOfReferringFacility: \"\",\n    referredTo: \"\",\n    nameOfContactPerson: \"\",\n    nameOfReceivingFacility: \"\",\n    addressOfReceivingFacility: \"\",\n    phoneNoOfReceivingFacility: \"\",\n    isDateOfBirthEstimated: false,\n    serviceNeeded: {},\n    comments: \"\",\n    receivingFacilityStateName: \"\",\n    receivingFacilityLgaNam: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    htsClientUuid: props && props.patientObj ? props.patientObj?.uuid : \"\",\n  });\n  const loadGenders = useCallback(async () => {\n    getAllGenders()\n      .then((response) => {\n        setGenders(response);\n      })\n      .catch(() => {});\n  }, []);\n\n  const getProvincesWithId = (id) => {\n    getAllProvinces(id)\n      .then((res) => {\n        setProvinces(res);\n        let ans = res.filter((each, index) => {\n          return (\n            each.name ===\n            props?.patientObj?.personResponseDto?.address?.address[0]?.district\n          );\n        });\n        setPayload({\n          ...payload,\n          province: ans[0].id,\n        });\n        \n      })\n      .catch((e) => {});\n  };\n\n  useEffect(() => {\n    loadGenders();\n    getCountry();\n    getStateByCountryId();\n\n    if (props?.patientObj?.personResponseDto?.address?.address[0]?.stateId) {\n      getProvincesWithId(\n        props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n      );\n    }\n  }, []);\n\n  const getSex = async () => {\n    try {\n      const response = await axios.get(\n        `${baseUrl}application-codesets/v2/GENDER`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      return response.data;\n    } catch (e) {}\n  };\n  //Get list of State\n  const getStateByCountryId = () => {\n    getAllStateByCountryId()\n      .then((res) => {\n        setStates(res);\n      })\n      .catch(() => {});\n  };\n  const checkPhoneNumberBasic = (e, inputName) => {\n    if (e) {\n      setErrors({ ...errors, phoneNumber: \"\" });\n    }\n    const limit = 10;\n\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\n    } else if (inputName === \"phoneNoOfReferringFacility\") {\n      setPayload({\n        ...payload,\n        phoneNoOfReferringFacility: e.slice(0, limit),\n      });\n    } else if (inputName === \"phoneNoOfReceivingFacility\") {\n      setPayload({ ...payload, phoneNoOfReceivingFacility: e.slice(0, limit) });\n    }\n  };\n\n  // handle Facility Name to slect drop down\n  const handleInputChangeObject = (e) => {\n    setPayload({\n      ...payload,\n      nameOfReceivingFacility: e.name,\n      addressOfReceivingFacility: e.parentParentOrganisationUnitName,\n      // lgaTransferTo: e.parentOrganisationUnitName,\n    });\n    setErrors({ ...errors, nameOfReceivingFacility: \"\" });\n    // setSelectedState(e.parentParentOrganisationUnitName);\n    // setSelectedLga(e.parentOrganisationUnitName);\n  };\n\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    if (e.target.value) {\n      setErrors({ ...errors, stateId: \"\" });\n    }\n    setPayload({ ...payload, stateId: e.target.value });\n    getAllProvinces(stateId)\n      .then((res) => {\n        setProvinces(res);\n      })\n      .catch((e) => {});\n  };\n  const getCountry = () => {\n    getAllCountry()\n      .then((res) => {\n        setCountries(res);\n      })\n      .catch((e) => {});\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setPayload({ ...payload, [inputName]: NumberValue });\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, [inputName]: NumberValue });\n    }\n    if (inputName === \"phoneNoOfReferringFacility\") {\n      setPayload({ ...payload, [inputName]: NumberValue });\n    }\n    if (inputName === \"phoneNoOfReceivingFacility\") {\n      setPayload({ ...payload, [inputName]: NumberValue });\n    }\n  };\n\n  // ########################################################################\n  const loadStates = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setStateOfTheReceivingFacility(response.data);\n        }\n      })\n      .catch((e) => {});\n  };\n\n  const loadLGA = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setLgasOfTheReceivingFacility(response.data);\n        }\n      })\n      .catch((e) => {});\n  };\n\n  const loadFacilities = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setReceivingFacilities(response.data);\n        }\n      })\n      .catch((e) => {});\n  };\n\n  const SERVICE_NEEDED = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          // create array of objects from the response\n          const serviceNeeded = response.data.map((service) => {\n            return {\n              value: service.display,\n              label: service.display,\n            };\n          });\n          setServiceNeeded(serviceNeeded);\n        }\n      })\n      .catch((e) => {\n        // handle error\n      });\n  };\n\n  useEffect(() => {\n    loadStates();\n    SERVICE_NEEDED();\n  }, []);\n\n  // ###########################################################################\n  //Get list of HIV STATUS ENROLLMENT\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfContactPerson\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfPersonReferringClient\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}patient/exist/hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n        }\n      }\n\n      getHosiptalNumber();\n    } else {\n      setPayload({ ...payload, [e.target.name]: e.target.value });\n    }\n  };\n\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      payload.age = age_now;\n\n      //setpayload({...payload, age: age_now});\n    } else {\n      setPayload({ ...payload, age: \"\" });\n    }\n    setPayload({ ...payload, [e.target.name]: e.target.value });\n\n    setPayload({ ...payload, dob: e.target.value });\n    if (payload.age !== \"\" && payload.age <= 15) {\n      // props.setHideOtherMenu(true);\n    } else if (payload.age !== \"\" && payload.age > 15) {\n      // props.setHideOtherMenu(true);\n    } else {\n      // props.setHideOtherMenu(true);\n    }\n\n    if (payload.age !== \"\" && payload.age >= 85) {\n      toggle();\n    }\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      payload.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      payload.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      if (e.target.value !== \"\" && e.target.value >= 85) {\n        toggle();\n      }\n      if (e.target.value !== \"\" && e.target.value <= 15) {\n        props.setHideOtherMenu(false);\n      } else if (e.target.value !== \"\" && e.target.value > 15) {\n        props.setHideOtherMenu(true);\n      } else {\n        props.setHideOtherMenu(true);\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setPayload({ ...payload, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      payload.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setPayload({ ...payload, age: e.target.value });\n  };\n\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n    temp.dateVisit = payload.dateVisit ? \"\" : \"This field is required.\";\n    temp.firstName = payload.firstName ? \"\" : \"This field is required.\";\n    temp.lastName = payload.lastName ? \"\" : \"This field is required.\";\n    temp.stateId = payload.stateId ? \"\" : \"This field is required.\";\n    temp.province = payload.province ? \"\" : \"This field is required.\";\n    // temp.address = payload.address ? \"\" : \"This field is required.\";\n    temp.phoneNumber = payload.phoneNumber ? \"\" : \"This field is required.\";\n    // temp.sexId = payload.sexId ? \"\" : \"This field is required.\";\n    temp.dob = payload.dob ? \"\" : \"This field is required.\";\n    // temp.age = payload.age ? \"\" : \"This field is required.\";\n    temp.hivStatus = payload.hivStatus ? \"\" : \"This field is required.\";\n    // temp.stateTransferTo = payload.receivingStateFacility? \"\" : \"This field is required.\";\n    temp.receivingFacilityLgaName = payload.receivingFacilityLgaName\n      ? \"\"\n      : \"This field is required.\";\n    temp.receivingFacilityStateName = payload.receivingFacilityStateName\n      ? \"\"\n      : \"This field is required.\";\n    // temp.referredFromFacility = payload.referredFromFacility\n    //     ? \"\"\n    //     : \"This field is required.\";\n    temp.nameOfPersonReferringClient = payload.nameOfPersonReferringClient\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.nameOfReferringFacility = payload.nameOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.addressOfReferringFacility = payload.addressOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.phoneNoOfReferringFacility = payload.phoneNoOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.nameOfContactPerson = payload.nameOfContactPerson\n      ? \"\"\n      : \"This field is required.\";\n    temp.nameOfReceivingFacility = payload.nameOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.addressOfReceivingFacility = payload.addressOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.phoneNoOfReceivingFacility = payload.phoneNoOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    // temp.serviceNeeded = payload.serviceNeeded ? \"\" : \"This field is required.\";\n\n    temp.serviceNeeded =\n      selectedServiceNeeded.length > 0\n        ? \"\"\n        : \"At least one service must be selected.\";\n    // temp.referredTo = payload.referredTo ? \"\" : \"This field is required.\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (validate()) {\n      try {\n        setSaving(true);\n        await axios.post(`${baseUrl}hts-client-referral`, payload, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setSaving(false);\n        toast.success(\"Record saved successfully\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n\n        // history.push(\"/\");\n\n        handleItemClick(\"refferal-history\", \"refferal\");\n        // props.handleItemClick();\n      } catch (error) {\n        setSaving(false);\n        const errorMessage =\n          error.response?.data?.apierror?.message ||\n          \"Something went wrong, please try again\";\n        toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>Client Referral Form </h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Referral Form For Referring Unit\n              </div>\n\n              <p style={{ color: \"black\", marginBottom: \"20px\" }}>\n                <i>\n                  Note: This form is to be filed by the organization making the\n                  referal (Referring unit or organization)\n                </i>\n              </p>\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                      name=\"dateVisit\"\n                      id=\"dateVisit\"\n                      value={payload.dateVisit}\n                      onChange={handleInputChange}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      // disabled\n                    />\n                    {errors.dateVisit !== \"\" ? (\n                      <span className={classes.error}>{errors.dateVisit}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      First Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"firstName\"\n                      id=\"firstName\"\n                      value={payload.firstName}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.firstName !== \"\" ? (\n                      <span className={classes.error}>{errors.firstName}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>Middle Name</Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"middleName\"\n                      id=\"middleName\"\n                      value={payload.middleName}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Last Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"lastName\"\n                      id=\"lastName\"\n                      value={payload.lastName}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.lastName !== \"\" ? (\n                      <span className={classes.error}>{errors.lastName}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"patientId\">\n                      Hospital Number <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"hospitalNumber\"\n                      id=\"hospitalNumber\"\n                      value={payload.hospitalNumber}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.hospitalNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.hospitalNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                    {hospitalNumStatus === true ? (\n                      <span className={classes.error}>\n                        {\"Hospital number already exist\"}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                    {/* {hospitalNumStatus2===true ? (\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\n                                                    ) :\"\"} */}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Country <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"countryId\"\n                      id=\"countryId\"\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      value={payload.countryId}\n                      disabled\n                      //onChange={getStates}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {countries.map((value, index) => (\n                        <option key={index} value={value.id}>\n                          {value.name}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      State <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"stateId\"\n                      id=\"stateId\"\n                      value={payload.stateId}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      onChange={getProvinces}\n                      disabled\n                    >\n                      <option value=\"\">Select</option>\n                      {states.map((value, index) => (\n                        <option key={index} value={value.id}>\n                          {value.name}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.stateId !== \"\" ? (\n                      <span className={classes.error}>{errors.stateId}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Province/District/LGA{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"province\"\n                      id=\"province\"\n                      value={payload.province}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                      onChange={handleInputChange}\n                    >\n                      <option value=\"\">Select</option>\n                      {provinces.map((value, index) => (\n                        <option key={index} value={value.id}>\n                          {value.name}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.province !== \"\" ? (\n                      <span className={classes.error}>{errors.province}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Street Address <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"address\"\n                      id=\"address\"\n                      value={payload.address}\n                      disabled\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.address !== \"\" ? (\n                      <span className={classes.error}>{errors.address}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Landmark</Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"landmark\"\n                      id=\"landmark\"\n                      value={payload.landmark}\n                      disabled\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n\n                {/*          <div className=\"form-group  col-md-4\">*/}\n                {/*              <FormGroup>*/}\n                {/*                  <Label>*/}\n                {/*                      Phone Number <span style={{color: \"red\"}}> *</span>*/}\n                {/*                  </Label>*/}\n                {/*                  <PhoneInput*/}\n                {/*                      disabled={true}*/}\n                {/*                      containerStyle={{*/}\n                {/*                          width: \"100%\",*/}\n                {/*                          border: \"1px solid #014D88\",*/}\n                {/*                      }}*/}\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                {/*                      country={\"ng\"}*/}\n                {/*                      placeholder=\"(234)7099999999\"*/}\n                {/*                      maxLength={5}*/}\n                {/*                      name=\"phoneNumber\"*/}\n                {/*                      id=\"phoneNumber\"*/}\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                {/*                      value={payload.phoneNumber}*/}\n                {/*                      onChange={(e) => {*/}\n                {/*                          checkPhoneNumberBasic(e, \"phoneNumber\");*/}\n                {/*                      }}*/}\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                {/*                  />*/}\n\n                {/*                  {errors.phoneNumber !== \"\" ? (*/}\n                {/*                      <span className={classes.error}>*/}\n                {/*  {errors.phoneNumber}*/}\n                {/*</span>*/}\n                {/*                  ) : (*/}\n                {/*                      \"\"*/}\n                {/*                  )}*/}\n                {/*              </FormGroup>*/}\n                {/*          </div>*/}\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNumber\"\n                      id=\"phoneNumber\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(e, \"phoneNumber\");\n                      }}\n                      value={payload.phoneNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                      // required\n                    />\n                    {errors.phoneNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Sex</Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"sexId\"\n                      id=\"sexId\"\n                      onChange={handleInputChange}\n                      value={payload.sexId}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    >\n                      <option value={\"\"}>Select</option>\n                      {genders &&\n                        genders.map((gender, index) => (\n                          <option key={gender.id} value={gender.id}>\n                            {gender.display}\n                          </option>\n                        ))}\n                    </select>\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Date Of Birth<span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                      name=\"dob\"\n                      id=\"dob\"\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={payload.dob}\n                      onChange={handleDobChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.dob !== \"\" ? (\n                      <span className={classes.error}>{errors.dob}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Age <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      name=\"age\"\n                      id=\"age\"\n                      disabled={ageDisabled}\n                      onChange={payload.age}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      value={calculate_age(\n                        props?.patientObj.personResponseDto?.dateOfBirth\n                          ? props?.patientObj?.personResponseDto?.dateOfBirth\n                          : props?.patientObj?.personResponseDto?.dateOfBirth\n                      )}\n                    />\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      HIV Status<span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"hivStatus\"\n                      id=\"hivStatus\"\n                      value={payload.hivStatus}\n                      disabled={ageDisabled}\n                      onChange={handleAgeChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {/*<select*/}\n                    {/*  className=\"form-control\"*/}\n                    {/*  name=\"hivStatus\"*/}\n                    {/*  id=\"hivStatus\"*/}\n                    {/*  onChange={handleInputChange}*/}\n                    {/*  value={payload.hivStatus}*/}\n                    {/*  style={{*/}\n                    {/*    border: \"1px solid #014D88\",*/}\n                    {/*    borderRadius: \"0.2rem\",*/}\n                    {/*  }}*/}\n                    {/*>*/}\n                    {/*<option value={\"\"}>Select</option>*/}\n                    {/*{hivStatus.map((gender, index) => (*/}\n                    {/*  <option key={gender.id} value={gender.id}>*/}\n                    {/*    {gender.display}*/}\n                    {/*  </option>*/}\n                    {/*))}*/}\n                    {/*</select>*/}\n                    {errors.hivStatus !== \"\" ? (\n                      <span className={classes.error}>{errors.hivStatus}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Referred from (Department):\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      name=\"referredFromFacility\"\n                      id=\"referredFromFacility\"\n                      value={payload.referredFromFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n\n                    {errors.referredFromFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.referredFromFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Name of Person Referring Client\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"nameOfPersonReferringClient\"\n                      id=\"nameOfPersonReferringClient\"\n                      value={payload.nameOfPersonReferringClient}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.nameOfPersonReferringClient !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfPersonReferringClient}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      <span style={{ color: \"red\" }}> *</span>Name of Referring\n                      Facility\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"nameOfReferringFacility\"\n                      id=\"nameOfReferringFacility\"\n                      value={payload.nameOfReferringFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.nameOfReferringFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfReferringFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Address of Referring Facility\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"addressOfReferringFacility\"\n                      id=\"addressOfReferringFacility\"\n                      value={payload.addressOfReferringFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      // disabled\n                    />\n                    {errors.addressOfReferringFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.addressOfReferringFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/*          <div className=\"form-group mb-3 col-md-4\">*/}\n                {/*              <FormGroup>*/}\n                {/*                  <Label for=\"firstName\">*/}\n                {/*                      Phone Number of Referring Facility*/}\n                {/*                      /!* <span style={{ color: \"red\" }}> *</span> *!/*/}\n                {/*                  </Label>*/}\n                {/*                  <PhoneInput*/}\n                {/*                      containerStyle={{*/}\n                {/*                          width: \"100%\",*/}\n                {/*                          border: \"1px solid #014D88\",*/}\n                {/*                      }}*/}\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                {/*                      country={\"ng\"}*/}\n                {/*                      placeholder=\"(234)7099999999\"*/}\n                {/*                      maxLength={5}*/}\n                {/*                      name=\"phoneNoOfReferringFacility\"*/}\n                {/*                      id=\"phoneNoOfReferringFacility\"*/}\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                {/*                      value={payload.phoneNoOfReferringFacility}*/}\n                {/*                      onChange={(e) => {*/}\n                {/*                          checkPhoneNumberBasic(e, \"phoneNoOfReferringFacility\");*/}\n                {/*                      }}*/}\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                {/*                  />*/}\n\n                {/*                  {errors.phoneNoOfReferringFacility !== \"\" ? (*/}\n                {/*                      <span className={classes.error}>*/}\n                {/*  {errors.phoneNoOfReferringFacility}*/}\n                {/*</span>*/}\n                {/*                  ) : (*/}\n                {/*                      \"\"*/}\n                {/*                  )}*/}\n                {/*              </FormGroup>*/}\n                {/*          </div>*/}\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number of Referring Facility{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNoOfReferringFacility\"\n                      id=\"phoneNoOfReferringFacility\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(\n                          e,\n                          \"phoneNoOfReferringFacility\"\n                        );\n                      }}\n                      value={payload.phoneNoOfReferringFacility}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.phoneNoOfReferringFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNoOfReferringFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">Referred to (Department)</Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"referredTo\"\n                      id=\"referredTo\"\n                      value={payload.referredTo}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Name of Contact Person:\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"nameOfContactPerson\"\n                      id=\"nameOfContactPerson\"\n                      value={payload.nameOfContactPerson}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.nameOfContactPerson !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfContactPerson}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      Receiving Facility State{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"stateId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      // onChange={loadLGA1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterState =\n                            statesOfTheReceivingFacility.filter((st) => {\n                              return Number(st.id) === Number(e.target.value);\n                            });\n                          setSelectedReceivingState(filterState);\n\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            receivingFacilityStateName: filterState[0].name,\n                          }));\n                        }\n                        loadLGA(e.target.value);\n                      }}\n                    >\n                      <option>Select State</option>\n                      {states.map((state) => (\n                        <option key={state.id} value={state.id}>\n                          {state.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.receivingFacilityStateName !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.receivingFacilityStateName}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      {\" \"}\n                      Receiving Facility LGA{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"lgaId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      // onChange={loadFacilities1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterlga = lgasOfTheReceivingFacility.filter(\n                            (lg) => {\n                              return Number(lg.id) === Number(e.target.value);\n                            }\n                          );\n                          setSelectedReceivingLga(filterlga);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            receivingFacilityLgaName: filterlga[0].name,\n                          }));\n                        }\n                        loadFacilities(e.target.value);\n                      }}\n                    >\n                      <option>Select LGA</option>\n                      {lgasOfTheReceivingFacility.map((lga) => (\n                        <option key={lga.id} value={lga.id}>\n                          {lga.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.receivingFacilityLgaName !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.receivingFacilityLgaName}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      Name of Receiving Facility\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"nameOfReceivingFacility\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      onChange={(e) => {\n                        // setPayload(prevPayload => ({ ...prevPayload, facilityTransferTo: e.target.value }));\n                        if (e.target.value !== \"\") {\n                          const filterFacility = receivingFacilities.filter(\n                            (fa) => {\n                              return Number(fa.id) === Number(e.target.value);\n                            }\n                          );\n                          setSelectedReceivingFacility(filterFacility);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            nameOfReceivingFacility: filterFacility[0].name,\n                          }));\n                        }\n                      }}\n                    >\n                      <option>Select Facility</option>\n                      {receivingFacilities.map((facility) => (\n                        <option key={facility.id} value={facility.id}>\n                          {facility.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.nameOfReceivingFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfReceivingFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Address of the Receiving Facility\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"addressOfReceivingFacility\"\n                      id=\"addressOfReceivingFacility\"\n                      value={payload.addressOfReceivingFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n                {/*          <div className=\"form-group mb-3 col-md-4\">*/}\n                {/*              <FormGroup>*/}\n                {/*                  <Label for=\"firstName\">*/}\n                {/*                      Phone No of Receiving Facility*/}\n                {/*                      <span style={{color: \"red\"}}> *</span>*/}\n                {/*                  </Label>*/}\n                {/*                  <PhoneInput*/}\n                {/*                      containerStyle={{*/}\n                {/*                          width: \"100%\",*/}\n                {/*                          border: \"1px solid #014D88\",*/}\n                {/*                      }}*/}\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                {/*                      country={\"ng\"}*/}\n                {/*                      placeholder=\"(234)7099999999\"*/}\n                {/*                      maxLength={5}*/}\n                {/*                      name=\"phoneNoOfReceivingFacility\"*/}\n                {/*                      id=\"phoneNoOfReceivingFacility\"*/}\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                {/*                      value={payload.phoneNoOfReceivingFacility}*/}\n                {/*                      onChange={(e) => {*/}\n                {/*                          checkPhoneNumberBasic(e, \"phoneNoOfReceivingFacility\");*/}\n                {/*                      }}*/}\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                {/*                  />*/}\n\n                {/*                  {errors.phoneNoOfReceivingFacility !== \"\" ? (*/}\n                {/*                      <span className={classes.error}>*/}\n                {/*  {errors.phoneNoOfReceivingFacility}*/}\n                {/*</span>*/}\n                {/*                  ) : (*/}\n                {/*                      \"\"*/}\n                {/*                  )}*/}\n                {/*              </FormGroup>*/}\n                {/*          </div>*/}\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone No of Receiving Facility\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNoOfReceivingFacility\"\n                      id=\"phoneNoOfReceivingFacility\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(\n                          e,\n                          \"phoneNoOfReceivingFacility\"\n                        );\n                      }}\n                      value={payload.phoneNoOfReceivingFacility}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.phoneNoOfReceivingFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNoOfReceivingFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                {/*  <FormGroup>*/}\n                {/*    <Label for=\"firstName\">*/}\n                {/*      Services needed*/}\n                {/*      <span style={{ color: \"red\" }}> *</span>*/}\n                {/*    </Label>*/}\n                {/*    <select*/}\n                {/*      className=\"form-control\"*/}\n                {/*      name=\"serviceNeeded\"*/}\n                {/*      id=\"serviceNeeded\"*/}\n                {/*      onChange={handleInputChange}*/}\n                {/*      value={payload.serviceNeeded}*/}\n                {/*      style={{*/}\n                {/*        border: \"1px solid #014D88\",*/}\n                {/*        borderRadius: \"0.2rem\",*/}\n                {/*      }}*/}\n                {/*    >*/}\n                {/*      <option value={\"\"}>Select Service</option>*/}\n                {/*      {serviceNeeded.map((value, index) => (*/}\n                {/*        <option key={value.id} value={value.code}>*/}\n                {/*          {value.display}*/}\n                {/*        </option>*/}\n                {/*      ))}*/}\n                {/*    </select>*/}\n\n                {/*    {errors.serviceNeeded !== \"\" ? (*/}\n                {/*      <span className={classes.error}>*/}\n                {/*        {errors.serviceNeeded}*/}\n                {/*      </span>*/}\n                {/*    ) : (*/}\n                {/*      \"\"*/}\n                {/*    )}*/}\n                {/*  </FormGroup>*/}\n                {/*</div>*/}\n                {/*<div className=\"form-group mb-3 col-md-12\">*/}\n                {/*  <FormGroup>*/}\n                {/*    <Label>*/}\n                {/*      Services needed{\" \"}*/}\n                {/*      <span style={{color: \"red\"}}> *</span>*/}\n                {/*    </Label>*/}\n                {/*    <DualListBox*/}\n                {/*        //canFilter*/}\n                {/*        // options={indicationForClientVerification}*/}\n                {/*        // onChange={(value) => setSelected(value)}*/}\n                {/*        // selected={selected}*/}\n                {/*    />*/}\n                {/*    /!*{errors.indicationForClientVerification !== \"\" ? (*!/*/}\n                {/*    /!*    <span className={classes.error}>*!/*/}\n                {/*    /!*  {errors.indicationForClientVerification}*!/*/}\n                {/*    /!*</span>*!/*/}\n                {/*    /!*) : (*!/*/}\n                {/*    /!*    \"\"*!/*/}\n                {/*    /!*)}*!/*/}\n                {/*  </FormGroup>*/}\n                {/*</div>*/}\n                <div className=\"form-group mb-3 col-md-12\">\n                  <FormGroup>\n                    <Label for=\"dualListBox\">Services Needed</Label>\n                    <DualListBox\n                      options={serviceNeeded}\n                      selected={selectedServiceNeeded}\n                      onChange={(value) => {\n                        // Update selectedServiceNeeded state\n                        setSelectServiceNeeded(value);\n                        // Convert selectedServiceNeeded array into an object\n                        const serviceNeededObject = value.reduce(\n                          (obj, item, index) => {\n                            obj[index] = item;\n                            return obj;\n                          },\n                          {}\n                        );\n                        // Update serviceNeeded in payload\n                        setPayload({\n                          ...payload,\n                          serviceNeeded: serviceNeededObject,\n                        });\n                      }}\n                      // disabled={props.row.action === \"view\" ? true : false}\n                      // disabled\n                    />\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-12\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Comments\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"textarea\"\n                      rows=\"4\"\n                      cols=\"7\"\n                      name=\"comments\"\n                      id=\"comments\"\n                      value={payload.comments}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                        height: \"100px\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n              </div>\n              <br />\n\n              <br />\n\n              {/* <hr /> */}\n              <br />\n              <div className=\"row\">\n                <div\n                  className=\"form-group mb-3 col-md-12\"\n                  style={{ display: \"flex\" }}\n                >\n                  <Button\n                    content=\"Done\"\n                    type=\"submit\"\n                    // icon=\"right arrow\"\n                    // labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={() => {\n                      history.push(\"/\");\n                    }}\n                    disabled={saving}\n                  />\n                  <Button\n                    content=\"Submit\"\n                    type=\"submit\"\n                    // icon=\"right arrow\"\n                    // labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n        {/* <CardBody>\n          <ServicesProvided />\n        </CardBody> */}\n\n        {/* recieving facility  */}\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default RefferralUnit;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/PnsForm.js",["713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport Badge from \"@mui/material/Badge\";\nimport { useHistory } from \"react-router-dom\";\nimport { Modal } from \"react-bootstrap\";\nimport { getNextForm } from \"../../../../../utility\";\nimport { calculate_age } from \"../../../utils\";\nimport PersonIcon from \"@mui/icons-material/Person\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst PnsForm = (props) => {\n  console.log(\"PNS\", props.patientObj.confirmatoryTest2.date2);\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [sexs, setSexs] = useState([]);\n  const [notificationContact, setNotificationContact] = useState([]);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [indexTesting, setIndexTesting] = useState([]);\n  const [consent, setConsent] = useState([]);\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  const [showSaveButton, setShowSaveButton] = useState(true);\n\n  const [errors, setErrors] = useState({});\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [elicitedCount, setElicitedCount] = useState(0);\n  const [setting, setSetting] = useState([]);\n  const [isClientCurrentlyOnHiv, setIsClientCurrentlyOnHiv] = useState(true);\n  const [maritalStatus, setMaritalStatus] = useState([]);\n  const [roleProvider, setRoleProvider] = useState([]);\n  const [facilityInfo, setFacilityInfo] = useState(\n    props?.organizationInfo.currentOrganisationUnitName\n  );\n\n  let history = useHistory();\n  const [open, setOpen] = React.useState(false);\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\n  );\n  const [nextForm, setNextForm] = useState([]);\n\n  const [stateInfo, setStateInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n  );\n  const [partnerId, setPartnerId] = useState(\"\");\n  const [lgaInfo, setLgaInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0].district\n      ? props?.basicInfo?.personResponseDto?.address?.address[0].district\n      : props?.patientObj?.personResponseDto?.address?.address[0].district\n  );\n  const toggle = () => setOpen(!open);\n\n  let temp = { ...errors };\n  const [objValuesIndex, setObjValuesIndex] = useState({\n    htsClientId: null,\n    indexNotificationServicesElicitation: {},\n    personId: null,\n  });\n  const [contactTracing, setContactTracing] = useState({\n    partnerPhoneNumber: \"\",\n    numberOfAttempt: \"\",\n  });\n\n  const [objValues, setObjValues] = useState({\n    acceptedHts: \"\",\n    reasonForDecline: \"\",\n    otherReasonForDecline: \"\",\n    offeredPns: \"\",\n    acceptedPns: \"\",\n    address: \"\", //\n    contactTracing: {\n      partnerPhoneNumber: \"\",\n      numberOfAttempt: \"\",\n    },\n    dateEnrollmentOnART: \"\",\n    dateOfElicitation:\"\",\n    datePartnerTested: \"\",\n    dob: props?.basicInfo?.personResponseDto?.dateOfBirth,\n    facilityId: props?.organizationInfo?.currentOrganisationUnitId,\n    phoneNumber:\n      props?.basicInfo?.personResponseDto?.contactPoint?.contactPoint[0]?.value,\n    alternatePhoneNumber: \"\",\n    partnerId: \"\",\n    firstName: props?.basicInfo?.personResponseDto?.firstName,\n    hivTestResult: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    indexClientId: props?.basicInfo?.indexClientCode,\n    intermediatePartnerViolence: {\n      DeprivedOfBasicNeedsEmotional: \"\",\n      DeniedBasicNecessitiesForHealthcareEmotional: \"\",\n      ForcedSexualActsSexual: \"\",\n    },\n    knownHivPositive: \"\",\n    lastName: props?.basicInfo?.personResponseDto?.surname,\n    middleName: props?.basicInfo?.personResponseDto?.otherName,\n    notificationMethod: \"\",\n    relationshipToIndexClient: \"\",\n    sex: props?.basicInfo?.personResponseDto?.gender?.id,\n    htsClientInformation: {\n      testingSetting: \"\",\n      providerNameCompletingForm: \"\",\n      providerRoleCompletingForm: \"\",\n      maritalStatus: props?.basicInfo?.personResponseDto?.maritalStatus?.id,\n      descriptiveResidentialAddress:\n        props?.basicInfo?.personResponseDto?.address?.address[0]?.city,\n      dateIndexClientConfirmedHiv: \"\",\n      isClientCurrentlyOnHiv: \"\",\n      DateOfTreatmentInitiation: \"\",\n      recencyTesting: \"\",\n      artEnrollmentNumber: \"\",\n      facilityOfEnrollment: \"\",\n      numberOfPartnerIdentifiedFromClientIndex: \"\",\n      partnerName: \"\",\n      partnerSex: \"\",\n      partnerAge: \"\",\n      partnerAddress: \"\",\n      relativeToIndexClient: \"\",\n      contactTracingType: \"\",\n      freedomDenial: \"\",\n      threatenToHurt: \"\",\n      sexuallyUncomfortable: \"\",\n\n      //\n\n      partnerNotification: \"\",\n      viralllyUnsppressed: \"\",\n\n      // numberOfPartnerIdentifiedFromClientIndex: \"\",\n    },\n  });\n\n  const loadNextForm = (row) => {\n    handleItemClick(nextForm[0], nextForm[1]);\n\n    toggle();\n  };\n  const [htsClientInformation, sethtsClientInformation] = useState({\n    testingSetting: props?.patientObj?.testingSetting,\n    providerNameCompletingForm: \"\",\n    providerRoleCompletingForm: \"\",\n    maritalStatus: props?.basicInfo?.personResponseDto?.maritalStatus?.id,\n    descriptiveResidentialAddress:\n      props?.basicInfo?.personResponseDto?.address?.address[0]?.city,\n    dateIndexClientConfirmedHiv: \"\",\n    isClientCurrentlyOnHiv: \"\",\n    DateOfTreatmentInitiation: \"\",\n    recencyTesting: \"\",\n    artEnrollmentNumber: \"\",\n    facilityOfEnrollment: \"\",\n    numberOfPartnerIdentifiedFromClientIndex: \"\",\n    partnerName: \"\",\n    partnerSex: \"\",\n    partnerAge: \"\",\n    partnerAddress: \"\",\n    relativeToIndexClient: \"\",\n    contactTracingType: \"\",\n    freedomDenial: \"\",\n    threatenToHurt: \"\",\n    sexuallyUncomfortable: \"\",\n\n    //\n\n    partnerNotification: \"\",\n    viralllyUnsppressed: \"\",\n\n    // numberOfPartnerIdentifiedFromClientIndex: \"\",\n  });\n\n  const loadOtherForm = (row) => {\n    toggle();\n  };\n  const getPNSInfo = (id) => {\n    axios\n      .get(`${baseUrl}hts-personal-notification-service/${id}/hts-client`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setMaritalStatus(response.data);\n      })\n      .catch((error) => {});\n  };\n  const getPartnerId = (id) => {\n    axios\n      .get(\n        `${baseUrl}hts-personal-notification-service/get-partner-id?htsClientId=${\n          props.patientObj.id ? props.patientObj.id : props.basicInfo.id\n        }&clientCode=${\n          props?.patientObj?.clientCode\n            ? props?.patientObj?.clientCode\n            : props?.basicInfo?.clientCode\n        }`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setPartnerId(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const TargetGroupSetup = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n   \n        setFacilityInfo(response.data.currentOrganisationUnitName);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    Sex();\n    getStates();\n    NotificationContact();\n    IndexTesting();\n    Consent();\n    getMaritalStatus();\n    PROVIDER_ROLE();\n    getPartnerId();\n    if (props.patientObj) {\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\n        setHivTestDate(props.patientObj.dateVisit);\n      } else {\n        setHivTestDate(\"\");\n      }\n\n      setObjValues({\n        ...objValues,\n        firstName: props.patientObj.personResponseDto?.firstName,\n        middleName: props?.patientObj?.personResponseDto?.otherName,\n        lastName: props?.patientObj?.personResponseDto?.surname,\n        sex: props?.patientObj?.personResponseDto?.gender?.id,\n        dob: props?.patientObj?.personResponseDto?.dateOfBirth,\n        phoneNumber:\n          props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n            ?.value,\n      });\n\n      sethtsClientInformation({\n        ...htsClientInformation,\n        maritalStatus: props?.patientObj?.personResponseDto?.maritalStatus?.id,\n        descriptiveResidentialAddress:\n          props?.patientObj?.personResponseDto?.address?.address[0]?.city,\n      });\n\n      // phoneNumber:\n\n      //\n      //\n      //\n      //\n      //\n      //\n      //\n      // })\n    }\n\n    if (\n      props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId ||\n      props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n    ) {\n      getProvincesId(\n        props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n      );\n    }\n\n    if (props.organizationInfo) {\n      TargetGroupSetup();\n    }\n  }, [props.patientObj]);\n\n  useEffect(() => {\n    loadFamilyIndexSetting();\n  }, []);\n\n  const handleHTSClientInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (\n      e.target.name === \"partnerAge\" ||\n      e.target.name === \"numberOfAttempt\" ||\n      e.target.name === \"numberOfPartnerIdentifiedFromClientIndex\"\n    ) {\n      if (e.target.value > -1) {\n        sethtsClientInformation({\n          ...htsClientInformation,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else {\n      sethtsClientInformation({\n        ...htsClientInformation,\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n\n  const loadFamilyIndexSetting = () => {\n      let  testingSetting =  props?.patientObj?.testingSetting\n      let testingType =\"\"\n// COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\n    if(testingSetting.includes(\"COMMUNITY\")){\n      testingType= \"COMMUNITY_HTS_TEST_SETTING\"\n      \n    }\n\n    if(testingSetting.includes(\"FACILITY\")){\n      testingType= \"FACILITY_HTS_TEST_SETTING\"\n\n      \n    }\n    axios\n      .get(`${baseUrl}application-codesets/v2/${testingType}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const getMaritalStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setMaritalStatus(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const PROVIDER_ROLE = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PROVIDER_ROLE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setRoleProvider(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  function getStateByCountryId(getCountryId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setStates(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  function getProvincesId(getStateId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    setErrors({ ...temp, stateId: \"\" });\n    setObjValues({ ...objValues, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(\n          response.data.sort((x, y) => {\n            return x.id - y.id;\n          })\n        );\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getStates = () => {\n    getStateByCountryId(\"1\");\n    // setObjValues({ ...objValues, countryId: 1 });\n  };\n\n  //Get list of Genders from\n  const Sex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSexs(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const handleDone = () => {\n    toggle();\n    history.push(\"/\");\n  };\n  const getAllRecordByHTSClientId = () => {\n    axios\n      .get(`${baseUrl}hts-personal-notification-service/{id}/hts-client`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get view pns info\n  const viewPnsInfo = () => {\n    axios\n      .get(`${baseUrl}hts-personal-notification-service/{id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  ///CONSENT\tYes\t\ten\tCONSENT\n  const Consent = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setConsent(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const NotificationContact = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setNotificationContact(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n\n  const handleInputContactChanges = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"numberOfAttempt\") {\n      if (e.target.value > -1) {\n        setContactTracing({\n          ...contactTracing,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else {\n      setContactTracing({ ...contactTracing, [e.target.name]: e.target.value });\n    }\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (\n      e.target.name === \"providerNameCompletingForm\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"clientName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    } else if (e.target.name === \"offeredPns\") {\n      setObjValues({\n        ...objValues,\n        reasonForDecline: \"\",\n        [e.target.name]: e.target.value,\n        otherReasonForDecline: \"\",\n        acceptedPns: \"\",\n      });\n    } else {\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\n    //     setHideNumChild(true)\n    // }else{\n    //     setHideNumChild(false)\n    // }\n  };\n\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age_now--;\n      }\n      objValues.age = age_now;\n\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setObjValues({ ...objValues, age: \"\" });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n\n    setObjValues({ ...objValues, dob: e.target.value });\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value === \"Actual\") {\n      objValues.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value === \"Estimated\") {\n      objValues.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  //End of Date of Birth and Age handling\n  const checkPhoneNumberBasic = (e, inputName) => {\n    const limit = 10;\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setObjValues({ ...objValues, [inputName]: NumberValue });\n    if (inputName === \"partnerPhoneNumber\") {\n      setContactTracing({ ...contactTracing, [inputName]: NumberValue });\n    }\n    if (inputName === \"phoneNumber\") {\n      setObjValues({ ...objValues, [inputName]: NumberValue });\n    }\n    if (inputName === \"alternatePhoneNumber\") {\n      setObjValues({ ...objValues, [inputName]: NumberValue });\n    }\n  };\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n  const validate = () => {\n    // HTS FORM VALIDATION\n    temp.offeredPns = objValues.offeredPns ? \"\" : \"This field is required.\";\n    // temp.partnerName = objValues.htsClientInformation.partnerName ? \"\" : \"This field is required.\";\n    // temp.partnerAge = objValues.htsClientInformation.partnerAge ? \"\" : \"This field is required.\";\n    // temp.partnerSex = objValues.htsClientInformation.partnerSex ? \"\" : \"This field is required.\";\n\n    if (objValues.offeredPns === \"No\") {\n      temp.reasonForDecline = objValues.reasonForDecline\n        ? \"\"\n        : \"This field is required.\";\n      temp.otherReasonForDecline =\n        objValues.reasonForDecline === \"others\" &&\n        objValues.otherReasonForDecline\n          ? \"\"\n          : \"This field is required.\";\n    }\n    // temp.lga = objValues.lga ? \"\" : \"This field is required.\";\n    // temp.facilityId = objValues.facilityId ? \"\" : \"This field is required.\";\n    // temp.testingSetting = htsClientInformation.testingSetting\n    //   ? \"\"\n    //   : \"This field is required.\";\n    // temp.providerRoleCompletingForm =\n    //   htsClientInformation.providerRoleCompletingForm\n    //     ? \"\"\n    //     : \"This field is required.\";\n    // temp.relativeToIndexClient = htsClientInformation.relativeToIndexClient\n    //   ? \"\"\n    //   : \"This field is required.\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n\n  };\n  // const handleSubmit = (e) => {\n  //   e.preventDefault();\n  //   objValues.htsClientInformation = htsClientInformation;\n  //   objValues.contactTracing = contactTracing;\n\n  //   console.log(objValues);\n  // };\n\n  console.log(\"temp\", temp);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"save pns clicked 1\")\n    let age = calculate_age(\n      props?.basicInfo?.personResponseDto?.dateOfBirth\n        ? props?.basicInfo?.personResponseDto?.dateOfBirth\n        : props?.patientObj?.personResponseDto?.dateOfBirth\n    );\n\n    let hivStatus = props?.patientObj?.hivTestResult;\n    let latestForm = getNextForm(\"Nigeria_PNS_Form\", age, \"\", hivStatus);\n\n    console.log(\"save pns clicked 2\")\n    setNextForm(latestForm);\n\n    console.log(\"save pns clicked 3\")\n    objValues.htsClientInformation = htsClientInformation;\n    objValues.contactTracing = contactTracing;\n    objValues.partnerId = partnerId;\n\n    console.log(\"save pns clicked 4\")\n    // if (validate()) {\n    if (validate()) {\n      console.log(\"save pns clicked 5\")\n      setSaving(true);\n      objValues.isDateOfBirthEstimated =\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\n      axios\n        .post(`${baseUrl}hts-personal-notification-service`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          toast.success(\"Record save successfully\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n\n          if (props?.addNewForm === false) {\n            handleItemClick(\"pns-history\", \"pns\");\n          } else {\n            if (latestForm[0] === latestForm[1]) {\n              // loadNextForm();\n\n              setShowSaveButton(false);\n            } else {\n              loadOtherForm();\n            }\n          }\n          if (\n            objValues.offeredPns !== \"No\" &&\n            objValues.acceptedPns !== \"No\"\n            // objValues.elicited !== \"No\"\n          ) {\n          }\n          //handleItemClickPage('list')\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>\n            Partner Notification Services\n            {/*<Button*/}\n            {/*    variant=\"contained\"*/}\n            {/*    color=\"primary\"*/}\n            {/*    className=\" float-end  mr-2 mt-2\"*/}\n            {/*    onClick={() => handleItemClickPage(\"list\")}*/}\n            {/*//startIcon={<FaUserPlus size=\"10\"/>}*/}\n            {/*>*/}\n            {/*    <span style={{ textTransform: \"capitalize\" }}>*/}\n            {/*        {\" \"}*/}\n            {/*        Back To Client List*/}\n            {/*    </span>*/}\n            {/*</Button>*/}\n          </h2>\n\n          <br />\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"form-group  col-md-6\">\n                <FormGroup>\n                  <Label>\n                    Offered PNS ? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"offeredPns\"\n                    id=\"offeredPns\"\n                    value={objValues.offeredPns}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {consent.map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.offeredPns !== \"\" ? (\n                    <span className={classes.error}>{errors.offeredPns}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {/* */}\n              {objValues.offeredPns !== \"\" && objValues.offeredPns !== \"No\" && (\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Accepted PNS ? <span style={{ color: \"red\" }}> </span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"acceptedPns\"\n                      id=\"acceptedPns\"\n                      value={objValues.acceptedPns}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}></option>\n                      {consent.map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n              {/* otherReasonForDecline */}\n              {objValues.offeredPns.toLowerCase() === \"no\" && (\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Reason for decline{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"select\"\n                      name=\"reasonForDecline\"\n                      id=\"reasonForDecline \"\n                      value={objValues.reasonForDecline}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}>Select</option>\n\n                      <option key={1} value={\"others\"}>\n                        Others\n                      </option>\n                    </select>\n                    {errors.reasonForDecline !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.reasonForDecline}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}{\" \"}\n              {objValues.reasonForDecline.toLowerCase() === \"others\" &&\n                objValues.offeredPns.toLowerCase() === \"no\" && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Other reason For Decline{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"otherReasonForDecline\"\n                        id=\"otherReasonForDecline\"\n                        value={objValues.otherReasonForDecline}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                      {errors.otherReasonForDecline !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.otherReasonForDecline}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n              {/*{objValues.acceptedPns !== \"\" &&*/}\n              {/*    objValues.acceptedPns !== \"No\" && (*/}\n              {/*        <div className=\"form-group  col-md-4\">*/}\n              {/*            <FormGroup>*/}\n              {/*                <Label>*/}\n              {/*                    Elicited ? <span style={{ color: \"red\" }}> </span>*/}\n              {/*                </Label>*/}\n              {/*                <select*/}\n              {/*                    className=\"form-control\"*/}\n              {/*                    name=\"elicited\"*/}\n              {/*                    id=\"elicited\"*/}\n              {/*                    value={objValues.elicited}*/}\n              {/*                    onChange={handleInputChange}*/}\n              {/*                    style={{*/}\n              {/*                        border: \"1px solid #014D88\",*/}\n              {/*                        borderRadius: \"0.2rem\",*/}\n              {/*                    }}*/}\n              {/*                >*/}\n              {/*                    <option value={\"\"}></option>*/}\n              {/*                    {consent.map((value) => (*/}\n              {/*                        <option key={value.id} value={value.display}>*/}\n              {/*                            {value.display}*/}\n              {/*                        </option>*/}\n              {/*                    ))}*/}\n              {/*                </select>*/}\n              {/*            </FormGroup>*/}\n              {/*        </div>*/}\n              {/*    )}*/}\n            </div>\n\n            <div className=\"row\">\n              {objValues.offeredPns !== \"\" &&\n                objValues.offeredPns === \"Yes\" &&\n                objValues.acceptedPns !== \"\" &&\n                objValues.acceptedPns === \"Yes\" && (\n                  <>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          State <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"state\"\n                          id=\"state\"\n                          onChange={getProvinces}\n                          value={stateInfo}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        >\n                          <option value={\"\"}></option>\n                          {states.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.stateId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.stateId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          LGA <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"lga\"\n                          id=\"lga\"\n                          value={lgaInfo}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        >\n                          <option value={\"\"}></option>\n                          {provinces.map((value, index) => (\n                            <option key={index} value={value.id}>\n                              {value.name}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.lga !== \"\" ? (\n                          <span className={classes.error}>{errors.lga}</span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"providerNameCompletingForm\">\n                          Facility Name\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <Input\n                          className=\"form-control\"\n                          type=\"text\"\n                          name=\"facilityId\"\n                          id=\"facilityId\"\n                          value={facilityInfo}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        />\n                        {errors.facilityId !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.facilityId}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    {/* <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label>Date</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                          name=\"dob\"\n                          id=\"dob\"\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          value={objValues.dob}\n                          onChange={handleDobChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div> */}\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Setting <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"testingSetting\"\n                          id=\"testingSetting\"\n                          value={htsClientInformation.testingSetting}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={true}\n                        >\n                          <option value={\"\"}></option>\n                          {setting.map((value) => (\n                            <option key={value.id} value={value.code}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.testingSetting !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.testingSetting}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Name of provider completing the form\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"providerNameCompletingForm\"\n                          id=\"providerNameCompletingForm\"\n                          value={\n                            htsClientInformation.providerNameCompletingForm\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Role of the provider completing Form\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"providerRoleCompletingForm\"\n                          id=\"providerRoleCompletingForm\"\n                          value={\n                            htsClientInformation.providerRoleCompletingForm\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          // disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          {roleProvider.map((value) => (\n                            <option key={value.id} value={value.code}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                        {errors.providerRoleCompletingForm !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.providerRoleCompletingForm}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                      style={{\n                        backgroundColor: \"#992E62\",\n                        width: \"125%\",\n                        height: \"35px\",\n                        color: \"#fff\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      SECTION 1 : INFORMATION ABOUT THE INDEX CLIENT\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Client's Firstname </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"firstName\"\n                          id=\"firstName\"\n                          value={objValues.firstName}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Client's Middlename </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"middleName\"\n                          id=\"middleName\"\n                          value={objValues.middleName}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Client's Lastname</Label>\n                        <Input\n                          type=\"text\"\n                          name=\"lastName\"\n                          id=\"lastName\"\n                          value={objValues.lastName}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Index Client ID </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"indexClientId\"\n                          id=\"indexClientId\"\n                          value={props?.patientObj?.clientCode || \"\"}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Sex </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"sex\"\n                          id=\"sex\"\n                          value={objValues.sex}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        >\n                          <option value={\"\"}></option>\n                          {sexs.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                    {/*    <FormGroup>*/}\n                    {/*        <Label for=\"\">Last Name</Label>*/}\n                    {/*        <Input*/}\n                    {/*            type=\"text\"*/}\n                    {/*            name=\"lastName\"*/}\n                    {/*            id=\"lastName\"*/}\n                    {/*            value={objValues.lastName}*/}\n                    {/*            onChange={handleInputChange}*/}\n                    {/*            style={{*/}\n                    {/*                border: \"1px solid #014D88\",*/}\n                    {/*                borderRadius: \"0.25rem\",*/}\n                    {/*            }}*/}\n                    {/*        />*/}\n                    {/*    </FormGroup>*/}\n                    {/*</div>*/}\n                    {/* <div className=\"form-group mb-2 col-md-4\">\n                      <FormGroup>\n                        <Label>Date Of Birth</Label>\n                        <div className=\"radio\">\n                          <label>\n                            <input\n                              type=\"radio\"\n                              value=\"Actual\"\n                              name=\"dateOfBirth\"\n                              defaultChecked\n                              onChange={(e) => handleDateOfBirthChange(e)}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />{\" \"}\n                            Actual\n                          </label>\n                        </div>\n                        <div className=\"radio\">\n                          <label>\n                            <input\n                              type=\"radio\"\n                              value=\"Estimated\"\n                              name=\"dateOfBirth\"\n                              onChange={(e) => handleDateOfBirthChange(e)}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />{\" \"}\n                            Estimated\n                          </label>\n                        </div>\n                      </FormGroup>\n                    </div> */}\n                    <div className=\"form-group mb-2 col-md-4\">\n                      <FormGroup>\n                        <Label>Date Of Birth</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dob\"\n                          id=\"dob\"\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          value={objValues.dob}\n                          onChange={handleDobChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-2 col-md-4\">\n                      <FormGroup>\n                        <Label>Age</Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"number\"\n                          name=\"age\"\n                          id=\"age\"\n                          value={calculate_age(\n                            props?.basicInfo?.personResponseDto?.dateOfBirth\n                              ? props?.basicInfo?.personResponseDto?.dateOfBirth\n                              : props?.patientObj?.personResponseDto\n                                  ?.dateOfBirth\n                          )}\n                          // disabled={ageDisabled}\n                          disabled\n                          onChange={handleAgeChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Marital Status <span style={{ color: \"red\" }}> </span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"maritalStatus\"\n                          id=\"maritalStatus\"\n                          value={htsClientInformation.maritalStatus}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                          // disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          {maritalStatus.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                        {/* {errors.testingSetting !== \"\" ? (\n                                            <span className={classes.error}>\n                                                {errors.testingSetting}\n                                            </span>\n                                        ) : (\n                                            \"\"\n                                        )} */}\n                      </FormGroup>\n                    </div>\n                    {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                    {/*  <FormGroup>*/}\n                    {/*    <Label for=\"\">Phone Number</Label>*/}\n\n                    {/*    <PhoneInput*/}\n                    {/*        containerStyle={{*/}\n                    {/*          width: \"100%\",*/}\n                    {/*          border: \"1px solid #014D88\",*/}\n                    {/*        }}*/}\n                    {/*        inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                    {/*        country={\"ng\"}*/}\n                    {/*        placeholder=\"(234)7099999999\"*/}\n                    {/*        minLength={10}*/}\n                    {/*        name=\"phoneNumber\"*/}\n                    {/*        disabled*/}\n                    {/*        id=\"phoneNumber\"*/}\n                    {/*        masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                    {/*        value={objValues.phoneNumber}*/}\n                    {/*        onChange={(e) => {*/}\n                    {/*          checkPhoneNumberBasic(e, \"phoneNumber\");*/}\n                    {/*        }}*/}\n                    {/*        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                    {/*    />*/}\n                    {/*    {errors.phoneNumber !== \"\" ? (*/}\n                    {/*        <span className={classes.error}>*/}\n                    {/*    {errors.phoneNumber}*/}\n                    {/*  </span>*/}\n                    {/*    ) : (*/}\n                    {/*        \"\"*/}\n                    {/*    )}*/}\n                    {/*  </FormGroup>*/}\n                    {/*</div>*/}\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Phone Number\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"phoneNumber\"\n                          id=\"phoneNumber\"\n                          onChange={(e) => {\n                            handleInputChangePhoneNumber(e, \"phoneNumber\");\n                          }}\n                          value={objValues.phoneNumber}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n\n                    {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                    {/*  <FormGroup>*/}\n                    {/*    <Label for=\"\">Alternative Phone Number</Label>*/}\n                    {/*    <PhoneInput*/}\n                    {/*        containerStyle={{*/}\n                    {/*          width: \"100%\",*/}\n                    {/*          border: \"1px solid #014D88\",*/}\n                    {/*        }}*/}\n                    {/*        inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                    {/*        country={\"ng\"}*/}\n                    {/*        placeholder=\"(234)7099999999\"*/}\n                    {/*        minLength={10}*/}\n                    {/*        name=\"alternatePhoneNumber\"*/}\n                    {/*        id=\"altPhoneNumber\"*/}\n                    {/*        masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                    {/*        value={objValues.alternatePhoneNumber}*/}\n                    {/*        onChange={(e) => {*/}\n                    {/*          checkPhoneNumberBasic(e, \"alternatePhoneNumber\");*/}\n                    {/*        }}*/}\n                    {/*        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                    {/*    />*/}\n                    {/*  </FormGroup>*/}\n                    {/*</div>*/}\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Alternative Phone Number\n                          {/* <span style={{ color: \"red\" }}> *</span> */}\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"alternatePhoneNumber\"\n                          id=\"altPhoneNumber\"\n                          onChange={(e) => {\n                            handleInputChangePhoneNumber(\n                              e,\n                              \"alternatePhoneNumber\"\n                            );\n                          }}\n                          value={objValues.alternatePhoneNumber}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> Descriptive Residential Address </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"descriptiveResidentialAddress\"\n                          id=\"descriptiveResidentialAddress\"\n                          value={\n                            htsClientInformation.descriptiveResidentialAddress\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Date Of Index Client's confirmed HIV-positive test\n                          results <span style={{ color: \"red\" }}> *</span>{\" \"}\n                        </Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateIndexClientConfirmedHiv\"\n                          id=\"dateIndexClientConfirmedHiv\"\n                          value={\n                            props?.patientObj?.confirmatoryTest2?.date2 || \"\"\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                            backgroundColor: \"#e9ecef\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    {/* {indexClientConfirmedHivPositive && ( */}\n\n                    {/* )} */}\n                    {/* if index client is hiv positive, and date is selected */}\n                    <div className=\"form-group col-md-4 \">\n                      <Label>Is client current on HIV treatment?</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"isClientCurrentlyOnHiv\"\n                          id=\"isClientCurrentlyOnHiv\"\n                          onChange={handleHTSClientInputChange}\n                          value={htsClientInformation.isClientCurrentlyOnHiv}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes\">Yes</option>\n                          <option value=\"No\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {htsClientInformation.isClientCurrentlyOnHiv &&\n                      htsClientInformation.isClientCurrentlyOnHiv === \"Yes\" && (\n                        <div className=\"form-group mb-3 col-md-4\">\n                          <FormGroup>\n                            <Label for=\"\">\n                              Date of Treatment Initiation{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>{\" \"}\n                            </Label>\n                            <Input\n                              type=\"date\"\n                              onKeyPress={(e) => {\n                                e.preventDefault();\n                              }}\n                              name=\"DateOfTreatmentInitiation\"\n                              id=\"DateOfTreatmentInitiation\"\n                              value={\n                                htsClientInformation.DateOfTreatmentInitiation\n                              }\n                              onChange={handleHTSClientInputChange}\n                              min={props?.patientObj?.confirmatoryTest2?.date2}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.25rem\",\n                              }}\n                              //   disabledg\n                            />\n                            {/* {errors.treatmentDateI !== \"\" ? (\n                                          <span className={classes.error}>\n                                            {errors.referralDate}\n                                          </span>\n                                        ) : (\n                                          \"\"\n                                        )} */}\n                          </FormGroup>\n                        </div>\n                      )}\n\n                    <div className=\"form-group col-md-4 \">\n                      <Label>Recency Testing</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"recencyTesting\"\n                          id=\"recencyTesting\"\n                          onChange={handleHTSClientInputChange}\n                          value={htsClientInformation.recencyTesting}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Recent Infection\">\n                            Recent Infection\n                          </option>\n                          <option value=\"Long Infection\">Long Infection</option>\n                          <option value=\"Not Done\">Not Done</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> ART Enrollment Number </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"artEnrollmentNumber\"\n                          id=\"artEnrollmentNumber\"\n                          value={htsClientInformation.artEnrollmentNumber}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> Facility Of Enrollment </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"facilityOfEnrollment\"\n                          id=\"facilityOfEnrollment\"\n                          value={htsClientInformation.facilityOfEnrollment}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Notification Method selected </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"notificationMethod\"\n                          id=\"notificationMethod\"\n                          value={objValues.notificationMethod}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          {notificationContact.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          {\" \"}\n                          Number of Partner{\" \"}\n                          <span>\n                            {\" \"}\n                            (sexual or social) identified/elicited from index{\" \"}\n                          </span>\n                        </Label>\n                        <Input\n                          type=\"number\"\n                          name=\"numberOfPartnerIdentifiedFromClientIndex\"\n                          id=\"numberOfPartnerIdentifiedFromClientIndex\"\n                          value={\n                            htsClientInformation.numberOfPartnerIdentifiedFromClientIndex\n                          }\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled\n                        />\n                      </FormGroup>\n                    </div>\n\n                    <div\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                      style={{\n                        backgroundColor: \"#992E62\",\n                        width: \"125%\",\n                        height: \"35px\",\n                        color: \"#fff\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      SECTION 2 : LISTING INDEX CLIENT PARTNER\n                    </div>\n                    <p style={{ color: \"black\", marginBottom: \"20px\" }}>\n                      <i>\n                        Instruction: Ask index client to list all the client\n                        that have had sex with in the last 12 months. who may be\n                        risk to HIV and or partners who they share needle for\n                        injection of drugs where index client alluded to\n                        injection drugs\n                      </i>\n                    </p>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Date of Elicitation</Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateOfElicitation\"\n                          id=\"dateOfElicitation\"\n                          value={objValues.dateOfElicitation}\n                          onChange={handleInputChange}\n                          min={props?.patientObj?.confirmatoryTest2?.date2}\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                        {errors?.dateOfElicitation !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors?.dateOfElicitation}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Partner ID </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"partnerId\"\n                          id=\"partnerId\"\n                          value={partnerId}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          {\" \"}\n                          Name of Partner <span> (Enter surname first) </span>\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"partnerName\"\n                          id=\"partnerName\"\n                          value={htsClientInformation.partnerName}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          required\n                        />\n                        {/*{errors.partnerName !== \"\" ? (*/}\n                        {/*  <span className={classes.error}>*/}\n                        {/*    {errors.partnerName}*/}\n                        {/*  </span>*/}\n                        {/*) : (*/}\n                        {/*  \"\"*/}\n                        {/*)}*/}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Sex </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"partnerSex\"\n                          id=\"partnerSex\"\n                          value={htsClientInformation.partnerSex}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          required\n                        >\n                          <option value={\"\"}></option>\n                          {sexs.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                        {/*{errors.partnerSex !== \"\" ? (*/}\n                        {/*  <span className={classes.error}>*/}\n                        {/*    {errors.partnerSex}*/}\n                        {/*  </span>*/}\n                        {/*) : (*/}\n                        {/*  \"\"*/}\n                        {/*)}*/}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Age <span> (In years) </span>{\" \"}\n                        </Label>\n                        <input\n                          className=\"form-control\"\n                          type=\"number\"\n                          name=\"partnerAge\"\n                          id=\"partnerAge\"\n                          value={htsClientInformation.partnerAge}\n                          // disabled={ageDisabled}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                        {/*{errors.partnerAge !== \"\" ? (*/}\n                        {/*  <span className={classes.error}>*/}\n                        {/*    {errors.partnerAge}*/}\n                        {/*  </span>*/}\n                        {/*) : (*/}\n                        {/*  \"\"*/}\n                        {/*)}*/}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          {\" \"}\n                          Home/Contact Address <span> include landmark </span>\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"partnerAddress\"\n                          id=\"partnerAddress\"\n                          value={htsClientInformation.partnerAddress}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                    {/*  <FormGroup>*/}\n                    {/*    <Label for=\"\"> Contact Phone Number</Label>*/}\n\n                    {/*    <PhoneInput*/}\n                    {/*        containerStyle={{*/}\n                    {/*          width: \"100%\",*/}\n                    {/*          border: \"1px solid #014D88\",*/}\n                    {/*        }}*/}\n                    {/*        inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                    {/*        country={\"ng\"}*/}\n                    {/*        placeholder=\"(234)7099999999\"*/}\n                    {/*        minLength={10}*/}\n                    {/*        name=\"partnerPhoneNumber\"*/}\n                    {/*        id=\"partnerPhoneNumber\"*/}\n                    {/*        masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                    {/*        value={contactTracing.partnerPhoneNumber}*/}\n                    {/*        onChange={(e) => {*/}\n                    {/*          checkPhoneNumberBasic(e, \"partnerPhoneNumber\");*/}\n                    {/*        }}*/}\n                    {/*        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                    {/*    />*/}\n                    {/*    {errors.partnerPhoneNumber !== \"\" ? (*/}\n                    {/*        <span className={classes.error}>*/}\n                    {/*    {errors.partnerPhoneNumber}*/}\n                    {/*  </span>*/}\n                    {/*    ) : (*/}\n                    {/*        \"\"*/}\n                    {/*    )}*/}\n                    {/*  </FormGroup>*/}\n                    {/*</div>*/}\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Contact Phone Number\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <Input\n                          type=\"text\"\n                          name=\"partnerPhoneNumber\"\n                          id=\"partnerPhoneNumber\"\n                          onChange={(e) => {\n                            handleInputChangePhoneNumber(\n                              e,\n                              \"partnerPhoneNumber\"\n                            );\n                          }}\n                          value={contactTracing.partnerPhoneNumber}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />\n                        {errors.partnerPhoneNumber !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.partnerPhoneNumber}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Relationship to Index Client{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"relativeToIndexClient\"\n                          id=\"relativeToIndexClient\"\n                          value={htsClientInformation.relativeToIndexClient}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          {indexTesting.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                      {errors.relativeToIndexClient !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.relativeToIndexClient}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Contact tracing</Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"contactTracingType\"\n                          id=\"contactTracingType\"\n                          value={htsClientInformation.contactTracingType}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}>select</option>\n                          <option value=\"Phone calls\">Phone calls</option>\n                          <option value=\"Physical visit\">Physical visit</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\"> Number of Attempt</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"numberOfAttempt\"\n                          id=\"numberOfAttempt\"\n                          value={contactTracing.numberOfAttempt}\n                          onChange={handleInputContactChanges}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Has this partner ever denied you of food, shelter,\n                          freedom of movement,livehood?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"freedomDenial\"\n                          id=\"freedomDenial\"\n                          value={htsClientInformation.freedomDenial}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Has this partner ever threatened to hurt you? *\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"threatenToHurt\"\n                          id=\"threatenToHurt\"\n                          value={htsClientInformation.threatenToHurt}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Has this partner ever threatened to rape and force to\n                          have sex with you ? *\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"sexuallyUncomfortable\"\n                          id=\"sexuallyUncomfortable\"\n                          value={htsClientInformation.sexuallyUncomfortable}\n                          onChange={handleHTSClientInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group col-md-4 \">\n                      <Label>Known HIV Positive ?</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"knownHivPositive\"\n                          id=\"knownHivPositive\"\n                          onChange={handleInputChange}\n                          value={objValues.knownHivPositive}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes\">Yes</option>\n                          <option value=\"No\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Accepted HTS ? <span style={{ color: \"red\" }}> </span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"acceptedHts\"\n                          id=\"acceptedHts\"\n                          value={objValues.acceptedHts}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          {consent.map((value) => (\n                            <option key={value.id} value={value.id}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          HIV Test Result{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"hivTestResult\"\n                          id=\"hivTestResult \"\n                          value={objValues.hivTestResult}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"negative\">Negative</option>\n                          <option value=\"positive\">Positive</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n\n                    {objValues.partnerCurrentHivStatus !== \"\" &&\n                      objValues.partnerCurrentHivStatus === \"positive\" && (\n                        <div className=\"form-group mb-3 col-md-4\">\n                          <FormGroup>\n                            <Label for=\"\">\n                              Date Tested?{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <Input\n                              type=\"date\"\n                              onKeyPress={(e) => {\n                                e.preventDefault();\n                              }}\n                              name=\"datePartnerTested\"\n                              id=\"datePartnerTested\"\n                              value={objValues.datePartnerTested}\n                              onChange={handleInputChange}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.25rem\",\n                              }}\n                            />\n                          </FormGroup>\n                        </div>\n                      )}\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Date Enrolled On ART</Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateEnrollmentOnART\"\n                          id=\"dateEnrollmentOnART\"\n                          value={objValues.dateEnrollmentOnART}\n                          onChange={handleInputChange}\n                          min=\"1929-12-31\"\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          // disabled\n                        />\n                        {errors.referralDate !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.referralDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                  <Button\n                    content=\"Done\"\n                    // icon=\"saveee\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={() => {\n                      history.push(\"/\");\n                    }}\n                    disabled={saving}\n                  />\n\n                  {showSaveButton ? (\n                    <Button\n                      content=\"Save\"\n                      icon=\"save\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  ) : (\n                    <Button\n                      content=\"Done\"\n                      icon=\"save\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={() => {\n                        history.push(\"/\");\n                      }}\n                      disabled={saving}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Would you like to fill the Referral form ?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => loadNextForm()}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n\n          <Button\n            onClick={() => handleDone()}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Done\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default PnsForm;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/ViewFamilyIndexForm.js",["741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../../api.js\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport { Table } from \"react-bootstrap\";\nimport { Icon, List, Label as LabelSui } from \"semantic-ui-react\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ModeEditIcon from \"@mui/icons-material/ModeEditOutline\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport CreateIcon from \"@material-ui/icons/Create\";\n\nimport Select from \"react-select\";\n// import { getAcount } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\nimport {\n  getAllStateByCountryId,\n  getAllCountry,\n  getAllProvinces,\n  getAllGenders,\n  alphabetOnly,\n} from \"../../../../../utility\";\n\nimport { calculate_age } from \"../../../utils/index.js\";\nimport { LiveHelp } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst ViewFamilyIndexTestingForm = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const [errors, setErrors] = useState({});\n  const [ageDisabled2, setAgeDisabled2] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [maritalStatus, setMaritalStatus] = useState([]);\n\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [isClientCurrentlyOnHiv, setClientCurrentlyOnHiv] = useState(true);\n  const [states, setStates] = useState([]);\n  const [genders, setGenders] = useState([]);\n  const [hivStatus, setHivStatus] = useState([]);\n  const [indexClientConfirmedHivPositive, setIndexClientConfirmedHivPositive] =\n    useState(false);\n  const [familyRelationship, setFamilyRelationship] = useState([]);\n  const [selectedFamilyIndex, setSelectedFamilyIndex] = useState({});\n  const [showSelectedFamilyIndex, setShowSelectedFamilyIndex] = useState(false);\n  const [statusOfContact, setFamilyIndexHivStatus] = useState([]);\n  const [familyIndex, setFamilyIndex] = useState([]);\n  const [followUpAppointmentLocation, setFollowUpAppointmentLocation] =\n    useState([]);\n  const [indexVisitAttempt, setIndexVisitAttempt] = useState([]);\n  const [isWillingToHaveChildrenTested, setIsWillingToHaveChildrenTested] =\n    useState(false);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [addNewAttempt, setAddNewAttempt] = useState(false);\n\n  const [selectedFamilyTrackerForm, setSelectedFamilyTrackerForm] = useState(\n    {}\n  );\n  const [viewFamilyTrackerForm, setViewFamilyTrackerForm] = useState(false);\n\n  const [stateInfo, setStateInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n      : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n  );\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"permissions\")?.split(\",\")\n  );\n  const [lgaInfo, setLgaInfo] = useState(\n    props?.basicInfo?.personResponseDto?.address?.address[0].district\n      ? props?.basicInfo?.personResponseDto?.address?.address[0].district\n      : props?.patientObj?.personResponseDto?.address?.address[0].district\n  );\n  const [facilityName, setFacilityName] = useState(Cookies.get(\"facilityName\"));\n  const [facilityInfo, setFacilityInfo] = useState(props?.organizationInfo);\n  // const [selectedFamilyIndex, setSelectedFamilyIndex] = useState([]);\n\n  const [contactId, setContactId] = useState(\"\");\n  const [familyIndexRequestDto, setFamilyIndexRequestDto] = useState({\n    childNumber: \"\",\n    age: \"\",\n    childDead: \"\",\n    dateOfBirth: \"\",\n    dateOfHts: \"\",\n    familyRelationship: \"\",\n    statusOfContact: \"\",\n    motherDead: \"\",\n    yearMotherDead: \"\",\n    yearChildDead: \"\",\n    contactId: \"\",\n    uan: \"\",\n    liveWithParent: \"\",\n    isDateOfBirthEstimated: \"\",\n    firstName: props?.patientObj?.personResponseDto?.firstName,\n    middleName: props?.patientObj?.personResponseDto?.otherName,\n    lastName: props?.patientObj?.personResponseDto?.surname,\n  });\n  const [childNumber, setChildNumber] = useState([]);\n  const [showOther, setShowOther] = useState(false);\n\n  const [arrayFamilyIndexRequestDto, setArrayFamilyIndexRequestDto] = useState(\n    []\n  );\n  const [\n    arrayFamilyTestingTrackerRequestDTO,\n    setArrayFamilyTestingTrackerRequestDTO,\n  ] = useState([]);\n  const [errorFamilyIndexDTO, setErrorFamilyIndexDTO] = useState({});\n  const [errorFamilyIndexTracker, setErrorFamilyIndexDTOTracker] = useState({});\n\n  const [addIndexTracker, setaAddIndexTracker] = useState(false);\n  const [addIndexTracker2, setaAddIndexTracker2] = useState(false);\n\n  const [familyTestingTrackerRequestDTO, setFamilyTestingTrackerRequestDTO] =\n    useState({\n      attempt: \"\",\n      dateEnrolledInOVC: \"\",\n      dateEnrolledOnArt: \"\",\n      dateTested: \"\",\n      dateVisit: \"\",\n      facilityId: \"\",\n      followUpAppointmentLocation: \"\",\n      hiveTestResult: \"\",\n      knownHivPositive: \"\",\n      ovcId: \"\",\n      positionOfChildEnumerated: \"\",\n      scheduleVisitDate: \"\",\n      trackerAge: \"\",\n      trackerSex: \"\",\n    });\n  const [showHTSDate, setShowHTSDate] = useState(false);\n\n  const [payload, setPayload] = useState({\n    age:\n      props &&\n      calculate_age(\n        props?.basicInfo?.personResponseDto?.dateOfBirth\n          ? props?.basicInfo?.personResponseDto?.dateOfBirth\n          : props?.patientObj?.personResponseDto?.dateOfBirth\n      ),\n    alternatePhoneNumber: \"\",\n    contactId: \"\",\n    dateClientEnrolledOnTreatment: \"\",\n    dateIndexClientConfirmedHivPositiveTestResult:\n      props?.patientObj?.confirmatoryTest2?.date2,\n    dateOfBirth: props?.patientObj?.personResponseDto?.dateOfBirth,\n    extra: {},\n    facilityName: \"\",\n    familyIndexClient: \"\",\n    familyIndexRequestDto: {\n      childNumber: 0,\n      familyRelationship: \"\",\n      motherDead: \"\",\n      yearMotherDead: \"\",\n      contactId: \"\",\n\n      familyTestingTrackerRequestDTO: {\n        attempt: \"\",\n        dateEnrolledInOVC: \"\",\n        dateEnrolledOnArt: \"\",\n        dateTested: \"\",\n        dateVisit: \"\",\n        facilityId: 0,\n        followUpAppointmentLocation: \"\",\n        hiveTestResult: \"\",\n        knownHivPositive: \"\",\n        ovcId: \"\",\n        positionOfChildEnumerated: 0,\n        scheduleVisitDate: \"\",\n        trackerAge: 0,\n        trackerSex: \"\",\n\n        // not there\n        familyIndexTestingId: 0,\n        familyIndexTestingUuid: \"\",\n      },\n\n      // not there\n      statusOfContact: \"\",\n      familyIndexTestingUuid: \"\",\n    },\n\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    htsClientUuid:\n      props && props.patientObj ? props.patientObj.htsClientUUid : \"\",\n    indexClientId: props?.patientObj?.clientCode,\n    isClientCurrentlyOnHivTreatment: \"\",\n    lga: \"\",\n    maritalStatus: props?.patientObj?.personResponseDto?.maritalStatus?.id,\n    name: props?.patientObj?.personResponseDto?.firstName,\n    phoneNumber:\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n        ?.value,\n    recencyTesting: (() => {\n      if (\n        props?.patientObj?.recency?.finalRecencyResult &&\n        props?.patientObj?.recency?.finalRecencyResult !== \"\"\n      ) {\n        return props.patientObj.recency.finalRecencyResult;\n      } else if (\n        props?.patientObj?.recency?.rencencyInterpretation &&\n        props?.patientObj?.recency?.rencencyInterpretation !== \"\"\n      ) {\n        return props.patientObj.recency.rencencyInterpretation;\n      } else {\n        return \"Not Done\";\n      }\n    })(),\n    setting: props.patientObj.testingSetting,\n    // chnage position\n    visitDate: \"\",\n\n    sex: props?.patientObj?.personResponseDto?.gender?.id,\n    state: \"\",\n    virallyUnSuppressed: \"\",\n    willingToHaveChildrenTestedElseWhere: \"\",\n\n    reasonForIndexClientDateHivConfirmedNotSelected: \"\",\n    address: props?.patientObj?.personResponseDto?.address?.address[0].city,\n    // recencyTesting: \"\",\n  });\n\n  const [lgas, setLGAs] = useState([]);\n  const [facilities, setFacilities1] = useState([]);\n  const [selectedState, setSelectedState] = useState({});\n  const [selectedFacility, setSelectedFacility] = useState({});\n  const [selectedLga, setSelectedLga] = useState({});\n  const [retrieveFromIdToCode, setRetrieveFromIdToCode] = useState(true);\n\n  const loadStates = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setStates(response.data);\n        }\n      })\n      .catch((e) => {});\n  };\n\n  const loadOtherForm = (row) => {\n    // setSaving(true);\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n    toggle();\n  };\n  const loadLGA = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setLGAs(response.data);\n          // const selectedLga = response.data.find(lga => lga.id === id);\n          // setPayload(prevPayload => ({ ...prevPayload, lgaTransferTo: selectedLga ? selectedLga.name : \"\" }));\n        }\n      })\n      .catch((e) => {});\n  };\n  const handleItemClick = (next, present) => {\n    props.handleItemClick(next);\n    if (props.completed.includes(present)) {\n    } else {\n      props.setCompleted([...props.completed, present]);\n    }\n  };\n  const validateAddFamilyINdexDTO = () => {\n    let temp = {};\n\n    temp.familyRelationship =\n      familyIndexRequestDto.familyRelationship === \"\"\n        ? \"field is required\"\n        : \"\";\n    temp.age = familyIndexRequestDto.age === \"\" ? \"field is required\" : \"\";\n\n    setErrorFamilyIndexDTO({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const getFamilyIndexRequestList = () => {\n    axios\n      .get(\n        `${baseUrl}hts-family-index-testing/family-index?familyIndexTestingUuid=${props.selectedRow.familyIndexTestingUuid}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          setArrayFamilyIndexRequestDto(response?.data);\n        }\n      })\n      .catch((e) => {\n        console.error(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const getListoFFamilyIndexInfo = () => {\n    axios\n      .get(\n        `${baseUrl}hts-family-index-testing/${props.patientObj.id}/hts-client`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          // setFormId(response.data.htsClientId);\n\n          setPayload({\n            ...response.data,\n          });\n\n          // setArrayFamilyIndexRequestDto(response.data.familyIndexList);\n        }\n      })\n      .catch((e) => {\n        console.error(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const getTrackerForFamilyIndex = (id) => {\n    axios\n      .get(`${baseUrl}hts-family-index-testing/family-index-tracker/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          // setFormId(response.data.htsClientId);\n\n          setFamilyTestingTrackerRequestDTO(response.data);\n\n          // setArrayFamilyIndexRequestDto(response.data.familyIndexList);\n        }\n      })\n      .catch((e) => {\n        console.error(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  //\n\n  const AddNewByUpdateTracker = (tracker) => {\n    let userRequest = tracker;\n\n    axios\n      .post(\n        `${baseUrl}hts-family-index-testing/family-index-tracker`,\n        userRequest,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          // setFormId(response.data.htsClientId);\n          toast.success(\"Added New Family Index info save succesfully!\");\n          getListOfFamilyTracker();\n          setFamilyTestingTrackerRequestDTO({\n            attempt: \"\",\n            dateEnrolledInOVC: \"\",\n            dateEnrolledOnArt: \"\",\n            dateTested: \"\",\n            dateVisit: \"\",\n            facilityId: \"\",\n            familyIndexId: props.selectedRow.id,\n            followUpAppointmentLocation: \"\",\n            hiveTestResult: \"\",\n            knownHivPositive: \"\",\n            ovcId: \"\",\n            positionOfChildEnumerated: \"\",\n            scheduleVisitDate: \"\",\n            trackerAge: familyIndexRequestDto.age,\n            trackerSex: \"\",\n          });\n        }\n      })\n      .catch((e) => {\n        console.error(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const updateFamilyIndexTracker = (tracker) => {\n    let userRequest = familyIndexRequestDto;\n    userRequest.familyTestingTrackerResponseDTO = tracker;\n\n    axios\n      .put(\n        `${baseUrl}hts-family-index-testing/family-indexr/${props.selectedRow.id}`,\n        userRequest,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          // setFormId(response.data.htsClientId);\n          toast.success(\"Family Index info updated succesfully!\");\n        }\n      })\n      .catch((e) => {\n        console.error(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  // get list of family tracker\n  const getListOfFamilyTracker = () => {\n    axios\n      .get(\n        `${baseUrl}hts-family-index-testing/family-index-tracker/by-family-index-uuid?familyIndexUuid=${props.selectedRow.uuid}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      )\n      .then((response) => {\n        if (response.data) {\n          // setFormId(response.data.htsClientId);\n\n          setArrayFamilyTestingTrackerRequestDTO(response.data);\n        }\n      })\n      .catch((e) => {\n        console.error(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const updateFamilyIndexDTO = (payload) => {\n    axios\n      .put(\n        `${baseUrl}hts-family-index-testing/family-indexr/${props.selectedRow.id}`,\n        payload,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setSaving(false);\n\n        toast.success(\"Family Index form save succesfully!\");\n        handleItemClick(\"fit-history\", \"fit\");\n      })\n      .catch((error) => {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage, {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        } else {\n          toast.error(\"Something went wrong. Please try again...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      });\n  };\n\n  // delete  tracker\n\n  const deleteTracker = (row) => {\n    // setSaving(true);\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n    axios\n      .delete(\n        `${baseUrl}hts-family-index-testing/family-index-tracker/${row.id}\n`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        toast.success(\"Family Tracker Deleted Successfully\");\n        setViewFamilyTrackerForm(false);\n      })\n      .catch((error) => {\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage);\n        } else {\n          toast.error(\"Something went wrong. Please try again...\");\n        }\n      });\n  };\n\n  const removeFamilyTrackerRow = (index, each) => {\n    arrayFamilyTestingTrackerRequestDTO.splice(index, 1);\n    setArrayFamilyTestingTrackerRequestDTO([\n      ...arrayFamilyTestingTrackerRequestDTO,\n    ]);\n\n    deleteTracker(each);\n  };\n  const viewFamilyTrackerRow = (data, index) => {\n    setAddNewAttempt(false);\n\n    //get the family tracker\n    getTrackerForFamilyIndex(data.id);\n    setViewFamilyTrackerForm(true);\n    //  setFamilyIndexRequestDto(data)\n    setSelectedFamilyTrackerForm({ data: data, index: index });\n    // setFamilyTestingTrackerRequestDTO({ ...data });\n  };\n  //Date of Birth and Age handle\n  const handleDobChange2 = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      familyIndexRequestDto.age = age_now;\n      familyTestingTrackerRequestDTO.trackerAge = age_now;\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setFamilyIndexRequestDto({ ...familyIndexRequestDto, age: \"\" });\n    }\n    setFamilyIndexRequestDto({\n      ...familyIndexRequestDto,\n      dateOfBirth: e.target.value,\n    });\n\n    // if (familyIndexRequestDto.age !== \"\" && familyIndexRequestDto.age >= 85) {\n    //   toggle();\n    // }\n  };\n\n  const loadFacilities = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setFacilities1(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.error(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const TargetGroupSetup = () => {\n    axios\n      .get(`${baseUrl}account`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFacilityInfo(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const loadFamilyIndexSetting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const getMaritalStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setMaritalStatus(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const getFamilyRelationship = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FAMILY_RELATIONSHIP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFamilyRelationship(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  // get family index hiv status\n  const FAMILY_INDEX_HIV_STATUS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FAMILY_INDEX_HIV_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFamilyIndexHivStatus(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  // get family index\n  const GET_CHILD_NUMBER = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CHILD_NUMBER`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setChildNumber(response.data);\n\n        let ans = response.data.filter((each) => {\n          return each.code === \"CHILD_NUMBER_OTHERS\";\n        });\n\n        setRetrieveFromIdToCode(ans[0]?.id);\n      })\n      .catch((error) => {});\n  };\n  const FAMILY_INDEX = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FAMILY_INDEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFamilyIndex(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const FOLLOW_UP_APPOINTMENT_LOCATION = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FOLLOW UP_APPOINTMENT_LOCATION`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFollowUpAppointmentLocation(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  // GET\n  const INDEX_VISIT_ATTEMPTS = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_VISIT_ATTEMPTS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexVisitAttempt(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  // generate index client Id using the HTS client code/family index client unique ART number\n  const generateIndexClientId = () => {\n    const indexClientId = Math.floor(1000 + Math.random() * 9000);\n  };\n\n  // show reason for not selecting hiv confirm date, if the hiv confirm date is not selected and hide it when it is selected\n  // const showReasonForNotSelectingHivConfirmDate = () => {\n  //        if(payload.dateIndexClientConfirmedHiv === \"\"){\n  //            setIndexClientConfirmedHivPositive(true);\n  //        }else{\n  //            setIndexClientConfirmedHivPositive(false);\n  //        }\n  // }\n\n  const loadGenders = useCallback(async () => {\n    getAllGenders()\n      .then((response) => {\n        setGenders(response);\n      })\n      .catch(() => {});\n  }, []);\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(\n        `${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const getSettings = () => {\n    if (props.patientObj.testingSetting.includes(\"FACILITY\")) {\n      HTS_ENTRY_POINT_FACILITY();\n    } else if (props.patientObj.testingSetting.includes(\"COMMUNITY\")) {\n      HTS_ENTRY_POINT_COMMUNITY();\n    }\n  };\n\n  useEffect(() => {\n    GET_CHILD_NUMBER();\n    loadGenders();\n    loadStates();\n    // loadFamilyIndexSetting();\n    getCountry();\n    getStateByCountryId();\n    getMaritalStatus();\n    getFamilyRelationship();\n    FAMILY_INDEX_HIV_STATUS();\n    FAMILY_INDEX();\n    FOLLOW_UP_APPOINTMENT_LOCATION();\n    INDEX_VISIT_ATTEMPTS();\n    getListoFFamilyIndexInfo();\n    getFamilyIndexRequestList();\n    getListOfFamilyTracker();\n    setFamilyIndexRequestDto(props.selectedRow);\n    getSettings();\n\n    if (\n      props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId ||\n      props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n    ) {\n      loadLGA(\n        props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          ? props?.basicInfo?.personResponseDto?.address?.address[0]?.stateId\n          : props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n      );\n    }\n\n    if (props.organizationInfo) {\n      TargetGroupSetup();\n    }\n  }, []);\n\n  const showFamilyTrackerRow = () => {\n    setViewFamilyTrackerForm(true);\n    setAddNewAttempt(true);\n    setFamilyTestingTrackerRequestDTO({\n      attempt: \"\",\n      dateEnrolledInOVC: \"\",\n      dateEnrolledOnArt: \"\",\n      dateTested: \"\",\n      dateVisit: \"\",\n      facilityId: \"\",\n      familyIndexId: props.selectedRow.id,\n      followUpAppointmentLocation: \"\",\n      hiveTestResult: \"\",\n      knownHivPositive: \"\",\n      ovcId: \"\",\n      positionOfChildEnumerated: \"\",\n      scheduleVisitDate: \"\",\n      trackerAge: familyIndexRequestDto.age,\n      trackerSex: \"\",\n    });\n  };\n\n  const addFamilyTrackerRow = () => {\n    setViewFamilyTrackerForm(true);\n    setAddNewAttempt(true);\n\n    // let newArray = [...arrayFamilyTestingTrackerRequestDTO];\n    familyTestingTrackerRequestDTO.facilityId = localStorage.getItem(\"FacId\");\n\n    // newArray.push(familyTestingTrackerRequestDTO);\n\n    // setArrayFamilyTestingTrackerRequestDTO(newArray);\n\n    //  update the family index\n    AddNewByUpdateTracker(familyTestingTrackerRequestDTO);\n  };\n  const convertIdToCode = (id) => {\n    if (id) {\n      let ans = childNumber.filter((each) => {\n        return each.code === \"CHILD_NUMBER_OTHERS\";\n      });\n\n      if (ans[0].id === parseInt(id)) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const getIntPosition = (ex) => {\n    let code = [];\n\n    let main = childNumber.map((each, index) => {\n      if (each.code !== \"CHILD_NUMBER_OTHERS\") {\n        code.push({ id: each.id, value: index + 1 });\n      }\n    });\n\n    if (ex) {\n      let ans = code.filter((each) => {\n        return each.id === parseInt(ex);\n      });\n\n      let result = ans.length > 0 ? ans[0].value : \"\";\n      return result;\n    } else {\n      return \"\";\n    }\n  };\n  const updateFamilyTrackerRow = () => {\n    setViewFamilyTrackerForm(false);\n    let newArray = [...arrayFamilyTestingTrackerRequestDTO];\n    newArray[selectedFamilyTrackerForm.index] = familyTestingTrackerRequestDTO;\n    setArrayFamilyTestingTrackerRequestDTO(newArray);\n\n    // update the family index\n    updateFamilyIndexTracker(newArray);\n  };\n\n  //Get list of State\n  const getStateByCountryId = () => {\n    getAllStateByCountryId()\n      .then((res) => {\n        setStates(res);\n      })\n      .catch(() => {});\n  };\n  const checkPhoneNumberBasic = (e, inputName) => {\n    if (e) {\n      setErrors({ ...errors, phoneNumber: \"\" });\n    }\n    const limit = 10;\n\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\n    } else if (inputName === \"alternatePhoneNumber\") {\n      setPayload({ ...payload, alternatePhoneNumber: e.slice(0, limit) });\n    } else if (inputName === \"phoneNoOfReferrringFacility\") {\n      setPayload({\n        ...payload,\n        phoneNoOfReferrringFacility: e.slice(0, limit),\n      });\n    } else if (inputName === \"phoneNoOfRecievingFacility\") {\n      setPayload({ ...payload, phoneNoOfRecievingFacility: e.slice(0, limit) });\n    }\n  };\n\n  // handle Facility Name to slect drop down\n  const handleInputChangeObject = (e) => {\n    setPayload({\n      ...payload,\n      nameOfRecievingFacility: e.name,\n      addressOfRecievingFacility: e.parentParentOrganisationUnitName,\n      // lgaTransferTo: e.parentOrganisationUnitName,\n    });\n    setErrors({ ...errors, nameOfRecievingFacility: \"\" });\n    // setSelectedState(e.parentParentOrganisationUnitName);\n    // setSelectedLga(e.parentOrganisationUnitName);\n  };\n\n  // handlefamilyIndexRequestDto\n  const handlefamilyIndexRequestDto = (e) => {\n    // setErrors({ ...errors, [e.target.name]: \"\" });\n    setaAddIndexTracker(false);\n\n    if (e.target.name === \"childNumber\") {\n      let res = convertIdToCode(e.target.value);\n\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n        otherChildNumber: \"\",\n        contactId: props?.selectedRow?.contactId,\n      });\n\n      if (res) {\n        setShowOther(true);\n      } else {\n        let deductedValue = getIntPosition(e.target.value);\n        //set position to child number\n        console.log(\"deductedValue\", deductedValue);\n        setFamilyTestingTrackerRequestDTO({\n          ...familyTestingTrackerRequestDTO,\n          positionOfChildEnumerated: deductedValue,\n        });\n        setShowOther(false);\n      }\n    } else if (e.target.name === \"otherChildNumber\") {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n      });\n      setFamilyTestingTrackerRequestDTO({\n        ...familyTestingTrackerRequestDTO,\n        positionOfChildEnumerated: e.target.value,\n      });\n    } else if (e.target.name === \"statusOfContact\") {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n      });\n      if (\n        e.target.value === \"FAMILY_INDEX_HIV_STATUS_CURRENT_ON_ART\" ||\n        e.target.value === \"FAMILY_INDEX_HIV_STATUS_HIV_NEGATIVE\" ||\n        e.target.value === \"FAMILY_INDEX_HIV_STATUS_HIV_POSITIVE\"\n      ) {\n        setShowHTSDate(true);\n      } else {\n        setShowHTSDate(false);\n      }\n    } else {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        [e.target.name]: e.target.value,\n      });\n    }\n\n    // clearf the error with e.target.name\n    setErrors({ ...errors, [e.target.name]: \"\" });\n  };\n\n  // handlefamilyIndexRequestDto\n  const handlefamilyTestingTrackerRequestDTO = (e) => {\n    setErrorFamilyIndexDTOTracker({\n      ...errorFamilyIndexTracker,\n      [e.target.name]: \"\",\n    });\n    setaAddIndexTracker2(false);\n\n    if (e.target.name === \"positionOfChildEnumerated\") {\n      if (e.target.value > -1) {\n        setFamilyTestingTrackerRequestDTO({\n          ...familyTestingTrackerRequestDTO,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else if (e.target.name === \"trackerAge\") {\n      if (e.target.value > -1) {\n        setFamilyTestingTrackerRequestDTO({\n          ...familyTestingTrackerRequestDTO,\n          [e.target.name]: e.target.value,\n        });\n      }\n    } else {\n      setFamilyTestingTrackerRequestDTO({\n        ...familyTestingTrackerRequestDTO,\n        [e.target.name]: e.target.value,\n      });\n    }\n\n    // clearf the error with e.target.name\n    setErrors({ ...errors, [e.target.name]: \"\" });\n  };\n  const handleDone = () => {\n    toggle();\n    handleItemClick(\"new-referral\", \"\");\n  };\n  const loadNextForm = (row) => {\n    handleItemClick(\"pns\", \"fit\");\n  };\n\n  const getSelectedDFamilyIndex = (relationship) => {\n    // use the code to get object in the codeset\n    let result = familyIndex.filter((each, index) => {\n      return each.code === relationship;\n    });\n    console.log(result);\n    // filter family relationship\n    let result2 = familyRelationship.filter((each, index) => {\n      if (\n        each.display === \"Biological Child\" &&\n        result[0].display === \"Child\"\n      ) {\n        return each;\n      } else {\n        return each.display === result[0].display;\n      }\n    });\n\n    if (result2.length > 0) {\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        familyRelationship: result2[0].code,\n      });\n    }\n    // setSaving(true);\n    if (permissions.includes(\"Nigeria_PNS_Form\")) {\n      handleItemClick(\"pns\", \"fit\");\n      toggle();\n    } else if (permissions.includes(\"Referral_Form\")) {\n      handleItemClick(\"pns\", \"client-referral\");\n      toggle();\n    }\n  };\n\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    if (e.target.value) {\n      setErrors({ ...errors, stateId: \"\" });\n    }\n    setPayload({ ...payload, stateId: e.target.value });\n    getAllProvinces(stateId)\n      .then((res) => {\n        setProvinces(res);\n      })\n      .catch((e) => {});\n  };\n  const getCountry = () => {\n    getAllCountry()\n      .then((res) => {\n        setCountries(res);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n\n    // console.log(response);\n  };\n\n  const handleFamilyRelationshipChange = (e) => {\n    const { name, value } = e.target;\n    setPayload((prevPayload) => ({\n      ...prevPayload,\n      [name]: value,\n      // Reset childNumber when family relationship changes\n      childNumber:\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\"\n          ? \"\"\n          : prevPayload.childNumber,\n      // Reset statusOfContact when family relationship changes, where mother = '1293', father = '1294', biological child = '1295', siblings = '1296'\n      statusOfContact: [\n        \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\",\n        \"FAMILY_RELATIONSHIP_FATHER\",\n        \"FAMILY_RELATIONSHIP_MOTHER\",\n        \"FAMILY_RELATIONSHIP_SIBLINGS\",\n      ].includes(value)\n        ? \"\"\n        : prevPayload.statusOfContact,\n      // Reset uan when family relationship changes\n      uan:\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" ||\n        value === \"FAMILY_RELATIONSHIP_FATHER\" ||\n        value === \"FAMILY_RELATIONSHIP_MOTHER\" ||\n        value === \"FAMILY_RELATIONSHIP_SIBLINGS\"\n          ? \"\"\n          : prevPayload.uan,\n      // Reset motherDead when family relationship changes\n      motherDead:\n        value === \"FAMILY_RELATIONSHIP_MOTHER\" ||\n        value === \"FAMILY_RELATIONSHIP_FATHER\" ||\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\"\n          ? \"\"\n          : prevPayload.motherDead,\n      // Reset yearMotherDied when family relationship changes\n      yearMotherDied:\n        value === \"FAMILY_RELATIONSHIP_MOTHER\" ||\n        value === \"FAMILY_RELATIONSHIP_FATHER\" ||\n        value === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\"\n          ? \"\"\n          : prevPayload.yearMotherDied,\n    }));\n  };\n\n  //Get list of HIV STATUS ENROLLMENT\n\n  const convertCodeToDisplay = (type, value) => {\n    let data = \"\";\n    if (type === \"familyRelationship\") {\n      data = familyRelationship.filter((each) => {\n        if (each.code === value) {\n          return each;\n        }\n      });\n\n      return data[0].display;\n    }\n    if (type === \"statusOfContact\") {\n      data = statusOfContact.filter((each) => {\n        if (each.code === value) {\n          return each;\n        }\n      });\n\n      return data[0].display;\n    }\n    if (type === \"statusOfContact\") {\n      data = statusOfContact.filter((each) => {\n        if (each.code === value) {\n          return each;\n        }\n      });\n\n      return data[0].display;\n    }\n  };\n\n  // const removeFamilyIndexRow = (index) => {\n  //   arrayFamilyIndexRequestDto.splice(index, 1);\n  //   setArrayFamilyIndexRequestDto([...arrayFamilyIndexRequestDto]);\n  // };\n  const hideFamilyIndex = () => {\n    setShowSelectedFamilyIndex(false);\n  };\n\n  const selectAMember = (each, index, id) => {\n    setShowSelectedFamilyIndex(!showSelectedFamilyIndex);\n\n    setSelectedFamilyIndex(each);\n    //  setFamilyTestingTrackerRequestDTO(response.data.familyIndexList)\n    setFamilyIndexRequestDto(each);\n  };\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    const { name, value } = e.target;\n\n    if (e.target.name === \"name\" || e.target.name === \"lastName\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload((prevState) => ({\n        ...prevState,\n        [e.target.name]: name,\n      }));\n    } else if (name === \"willingToHaveChildrenTested\") {\n      setPayload((prevState) => ({\n        ...prevState,\n        [name]: value,\n        familyIndexTracker: {\n          ...prevState.familyIndexTracker,\n          positionOfChildEnumerated:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.positionOfChildEnumerated\n              : \"\",\n          trackerSex:\n            value === \"Yes\" ? prevState.familyIndexTracker.trackerSex : \"\",\n          trackerAge:\n            value === \"Yes\" ? prevState.familyIndexTracker.trackerAge : \"\",\n          scheduleVisitDate:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.scheduleVisitDate\n              : \"\",\n          followUpAppointmentLocation:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.followUpAppointmentLocation\n              : \"\",\n          dateVisit:\n            value === \"Yes\" ? prevState.familyIndexTracker.dateVisit : \"\",\n          knownHivPositive:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.knownHivPositive\n              : \"\",\n          dateTested:\n            value === \"Yes\" ? prevState.familyIndexTracker.dateTested : \"\",\n          hivTestResult:\n            value === \"Yes\" ? prevState.familyIndexTracker.hivTestResult : \"\",\n          dateEnrolledInOVC:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.dateEnrolledInOVC\n              : \"\",\n          dateEnrolledOnArt:\n            value === \"Yes\"\n              ? prevState.familyIndexTracker.dateEnrolledOnArt\n              : \"\",\n          attempt: value === \"Yes\" ? prevState.familyIndexTracker.attempt : \"\",\n        },\n      }));\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"indexClientId\" && e.target.value !== \"\") {\n      //    setPayload({...payload, [e.target.name]: name })\n    } else if (e.target.name === \"dateIndexConfirmedHiv\") {\n      if (e.target.value !== \"\") {\n        const name = e.target.name;\n        setPayload({ ...payload, [e.target.name]: name });\n        setIndexClientConfirmedHivPositive(false); // Hide extra fields when date is selected\n      } else {\n        setIndexClientConfirmedHivPositive(true); // Show extra fields if date is not selected\n      }\n    } else if (\n      e.target.name === \"nameOfContactPerson\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfPersonRefferringClient\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}patient/exist/hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n        }\n      }\n\n      getHosiptalNumber();\n    } else if (e.target.name === \"familyIndexClient\" && e.target.value !== \"\") {\n      getSelectedDFamilyIndex(e.target.value);\n\n      setPayload({\n        ...payload,\n        [e.target.name]: e.target.value,\n        trackerSex:\n          e.target.value === \"FAMILY_INDEX_MOTHER\"\n            ? \"SEX_FEMALE\"\n            : e.target.value === \"FAMILY_INDEX_FATHER\"\n            ? \"SEX_MALE\"\n            : \"\",\n      });\n      // Add new validation logic\n      // Define relationship mapping between Family Index and Family Relationship\n      const familyIndexToRelationshipMap = {\n        FAMILY_INDEX_CHILD: [\"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\"],\n        FAMILY_INDEX_FATHER: [\"FAMILY_RELATIONSHIP_FATHER\"],\n        FAMILY_INDEX_MOTHER: [\"FAMILY_RELATIONSHIP_MOTHER\"],\n      };\n\n      // Get codes to exclude based on selected index\n      const excludedRelationshipCodes =\n        familyIndexToRelationshipMap[value] || [];\n\n      // Check if current relationship needs to be reset\n      if (\n        excludedRelationshipCodes.includes(\n          familyIndexRequestDto.familyRelationship\n        )\n      ) {\n        setFamilyIndexRequestDto((prevState) => ({\n          ...prevState,\n          familyRelationship: \"\",\n        }));\n\n        // For edit mode, show a notification to the user\n        if (props.action === \"edit\") {\n          toast.info(\n            \"Family Relationship has been reset because it conflicts with the selected Family Index Client\",\n            {\n              position: toast.POSITION.TOP_RIGHT,\n            }\n          );\n        }\n      }\n    } else {\n      setPayload({ ...payload, [e.target.name]: e.target.value });\n    }\n  };\n\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      payload.age = age_now;\n\n      //setpayload({...payload, age: age_now});\n    } else {\n      setPayload({ ...payload, age: \"\" });\n    }\n    setPayload({ ...payload, [e.target.name]: e.target.value });\n\n    setPayload({ ...payload, dateOfBirth: e.target.value });\n    if (payload.age !== \"\" && payload.age <= 15) {\n      // props.setHideOtherMenu(true);\n    } else if (payload.age !== \"\" && payload.age > 15) {\n      // props.setHideOtherMenu(true);\n    } else {\n      // props.setHideOtherMenu(true);\n    }\n\n    // if (payload.age !== \"\" && payload.age >= 85) {\n    //   toggle();\n    // }\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      familyIndexRequestDto.isDateOfBirthEstimated = false;\n      setAgeDisabled2(true);\n    } else if (e.target.value == \"Estimated\") {\n      familyIndexRequestDto.isDateOfBirthEstimated = true;\n      setAgeDisabled2(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    e.preventDefault();\n    if (!ageDisabled) {\n      // if (e.target.value !== \"\" && e.target.value >= 85) {\n      //   toggle();\n      // }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setPayload({\n        ...payload,\n        dateOfBirth: moment(dobNew).format(\"YYYY-MM-DD\"),\n      });\n      payload.dateOfBirth = moment(dobNew).format(\"YYYY-MM-DD\");\n\n      setPayload({ ...payload, age: e.target.value });\n    }\n  };\n\n  const handleAgeChange2 = (e) => {\n    e.preventDefault();\n    setErrorFamilyIndexDTO({ ...errorFamilyIndexDTO, [e.target.name]: \"\" });\n\n    if (!ageDisabled2) {\n      // if (e.target.value !== \"\" && e.target.value >= 85) {\n      //   toggle();\n      // }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        dateOfBirth: moment(dobNew).format(\"YYYY-MM-DD\"),\n      });\n      familyIndexRequestDto.dateOfBirth = moment(dobNew).format(\"YYYY-MM-DD\");\n\n      setFamilyIndexRequestDto({\n        ...familyIndexRequestDto,\n        age: e.target.value,\n      });\n      setFamilyTestingTrackerRequestDTO({\n        ...familyTestingTrackerRequestDTO,\n        trackerAge: e.target.value,\n      });\n    }\n  };\n\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n  const validate = () => {\n    temp.familyIndexClient = payload.familyIndexClient\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.familyRelationship = familyIndexRequestDto.familyRelationship\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.dateOfBirth = familyIndexRequestDto.dateOfBirth\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.statusOfContact = familyIndexRequestDto.statusOfContact\n      ? \"\"\n      : \"This field is required.\";\n    temp.visitDate = payload.visitDate ? \"\" : \"This field is required\";\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const postPayload = (payload) => {\n    axios\n      .put(\n        `${baseUrl}hts-family-index-testing/update-index-testing-and-index/${payload.id}`,\n        payload,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setSaving(false);\n        toast.success(\"Family Index form saved successfully!\");\n        handleItemClick(\"fit-history\", \"risk\");\n      })\n      .catch((error) => {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage, {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        } else {\n          toast.error(\"Something went wrong. Please try again...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      });\n  };\n\n  useEffect(() => {\n    if (\n      props?.patientObj?.testingSetting ===\n      \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\"\n    ) {\n      setPayload((prevPayload) => ({\n        ...prevPayload,\n        familyIndexClient: \"FAMILY_INDEX_CHILD\",\n      }));\n\n      setErrors((prevErrors) => ({\n        ...prevErrors,\n        familyIndexClient: \"\",\n      }));\n    }\n  }, [props?.patientObj?.testingSetting]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      const submissionPayload = {\n        ...payload,\n        contactId: props?.selectedRow?.contactId || \"\",\n        familyIndexRequestDto: {\n          ...familyIndexRequestDto,\n          contactId: props?.selectedRow?.contactId || \"\",\n          familyTestingTrackerRequestDTO: familyTestingTrackerRequestDTO,\n        },\n        state: stateInfo,\n        lga: lgaInfo,\n      };\n\n      if (validate()) {\n        setSaving(true);\n        postPayload(submissionPayload);\n      }\n    } catch (error) {\n      console.error(\"Error in handleSubmit:\", error);\n      toast.error(\"Something went wrong. Please try again.\");\n    }\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n\n  const getAttemptDisplay = (attempt) => {\n    if (attempt) {\n      let ans = indexVisitAttempt.filter((each, index) => {\n        return each.code === attempt;\n      });\n      if (ans[0].display) {\n        return ans[0].display;\n      } else {\n        return attempt;\n      }\n    } else {\n      return \"\";\n    }\n  };\n  const FollowUpDisplay = (followUp) => {\n    if (followUp) {\n      let ans = followUpAppointmentLocation.filter((each, index) => {\n        return each.code === followUp;\n      });\n      if (ans[0].display) {\n        return ans[0].display;\n      } else {\n        return followUp;\n      }\n    } else {\n      return \"\";\n    }\n  };\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setPayload({ ...payload, [inputName]: NumberValue });\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, [inputName]: NumberValue });\n    }\n    if (inputName === \"alternatePhoneNumber\") {\n      setPayload({ ...payload, [inputName]: NumberValue });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}> Family Index Testing Form</h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                SECTION A\n              </div>\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      State <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"stateId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      value={stateInfo}\n                      required\n                      // onChange={loadLGA1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterState = states.filter((st) => {\n                            return Number(st.id) === Number(e.target.value);\n                          });\n                          setSelectedState(filterState);\n\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            stateId: filterState[0].id,\n                          }));\n                        }\n                        loadLGA(e.target.value);\n                      }}\n                      disabled\n                    >\n                      <option>Select State</option>\n                      {states.map((state) => (\n                        <option key={state.id} value={state.id}>\n                          {state.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.stateTransferTo !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.stateTransferTo}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      LGA <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"lgaId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      value={lgaInfo}\n                      // onChange={loadFacilities1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterlga = lgas.filter((lg) => {\n                            return Number(lg.id) === Number(e.target.value);\n                          });\n                          setSelectedLga(filterlga);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            lgaId: filterlga[0].id,\n                          }));\n                        }\n                        loadFacilities(e.target.value);\n                      }}\n                      disabled\n                    >\n                      <option>Select LGA</option>\n                      {lgas.map((lga) => (\n                        <option key={lga.id} value={lga.id}>\n                          {lga.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.lgaId !== \"\" ? (\n                      <span className={classes.error}>{errors.lgaId}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      Facility Name\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"facilityName\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      value={facilityInfo.currentOrganisationUnitName}\n                      required\n                      onChange={(e) => {\n                        // setPayload(prevPayload => ({ ...prevPayload, facilityTransferTo: e.target.value }));\n                        if (e.target.value !== \"\") {\n                          const filterFacility = facilities.filter((fa) => {\n                            return Number(fa.id) === Number(e.target.value);\n                          });\n                          setSelectedFacility(filterFacility);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            facilityName: filterFacility[0].name,\n                          }));\n                        }\n                      }}\n                      disabled\n                    >\n                      {/* <option>Select Facility</option>\n                                            {facilities.map((facility) => (\n                                                <option key={facility.id} value={facility.id}>\n                                                    {facility.name}\n                                                </option>\n                                            ))} */}\n                    </Input>\n                    {errors.facilityTransferTo !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.facilityTransferTo}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"visitDate\"\n                      id=\"visitDate\"\n                      value={payload.visitDate}\n                      onChange={handleInputChange}\n                      min={props?.patientObj?.confirmatoryTest2?.date2}\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled={props.action === \"view\" ? true : false}\n                    />\n                    {errors.visitDate !== \"\" ? (\n                      <span className={classes.error}>{errors.visitDate}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Setting <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"setting\"\n                      id=\"setting\"\n                      value={payload.setting}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={true}\n                    >\n                      <option value={\"\"}></option>\n                      {setting.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.setting !== \"\" ? (\n                      <span className={classes.error}>{errors.setting}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Family Index client{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"familyIndexClient\"\n                      id=\"familIndxClient\"\n                      onChange={handleInputChange}\n                      value={\n                        props?.patientObj?.testingSetting ===\n                        \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\"\n                          ? \"FAMILY_INDEX_CHILD\"\n                          : payload.familyIndexClient\n                      }\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={\n                        props?.action === \"view\" ||\n                        props?.patientObj?.testingSetting ===\n                          \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\"\n                      }\n                    >\n                      <option value={\"\"}>Select</option>\n                      {familyIndex &&\n                        familyIndex.map((x, index) => (\n                          <option key={x.id} value={x.code}>\n                            {x.display}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.familyIndexClient !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.familyIndexClient}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      First Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"firstName\"\n                      id=\"firstName\"\n                      value={familyIndexRequestDto.firstName}\n                      onChange={handlefamilyIndexRequestDto}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.name !== \"\" ? (\n                      <span className={classes.error}>{errors.name}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"lastName\">Middle Name</Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"name\"\n                      id=\"name\"\n                      value={familyIndexRequestDto.middleName}\n                      onChange={handlefamilyIndexRequestDto}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.name !== \"\" ? (\n                      <span className={classes.error}>{errors.name}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"lastName\">\n                      Last Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"name\"\n                      id=\"name\"\n                      value={familyIndexRequestDto.lastName}\n                      onChange={handlefamilyIndexRequestDto}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.name !== \"\" ? (\n                      <span className={classes.error}>{errors.name}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Index Client ID\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"indexClientId\"\n                      id=\"indexClientId\"\n                      value={payload.indexClientId}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.indexClientId !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.indexClientId}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Sex <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"sex\"\n                      id=\"sex\"\n                      onChange={handleInputChange}\n                      value={payload.sex}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    >\n                      <option value={\"\"}>Select</option>\n                      {genders &&\n                        genders.map((gender, index) => (\n                          <option key={gender.id} value={gender.id}>\n                            {gender.display}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.sex !== \"\" ? (\n                      <span className={classes.error}>{errors.sex}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Date Of Birth<span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"dateOfBirth\"\n                      id=\"dateOfBirth\"\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={payload.dateOfBirth}\n                      onChange={handleDobChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {/* {errors.dateOfBirth !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.dateOfBirth}\n                      </span>\n                    ) : (\n                      \"\"\n                    )} */}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Age <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      name=\"age\"\n                      id=\"age\"\n                      value={payload.age}\n                      disabled={ageDisabled}\n                      onChange={handleAgeChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.age !== \"\" ? (\n                      <span className={classes.error}>{errors.age}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Marital Status <span style={{ color: \"red\" }}> </span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"maritalStatus\"\n                      id=\"maritalStatus\"\n                      value={payload.maritalStatus}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                      // disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      {maritalStatus.map((value) => (\n                        <option key={value.id} value={value.id}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNumber\"\n                      id=\"phoneNumber\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(e, \"phoneNumber\");\n                      }}\n                      value={payload.phoneNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.phoneNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Alternative Contact Number\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"alternatePhoneNumber\"\n                      id=\"alternatePhoneNumber\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(e, \"alternatePhoneNumber\");\n                      }}\n                      value={payload.alternatePhoneNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.action === \"view\" ? true : false}\n                    />\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Descriptive Residential Address{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"address\"\n                      id=\"address\"\n                      value={payload.address}\n                      disabled\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.address !== \"\" ? (\n                      <span className={classes.error}>{errors.address}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Date Of Index Client's confrimed HIV-positive test results{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"dateIndexClientConfirmedHivPositiveTestResult\"\n                      id=\"dateIndexClientConfirmedHivPositiveTestResult\"\n                      value={\n                        payload.dateIndexClientConfirmedHivPositiveTestResult\n                      }\n                      onChange={handleInputChange}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.dateIndexClientConfirmedHivPositiveTestResult !==\n                    \"\" ? (\n                      <span className={classes.error}>\n                        {errors.referralDate}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {indexClientConfirmedHivPositive && (\n                  <div className=\"form-group col-md-4\">\n                    <Label>\n                      {\" \"}\n                      Reason for not selecting Index client Hiv confirmed test\n                      result Date ?{\" \"}\n                    </Label>\n                    <FormGroup>\n                      <select\n                        className=\"form-control\"\n                        name=\"reasonForIndexClientDateHivConfirmedNotSelected\"\n                        id=\"reasonForIndexClientDateHivConfirmedNotSelected\"\n                        onChange={handleInputChange}\n                        value={\n                          payload.reasonForIndexClientDateHivConfirmedNotSelected\n                        }\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value=\"\">Select</option>\n                        <option value=\"Result not confirmed yet\">\n                          Result not confirmed yet\n                        </option>\n                        <option value=\"NA\">NA</option>\n                      </select>\n                      {errors.reasonForIndexClientDateHivConfirmedNotSelected !==\n                      \"\" ? (\n                        <span className={classes.error}>\n                          {\n                            errors.reasonForIndexClientDateHivConfirmedNotSelected\n                          }\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n                {/* )} */}\n\n                <div className=\"form-group col-md-4 \">\n                  <Label>\n                    {\" \"}\n                    Recency Testing{\" \"}\n                    <span> (for newly tested HIV-positive only) </span>{\" \"}\n                  </Label>\n\n                  {/* {\n                    <FormGroup>\n                      <Input\n                        className=\"form-control\"\n                        name=\"finalRecencyResult\"\n                        id=\"finalRecencyResult\"\n                        type=\"text\"\n                        disabled\n                        // value={recency.finalRecencyResult}\n                        // onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                      />\n                    </FormGroup>\n                  } */}\n                  <FormGroup>\n                    <Input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"recencyTesting\"\n                      id=\"reccencyTesting\"\n                      onChange={handleInputChange}\n                      value={payload.recencyTesting}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled\n                    />\n                    {/* <select\n                      className=\"form-control\"\n                      name=\"recencyTesting\"\n                      id=\"reccencyTesting\"\n                      onChange={handleInputChange}\n                      value={payload.recencyTesting}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value=\"\">Select</option> */}\n                    {/* <option value=\"Recent Infection\">Recent Infection</option>\n                      <option value=\"Long Term Infection\">\n                        {\" \"}\n                        Long Term Infection\n                      </option>\n                      <option value=\"Not Done\">Not Done</option> */}\n                    {/* </select> */}\n                  </FormGroup>\n                </div>\n\n                {/* if index client is hiv positive, and date is selected */}\n                <div className=\"form-group col-md-4 \">\n                  <Label>Is client current on HIV treatment ?</Label>\n                  <FormGroup>\n                    <select\n                      className=\"form-control\"\n                      name=\"isClientCurrentlyOnHivTreatment\"\n                      id=\"isClientCurrentlyOnHivTreatment\"\n                      onChange={handleInputChange}\n                      value={payload.isClientCurrentlyOnHivTreatment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.action === \"view\" ? true : false}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </select>\n                  </FormGroup>\n                </div>\n\n                {payload.isClientCurrentlyOnHivTreatment &&\n                  payload.isClientCurrentlyOnHivTreatment === \"Yes\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Date of Treatment Initiation{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>{\" \"}\n                        </Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateClientEnrolledOnTreatment\"\n                          id=\"dateClientEnrolledOnTreatment\"\n                          value={payload.dateClientEnrolledOnTreatment}\n                          onChange={handleInputChange}\n                          min={\n                            payload.dateIndexClientConfirmedHivPositiveTestResult\n                          }\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.action === \"view\" ? true : false}\n                        />\n                        {errors.treatmentDate !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.referralDate}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                {payload.isClientCurrentlyOnHivTreatment &&\n                  payload.isClientCurrentlyOnHivTreatment === \"Yes\" && (\n                    <div className=\"form-group col-md-4 \">\n                      <Label>virally unsuppressed</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"virallyUnSuppressed\"\n                          id=\"virallyUnSuppressed\"\n                          onChange={handleInputChange}\n                          value={payload.virallyUnSuppressed}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes\">Yes</option>\n                          <option value=\"No\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                  )}\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"willingToHaveChildrenTestedElseWhere\">\n                      Are you willing to have your children tested elsewhere by\n                      a health care worker?\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"willingToHaveChildrenTestedElseWhere\"\n                      name=\"willingToHaveChildrenTestedElseWhere\"\n                      onChange={handleInputChange}\n                      value={payload.willingToHaveChildrenTestedElseWhere}\n                      disabled={props.action === \"view\" ? true : false}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"Yes\">Yes</option>\n                      <option value=\"No\">No</option>\n                    </select>\n                  </FormGroup>\n                </div>\n              </div>\n\n              <br />\n            </div>\n\n            <div className=\"row\">\n              <div\n                className=\"form-group col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                SECTION B: FAMILY INDEX\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"form-group col-md-4\">\n                <FormGroup>\n                  <Label for=\"familyRelationship\">\n                    Family Relationship <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    id=\"familyRelationship\"\n                    name=\"familyRelationship\"\n                    onChange={handlefamilyIndexRequestDto}\n                    value={familyIndexRequestDto.familyRelationship}\n                    disabled={props.action === \"view\" ? true : false}\n                  >\n                    <option value=\"\">Select</option>\n                    {familyRelationship\n                      .filter((relationship) => {\n                        // Skip filtering if in view mode\n                        if (props.action === \"view\") {\n                          return true;\n                        }\n\n                        // Define mapping between Family Index and Family Relationship codes\n                        const familyIndexToRelationshipMap = {\n                          FAMILY_INDEX_CHILD: [\n                            \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\",\n                          ],\n                          FAMILY_INDEX_FATHER: [\"FAMILY_RELATIONSHIP_FATHER\"],\n                          FAMILY_INDEX_MOTHER: [\"FAMILY_RELATIONSHIP_MOTHER\"],\n                        };\n\n                        // Get the effective family index value (considering auto-populated value)\n                        const effectiveFamilyIndex =\n                          props.patientObj.targetGroup === \"TARGET_GROUP_PD\"\n                            ? \"FAMILY_INDEX_CHILD\"\n                            : payload.familyIndexClient;\n\n                        // Get relationship codes to exclude\n                        const excludedRelationshipCodes =\n                          familyIndexToRelationshipMap[effectiveFamilyIndex] ||\n                          [];\n\n                        // Return true if this relationship should not be excluded\n                        return !excludedRelationshipCodes.includes(\n                          relationship.code\n                        );\n                      })\n                      .map((value, index) => (\n                        <option key={index} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                  </select>\n                  {errors.familyRelationship && (\n                    <span className={classes.error}>\n                      {errors.familyRelationship}\n                    </span>\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-2 col-md-4\">\n                <FormGroup>\n                  <Label>Date Of Birth</Label>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Actual\"\n                        name=\"dateOfBirth\"\n                        defaultChecked\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.action === \"view\" ? true : false}\n                      />{\" \"}\n                      Actual\n                    </label>\n                  </div>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Estimated\"\n                        name=\"dateOfBirth\"\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.action === \"view\" ? true : false}\n                      />{\" \"}\n                      Estimated\n                    </label>\n                  </div>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"dateOfBirth\"\n                    id=\"dateOfBirth\"\n                    // min={familyIndexRequestDto.dateVisit}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    value={familyIndexRequestDto.dateOfBirth}\n                    onChange={handleDobChange2}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.action === \"view\" ? true : false}\n                  />\n                  {errors.dateOfBirth && (\n                    <span className={classes.error}>{errors.dateOfBirth}</span>\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label>Age</Label>\n                  <input\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"age\"\n                    id=\"age\"\n                    value={familyIndexRequestDto.age}\n                    disabled={ageDisabled2}\n                    onChange={handleAgeChange2}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  />\n                  {errorFamilyIndexDTO.age && (\n                    <span className={classes.error}>\n                      {errorFamilyIndexDTO.age}\n                    </span>\n                  )}\n                </FormGroup>\n              </div>\n\n              {familyIndexRequestDto.familyRelationship ===\n                \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"childNumber\">Child Number</Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"childNumber\"\n                      name=\"childNumber\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.childNumber}\n                      disabled={props.action === \"view\" ? true : false}\n                    >\n                      <option value=\"\">Select</option>\n                      {childNumber.map((each) => (\n                        <option key={each.id} value={each.id}>\n                          {each.display}\n                        </option>\n                      ))}\n\n                      {/* <option value=\"others\">Others</option> */}\n                    </select>\n                    {errorFamilyIndexDTO.childNumber && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.childNumber}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n\n              {showOther && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Others\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"number\"\n                      name=\"otherChildNumber\"\n                      id=\"otherChildNumber\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.otherChildNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.otherChildNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.otherChildNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              {familyIndexRequestDto.familyRelationship ===\n                \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"childNumber\">Child Dead</Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"childDead\"\n                      name=\"childDead\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.childDead}\n                      disabled={props.action === \"view\" ? true : false}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"yes\">Yes</option>\n                      <option value=\"no\">No</option>\n                    </select>\n                    {/* {errorFamilyIndexDTO.childNumber && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.childNumber}\n                      </span>\n                    )} */}\n                  </FormGroup>\n                </div>\n              )}\n              {/* <div className=\"form-group col-md-4\">\n                <FormGroup>\n                  <Label for=\"DateofHTS\">Other Child Number </Label>\n                  <Input\n                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                    name=\"otherChildNumber\"\n                    id=\"otherChildNumber\"\n                    value={familyIndexRequestDto.otherChildNumber}\n                    onChange={handlefamilyIndexRequestDto}\n                    min=\"1929-12-31\"\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    // disabled\n                  />\n                  {errorFamilyIndexDTO.familyRelationship && (\n                    <span className={classes.error}>\n                      {errorFamilyIndexDTO.familyRelationship}\n                    </span>\n                  )}\n                </FormGroup>\n              </div> */}\n              {familyIndexRequestDto.familyRelationship ===\n                \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"liveWithParent\">Live with Parent</Label>\n                    <select\n                      className=\"form-control\"\n                      id=\"liveWithParent\"\n                      name=\"liveWithParent\"\n                      onChange={handlefamilyIndexRequestDto}\n                      value={familyIndexRequestDto.liveWithParent}\n                      disabled={props.action === \"view\" ? true : false}\n                    >\n                      <option value=\"\">Select</option>\n                      <option value=\"yes\">Yes</option>\n                      <option value=\"no\">No</option>\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"firstName\">\n                    Contact ID\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"contactId\"\n                    id=\"contactId\"\n                    value={props?.selectedRow?.contactId || \"\"}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled\n                  />\n                  {errors.indexClientId !== \"\" ? (\n                    <span className={classes.error}>{errors.contactId}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group col-md-4\">\n                <FormGroup>\n                  <Label for=\"statusOfContact\">\n                    Contact HIV Status <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    id=\"statusOfContact\"\n                    name=\"statusOfContact\"\n                    onChange={handlefamilyIndexRequestDto}\n                    value={familyIndexRequestDto.statusOfContact}\n                    disabled={props.action === \"view\" ? true : false}\n                  >\n                    <option value=\"\">Select</option>\n                    {statusOfContact.map((value, index) => (\n                      <option key={index} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.statusOfContact && (\n                    <span className={classes.error}>\n                      {errors.statusOfContact}\n                    </span>\n                  )}\n                </FormGroup>\n              </div>\n\n              {showHTSDate && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"DateofHTS\">Date of HTS</Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"dateOfHts\"\n                      id=\"dateOfHts\"\n                      value={familyIndexRequestDto.dateOfHts}\n                      onChange={handlefamilyIndexRequestDto}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled={props.action === \"view\" ? true : false}\n                    />\n                    {errorFamilyIndexDTO.familyRelationship && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.familyRelationship}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n\n              {familyIndexRequestDto.statusOfContact &&\n                familyIndexRequestDto.statusOfContact ===\n                  \"FAMILY_INDEX_HIV_STATUS_CURRENT_ON_ART\" && (\n                  <div className=\"form-group col-md-4\">\n                    <FormGroup>\n                      <Label for=\"uan\">Unique Art No (UAN)</Label>\n                      <input\n                        className=\"form-control\"\n                        id=\"uan\"\n                        type=\"text\"\n                        name=\"uan\"\n                        value={familyIndexRequestDto.uan}\n                        onChange={handlefamilyIndexRequestDto}\n                        disabled={\n                          familyIndexRequestDto.statusOfContact !==\n                          \"FAMILY_INDEX_HIV_STATUS_CURRENT_ON_ART\"\n                        }\n                      />\n                      {errors.uan && (\n                        <span className={classes.error}>{errors.uan}</span>\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n              {familyIndexRequestDto.familyRelationship &&\n                familyIndexRequestDto.familyRelationship !==\n                  \"FAMILY_RELATIONSHIP_MOTHER\" && (\n                  <div className=\"form-group col-md-4\">\n                    <FormGroup>\n                      <Label for=\"motherDead\">Mother Dead?</Label>\n                      <select\n                        className=\"form-control\"\n                        id=\"motherDead\"\n                        name=\"motherDead\"\n                        onChange={handlefamilyIndexRequestDto}\n                        value={familyIndexRequestDto.motherDead}\n                        disabled={props.action === \"view\" ? true : false}\n                      >\n                        <option value=\"\">Select</option>\n                        <option value=\"Yes\">Yes</option>\n                        <option value=\"No\">No</option>\n                      </select>\n                      {errorFamilyIndexDTO.motherDead && (\n                        <span className={classes.error}>\n                          {errorFamilyIndexDTO.motherDead}\n                        </span>\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n              {familyIndexRequestDto.motherDead === \"Yes\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"yearMotherDied\">Year Mother Died</Label>\n                    <input\n                      className=\"form-control\"\n                      id=\"yearMotherDied\"\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      name=\"yearMotherDead\"\n                      value={familyIndexRequestDto.yearMotherDead}\n                      onChange={handlefamilyIndexRequestDto}\n                      disabled={props.action === \"view\" ? true : false}\n                    />\n                    {errorFamilyIndexDTO.yearMotherDead && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.yearMotherDead}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n\n              {familyIndexRequestDto.childDead === \"yes\" && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label for=\"yearMotherDied\">Year Child Died</Label>\n                    <input\n                      className=\"form-control\"\n                      id=\"yearMotherDied\"\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      name=\"yearChildDead\"\n                      value={familyIndexRequestDto.yearChildDead}\n                      onChange={handlefamilyIndexRequestDto}\n                      disabled={props.action === \"view\" ? true : false}\n                    />\n                    {errorFamilyIndexDTO.yearChildDead && (\n                      <span className={classes.error}>\n                        {errorFamilyIndexDTO.yearChildDead}\n                      </span>\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              {/* {addIndexTracker && (\n                <div className=\"form-group mb-3 col-md-12\">\n                  <p style={{ color: \"red\" }}>Fill input in section B</p>\n                </div>\n              )}\n              <div className=\"form-group mb-3 col-md-6\">\n                <LabelSui\n                  as=\"a\"\n                  color=\"black\"\n                  onClick={handleSubmitfamilyIndexRequestDto}\n                  size=\"small\"\n                  style={{ marginTop: 35 }}\n                >\n                  <Icon name=\"plus\" /> Add\n                </LabelSui>\n              </div> */}\n              {/* <div className=\"form-group mb-3 col-md-6\">\n                <Button\n                  content=\"Add\"\n                  type=\"submit\"\n                  icon=\"right plus\"\n                  labelPosition=\"left\"\n                  style={{ backgroundColor: \"#000\", color: \"white\" }}\n                  onClick={handleSubmitfamilyIndexRequestDto}\n                  //   disabled={saving}\n                />\n              </div> */}\n\n              {/* {arrayFamilyIndexRequestDto &&\n                arrayFamilyIndexRequestDto.length > 0 && (\n                  <List className=\"mb-5\">\n                    <Table striped responsive>\n                      <thead>\n                        <tr>\n                          <th>Family Relationship</th>\n                          <th>Family Index HIV Status</th>\n                          <th>Mother Dead</th>\n\n                          <th>Action</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {arrayFamilyIndexRequestDto.length > 0 &&\n                          arrayFamilyIndexRequestDto.map((each, index) => {\n                            return (\n                              <tr key={index}>\n                                <td>\n                                  {convertCodeToDisplay(\n                                    \"familyRelationship\",\n                                    each.familyRelationship\n                                  )}\n                                </td>\n                                <td>\n                                  {convertCodeToDisplay(\n                                    \"statusOfContact\",\n                                    each.statusOfContact\n                                  )}\n                                </td>\n                                <td>{each.motherDead}</td>\n                                <td>\n                                  {\" \"}\n                                  <IconButton\n                                    aria-label=\"delete\"\n                                    size=\"small\"\n                                    color=\"error\"\n                                    onClick={() => removeFamilyIndexRow(index)}\n                                  >\n                                    <DeleteIcon fontSize=\"inherit\" />\n                                  </IconButton>\n                                </td>\n                              </tr>\n                            );\n                          })}\n                      </tbody>\n                    </Table>\n                  </List>\n                )} */}\n            </div>\n\n            <div className=\"row\">\n              <div\n                className=\"form-group col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                SECTION C: FAMILY INDEX TRACKER\n              </div>\n\n              {/* SECTION C INPUT FILEDS  */}\n              <div className=\"row \">\n                {!viewFamilyTrackerForm && props.action === \"update\" && (\n                  <div className=\"form-group mb-3  col-md-12 \">\n                    <div class=\"d-flex justify-content-end\">\n                      <LabelSui\n                        as=\"a\"\n                        color=\"black\"\n                        onClick={showFamilyTrackerRow}\n                        size=\"small\"\n                        style={{ marginTop: 20 }}\n                      >\n                        <Icon name=\"plus\" /> Add New Attempt\n                      </LabelSui>\n                    </div>\n                  </div>\n                )}\n                {viewFamilyTrackerForm && (\n                  <>\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label for=\"positionOfChildEnumerated\">\n                          Position of the Child Enumerated\n                        </Label>\n                        <input\n                          className=\"form-control\"\n                          id=\"positionOfChildEnumerated\"\n                          type=\"number\"\n                          name=\"positionOfChildEnumerated\"\n                          value={\n                            familyTestingTrackerRequestDTO?.positionOfChildEnumerated\n                          }\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          disabled={props.action === \"view\" ? true : false}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label for=\"sexTrackeer\">Sex </Label>\n                        <select\n                          className=\"form-control\"\n                          id=\"trackerSex\"\n                          name=\"trackerSex\"\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          value={familyTestingTrackerRequestDTO?.trackerSex}\n                          disabled={props.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          {genders.map((value, index) => (\n                            <option key={index} value={value.code}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label for=\"sex\">Age</Label>\n                        <input\n                          className=\"form-control\"\n                          id=\"trackerAge\"\n                          type=\"number\"\n                          name=\"trackerAge\"\n                          value={familyTestingTrackerRequestDTO?.trackerAge}\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={true}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label for=\"followUpAppointmentLocation\">\n                          Follow Up Appointment Location\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          id=\"followUpAppointmentLocation\"\n                          name=\"followUpAppointmentLocation\"\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          value={\n                            familyTestingTrackerRequestDTO?.followUpAppointmentLocation\n                          }\n                          disabled={props.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          {followUpAppointmentLocation.map((value, index) => (\n                            <option key={index} value={value.code}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Schedule Visit Date\n                          {/* <span style={{ color: \"red\" }}> *</span>{\" \"} */}\n                        </Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"scheduleVisitDate\"\n                          id=\"scheduleVisitDate\"\n                          value={\n                            familyTestingTrackerRequestDTO?.scheduleVisitDate\n                          }\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          min={\n                            payload?.visitDate ||\n                            props?.patientObj?.confirmatoryTest2?.date2\n                          }\n                          // max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.action === \"view\" ? true : false}\n                        />\n                        {/* {errors.referralDate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.referralDate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )} */}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Date visited</Label>\n                        <Input\n                          type=\"date\"\n                          onKeyPress={(e) => {\n                            e.preventDefault();\n                          }}\n                          name=\"dateVisit\"\n                          id=\"dateVisit\"\n                          value={familyTestingTrackerRequestDTO?.dateVisit}\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          min={props?.patientObj?.confirmatoryTest2?.date2}\n                          max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.action === \"view\" ? true : false}\n                        />\n                        {errorFamilyIndexTracker.dateVisit !== \"\" ? (\n                          <span className={classes.error}>\n                            {errorFamilyIndexTracker.dateVisit}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">\n                          Attempts\n                          {/* <span style={{ color: \"red\" }}> *</span>{\" \"} */}\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"attempt\"\n                          id=\"attempt\"\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          value={familyTestingTrackerRequestDTO?.attempt}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          {indexVisitAttempt.map((value, index) => (\n                            <option key={index} value={value.code}>\n                              {value.display}\n                            </option>\n                          ))}\n                        </select>\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group col-md-4 \">\n                      <Label>Known HIV Status ?</Label>\n                      <FormGroup>\n                        <select\n                          className=\"form-control\"\n                          name=\"knownHivPositive\"\n                          id=\"knownHivPositive\"\n                          onChange={handlefamilyTestingTrackerRequestDTO}\n                          value={\n                            familyTestingTrackerRequestDTO?.knownHivPositive\n                          }\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.action === \"view\" ? true : false}\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes\">Yes</option>\n                          <option value=\"No\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {familyTestingTrackerRequestDTO.knownHivPositive &&\n                      familyTestingTrackerRequestDTO.knownHivPositive ===\n                        \"Yes\" && (\n                        <div className=\"form-group mb-3 col-md-4\">\n                          <FormGroup>\n                            <Label for=\"\">Date Tested</Label>\n                            <Input\n                              type=\"date\"\n                              onKeyPress={(e) => {\n                                e.preventDefault();\n                              }}\n                              name=\"dateTested\"\n                              id=\"dateTested\"\n                              value={familyTestingTrackerRequestDTO?.dateTested}\n                              onChange={handlefamilyTestingTrackerRequestDTO}\n                              min={\n                                familyTestingTrackerRequestDTO?.dateVisit ||\n                                props?.patientObj?.confirmatoryTest2?.date2\n                              }\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.25rem\",\n                              }}\n                              disabled={props.action === \"view\" ? true : false}\n                            />\n                            {errors.dateTested !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.dateTested}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {familyTestingTrackerRequestDTO?.knownHivPositive &&\n                      familyTestingTrackerRequestDTO?.knownHivPositive ===\n                        \"Yes\" && (\n                        <div className=\"form-group col-md-4 \">\n                          <Label>HIV Test Result </Label>\n                          <FormGroup>\n                            <select\n                              className=\"form-control\"\n                              name=\"hiveTestResult\"\n                              id=\"hiveTestResult\"\n                              onChange={handlefamilyTestingTrackerRequestDTO}\n                              value={\n                                familyTestingTrackerRequestDTO.hiveTestResult\n                              }\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.action === \"view\" ? true : false}\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Tested Positive\">\n                                Tested Positive\n                              </option>\n                              <option value=\"Teste Negative\">\n                                Tested Negative\n                              </option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                      )}\n                    {familyTestingTrackerRequestDTO?.knownHivPositive ===\n                      \"Yes\" &&\n                      familyTestingTrackerRequestDTO.hiveTestResult ===\n                        \"Positive\" && (\n                        <div className=\"form-group mb-3 col-md-4\">\n                          <FormGroup>\n                            <Label for=\"\">Date Enrolled On ART</Label>\n                            <Input\n                              type=\"date\"\n                              onKeyPress={(e) => {\n                                e.preventDefault();\n                              }}\n                              name=\"dateEnrolledOnArt\"\n                              id=\"dateEnrolledOnArt\"\n                              value={\n                                familyTestingTrackerRequestDTO?.dateEnrolledOnArt\n                              }\n                              onChange={handlefamilyTestingTrackerRequestDTO}\n                              min={\n                                familyTestingTrackerRequestDTO?.dateTested ||\n                                props?.patientObj?.confirmatoryTest2?.date2\n                              }\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.25rem\",\n                              }}\n                              disabled={props.action === \"view\" ? true : false}\n                            />\n                            {errors.referralDate !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.referralDate}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {familyTestingTrackerRequestDTO?.trackerAge < 21 && (\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"\">Date Enrolled In Ovc</Label>\n                          <Input\n                            type=\"date\"\n                            onKeyPress={(e) => {\n                              e.preventDefault();\n                            }}\n                            name=\"dateEnrolledInOVC\"\n                            id=\"dateEnrolledInOVC\"\n                            value={\n                              familyTestingTrackerRequestDTO?.dateEnrolledInOVC\n                            }\n                            onChange={handlefamilyTestingTrackerRequestDTO}\n                            min={\n                              familyTestingTrackerRequestDTO?.dateVisit ||\n                              props?.patientObj?.confirmatoryTest2?.date2\n                            }\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.25rem\",\n                            }}\n                            disabled={props.action === \"view\" ? true : false}\n                          />\n                          {errors.referralDate !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.referralDate}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n\n                    {props.action === \"update\" && (\n                      <div className=\"form-group mb-3 col-md-12\">\n                        {addNewAttempt ? (\n                          <LabelSui\n                            as=\"a\"\n                            color=\"black\"\n                            onClick={addFamilyTrackerRow}\n                            size=\"small\"\n                            style={{ marginTop: 35 }}\n                          >\n                            <Icon name=\"plus\" /> Add New Tracker\n                          </LabelSui>\n                        ) : (\n                          <LabelSui\n                            as=\"a\"\n                            color=\"black\"\n                            onClick={updateFamilyTrackerRow}\n                            size=\"small\"\n                            style={{ marginTop: 35 }}\n                          >\n                            <Icon name=\"plus\" /> Update Family index\n                          </LabelSui>\n                        )}\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n\n            {/* arrayFamilyTestingTrackerRequestDTO.length > 0 && */}\n            {\n              <List>\n                <Table striped responsive>\n                  <thead>\n                    <tr>\n                      <th style={{ fontSize: \"15px\" }}>Attempt</th>\n\n                      <th style={{ fontSize: \"15px\" }}>Schedule Visit Date</th>\n                      <th style={{ fontSize: \"15px\" }}>\n                        Follow Up Appointment Location\n                      </th>\n                      <th style={{ fontSize: \"15px\" }}>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {arrayFamilyTestingTrackerRequestDTO.map((each, index) => {\n                      return (\n                        <tr key={index}>\n                          <td>\n                            {each?.attempt && getAttemptDisplay(each?.attempt)}\n                          </td>\n                          <td>{each?.scheduleVisitDate}</td>\n\n                          <td>\n                            {each?.followUpAppointmentLocation &&\n                              FollowUpDisplay(each.followUpAppointmentLocation)}\n                          </td>\n                          <td>\n                            {/* props.action === \"update\" */}\n                            {props.action === \"update\" ? (\n                              <>\n                                <IconButton\n                                  aria-label=\"update\"\n                                  size=\"small\"\n                                  color=\"success\"\n                                  onClick={() =>\n                                    viewFamilyTrackerRow(each, index)\n                                  }\n                                >\n                                  <CreateIcon fontSize=\"inherit\" />\n                                </IconButton>\n\n                                <IconButton\n                                  aria-label=\"delete\"\n                                  size=\"small\"\n                                  color=\"error\"\n                                  onClick={() =>\n                                    removeFamilyTrackerRow(index, each)\n                                  }\n                                >\n                                  <DeleteIcon fontSize=\"inherit\" />\n                                </IconButton>\n                              </>\n                            ) : (\n                              <IconButton\n                                aria-label=\"delete\"\n                                size=\"small\"\n                                color=\"success\"\n                                onClick={() =>\n                                  viewFamilyTrackerRow(each, index)\n                                }\n                              >\n                                <RemoveRedEyeIcon fontSize=\"inherit\" />\n                              </IconButton>\n                            )}\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </Table>\n              </List>\n            }\n\n            <br />\n            <div className=\"row\">\n              {props.action === \"update\" && (\n                <div className=\"form-group mb-3 col-md-6\">\n                  <Button\n                    content=\"Done\"\n                    type=\"Done\"\n                    icon=\"right arrowe\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={() => {\n                      history.push(\"/\");\n                    }}\n                    disabled={saving}\n                  />\n                  <Button\n                    content=\"Update\"\n                    type=\"submit\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              )}\n            </div>\n          </form>\n        </CardBody>\n        {/* <CardBody>\n          <ServicesProvided />\n        </CardBody> */}\n\n        {/* recieving facility  */}\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Would you like to fill the Partner Service Form?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => loadNextForm()}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n\n          <Button\n            onClick={() => handleDone()}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Skip\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ViewFamilyIndexTestingForm;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/PNSHistory.js",["800","801","802","803","804"],"import React, { useState, Fragment } from \"react\";\n\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport AddIndexContact from \"../../ContinuesHTSEnrollment/Elicitation/AddIndexContact\";\n\nimport { FaUserPlus } from \"react-icons/fa\";\nimport { Link } from \"react-router-dom\";\n//import Button from '@material-ui/core/Button';\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport PNSList from \"./PNSlist\";\n\nconst PNSHistory = (props) => {\n  const [activePage, setActivePage] = useState(\"list\");\n  const handleIClickPage = (activeItem) => {\n    setActivePage(activeItem);\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const handleDone = (row, actionType) => {\n    props.setActivePage({\n      ...props.activePage,\n      activePage: \"home\",\n      activeObject: row,\n      actionType: actionType,\n    });\n  };\n\n  return (\n    <Fragment>\n      <Row>\n        <Col md={12}>\n          {activePage === \"list\" && (\n            <PNSList\n              activePage={activePage}\n              setActivePage={setActivePage}\n              handleIClickPage={handleIClickPage}\n              patientObj={props.patientObj}\n              handleItemClick={handleItemClick}\n              setRow={props.setRow}\n            />\n          )}\n          \n          <br />\n          <div className=\"row\">\n            <div className=\"form-group mb-3 col-md-12\">\n              <Button\n                content=\"Back\"\n                icon=\"left arrow\"\n                labelPosition=\"left\"\n                style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                onClick={() =>{\n                  handleItemClick(\"recency-testing\", \"recency-testing\")}\n                }\n              />\n              <Button\n                content=\"Done\"\n                icon=\"list\"\n                labelPosition=\"left\"\n                style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                onClick={() => handleDone()}\n              />\n            </div>\n          </div>\n        </Col>\n      </Row>\n    </Fragment>\n  );\n};\n\nexport default PNSHistory;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PreTest.js",["805","806","807","808","809","810","811","812","813"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { checkPregnantPatient } from \"../../../../utility\";\nimport {\n  FormGroup,\n  Label,\n  CardBody,\n  Spinner,\n  Badge,\n  Input,\n  Form,\n} from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport Alert from \"@mui/material/Alert\";\nimport Stack from \"@mui/material/Stack\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport FeedbackModal from \"./FeedbackModal\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PanToolIcon from \"@mui/icons-material/PanTool\";\nimport { getCheckModality } from \"../../../../utility\";\nimport { getNextForm } from \"../../../../utility\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst BasicInfo = (props) => {\n  const [predictionValue, setPredictionValue] = useState(0);\n  const [openModal, setOpenModal] = React.useState(false);\n  const toggleModal = (event) => {\n    event.preventDefault();\n    setOpenModal(!openModal);\n  };\n\n  const predictionRanges = (prediction) => {\n    if (parseFloat(prediction) < 0.005575358) {\n      return <Badge color=\"success\">Low Risk</Badge>;\n    } else if (\n      parseFloat(prediction) > 0.005575358 &&\n      parseFloat(prediction) < 0.02719647\n    ) {\n      return <Badge color=\"info\">Medium Risk</Badge>;\n    } else if (\n      parseFloat(prediction) > 0.02719647 &&\n      parseFloat(prediction) < 0.08083864\n    ) {\n      return <Badge color=\"warning\">High Risk</Badge>;\n    } else if (parseFloat(prediction) > 0.08083864) {\n      return <Badge color=\"danger\">Highest Risk</Badge>;\n    } else {\n      return <Badge color=\"dark\">No Prediction Result</Badge>;\n    }\n  };\n\n  const classes = useStyles();\n  //let patientAge=\"\"\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [saving, setSaving] = useState(false);\n  const [mlresult, setMlresult] = useState(false);\n  const [savingPrediction, setSavingPrediction] = useState(false);\n  const [savingResult, setSavingRsult] = useState(false);\n  const [savingFeedback, setSavingFeedback] = useState(false);\n  const [errors, setErrors] = useState({});\n  let temp = { ...errors };\n  const [modalityCheck, setModalityCheck] = useState(\"\");\n\n  let dataObj = props.patientObj;\n  //console.log(\"data\", dataObj);\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\n  );\n  const [knowledgeAssessment, setKnowledgeAssessment] = useState({\n    previousTestedHIVNegative: \"\",\n    timeLastHIVNegativeTestResult: \"\",\n    clientPregnant: \"\",\n    clientInformHivTransRoutes: \"\",\n    clientInformRiskkHivTrans: \"\",\n    clientInformPreventingsHivTrans: \"\",\n    clientInformPossibleTestResult: \"\",\n    informConsentHivTest: \"\",\n  });\n  const [objValues, setObjValues] = useState({\n    htsClientId: clientId,\n    knowledgeAssessment: {},\n    personId: patientID,\n    riskAssessment: {},\n    stiScreening: {},\n    tbScreening: {},\n    sexPartnerRiskAssessment: {},\n  });\n\n  const [riskAssessment, setRiskAssessment] = useState({\n    everHadSexualIntercourse: \"\",\n    bloodtransInlastThreeMonths: \"\",\n    uprotectedSexWithCasualLastThreeMonths: \"\",\n    uprotectedSexWithRegularPartnerLastThreeMonths: \"\",\n    unprotectedVaginalSex: \"\",\n    uprotectedAnalSex: \"\",\n    stiLastThreeMonths: \"\",\n    sexUnderInfluence: \"\",\n    moreThanOneSexPartnerLastThreeMonths: \"\",\n    experiencePain: \"\",\n    haveSexWithoutCondom: \"\",\n    abuseDrug: \"\",\n    bloodTransfusion: \"\",\n    consistentWeightFeverNightCough: \"\",\n    soldPaidVaginalSex: \"\",\n    haveCondomBurst: \"\",\n    mlStatus: \"\",\n    mlScore: \"\",\n  });\n\n  const [riskAssessmentPartner, setRiskAssessmentPartner] = useState({\n    sexPartnerHivPositive: \"\",\n    newDiagnosedHivlastThreeMonths: \"\",\n    currentlyArvForPmtct: \"\",\n    knowHivPositiveOnArv: \"\",\n    knowHivPositiveAfterLostToFollowUp: \"\",\n    uprotectedAnalSex: \"\",\n  });\n\n  const [tbScreening, setTbScreening] = useState({\n    currentCough: \"\",\n    weightLoss: \"\",\n    lymphadenopathy: \"\",\n    fever: \"\",\n    nightSweats: \"\",\n  });\n\n  const [stiScreening, setStiScreening] = useState({\n    vaginalDischarge: \"\",\n    lowerAbdominalPains: \"\",\n    urethralDischarge: \"\",\n    complaintsOfScrotal: \"\",\n    complaintsGenitalSore: \"\",\n  });\n\n  const [mlResultObj, setMlResultObj] = useState({\n    htsClientId: clientId,\n    status: \"\",\n    score: \"\",\n  });\n\n  useEffect(() => {\n    if (props.patientObj) {\n      let knowledgeAsses = props?.patientObj?.knowledgeAssessment;\n      setKnowledgeAssessment(\n        props.patientObj.knowledgeAssessment &&\n          props.patientObj.knowledgeAssessment !== null\n          ? props.patientObj.knowledgeAssessment\n          : {}\n      );\n\n      if (props?.patientObj?.pregnant) {\n        checkPregnantPatient(props.patientObj.pregnant).then((res) => {\n          console.log(\"my result\", res);\n          setKnowledgeAssessment({\n            ...knowledgeAsses,\n            clientPregnant: res ? \"true\" : \"false\",\n          });\n        });\n      }\n      setRiskAssessment(\n        props.patientObj.riskAssessment &&\n          props.patientObj.riskAssessment !== null\n          ? props.patientObj.riskAssessment\n          : {}\n      );\n      setRiskAssessmentPartner(\n        props.patientObj.sexPartnerRiskAssessment &&\n          props.patientObj.sexPartnerRiskAssessment !== null\n          ? props.patientObj.sexPartnerRiskAssessment\n          : {}\n      );\n      setStiScreening(\n        props.patientObj.stiScreening && props.patientObj.stiScreening !== null\n          ? props.patientObj.stiScreening\n          : {}\n      );\n      setTbScreening(\n        props.patientObj.tbScreening && props.patientObj.tbScreening !== null\n          ? props.patientObj.tbScreening\n          : {}\n      );\n\n      if (\n        props.patientObj.riskStratificationResponseDto &&\n        Object.keys(\n          props.patientObj.riskStratificationResponseDto.riskAssessment\n        ).length !== 0 &&\n        props.patientObj.riskAssessment === null\n      ) {\n        props.patientObj.riskStratificationResponseDto.riskAssessment\n          .whatWasTheResult !== \"\" &&\n        props.patientObj.riskStratificationResponseDto.riskAssessment\n          .whatWasTheResult === \"Positive\"\n          ? (knowledgeAssessment.previousTestedHIVNegative = \"false\")\n          : (knowledgeAssessment.previousTestedHIVNegative = \"true\");\n      } else {\n        setRiskAssessment({\n          ...riskAssessment,\n          ...props.patientObj.riskAssessment,\n        });\n      }\n      knowledgeAssessment.clientPregnant =\n        props.patientObj.pregnant === 73 ? \"true\" : \"\";\n\n      setModalityCheck(\n        getCheckModality(\n          props.patientObj?.riskStratificationResponseDto?.testingSetting\n        )\n      );\n    }\n  }, [props.patientObj]);\n\n  const handleItemClick = (page, completedMenu) => {\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n    props.handleItemClick(page);\n  };\n\n  const handleInputChangeKnowledgeAssessment = (e) => {\n    setKnowledgeAssessment({\n      ...knowledgeAssessment,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const postPredictions = (e) => {\n    e.preventDefault();\n    setSavingRsult(true);\n\n    if (dataObj?.riskStratificationResponseDto?.age < 15) {\n      toast.info(`No risk score for client less than 15 years`, {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n      setMlresult(true);\n      setSavingRsult(false);\n    } else {\n      let mlData = {\n        modelConfigs: {\n          debug: \"true\",\n          encounterDate: dataObj?.dateVisit,\n          facilityId: \"LBgwDTw2C8u\", // TODO: get facility id from database\n          modelId: \"hts_v5\",\n        },\n        variableValues: {\n          age:\n            dataObj?.riskStratificationResponseDto?.age !== null\n              ? dataObj?.riskStratificationResponseDto?.age\n              : -1000.0,\n          bloodTransfusionInLast3Months:\n            dataObj?.riskStratificationResponseDto?.riskAssessment\n              ?.lastHivTestBloodTransfusion === \"true\" ||\n            riskAssessment.bloodTransfusion === \"true\" ||\n            riskAssessment.bloodtransInlastThreeMonths === \"true\"\n              ? 1\n              : 0,\n          clientPregnant:\n            dataObj?.pregnant === 73 &&\n            dataObj?.personResponseDto?.sex === \"Female\"\n              ? 1\n              : dataObj?.pregnant === 72 &&\n                dataObj?.personResponseDto?.sex === \"Male\"\n              ? 0\n              : dataObj?.pregnant === 72 &&\n                dataObj?.personResponseDto?.sex === \"Female\"\n              ? 0\n              : dataObj?.pregnant === \"\" &&\n                dataObj?.personResponseDto?.sex === \"Female\"\n              ? 0\n              : 0,\n          everHadSexualIntercourse:\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n                        \"TARGET_GROUP_SEXUAL_PARTNER\" ||\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n                                    \"TARGET_GROUP_MSM\" ||\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n                        \"TARGET_GROUP_FSW\" ||\n            riskAssessment?.everHadSexualIntercourse === \"true\" ||\n            riskAssessment?.soldPaidVaginalSex === \"true\" ||\n            riskAssessmentPartner?.uprotectedAnalSex === \"true\" ||\n            riskAssessment?.haveCondomBurst === \"true\" ||\n            riskAssessment?.haveSexWithoutCondom === \"true\"\n              ? 1\n              : riskAssessment?.soldPaidVaginalSex === \"false\" &&\n                riskAssessmentPartner?.uprotectedAnalSex === \"false\" &&\n                riskAssessment?.haveCondomBurst === \"false\" &&\n                riskAssessment?.haveSexWithoutCondom === \"false\"\n              ? 0\n              : riskAssessment?.soldPaidVaginalSex === \"\" &&\n                riskAssessmentPartner?.uprotectedAnalSex === \"\" &&\n                riskAssessment?.haveCondomBurst === \"\" &&\n                riskAssessment?.haveSexWithoutCondom === \"\"\n              ? 0\n              : 0,\n          first_time_visit: dataObj?.firstTimeVisit === true ? 1 : 0,\n          gender_female: dataObj?.personResponseDto?.sex === \"Female\" ? 1 : 0,\n          gender_male: dataObj?.personResponseDto?.sex === \"Male\" ? 1 : 0,\n          index_client: dataObj?.indexClient === true ? 1 : 0,\n          marital_status_divorced:\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Divorced\"\n              ? 1\n              : 0,\n          marital_status_married:\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Married\"\n              ? 1\n              : 0,\n          marital_status_other:\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Divorced\" ||\n            dataObj?.personResponseDto?.maritalStatus?.display ===\n              \"Separated\" ||\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Widowed\"\n              ? 1\n              : 0,\n          marital_status_single:\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Single\"\n              ? 1\n              : 0,\n          moreThan1SexPartnerDuringLast3Months:\n            riskAssessment?.soldPaidVaginalSex === \"true\" ||\n            riskAssessment?.moreThanOneSexPartnerLastThreeMonths === \"true\"\n              ? 1\n              : 0,\n          previously_tested: dataObj?.previouslyTested === true ? 1 : 0,\n          referred_from_Community_Mobilization:\n            dataObj?.referredFrom === 1015 ? 1 : 0,\n          referred_from_OPD: dataObj?.referredFrom === 47 ? 1 : 0,\n          referred_from_Others:\n            dataObj?.referredFrom === 50 ||\n            dataObj?.referredFrom === 45 ||\n            dataObj?.referredFrom === 44 ||\n            dataObj?.referredFrom === 48 ||\n            dataObj?.referredFrom === 45 ||\n            dataObj?.referredFrom === 447 ||\n            dataObj?.referredFrom === 449 ||\n            dataObj?.referredFrom === 46 ||\n            dataObj?.referredFrom === 49 ||\n            dataObj?.referredFrom === 870\n              ? 1\n              : 0,\n          referred_from_Private_Commercial_Health_facility:\n            dataObj?.referredFrom === 448 ? 1 : 0,\n          referred_from_Self: dataObj?.referredFrom === 43 ? 1 : 0,\n          stiInLast3Months:\n            riskAssessment?.stiLastThreeMonths === \"true\" ||\n            riskAssessment?.experiencePain === \"true\" ||\n            riskAssessmentPartner?.sexPartnerHivPositive === \"true\" ||\n            riskAssessmentPartner?.newDiagnosedHivlastThreeMonths === \"true\" ||\n            riskAssessmentPartner?.currentlyArvForPmtct === \"true\" ||\n            riskAssessmentPartner?.knowHivPositiveOnArv === \"true\" ||\n            riskAssessmentPartner?.knowHivPositiveAfterLostToFollowUp === \"true\"\n              ? 1\n              : 0,\n          sti_symptoms:\n            (stiScreening?.lowerAbdominalPains === \"true\" &&\n              stiScreening?.vaginalDischarge === \"true\") ||\n            (stiScreening?.complaintsGenitalSore === \"true\" &&\n              stiScreening?.complaintsOfScrotal === \"true\" &&\n              stiScreening?.urethralDischarge === \"true\")\n              ? 1\n              : stiScreening?.lowerAbdominalPains === \"\" ||\n                stiScreening?.vaginalDischarge === \"\"\n              ? -1000\n              : 0,\n          target_group_FSW:\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n            \"TARGET_GROUP_FSW\"\n              ? 1\n              : 0,\n          target_group_GEN_POP:\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n            \"TARGET_GROUP_GEN_POP\"\n              ? 1\n              : 0,\n          target_group_MSM:\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n            \"TARGET_GROUP_MSM\"\n              ? 1\n              : 0,\n          target_group_PWID:\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n            \"TARGET_GROUP_PWID\"\n              ? 1\n              : 0,\n          target_group_SEXUAL_PARTNER:\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n            \"TARGET_GROUP_SEXUAL_PARTNER\"\n              ? 1\n              : 0,\n          target_group_other:\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n              \"TARGET_GROUP_PRISON\" ||\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n              \"TARGET_GROUP_TRANSGENDER\" ||\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\n              \"TARGET_GROUP_CHILDREN_OF_KP\"\n              ? 1\n              : 0,\n          tb_symptoms:\n            tbScreening?.currentCough === \"true\" ||\n            tbScreening?.weightLoss === \"true\" ||\n            tbScreening?.lymphadenopathy === \"true\" ||\n            tbScreening?.fever === \"true\" ||\n            tbScreening?.nightSweats === \"true\"\n              ? 1\n              : tbScreening?.currentCough === \"\" &&\n                tbScreening?.weightLoss === \"\" &&\n                tbScreening?.lymphadenopathy === \"\" &&\n                tbScreening?.fever === \"\" &&\n                tbScreening?.nightSweats === \"\"\n              ? -1000\n              : 0,\n          testing_settingANC:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n            \"FACILITY_HTS_TEST_SETTING_ANC\"\n              ? 1\n              : 0,\n          testing_settingCPMTCT:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\"\n              ? 1\n              : 0,\n          testing_settingCT:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_CT\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_CT\"\n              ? 1\n              : 0,\n          testing_settingIndex:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_INDEX\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_SNS\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_SNS\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_INDEX\"\n              ? 1\n              : 0,\n          testing_settingOthers:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_OTHERS\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_OTHERS_(SPECIFY)\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_BLOOD_BANK\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_EMERGENCY\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_FP\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_L&D\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_MALNUTRITION\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_STANDALONE_HTS\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_STI\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_PREP_TESTING\" ||\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n              \"COMMUNITY_HTS_TEST_SETTING_STANDALONE_HTS\"\n              ? 1\n              : 0,\n          testing_settingOutreach:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n            \"COMMUNITY_HTS_TEST_SETTING_OUTREACH\"\n              ? 1\n              : 0,\n          testing_settingOVC:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n            \"COMMUNITY_HTS_TEST_SETTING_OVC\"\n              ? 1\n              : 0,\n          testing_settingTB:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n            \"FACILITY_HTS_TEST_SETTING_TB\"\n              ? 1\n              : 0,\n          testing_settingWard_Inpatient:\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\n            \"FACILITY_HTS_TEST_SETTING_WARD_INPATIENT\"\n              ? 1\n              : 0,\n          unprotectedSexWithCasualPartnerInLast3Months:\n            riskAssessment?.uprotectedSexWithCasualLastThreeMonths === \"true\" ||\n            riskAssessment?.soldPaidVaginalSex === \"true\" ||\n            riskAssessmentPartner?.uprotectedAnalSex === \"true\"\n              ? 1\n              : 0,\n          unprotectedSexWithRegularPartnerInLast3Months:\n            riskAssessment?.uprotectedSexWithRegularPartnerLastThreeMonths ===\n              \"true\" ||\n            riskAssessment?.haveCondomBurst === \"true\" ||\n            riskAssessment?.haveSexWithoutCondom === \"true\"\n              ? 1\n              : 0,\n        },\n      };\n\n      setMlresult(true);\n\n      axios\n        .post(`${baseUrl}machine-learning/evaluate`, mlData, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((resp) => {\n          console.log(\"ML\", resp);\n          let predictions = Object.values(resp.data.result.predictions);\n          setPredictionValue(predictions);\n          let statusVal = \"\";\n\n          if (parseFloat(predictions[1]) < 0.005575358) {\n            statusVal = \"Low Risk\";\n          } else if (\n            parseFloat(predictions[1]) > 0.005575358 &&\n            parseFloat(predictions[1]) < 0.02719647\n          ) {\n            statusVal = \"Medium Risk\";\n          } else if (\n            parseFloat(predictions[1]) > 0.02719647 &&\n            parseFloat(predictions[1]) < 0.08083864\n          ) {\n            statusVal = \"High Risk\";\n          } else if (parseFloat(predictions[1]) > 0.08083864) {\n            statusVal = \"Highest Risk\";\n          } else {\n            statusVal = \"No Prediction Result\";\n          }\n\n          setMlResultObj({\n            htsClientId: clientId,\n            status: statusVal,\n            score: predictions[1],\n          });\n\n          setSavingPrediction(true);\n          setSavingRsult(false);\n        })\n        .catch((err) => {\n          console.error(\"ML_err\", err);\n        });\n    }\n  };\n\n  const handleInputChangeRiskAssessment = (e) => {\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n  };\n  // Getting the number count of riskAssessment True\n  const actualRiskCountTrue = Object.values(riskAssessment);\n  const riskCount = actualRiskCountTrue.filter((x) => x === \"true\");\n\n  const handleInputChangeRiskAssessmentPartner = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setRiskAssessmentPartner({\n      ...riskAssessmentPartner,\n      [e.target.name]: e.target.value,\n    });\n  };\n  // Getting the number count of sexPartRiskCount True\n  const actualSexPartRiskCountTrue = Object.values(riskAssessmentPartner);\n  const sexPartRiskCount = actualSexPartRiskCountTrue.filter(\n    (x) => x === \"true\"\n  );\n\n  const handleInputChangeStiScreening = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setStiScreening({ ...stiScreening, [e.target.name]: e.target.value });\n  };\n  // Getting the number count of STI True\n  const actualStiTrue = Object.values(stiScreening);\n  const stiCount = actualStiTrue.filter((x) => x === \"true\");\n\n  const handleInputChangeTbScreening = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setTbScreening({ ...tbScreening, [e.target.name]: e.target.value });\n  };\n  // Getting the number count of TB True\n  const actualTBTrue = Object.values(tbScreening);\n  const newTbTrue = actualTBTrue.filter((x) => x === \"true\");\n  /*****  Validation  */\n  const validate = () => {\n    props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" &&\n      (temp.everHadSexualIntercourse = riskAssessment.everHadSexualIntercourse\n        ? \"\"\n        : \"This field is required.\");\n    props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" &&\n      (temp.bloodtransInlastThreeMonths =\n        riskAssessment.bloodtransInlastThreeMonths\n          ? \"\"\n          : \"This field is required.\");\n\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\n      (temp.experiencePain = riskAssessment.experiencePain\n        ? \"\"\n        : \"This field is required.\");\n\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\n      (temp.haveSexWithoutCondom = riskAssessment.haveSexWithoutCondom\n        ? \"\"\n        : \"This field is required.\");\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\n      (temp.abuseDrug = riskAssessment.abuseDrug\n        ? \"\"\n        : \"This field is required.\");\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\n      (temp.bloodTransfusion = riskAssessment.bloodTransfusion\n        ? \"\"\n        : \"This field is required.\");\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\n      (temp.consistentWeightFeverNightCough =\n        riskAssessment.consistentWeightFeverNightCough\n          ? \"\"\n          : \"This field is required.\");\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\n      (temp.soldPaidVaginalSex = riskAssessment.soldPaidVaginalSex\n        ? \"\"\n        : \"This field is required.\");\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x === \"\");\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let latestForm = getNextForm(\n      \"Pre_Test_Counseling\",\n      objValues.age,\n      modalityCheck,\n      \"unknown\"\n    );\n    if (validate()) {\n      setSaving(true);\n\n      riskAssessment.mlStatus = mlResultObj.status;\n      riskAssessment.mlScore = mlResultObj.score;\n\n      objValues.htsClientId = clientId;\n      objValues.knowledgeAssessment = knowledgeAssessment;\n      objValues.personId = patientID;\n      objValues.riskAssessment = riskAssessment;\n      objValues.stiScreening = stiScreening;\n      objValues.tbScreening = tbScreening;\n      objValues.sexPartnerRiskAssessment = riskAssessmentPartner;\n\n      axios\n        .put(`${baseUrl}hts/${clientId}/pre-test-counseling`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          props.setPatientObj({\n            ...props.patientObj,\n            knowledgeAssessment: response.data.knowledgeAssessment,\n            riskAssessment: response.data.riskAssessment,\n            stiScreening: response.data.stiScreening,\n            tbScreening: response.data.tbScreening,\n            sexPartnerRiskAssessment: response.data.sexPartnerRiskAssessment,\n          });\n          handleItemClick(latestForm[0], latestForm[1]);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    } else {\n      toast.error(\"All fields are required\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2>PRE TEST COUNSELING</h2>\n          {savingPrediction ? (\n            <Stack sx={{ width: \"50%\" }} spacing={2}>\n              <Alert severity=\"info\" style={{ fontSize: \"16px\", color: \"000\" }}>\n                <b>ML Prediction Result for HTS Patient :</b>{\" \"}\n                {predictionRanges(predictionValue[1])}\n              </Alert>\n            </Stack>\n          ) : (\n            \"\"\n          )}\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"rgb(0,181,173)\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Knowledge Assessment\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Previously tested HIV negative{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"previousTestedHIVNegative\"\n                    id=\"previousTestedHIVNegative\"\n                    value={knowledgeAssessment.previousTestedHIVNegative}\n                    onChange={handleInputChangeKnowledgeAssessment}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.previousTestedHIVNegative !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.previousTestedHIVNegative}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {knowledgeAssessment.previousTestedHIVNegative === \"true\" && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Time of last HIV Negative test Result</Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"timeLastHIVNegativeTestResult\"\n                      id=\"timeLastHIVNegativeTestResult\"\n                      value={knowledgeAssessment.timeLastHIVNegativeTestResult}\n                      onChange={handleInputChangeKnowledgeAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"<1\"> {\"< 1\"} month</option>\n                      <option value=\"1-3 Months\">1-3 Months</option>\n                      <option value=\"4-6 Months\">4-6 Months</option>\n                      <option value=\">6 Months\"> {\">6\"} Months</option>\n                      {knowledgeAssessment.previousTestedHIVNegative !==\n                        \"true\" && <option value=\"Never\"> Never</option>}\n                    </select>\n                    {errors.timeLastHIVNegativeTestResult !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.timeLastHIVNegativeTestResult}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              {props.patientObj &&\n                (props.patientObj.personResponseDto.sex === \"Female\" ||\n                  props.patientObj.personResponseDto.sex === \"female\" ||\n                  props.patientObj.personResponseDto.sex === \"FEMALE\") && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Client pregnant </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"clientPregnant\"\n                        id=\"clientPregnant\"\n                        value={knowledgeAssessment.clientPregnant}\n                        onChange={handleInputChangeKnowledgeAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={true}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.clientPregnant !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.clientPregnant}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client informed about HIV transmission routes </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"clientInformHivTransRoutes\"\n                    id=\"clientInformHivTransRoutes\"\n                    value={knowledgeAssessment.clientInformHivTransRoutes}\n                    onChange={handleInputChangeKnowledgeAssessment}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.clientInformHivTransRoutes !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.clientInformHivTransRoutes}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Client informed about risk factors for HIV transmission{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"clientInformRiskkHivTrans\"\n                    id=\"clientInformRiskkHivTrans\"\n                    value={knowledgeAssessment.clientInformRiskkHivTrans}\n                    onChange={handleInputChangeKnowledgeAssessment}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.clientInformRiskkHivTrans !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.clientInformRiskkHivTrans}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Client informed on preventing HIV transmission methods{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"clientInformPreventingsHivTrans\"\n                    id=\"clientInformPreventingsHivTrans\"\n                    value={knowledgeAssessment.clientInformPreventingsHivTrans}\n                    onChange={handleInputChangeKnowledgeAssessment}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.clientInformPreventingsHivTrans !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.clientInformPreventingsHivTrans}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client informed about possible test results </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"clientInformPossibleTestResult\"\n                    id=\"clientInformPossibleTestResult\"\n                    value={knowledgeAssessment.clientInformPossibleTestResult}\n                    onChange={handleInputChangeKnowledgeAssessment}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.clientInformPossibleTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.clientInformPossibleTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Informed consent for HIV testing given </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"informConsentHivTest\"\n                    id=\"informConsentHivTest\"\n                    value={knowledgeAssessment.informConsentHivTest}\n                    onChange={handleInputChangeKnowledgeAssessment}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.informConsentHivTest !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.informConsentHivTest}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <hr />\n              <br />\n\n              {props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" && (\n                <>\n                  <div\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                    style={{\n                      backgroundColor: \"#992E62\",\n                      width: \"125%\",\n                      height: \"35px\",\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    HIV Risk Assessment (Last 3 months)\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Ever had sexual intercourse{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"everHadSexualIntercourse\"\n                        id=\"everHadSexualIntercourse\"\n                        value={riskAssessment.everHadSexualIntercourse}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.everHadSexualIntercourse !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.everHadSexualIntercourse}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Blood transfusion in last 3 months{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"bloodtransInlastThreeMonths\"\n                        id=\"bloodtransInlastThreeMonths\"\n                        value={riskAssessment.bloodtransInlastThreeMonths}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.bloodtransInlastThreeMonths !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.bloodtransInlastThreeMonths}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Unprotected sex with casual partner in last 3 months{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"uprotectedSexWithCasualLastThreeMonths\"\n                            id=\"uprotectedSexWithCasualLastThreeMonths\"\n                            value={\n                              riskAssessment.uprotectedSexWithCasualLastThreeMonths\n                            }\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.uprotectedSexWithCasualLastThreeMonths !==\n                          \"\" ? (\n                            <span className={classes.error}>\n                              {errors.uprotectedSexWithCasualLastThreeMonths}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Unprotected sex with regular partner in the last\n                            3months <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                            id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                            value={\n                              riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths\n                            }\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\n                          \"\" ? (\n                            <span className={classes.error}>\n                              {\n                                errors.uprotectedSexWithRegularPartnerLastThreeMonths\n                              }\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Unprotected vaginal sex{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"unprotectedVaginalSex\"\n                            id=\"unprotectedVaginalSex\"\n                            value={riskAssessment.unprotectedVaginalSex}\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.unprotectedVaginalSex !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.unprotectedVaginalSex}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Unprotected Anal sex{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"uprotectedAnalSex\"\n                            id=\"uprotectedAnalSex\"\n                            value={riskAssessment.uprotectedAnalSex}\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.uprotectedAnalSex !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.uprotectedAnalSex}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            STI in last 3 months{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"stiLastThreeMonths\"\n                            id=\"stiLastThreeMonths\"\n                            value={riskAssessment.stiLastThreeMonths}\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.stiLastThreeMonths !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.stiLastThreeMonths}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Sex under the influence of drugs or alcohol{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"sexUnderInfluence\"\n                            id=\"sexUnderInfluence\"\n                            value={riskAssessment.sexUnderInfluence}\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.sexUnderInfluence !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.sexUnderInfluence}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            More than 1 sex partner during last 3 months{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"moreThanOneSexPartnerLastThreeMonths\"\n                            id=\"moreThanOneSexPartnerLastThreeMonths\"\n                            value={\n                              riskAssessment.moreThanOneSexPartnerLastThreeMonths\n                            }\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.moreThanOneSexPartnerLastThreeMonths !==\n                          \"\" ? (\n                            <span className={classes.error}>\n                              {errors.moreThanOneSexPartnerLastThreeMonths}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n\n                  <Message warning>\n                    <h4> Risk assessment score (sum of all 7 answers)</h4>\n                    <b>Score : {riskCount.length}</b>\n                  </Message>\n                  <hr />\n                  <br />\n                </>\n              )}\n              {props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" && (\n                <>\n                  <div\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                    style={{\n                      backgroundColor: \"#992E62\",\n                      width: \"125%\",\n                      height: \"35px\",\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    HIV Risk Assessment (Last 3 months)\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you/your partner experienced lower abdominal pain,\n                        smelly discharge, blisters and wounds around you/partner\n                        vagina, penis anus or mouth?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"experiencePain\"\n                        id=\"experiencePain\"\n                        value={riskAssessment.experiencePain}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.experiencePain !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.experiencePain}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you/partner had sex without a condom with someone\n                        of unknown HIV status, or you/partner raped by person\n                        with unknown HIV status?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"haveSexWithoutCondom\"\n                        id=\"haveSexWithoutCondom\"\n                        value={riskAssessment.haveSexWithoutCondom}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.haveSexWithoutCondom !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.haveSexWithoutCondom}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you had a condom burst with your partner during\n                        sexual intercourse?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"haveCondomBurst\"\n                        id=\"haveCondomBurst\"\n                        value={riskAssessment.haveCondomBurst}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.haveCondomBurst !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.haveCondomBurst}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Do you/partner share needles/syringes, other sharp\n                        objects or used abuse drug substances of any kind?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"abuseDrug\"\n                        id=\"abuseDrug\"\n                        value={riskAssessment.abuseDrug}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.abuseDrug !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.abuseDrug}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you/partner had any blood or blood product\n                        transfusion? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"bloodTransfusion\"\n                        id=\"bloodTransfusion\"\n                        value={riskAssessment.bloodTransfusion}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.bloodTransfusion !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.bloodTransfusion}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you/partner experienced coughing, weight loss,\n                        fever, night sweats consistently?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"consistentWeightFeverNightCough\"\n                        id=\"consistentWeightFeverNightCough\"\n                        value={riskAssessment.consistentWeightFeverNightCough}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.consistentWeightFeverNightCough !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.consistentWeightFeverNightCough}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you/partner paid or sold vaginal, anal or oral sex?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"soldPaidVaginalSex\"\n                        id=\"soldPaidVaginalSex\"\n                        value={riskAssessment.soldPaidVaginalSex}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.soldPaidVaginalSex !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.soldPaidVaginalSex}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <Message warning>\n                    <h4> HIV Risk assessment score (sum of all 7 answers)</h4>\n                    <b>Score :{riskCount.length}</b>\n                  </Message>\n                  <hr />\n                  <br />\n                </>\n              )}\n\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#000\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Clinical TB screening\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Current cough </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"currentCough\"\n                    id=\"currentCough\"\n                    value={tbScreening.currentCough}\n                    onChange={handleInputChangeTbScreening}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.currentCough !== \"\" ? (\n                    <span className={classes.error}>{errors.currentCough}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Weight loss </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"weightLoss\"\n                    id=\"weightLoss\"\n                    value={tbScreening.weightLoss}\n                    onChange={handleInputChangeTbScreening}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.weightLoss !== \"\" ? (\n                    <span className={classes.error}>{errors.weightLoss}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Lymphadenopathy (swelling of the lymph nodes) </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"lymphadenopathy\"\n                    id=\"lymphadenopathy\"\n                    value={tbScreening.lymphadenopathy}\n                    onChange={handleInputChangeTbScreening}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.lymphadenopathy !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.lymphadenopathy}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Fever </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"fever\"\n                    id=\"fever\"\n                    value={tbScreening.fever}\n                    onChange={handleInputChangeTbScreening}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.fever !== \"\" ? (\n                    <span className={classes.error}>{errors.fever}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Night sweats</Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"nightSweats\"\n                    id=\"nightSweats\"\n                    value={tbScreening.nightSweats}\n                    onChange={handleInputChangeTbScreening}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.nightSweats !== \"\" ? (\n                    <span className={classes.error}>{errors.nightSweats}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <Message warning>\n                <h4>\n                  TB Screening score (calculate the sum of the TB assessment) If\n                  score {\">= 1\"}, test for Xper MTB RIF or refer to TB service{\" \"}\n                </h4>\n                <b>Score : {newTbTrue.length}</b>\n              </Message>\n              <hr />\n              <br />\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Sex Partner Risk Assessment (Last 3 months)\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Have you had sex with a partner who is HIV positive?{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"sexPartnerHivPositive\"\n                    id=\"sexPartnerHivPositive\"\n                    value={riskAssessmentPartner.sexPartnerHivPositive}\n                    onChange={handleInputChangeRiskAssessmentPartner}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                  {errors.sexPartnerHivPositive !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.sexPartnerHivPositive}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {riskAssessmentPartner.sexPartnerHivPositive === \"true\" && (\n                <>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Is sex partner newly diagnosed with HIV and started\n                        treatment less than 3-6 months ago?\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"newDiagnosedHivlastThreeMonths\"\n                        id=\"newDiagnosedHivlastThreeMonths\"\n                        value={\n                          riskAssessmentPartner.newDiagnosedHivlastThreeMonths\n                        }\n                        onChange={handleInputChangeRiskAssessmentPartner}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.newDiagnosedHivlastThreeMonths !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.newDiagnosedHivlastThreeMonths}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Is sex partner pregnant and currently receiving ARV for\n                        PMTCT?\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"currentlyArvForPmtct\"\n                        id=\"currentlyArvForPmtct\"\n                        value={riskAssessmentPartner.currentlyArvForPmtct}\n                        onChange={handleInputChangeRiskAssessmentPartner}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.currentlyArvForPmtct !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.currentlyArvForPmtct}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Known HIV positive partner on ARV with an unsurpressed\n                        VL\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"knowHivPositiveOnArv\"\n                        id=\"knowHivPositiveOnArv\"\n                        value={riskAssessmentPartner.knowHivPositiveOnArv}\n                        onChange={handleInputChangeRiskAssessmentPartner}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.knowHivPositiveOnArv !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.knowHivPositiveOnArv}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Known HIV positive recently returned to treatment after\n                        being lost to follow up\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"knowHivPositiveAfterLostToFollowUp\"\n                        id=\"knowHivPositiveAfterLostToFollowUp\"\n                        value={\n                          riskAssessmentPartner.knowHivPositiveAfterLostToFollowUp\n                        }\n                        onChange={handleInputChangeRiskAssessmentPartner}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.knowHivPositiveAfterLostToFollowUp !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.knowHivPositiveAfterLostToFollowUp}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Unprotected Anal sex</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"uprotectedAnalSex\"\n                        id=\"uprotectedAnalSex\"\n                        value={riskAssessmentPartner.uprotectedAnalSex}\n                        onChange={handleInputChangeRiskAssessmentPartner}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.uprotectedAnalSex !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.uprotectedAnalSex}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                </>\n              )}\n              <Message warning>\n                <h4>\n                  Sex Partner Risk Assessment score (sum of all 6 answers)\n                </h4>\n                <b>Score :{sexPartRiskCount.length}</b>\n              </Message>\n\n              <hr />\n              <br />\n              {savingResult ? (\n                <div\n                  style={{\n                    display: \"block\",\n                    width: 1000,\n                    padding: 10,\n                  }}\n                >\n                  <Spinner style={{ width: \"2rem\", height: \"2rem\" }} />\n                  <b style={{ color: \"#992E62\", fontSize: \"14px\" }}>\n                    {\" \"}\n                    <PanToolIcon /> requesting HTS ML predictions...\n                  </b>\n                </div>\n              ) : (\n                \" \"\n              )}\n              {savingPrediction ? (\n                <Stack sx={{ width: \"70%\" }} spacing={2}>\n                  <Alert\n                    severity=\"info\"\n                    style={{ fontSize: \"16px\", color: \"000\" }}\n                  >\n                    <b>ML Prediction Result for HTS Patient :</b>{\" \"}\n                    {predictionRanges(predictionValue[1])}\n                  </Alert>\n\n                  <Button\n                    content=\"Provide Feedback\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={toggleModal}\n                    disabled={savingFeedback ? true : false}\n                  />\n                  <br />\n                </Stack>\n              ) : (\n                \"\"\n              )}\n\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#014D88\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Syndromic STI Screening\n              </div>\n              {props.patientObj.personResponseDto &&\n                props.patientObj.personResponseDto.sex === \"Female\" && (\n                  <>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Complaints of vaginal discharge or burning when\n                          urinating?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"vaginalDischarge\"\n                          id=\"vaginalDischarge\"\n                          value={stiScreening.vaginalDischarge}\n                          onChange={handleInputChangeStiScreening}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.vaginalDischarge !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.vaginalDischarge}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Complaints of lower abdominal pains with or without\n                          vaginal discharge?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"lowerAbdominalPains\"\n                          id=\"lowerAbdominalPains\"\n                          value={stiScreening.lowerAbdominalPains}\n                          onChange={handleInputChangeStiScreening}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.lowerAbdominalPains !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.lowerAbdominalPains}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n              {props.patientObj.personResponseDto &&\n                props.patientObj.personResponseDto.sex === \"Male\" && (\n                  <>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Complaints of urethral discharge or burning when\n                          urinating?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"urethralDischarge\"\n                          id=\"urethralDischarge\"\n                          value={stiScreening.urethralDischarge}\n                          onChange={handleInputChangeStiScreening}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.urethralDischarge !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.urethralDischarge}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Complaints of scrotal swelling and pain</Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"complaintsOfScrotal\"\n                          id=\"complaintsOfScrotal\"\n                          value={stiScreening.complaintsOfScrotal}\n                          onChange={handleInputChangeStiScreening}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.complaintsOfScrotal !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.complaintsOfScrotal}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Complaints of genital sore(s) or swollen inguinal\n                          lymph nodes with or without pains?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"complaintsGenitalSore\"\n                          id=\"complaintsGenitalSore\"\n                          value={stiScreening.complaintsGenitalSore}\n                          onChange={handleInputChangeStiScreening}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.complaintsGenitalSore !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.complaintsGenitalSore}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n              <Message warning>\n                <h4>\n                  Calculate the sum of the STI screening. If {\">= \"}1, should be\n                  referred for STI test{\" \"}\n                </h4>\n                <b>Score :{stiCount.length}</b>\n              </Message>\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  <Button\n                    content=\"Check ML Prediction\"\n                    icon=\"refresh\"\n                    labelPosition=\"left\"\n                    disabled={mlresult ? true : false}\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={postPredictions}\n                  />\n                  <Button\n                    content=\"Save & Continue\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <FeedbackModal\n        toggleModal={toggleModal}\n        openModal={openModal}\n        setOpenModal={setOpenModal}\n        predictionValue={predictionValue[1]}\n        clientId={clientId}\n        setSavingFeedback={setSavingFeedback}\n      />\n    </>\n  );\n};\n\nexport default BasicInfo;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/BasicInfo.js",["814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { fontWeight } from \"@mui/system\";\nimport { getCheckModality } from \"../../../../utility\";\nimport { getDoubleSkipForm } from \"../../../../utility\";\nimport { getNextForm } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst BasicInfo = (props) => {\n\n  const classes = useStyles();\n  const history = useHistory();\n  const [errors, setErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n  const [modalityCheck, setModalityCheck] = useState(\"\");\n  const [hideNumChild, setHideNumChild] = useState(false);\n  const [kP, setKP] = useState([]);\n  const [enrollSetting, setEnrollSetting] = useState([]);\n  const [sourceReferral, setSourceReferral] = useState([]);\n  const [gender, setGender] = useState([]);\n  const [sexs, setSexs] = useState([]);\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [maritalStatus, setMaritalStatus] = useState([]);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [counselingType, setCounselingType] = useState([]);\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [indexTesting, setIndexTesting] = useState([]);\n  const [clientCodeetail, setclientCodeetail] = useState(\"\");\n  const [clientCodeetail2, setclientCodeetail2] = useState(\"\");\n  const [clientCodeCheck, setClientCodeCheck] = useState(\"\");\n  const [createdCode, setCreatedCode] = useState(\"\");\n  const [facilityCode, setFacilityCode] = useState(\"\");\n  const [serialNumber, setSerialNumber] = useState(\"\");\n  const [showPregancy, setShowPregnancy] = useState(false);\n  const [pregnancyCode, setPregnancyCode] = useState(\"\");\n\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\n  );\n  const [disableIndexInfo, setDisableIndexInfo] = useState(false);\n  const [disableSex, setdisableSex] = useState(false);\n\n  const getPhoneNumber = (identifier) => {\n    const identifiers = identifier;\n    const phoneNumber = identifiers.contactPoint.find(\n      (obj) => obj.type == \"phone\"\n    );\n    return phoneNumber ? phoneNumber.value : \"\";\n  };\n  const getAddress = (identifier) => {\n    const identifiers = identifier;\n    const address = identifiers.address.find((obj) => obj.city);\n    return address ? address.city : \"\";\n  };\n  //Calculate Date of birth\n  const calculate_age = (dob) => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n      age_now--;\n    }\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    //   age_now--;\n    // }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now;\n  };\n  const address = props.patientObj.personResponseDto.address;\n  const country =\n    address && address.address && address.address.length > 0\n      ? address.address[0]\n      : null;\n  const patientAge = calculate_age(\n    //moment(props.patientObj.personResponseDto.dateOfBirth).format(\"DD-MM-YYYY\")\n    props.patientObj.personResponseDto.dateOfBirth\n  );\n\n  const [pmtctSetting, setPmtctSetting] = useState([\n    \"FACILITY_HTS_TEST_SETTING_ANC\",\n    \"FACILITY_HTS_TEST_SETTING_L&D\",\n    \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\",\n  ]);\n\n  const [disableVitals, setDisableVitals] = useState(false);\n\n  const [objValues, setObjValues] = useState({\n    active: true,\n    clientCode:\n      props.patientObj && props.patientObj.clientCode\n        ? props.patientObj.clientCode\n        : \"\",\n    age:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.dateOfBirth\n        ? props.patientObj?.riskStratificationResponseDto?.age\n        : \"\",\n    dob:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.dateOfBirth\n        ? props.patientObj.personResponseDto.dateOfBirth\n        : \"\",\n    breastFeeding:\n      props.patientObj && props.patientObj.breastFeeding\n        ? props.patientObj.breastFeeding\n        : \"\",\n    dateVisit:\n      props.patientObj && props.patientObj.dateVisit\n        ? props.patientObj.dateVisit\n        : \"\",\n    firstTimeVisit: props?.patientObj?.firstTimeVisit,\n    indexClient: props?.patientObj?.indexClient,\n    numChildren:\n      props.patientObj && props.patientObj.numChildren\n        ? props.patientObj.numChildren\n        : \"\",\n    numWives:\n      props.patientObj && props.patientObj.numWives\n        ? props.patientObj.numWives\n        : \"\",\n    pregnant:\n      props.patientObj && props.patientObj.pregnant\n        ? props.patientObj.pregnant\n        : props.patientObj.riskStratificationResponseDto.testingSetting ===\n          \"FACILITY_HTS_TEST_SETTING_ANC\"\n        ? localStorage.getItem(\"pregnancyCode\")\n        : \"\",\n    dateOfBirth:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.dateOfBirth\n        ? props.patientObj.personResponseDto.dateOfBirth\n        : \"\",\n    dateOfRegistration:\n      props.patientObj && props.patientObj.dateOfRegistration\n        ? props.patientObj.dateOfRegistration\n        : \"\",\n    deceased: \"\",\n    deceasedDateTime: \"\",\n    educationId:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.educationId\n        ? props.patientObj.personResponseDto.educationId\n        : \"\",\n    employmentStatusId:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.employmentStatusId\n        ? props.patientObj.personResponseDto.employmentStatusId\n        : \"\",\n    facilityId: \"\",\n    firstName:\n      props.patientObj && props.patientObj.personResponseDto\n        ? props.patientObj.personResponseDto.firstName\n        : \"\",\n    genderId:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.genderId\n        ? props.patientObj.personResponseDto.genderId\n        : \"\",\n    address:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.address\n        ? getAddress(props.patientObj.personResponseDto.address)\n        : \"\",\n    phoneNumber:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.contactPoint\n        ? getPhoneNumber(props.patientObj.personResponseDto.contactPoint)\n        : \"\",\n    isDateOfBirthEstimated:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.isDateOfBirthEstimated\n        ? props.patientObj.personResponseDto.isDateOfBirthEstimated\n        : \"\",\n    maritalStatusId:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.maritalStatus\n        ? props.patientObj.personResponseDto.maritalStatus.id\n        : \"\",\n    organizationId:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.genderId\n        ? props.patientObj.personResponseDto.genderId\n        : \"\",\n    otherName:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.otherName\n        ? props.patientObj.personResponseDto.otherName\n        : \"\",\n    sex:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.sex\n        ? props.patientObj.personResponseDto.sex\n        : pmtctSetting.includes(\n            props.patientObj.riskStratificationResponseDto.testingSetting\n          )\n        ? \"Female\"\n        : props.patientObj.targetGroup === \"TARGET_GROUP_FSW\"\n        ? \"Female\"\n        : props.patientObj.targetGroup === \"TARGET_GROUP_MSM\"\n        ? \"Male\"\n        : \"\",\n    stateId: country && country.stateId ? country.stateId : \"\",\n    riskAssessment:\n      props.extra && props.extra.riskAssessment\n        ? props.extra.riskAssessment\n        : {},\n    riskStratificationCode:\n      props.extra && props.extra.code !== \"\" ? props.extra.code : \"\",\n    lga: country && country.district ? country.district : \"\",\n    surname:\n      props.patientObj.personResponseDto &&\n      props.patientObj.personResponseDto.surname\n        ? props.patientObj.personResponseDto.surname\n        : \"\",\n    previouslyTested: props.patientObj ? props.patientObj.previouslyTested : \"\",\n    referredFrom: props.patientObj ? props.patientObj.referredFrom : \"\",\n    targetGroup:\n      props.patientObj && props.patientObj.targetGroup\n        ? props.patientObj.targetGroup\n        : \"\",\n    testingSetting: props.patientObj ? props.patientObj.testingSetting : \"\",\n    typeCounseling: props.patientObj ? props.patientObj.typeCounseling : \"\",\n    relationWithIndexClient: props.patientObj\n      ? props.patientObj.relationWithIndexClient\n      : \"\",\n    indexClientCode: \"\",\n    comment: props?.patientObj?.comment,\n    partnerNotificationService: \"\",\n    familyIndex: \"\",\n  });\n\n  const convertFromIdToDisplay = (code) => {\n    let ans = indexTesting.filter((each, index) => {\n      return each.code === code;\n    });\n\n    if (ans[0]?.id) {\n      return ans[0].id;\n    }\n  };\n\n  const CreateClientCode = async () => {\n    let facilityShortCode = \"\";\n    let response = await axios.get(`${baseUrl}hts/get-facility-code`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    setFacilityCode(response.data);\n    facilityShortCode = response.data;\n    let visitDate = new Date(props.patientObj.dateVisit);\n\n    let setting = props.patientObj.testingSetting;\n    let settingCode = \"\";\n    if (setting?.includes(\"SETTING_STI\")) {\n      settingCode = \"STI\";\n    } else if (setting?.includes(\"EMERGENCY\")) {\n      settingCode = \"EME\";\n    } else if (setting?.includes(\"SETTING_INDEX\")) {\n      settingCode = \"IND\";\n    } else if (setting?.includes(\"INPATIENT\")) {\n      settingCode = \"INP\";\n    } else if (setting?.includes(\"PMTCT\")) {\n      settingCode = \"PMTCT\";\n    } else if (setting?.includes(\"TB\")) {\n      settingCode = \"TB\";\n    } else if (setting?.includes(\"VCT\")) {\n      settingCode = \"VCT\";\n    } else if (setting?.includes(\"MOBILE\")) {\n      settingCode = \"MOB\";\n    } else if (setting?.includes(\"SETTING_SNS\")) {\n      settingCode = \"SNS\";\n    } else if (setting?.includes(\"OTHER\")) {\n      settingCode = \"OTH\";\n    } else if (setting?.includes(\"SETTING_ANC\")) {\n      settingCode = \"ANC\";\n    } else if (setting?.includes(\"RETESTING\")) {\n      settingCode = \"RET\";\n    } else if (setting?.includes(\"SETTING_L&D\")) {\n      settingCode = \"L&D\";\n    } else if (setting?.includes(\"POST_NATAL_WARD_BREASTFEEDING\")) {\n      settingCode = \"PNWB\";\n    } else if (setting?.includes(\"NPATIENT\")) {\n      settingCode = \"INP\";\n    } else if (setting?.includes(\"SETTING_CT\")) {\n      settingCode = \"CT\";\n    } else if (setting?.includes(\"SETTING_FP\")) {\n      settingCode = \"FP\";\n    } else if (setting?.includes(\"BLOOD_BANK\")) {\n      settingCode = \"BB\";\n    } else if (setting?.includes(\"PEDIATRIC\")) {\n      settingCode = \"PED\";\n    } else if (setting?.includes(\"MALNUTRITION\")) {\n      settingCode = \"Mal\";\n    } else if (setting?.includes(\"PREP_TESTING\")) {\n      settingCode = \"PrEPT\";\n    } else if (setting?.includes(\"SPOKE_HEALTH_FACILITY\")) {\n      settingCode = \"SPHF\";\n    } else if (setting?.includes(\"STANDALONE\")) {\n      settingCode = \"STAN\";\n    } else if (setting?.includes(\"CONGREGATIONAL\")) {\n      settingCode = \"CON\";\n    } else if (setting?.includes(\"DELIVERY_HOMES\")) {\n      settingCode = \"DEL\";\n    } else if (setting?.includes(\"TBA_ORTHODOX\")) {\n      settingCode = \"TBAO\";\n    } else if (setting?.includes(\"TBA_RT-HCW\")) {\n      settingCode = \"TBAH\";\n    } else if (setting?.includes(\"SETTING_OVC\")) {\n      settingCode = \"OVC\";\n    } else if (setting?.includes(\"OUTREACH\")) {\n      settingCode = \"OUT\";\n    }\n\n    let month = visitDate.getMonth();\n    let year = visitDate.getFullYear();\n    let codeCreated =\n      \"C\" + facilityCode + \"/\" + settingCode + \"/\" + month + \"/\" + year + \"/\";\n    setCreatedCode(codeCreated);\n\n    if (!props.patientObj.id) {\n      setObjValues({ ...objValues, clientCode: codeCreated });\n    } else {\n      setSerialNumber(Cookies.get(\"serial-number\"));\n      setDisableVitals(true);\n    }\n  };\n\n  useEffect(() => {\n    KP();\n    EnrollmentSetting();\n    SourceReferral();\n    Genders();\n    PregnancyStatus();\n\n    getStates();\n    MaterialStatus();\n    determinSex();\n    CounselingType();\n\n    Sex();\n    IndexTesting();\n    CreateClientCode();\n\n    //ellicited patient\n\n    let checkEnrollIndex = JSON.parse(localStorage.getItem(\"index\"));\n    if (\n      checkEnrollIndex &&\n      checkEnrollIndex?.type === \"family\" &&\n      checkEnrollIndex?.clientCode\n    ) {\n      setObjValues({\n        ...objValues,\n        familyIndex: checkEnrollIndex.uuid,\n        indexClient: \"true\",\n        relationWithIndexClient: convertFromIdToDisplay(\n          \"INDEX_TESTING_BIOLOGICAL\"\n        ),\n        indexClientCode: checkEnrollIndex.clientCode,\n      });\n      setDisableIndexInfo(true);\n    }\n    if (checkEnrollIndex?.type === \"partner\" && checkEnrollIndex?.clientCode) {\n      setObjValues({\n        ...objValues,\n        partnerNotificationService: checkEnrollIndex.uuid,\n        indexClient: \"true\",\n        relationWithIndexClient: convertFromIdToDisplay(\"INDEX_TESTING_SEXUAL\"),\n        indexClientCode: checkEnrollIndex.clientCode,\n      });\n      setDisableIndexInfo(true);\n    }\n\n    if (props.patientObj.id && props.completed.includes(\"basic\")) {\n      setDisableVitals(true);\n      setSerialNumber(Cookies.get(\"serial-number\"));\n    }\n    setModalityCheck(\n      getCheckModality(\n        props?.patientObj?.riskStratificationResponseDto?.testingSetting\n      )\n    );\n    if (objValues.age !== \"\") {\n      props.setPatientObjAge(objValues.age);\n    }\n    if (props.extra && props.extra.age !== \"\") {\n      props.setPatientObjAge(props.extra.age);\n    }\n    if (country && country.stateId !== \"\") {\n      getProvincesId(country.stateId);\n    }\n\n    // Cleanup logic here\n  }, [objValues.age, props.patientObj, props.extra.age, facilityCode]);\n  //Get list of KP\n  const KP = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setKP(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of KP\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPregnancyStatus(response.data);\n        determinPregnancy(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of KP\n  const CounselingType = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/COUNSELING_TYPE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setCounselingType(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(\n        `${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        //console.log(response.data);\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //Remove retesting from the codeset\n        let facilityList = [];\n        // response.data.map((each, index)=>{\n        //       if(each.code !==\"FACILITY_HTS_TEST_SETTING_RETESTING\"){\n        //         facilityList.push(each);\n        //       }\n\n        // })\n\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of HIV STATUS ENROLLMENT\n  const EnrollmentSetting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (\n          props.patientObj.riskStratificationResponseDto.entryPoint ===\n          \"HTS_ENTRY_POINT_COMMUNITY\"\n        ) {\n          HTS_ENTRY_POINT_COMMUNITY();\n        } else if (\n          props.patientObj.riskStratificationResponseDto.entryPoint ===\n          \"HTS_ENTRY_POINT_FACILITY\"\n        ) {\n          HTS_ENTRY_POINT_FACILITY();\n        } else {\n          setEnrollSetting([]);\n        }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of HIV STATUS ENROLLMENT\n  const MaterialStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setMaritalStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of Source of Referral\n  const SourceReferral = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSourceReferral(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of Genders from\n  const Genders = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/GENDER`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setGender(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of Genders from\n  const Sex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSexs(response.data);\n        // determinSex()\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get States from selected country\n  const getStates = () => {\n    setStateByCountryId(\"1\");\n    setObjValues({ ...objValues, countryId: 1 });\n  };\n  //Get list of State\n  function setStateByCountryId(getCountryId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setStates(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n  function getProvincesId(getStateId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    setObjValues({ ...objValues, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(\n          response.data.sort((x, y) => {\n            return x.id - y.id;\n          })\n        );\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    } else if (e.target.name === \"serialNumber\") {\n      setSerialNumber(e.target.value);\n      checkClientCode(e);\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    } else if (e.target.name === \"numChildren\") {\n      if (e.target.value >= 0) {\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      } else {\n        setObjValues({\n          ...objValues,\n          [e.target.name]: 0,\n        });\n      }\n    } else if (e.target.name === \"numWives\") {\n      if (e.target.value >= 0) {\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      } else {\n        setObjValues({\n          ...objValues,\n          [e.target.name]: 0,\n        });\n      }\n    } else if (e.target.name === \"indexClientCode\" && e.target.value !== \"\") {\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      async function getIndexClientCode() {\n        const indexClientCode = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}hts/client?code=${indexClientCode}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== \"Record Not Found\") {\n          setclientCodeetail2(\"\");\n          setclientCodeetail(response.data);\n          //setObjValues ({...objValues,  [e.target.name]: e.target.value});\n        } else {\n          setclientCodeetail(\"\");\n          setclientCodeetail2(response.data);\n        }\n      }\n      getIndexClientCode();\n    } else if (e.target.name === \"indexClient\") {\n      setObjValues({\n        ...objValues,\n        [e.target.name]: e.target.value,\n        relationWithIndexClient: \"\",\n        indexClientCode: \"\",\n      });\n      setErrors({\n        ...errors,\n        relationWithIndexClient: \"\",\n        indexClientCode: \"\",\n      });\n    } else {\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n\n    if (e.target.name === \"sex\" && e.target.value.toLowerCase() === \"female\") {\n      setShowPregnancy(true);\n\n      setErrors({ ...errors, pregnant: \"\" });\n    }\n  };\n\n  //checkClientCode\n  const checkClientCode = (e) => {\n    let code = \"\";\n\n    if (e.target.name === \"serialNumber\") {\n      code = createdCode + e.target.value;\n\n      setObjValues({ ...objValues, clientCode: code });\n    }\n    async function getIndexClientCode() {\n      const response = await axios.get(\n        `${baseUrl}hts/get-client-code?code=${code}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"text/plain\",\n          },\n        }\n      );\n      if (response.data === \"Client code already exist\") {\n        // setErrors({...errors,clientCode: \"Client code already exist\" })\n        setClientCodeCheck(\"Client code already exist\");\n      } else {\n        setClientCodeCheck(\"\");\n      }\n    }\n    getIndexClientCode();\n  };\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      objValues.age = age_now;\n\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setObjValues({ ...objValues, age: \"\" });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n\n    setObjValues({ ...objValues, dob: e.target.value });\n    if (objValues.age !== \"\" && objValues.age >= 85) {\n      toggle();\n    }\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      objValues.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      objValues.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n\n  const determinPregnancy = (pregList) => {\n    // get  the value of pregnancy being used\n    let pregnancyUsed = \"\";\n    if (pregList.length > 0) {\n      pregList.map((each, index) => {\n        if (each.code === \"PREGANACY_STATUS_PREGNANT\") {\n          pregnancyUsed = each.id;\n        }\n      });\n    }\n\n    if (\n      props.patientObj.riskStratificationResponseDto.testingSetting ===\n      \"FACILITY_HTS_TEST_SETTING_ANC\"\n    ) {\n      setObjValues({ ...objValues, pregnant: pregnancyUsed });\n    }\n  };\n\n  const determinSex = () => {\n    if (\n      props.patientObj.riskStratificationResponseDto.testingSetting ===\n        \"FACILITY_HTS_TEST_SETTING_ANC\" ||\n      props.patientObj.riskStratificationResponseDto.testingSetting ===\n        \"FACILITY_HTS_TEST_SETTING_L&D\" ||\n      props.patientObj.riskStratificationResponseDto.testingSetting ===\n        \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\n    ) {\n      setShowPregnancy(true);\n      setdisableSex(true);\n    } else {\n      setShowPregnancy(false);\n      setdisableSex(false);\n    }\n  };\n\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      if (e.target.value !== \"\" && e.target.value >= 85) {\n        toggle();\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setObjValues({ ...objValues, age: e.target.value });\n  };\n  //End of Date of Birth and Age handling\n  const checkPhoneNumberBasic = (e, inputName) => {\n    const limit = 10;\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\n  };\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n    temp.typeCounseling = objValues.typeCounseling\n      ? \"\"\n      : \"This field is required.\";\n    temp.testingSetting = objValues.testingSetting\n      ? \"\"\n      : \"This field is required.\";\n    temp.targetGroup = objValues.targetGroup ? \"\" : \"This field is required.\";\n    temp.referredFrom = objValues.referredFrom ? \"\" : \"This field is required.\";\n    temp.previouslyTested =\n      objValues.previouslyTested !== \"\" ? \"\" : \"This field is required.\";\n    temp.surname = objValues.surname ? \"\" : \"This field is required.\";\n    temp.sex = objValues.sex ? \"\" : \"This field is required.\";\n    temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\n    temp.phoneNumber = objValues.phoneNumber ? \"\" : \"This field is required.\";\n    // temp.isDateOfBirthEstimated = objValues.isDateOfBirthEstimated ? \"\" : \"This field is required.\"\n    temp.firstName = objValues.firstName ? \"\" : \"This field is required.\";\n    //temp.dateOfRegistration = objValues.dateOfRegistration ? \"\" : \"This field is required.\"\n    //temp.numChildren = objValues.numChildren ? \"\" : \"This field is required.\"\n    temp.address = objValues.address ? \"\" : \"This field is required.\";\n    temp.indexClient =\n      objValues.indexClient !== \"\" ? \"\" : \"This field is required.\";\n    temp.firstTimeVisit =\n      objValues.firstTimeVisit !== \"\" ? \"\" : \"This field is required.\";\n    temp.dateVisit = objValues.dateVisit ? \"\" : \"This field is required.\";\n    temp.dob = objValues.dob ? \"\" : \"This field is required.\";\n    temp.age = objValues.age ? \"\" : \"This field is required.\";\n    temp.lga = objValues.lga ? \"\" : \"This field is required.\";\n    temp.stateId = objValues.stateId ? \"\" : \"This field is required.\";\n\n    objValues.sex === \"Female\" &&\n      (temp.pregnant =\n        objValues.pregnant !== \"\" ? \"\" : \"This field is required.\");\n\n    objValues.indexClient === \"true\" &&\n      (temp.relationWithIndexClient =\n        objValues.relationWithIndexClient !== \"\"\n          ? \"\"\n          : \"This field is required.\");\n\n    objValues.indexClient === \"true\" &&\n      (temp.indexClientCode =\n        objValues.indexClientCode !== \"\" ? \"\" : \"This field is required.\");\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setObjValues({ ...objValues, [inputName]: NumberValue });\n  };\n\n   const shouldHideMaritalFields = () => {\n     // Check if setting is Pediatric and age is less than 15 years\n     const isPediatricAndUnder15 =\n       objValues.testingSetting === \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\" &&\n       props.patientAge < 15;\n\n     // Check if target group is PD or Children of Most at risk population\n     const isTargetGroupPDorChildrenKP =\n       props.patientObj.targetGroup === \"TARGET_GROUP_PD\" ||\n       props.patientObj.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\";\n\n     // Hide fields if either condition is true\n     return isPediatricAndUnder15 || isTargetGroupPDorChildrenKP;\n   };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    Cookies.set(\"serial-number\", serialNumber);\n    // check next form\n    let latestForm = getNextForm(\n      \"Client_intake_form\",\n      objValues.age,\n      modalityCheck,\n      \"unknown\"\n    );\n\n    if (validate() && clientCodeCheck === \"\") {\n      setSaving(true);\n\n      const getSexId = sexs.find((x) => x.display === objValues.sex); //get patient sex ID by filtering the request\n      //basicInfo.sexId=getSexId.id\n      const patientForm = {\n        clientCode: objValues.clientCode,\n        dateVisit: objValues.dateVisit,\n        extra: {},\n        firstTimeVisit: objValues.firstTimeVisit,\n        indexClient: objValues.indexClient,\n        numChildren: objValues.numChildren,\n        numWives: objValues.numWives,\n        personDto: {\n          active: true,\n          address: [\n            {\n              city: objValues.address,\n              countryId: 1,\n              district: objValues.lga,\n              line: [\"\"],\n              organisationUnitId: \"\",\n              postalCode: \"\",\n              stateId: objValues.stateId,\n            },\n          ],\n          contact: [],\n          contactPoint: [\n            {\n              type: \"phone\",\n              value: objValues.phoneNumber,\n            },\n          ],\n          dateOfBirth: objValues.dob,\n          dateOfRegistration: objValues.dateVisit,\n          deceased: true,\n          deceasedDateTime: null,\n          educationId: \"\",\n          employmentStatusId: \"\",\n          facilityId: \"\",\n          firstName: objValues.firstName,\n          genderId: getSexId.id, //objValues.genderId,\n          id: \"\",\n          identifier: [\n            {\n              assignerId: 1,\n              type: \"HospitalNumber\",\n              value: objValues.clientCode,\n            },\n          ],\n          isDateOfBirthEstimated: objValues.isDateOfBirthEstimated,\n          maritalStatusId: objValues.maritalStatusId,\n          organizationId: \"\",\n          otherName: objValues.otherName,\n          sexId: getSexId.id,\n          surname: objValues.surname,\n        },\n        personId: \"\",\n        hospitalNumber: objValues.clientCode,\n        previouslyTested: objValues.previouslyTested,\n        referredFrom: objValues.referredFrom,\n        targetGroup: objValues.targetGroup,\n        testingSetting: objValues.testingSetting,\n        typeCounseling: objValues.typeCounseling,\n        breastFeeding: objValues.breastFeeding,\n        indexClientCode: objValues.indexClientCode,\n        pregnant: objValues.pregnant,\n        relationWithIndexClient: objValues.relationWithIndexClient,\n        riskStratificationCode:\n          props.extra && props.extra.code !== \"\" ? props.extra.code : \"\",\n        comment: objValues.comment,\n        partnerNotificationService: objValues.partnerNotificationService,\n        familyIndex: objValues.familyIndex,\n      };\n\n      props.setPatientObj({ ...props.patientObj, ...objValues });\n\n      if (props.patientObj.id && props.completed.includes(\"basic\")) {\n        patientForm.id = props?.patientObj?.id;\n        patientForm.personId = props?.patientObj?.personId;\n\n        axios\n          .put(`${baseUrl}hts/${props.patientObj.id}`, patientForm, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            let obj = {\n              uuid: \"\",\n              type: \"\",\n              clientCode: \"\",\n            };\n            localStorage.setItem(\"index\", JSON.stringify(obj));\n\n            props.setPatientObj(response.data);\n            props.setBasicInfo(response.data);\n            toast.success(\"Form submitted successfully\");\n\n            handleItemClick(latestForm[0], latestForm[1]);\n          })\n          .catch((error) => {\n            setSaving(false);\n            console.log(error);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          });\n      } else {\n        axios\n          .post(`${baseUrl}hts`, patientForm, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            let obj = {\n              uuid: \"\",\n              type: \"\",\n              clientCode: \"\",\n            };\n            localStorage.setItem(\"index\", JSON.stringify(obj));\n\n            props.setPatientObj(response.data);\n            props.setBasicInfo(response.data);\n            toast.success(\"Form submitted successfully\");\n\n            handleItemClick(latestForm[0], latestForm[1]);\n          })\n          .catch((error) => {\n            setSaving(false);\n            console.log(error);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            } else {\n              toast.error(\"Something went wrong. Please try again...\", {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            }\n          });\n      }\n    } else {\n      toast.error(\"All fields are required\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>CLIENT INTAKE FORM </h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Serial Number <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"serialNumber\"\n                      id=\"serialNumber\"\n                      value={serialNumber}\n                      //value={Math.floor(Math.random() * 1093328)}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      disabled={disableVitals}\n                    />\n                  </FormGroup>\n                  {errors.serialNumber !== \"\" ? (\n                    <span className={classes.error}>{errors.serialNumber}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Client Code <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"clientCode\"\n                      id=\"clientCode\"\n                      value={objValues.clientCode}\n                      disabled={true}\n                      //value={Math.floor(Math.random() * 1093328)}\n                      // onBlur={checkClientCode}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                    />\n                  </FormGroup>\n                  {/* {errors.clientCode !== \"\" ? (\n                      <span className={classes.error}>{errors.clientCode}</span>\n                    ) : (\n                      \"\"\n                    )} */}\n                  {clientCodeCheck !== \"\" ? (\n                    <span className={classes.error}>{clientCodeCheck}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n                {/* <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                <Label for=\"\"> Date Of Registration </Label>\n                                <Input\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                    name=\"dateOfRegistration\"\n                                    id=\"dateOfRegistration\"\n                                    value={objValues.dateOfRegistration}\n                                    onChange={handleInputChange}\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\n                                    \n                                />\n                                {errors.dateOfRegistration !==\"\" ? (\n                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\n                                ) : \"\" }\n                                </FormGroup>\n                            </div> */}\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Referred From <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"referredFrom\"\n                    id=\"referredFrom\"\n                    value={objValues.referredFrom}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {sourceReferral.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.referredFrom !== \"\" ? (\n                    <span className={classes.error}>{errors.referredFrom}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Setting <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"testingSetting\"\n                    id=\"testingSetting\"\n                    value={objValues.testingSetting}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    {enrollSetting.map((value) => (\n                      <option key={value.id} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.testingSetting !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.testingSetting}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    Visit Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"dateVisit\"\n                    id=\"dateVisit\"\n                    value={objValues.dateVisit}\n                    onChange={handleInputChange}\n                    min=\"1929-12-31\"\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                  />\n                  {errors.dateVisit !== \"\" ? (\n                    <span className={classes.error}>{errors.dateVisit}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    First Name <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"firstName\"\n                    id=\"firstName\"\n                    value={objValues.firstName}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disableVitals}\n                  />\n                  {errors.firstName !== \"\" ? (\n                    <span className={classes.error}>{errors.firstName}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">Middle Name</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"otherName\"\n                    id=\"otherName\"\n                    value={objValues.otherName}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disableVitals}\n                  />\n                  {errors.otherName !== \"\" ? (\n                    <span className={classes.error}>{errors.otherName}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    Last Name <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"surname\"\n                    id=\"surname\"\n                    value={objValues.surname}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disableVitals}\n                  />\n                  {errors.surname !== \"\" ? (\n                    <span className={classes.error}>{errors.surname}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-2 col-md-2\">\n                <FormGroup>\n                  <Label>Date Of Birth</Label>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Actual\"\n                        name=\"dateOfBirth\"\n                        defaultChecked\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />{\" \"}\n                      Actual\n                    </label>\n                  </div>\n                  <div className=\"radio\">\n                    <label>\n                      <input\n                        type=\"radio\"\n                        value=\"Estimated\"\n                        name=\"dateOfBirth\"\n                        onChange={(e) => handleDateOfBirthChange(e)}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />{\" \"}\n                      Estimated\n                    </label>\n                  </div>\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-3\">\n                <FormGroup>\n                  <Label>Date</Label>\n                  <input\n                    className=\"form-control\"\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"dob\"\n                    id=\"dob\"\n                    min={objValues.dateVisit}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    value={objValues.dob}\n                    onChange={handleDobChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  />\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-3\">\n                <FormGroup>\n                  <Label>Age</Label>\n                  <input\n                    className=\"form-control\"\n                    type=\"number\"\n                    name=\"age\"\n                    id=\"age\"\n                    value={objValues.age}\n                    disabled={ageDisabled}\n                    onChange={handleAgeChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  />\n                </FormGroup>\n              </div>\n              {/*<div className=\"form-group mb-3 col-md-4\">*/}\n              {/*  <FormGroup>*/}\n              {/*    <Label for=\"\">*/}\n              {/*      Phone Number <span style={{ color: \"red\" }}> *</span>*/}\n              {/*    </Label>*/}\n\n              {/*    <PhoneInput*/}\n              {/*      containerStyle={{*/}\n              {/*        width: \"100%\",*/}\n              {/*        border: \"1px solid #014D88\",*/}\n              {/*      }}*/}\n              {/*      inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}*/}\n              {/*      country={\"ng\"}*/}\n              {/*      placeholder=\"(234)7099999999\"*/}\n              {/*      minLength={10}*/}\n              {/*      name=\"phoneNumber\"*/}\n              {/*      id=\"phoneNumber\"*/}\n              {/*      masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}*/}\n              {/*      value={objValues.phoneNumber}*/}\n              {/*      onChange={(e) => {*/}\n              {/*        checkPhoneNumberBasic(e, \"phoneNumber\");*/}\n              {/*      }}*/}\n              {/*      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n              {/*    />*/}\n              {/*    {errors.phoneNumber !== \"\" ? (*/}\n              {/*      <span className={classes.error}>{errors.phoneNumber}</span>*/}\n              {/*    ) : (*/}\n              {/*      \"\"*/}\n              {/*    )}*/}\n              {/*  </FormGroup>*/}\n              {/*</div>*/}\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Phone Number\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"phoneNumber\"\n                    id=\"phoneNumber\"\n                    onChange={(e) => {\n                      handleInputChangePhoneNumber(e, \"phoneNumber\");\n                    }}\n                    value={objValues.phoneNumber}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    // disabled\n                  />\n                  {errors.phoneNumber !== \"\" ? (\n                    <span className={classes.error}>{errors.phoneNumber}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    State <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"stateId\"\n                    id=\"state\"\n                    onChange={getProvinces}\n                    value={objValues.stateId}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {states.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.name}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.stateId !== \"\" ? (\n                    <span className={classes.error}>{errors.stateId}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    LGA <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"lga\"\n                    id=\"lga\"\n                    value={objValues.lga}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {provinces.map((value, index) => (\n                      <option key={index} value={value.id}>\n                        {value.name}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.lga !== \"\" ? (\n                    <span className={classes.error}>{errors.lga}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Address <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"textarea\"\n                    name=\"address\"\n                    id=\"address\"\n                    value={objValues.address}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                  />\n                  {errors.address !== \"\" ? (\n                    <span className={classes.error}>{errors.address}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Sex <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"sex\"\n                    id=\"sex\"\n                    value={objValues.sex}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={disableSex}\n                  >\n                    <option value={\"\"}></option>\n\n                    {sexs.map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.sex !== \"\" ? (\n                    <span className={classes.error}>{errors.sex}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {/* {(objValues.targetGroup!=='457' && objValues.targetGroup!==\"\") && (\n                            <div className=\"form-group  col-md-4\">\n                            <FormGroup>\n                                <Label>Gender</Label>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"genderId\"\n                                    id=\"genderId\"\n                                    value={objValues.genderId}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                >\n                                    <option value={\"\"}></option>\n                                    {gender.map((value) => (\n                                        <option key={value.id} value={value.id}>\n                                            {value.display}\n                                        </option>\n                                    ))}\n                                </select>\n                               \n                            </FormGroup>\n                        </div>\n                             )} */}\n              {!shouldHideMaritalFields() && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Marital Status</Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"maritalStatusId\"\n                      id=\"maritalStatusId\"\n                      value={objValues.maritalStatusId}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}></option>\n                      {maritalStatus.map((value) => (\n                        <option key={value.id} value={value.id}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n\n              {!shouldHideMaritalFields() &&\n                (props.patientObj.personResponseDto.sex === \"Male\" ||\n                  props.patientObj.personResponseDto.sex === \"male\" ||\n                  props.patientObj.personResponseDto.sex === \"MALE\") && (\n                  <div className=\"form-group col-md-4\">\n                    <FormGroup>\n                      <Label>Number of wives/co-wives</Label>\n                      <Input\n                        type=\"number\"\n                        name=\"numWives\"\n                        id=\"numWives\"\n                        min={0}\n                        value={objValues.numWives}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        readOnly={props?.activePage?.actionType === \"view\"}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n              {/* && objValues.maritalStatusId==='6' */}\n              {!shouldHideMaritalFields() && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label>Number of Children {\"<5\"} years</Label>\n                    <Input\n                      type=\"number\"\n                      name=\"numChildren\"\n                      id=\"numChildren\"\n                      min={0}\n                      value={objValues.numChildren}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      readOnly={props?.activePage?.actionType === \"view\"}\n                    />\n                  </FormGroup>\n                </div>\n              )}\n              {/* objValues.maritalStatusId==='6' && */}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Target Group <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"targetGroup\"\n                    id=\"targetGroup\"\n                    onChange={handleInputChange}\n                    value={objValues.targetGroup}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    {kP\n                      .filter((value) => {\n                        if (\n                          objValues.age > 14 &&\n                          (value.id === 961 || value.id === 475)\n                        ) {\n                          return false;\n                        }\n                        return true;\n                      })\n                      .map((value) => {\n                        return (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        );\n                      })}\n                  </select>\n                  {errors.targetGroup !== \"\" ? (\n                    <span className={classes.error}>{errors.targetGroup}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Index Testing <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"indexClient\"\n                    id=\"indexClient\"\n                    value={objValues.indexClient}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={disableIndexInfo}\n                  >\n                    <option value={\"\"}>Select</option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.indexClient !== \"\" ? (\n                    <span className={classes.error}>{errors.indexClient}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.indexClient === \"true\" && (\n                <>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Relationship of the index client{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"relationWithIndexClient\"\n                        id=\"relationWithIndexClient\"\n                        value={objValues.relationWithIndexClient}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={disableIndexInfo}\n                      >\n                        <option value={\"\"}></option>\n                        {indexTesting.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.relationWithIndexClient !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.relationWithIndexClient}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Index Client Code/ID\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"indexClientCode\"\n                        id=\"indexClientCode\"\n                        value={objValues.indexClientCode}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={disableIndexInfo}\n                      />\n                      {errors.indexClientCode !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.indexClientCode}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                    {clientCodeetail2 !== \"\" ? (\n                      <span className={classes.error}>{clientCodeetail2}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    {clientCodeetail !== \"\" ? (\n                      <span className={classes.success}>{clientCodeetail}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </div>\n                </>\n              )}\n\n              {objValues.sex === \"Female\" && (\n                <>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Pregnant Status <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"pregnant\"\n                        id=\"pregnant\"\n                        value={objValues.pregnant}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={\n                          props.patientObj.riskStratificationResponseDto\n                            .testingSetting === \"FACILITY_HTS_TEST_SETTING_ANC\"\n                            ? true\n                            : false\n                        }\n                      >\n                        <option value={\"\"}></option>\n                        {pregnancyStatus.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.pregnant !== \"\" ? (\n                        <span className={classes.error}>{errors.pregnant}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {/*objValues.pregnant === \"\" &&\n                      (objValues.pregnant !== 73 ||\n                        objValues.pregnant !== \"73\") && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Breast Feeding</Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"breastFeeding\"\n                              id=\"breastFeeding\"\n                              value={objValues.breastFeeding}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            >\n                              <option value={\"\"}>Select</option>\n                              <option value=\"true\">YES</option>\n                              <option value=\"false\">NO</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                            )*/}\n                </>\n              )}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    First time visit <span style={{ color: \"red\" }}>*</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"firstTimeVisit\"\n                    id=\"firstTimeVisit\"\n                    value={objValues.firstTimeVisit}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.firstTimeVisit !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.firstTimeVisit}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Previously tested within the last 3 months{\" \"}\n                    <span style={{ color: \"red\" }}>*</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"previouslyTested\"\n                    id=\"previouslyTested\"\n                    value={objValues.previouslyTested}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.previouslyTested !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.previouslyTested}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Type of Counseling <span style={{ color: \"red\" }}>*</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"typeCounseling\"\n                    id=\"typeCounseling\"\n                    value={objValues.typeCounseling}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    {counselingType.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.typeCounseling !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.typeCounseling}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-12\">\n                <FormGroup>\n                  <Label for=\"firstName\">\n                    Comments\n                    {/* <span style={{ color: \"red\" }}> *</span> */}\n                  </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"textarea\"\n                    rows=\"4\"\n                    cols=\"7\"\n                    name=\"comment\"\n                    id=\"comment\"\n                    value={objValues.comment}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                      height: \"100px\",\n                    }}\n                  />\n                </FormGroup>\n              </div>\n\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* <Button\n                    content=\"Back\"\n                    icon=\"left arrow\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={() => handleItemClick(\"risk\", \"risk\")}\n                  /> */}\n                  <Button\n                    content=\"Saves & Continue\"\n                    type=\"submit\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default BasicInfo;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Elicitation/Index.js",["843","844"],"import React, {useState, Fragment } from \"react\";\n\nimport { Row, Col, Card, } from \"react-bootstrap\";\nimport AddIndexContact from './AddIndexContact';\nimport IndexContactList from './IndexContactList'\nimport { useHistory, } from \"react-router-dom\";\n//import Button from '@material-ui/core/Button';\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\n\nconst Elicitation = (props) => {\n    //console.log(props.patientObj)\n    const history = useHistory();\n    const [activePage, setActivePage]= useState('list')\n    const handleIClickPage =(activeItem)=>{\n        setActivePage(activeItem)\n    }\n    const handleDone =()=>{\n      history.push('/');\n    }\n    const handleItemClick =(page, completedMenu)=>{        \n      if(props.completed.includes(completedMenu)) {\n      }else{\n          props.setCompleted([...props.completed, completedMenu])\n      }\n      props.handleItemClick(page)\n  }\n\n  return (\n    <Fragment>  \n     \n      <Row>       \n        <Col md={12}>\n            {activePage==='list' &&\n                (\n                    <IndexContactList activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>\n                )\n            }\n            {activePage==='add' && (\n                  <AddIndexContact activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>        \n            )}\n            <br />\n                <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('recency-testing','recency-testing')}/>\n                <Button content='Done' icon='list' labelPosition='left' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={()=>handleDone()}/>\n                \n                </div>\n                </div>\n        </Col>\n        \n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Elicitation;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/Index.js",["845","846","847","848","849","850","851","852","853","854"],"import React, { Fragment } from \"react\";\n// BS\nimport { Dropdown, Nav, Tab } from \"react-bootstrap\";\n/// Scroll\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\nimport { Link } from \"react-router-dom\";\n// images\nimport SummaryView from './DashboardAnalytics/SummaryView/Index';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport {NewlyEnrolledArtBySex} from './DashboardAnalytics/SummaryView/Highcharts/NewlyEnrolledArtBySex';\n\nconst options = {\n  chart: {\n    type: 'column'\n},\n\ntitle: {\n    text: 'Viral Load Cascade among new patients eligible after 6 months'\n},\n\nsubtitle: {\n    text: ''\n},\n\nlegend: {\n    align: 'right',\n    verticalAlign: 'middle',\n    layout: 'vertical'\n},\n\nxAxis: {\n    categories: ['Number Eligble', 'Number of Sample Collected', 'Number Tested', 'Number Suppressed'],\n    labels: {\n        x: -10\n    }\n},\n\nyAxis: {\n    allowDecimals: false,\n    title: {\n        text: 'Amount'\n    }\n},\n\nseries: [{\n    name: 'Number Eligble',\n    data: [20, 40, 30, 3]\n}, {\n    name: 'Number of Sample Collected',\n    data: [62, 41, 22, 22]\n}, {\n    name: 'Number Tested',\n    data: [200, 45, 30,20]\n}, {\n  name: 'Number Suppressed',\n  data: [40, 40, 10, 90]\n}],\n\nresponsive: {\n    rules: [{\n        condition: {\n            maxWidth: 500\n        },\n        chartOptions: {\n            legend: {\n                align: 'center',\n                verticalAlign: 'bottom',\n                layout: 'horizontal'\n            },\n            yAxis: {\n                labels: {\n                    align: 'left',\n                    x: 0,\n                    y: -5\n                },\n                title: {\n                    text: null\n                }\n            },\n            subtitle: {\n                text: null\n            },\n            credits: {\n                enabled: false\n            }\n        }\n    }]\n}\n}\nconst options2 = {\n  chart: {\n    type: 'column'\n},\n\ntitle: {\n    text: 'Viral Load Cascade among patients currently on ART eligible after 12 months of last VL result'\n},\n\nsubtitle: {\n    text: ''\n},\n\nlegend: {\n    align: 'right',\n    verticalAlign: 'middle',\n    layout: 'vertical'\n},\n\nxAxis: {\n    categories: ['Number Eligble', 'Number of Sample Collected', 'Number Tested', 'Number Suppressed'],\n    labels: {\n        x: -10\n    }\n},\n\nyAxis: {\n    allowDecimals: false,\n    title: {\n        text: 'Amount'\n    }\n},\n\nseries: [{\n    name: 'Number Eligble',\n    data: [200, 40, 30, 3]\n}, {\n    name: 'Number of Sample Collected',\n    data: [62, 41, 22, 22]\n}, {\n    name: 'Number Tested',\n    data: [2000, 450, 300,200]\n}, {\n  name: 'Number Suppressed',\n  data: [40, 40, 100, 90]\n}],\n\nresponsive: {\n    rules: [{\n        condition: {\n            maxWidth: 500\n        },\n        chartOptions: {\n            legend: {\n                align: 'center',\n                verticalAlign: 'bottom',\n                layout: 'horizontal'\n            },\n            yAxis: {\n                labels: {\n                    align: 'left',\n                    x: 0,\n                    y: -5\n                },\n                title: {\n                    text: null\n                }\n            },\n            subtitle: {\n                text: null\n            },\n            credits: {\n                enabled: false\n            }\n        }\n    }]\n}\n}\nconst Widget = () => {\n  return (\n    <Fragment>     \n      <div className=\"row\">\n       <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\n          <div className=\"widget-stat card\">\n            <div className=\"card-body p-4\">\n              <div className=\"media ai-icon\">\n                <span className=\"me-3 bgl-primary text-danger\">\n                <i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\n                </span>\n                <div className=\"media-body\">\n                  <p className=\"mb-1\">NEWLY TESTED</p>\n                  <h4 className=\"mb-0\">3280</h4>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\n          <div className=\"widget-stat card\">\n            <div className=\"card-body p-4\">\n              <div className=\"media ai-icon\">\n                <span className=\"me-3 bgl-warning text-warning\">\n                <i class=\"fa fa-heartbeat\" aria-hidden=\"true\"></i>\n                </span>\n                <div className=\"media-body\">\n                  <p className=\"mb-1\">CURRENT ON ART</p>\n                  <h4 className=\"mb-0\">2570</h4>\n                  {/* <span className=\"badge badge-warning\">+3.5%</span> */}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\n          <div className=\"widget-stat card\">\n            <div className=\"card-body  p-4\">\n              <div className=\"media ai-icon\">\n                <span className=\"me-3 bgl-danger text-danger\">\n                <i class=\"fa fa-compress\" aria-hidden=\"true\"></i>\n                </span>\n                <div className=\"media-body\">\n                  <p className=\"mb-1\">NEWLY POSITIVE</p>\n                  <h4 className=\"mb-0\">50</h4>\n                  {/* <span className=\"badge badge-danger\">-3.5%</span> */}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\n          <div className=\"widget-stat card\">\n            <div className=\"card-body p-4\">\n              <div className=\"media ai-icon\">\n                <span className=\"me-3 bgl-success text-success\">\n                <i class=\"fa fa-users\" aria-hidden=\"true\"></i>\n                </span>\n                <div className=\"media-body\">\n                  <p className=\"mb-1\">CURRENTLY ACTIVE</p>\n                  <h4 className=\"mb-0\">2340</h4>\n                  {/* <span className=\"badge badge-success\">-3.5%</span> */}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <SummaryView />\n        {/* <div className=\"col-xl-6 col-xxl-4 col-lg-6 col-sm-6\">\n          <HighchartsReact\n            highcharts={Highcharts}\n            options={options}\n          />\n        </div> */}\n        {/* <div className=\"col-xl-6 col-xxl-4 col-lg-6 col-sm-6\">\n          <HighchartsReact\n            highcharts={Highcharts}\n            options={options2}\n          />\n        </div> */}\n        \n      </div>\n    </Fragment>\n  );\n};\n\nexport default Widget;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/RecencyTesting.js",["855","856","857","858","859","860","861","862","863","864","865"],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/Referrall_view_update.js",["866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport ServicesProvided from \"../../NewRegistration/ServicesProvided\";\nimport RefferalForm from \"./RefferalUnit\";\nimport RefferralUnit from \"./RefferalUnit\";\nimport Cookies from \"js-cookie\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst ViewClientReferral = (props) => {\n  const classes = useStyles();\n  // console.log(\"props.patientObj\", props.patientObj)\n  const [content, setContent] = useState({\n    showReferringUnit: false,\n    showServiceProviderUnit: false,\n  });\n  const patientObj = props.patientObj;\n  const [kP, setKP] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]);\n  const [genders, setGenders] = useState([]);\n  const [targetGroupValue, setTargetGroupValue] = useState(null);\n\n  const [contentDropDown, setContentDropDown] = useState(\"\");\n  const [formInfo, setFormInfo] = useState({\n    dateVisit: \"\",\n    firstName: props?.patientObj?.personResponseDto?.firstName,\n    middleName: props?.patientObj?.personResponseDto?.otherName,\n    lastName: props?.patientObj?.personResponseDto?.surname,\n    hospitalNumber:\n      props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\n    countryId: \"1\",\n    stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\n    province: Number(\n      props?.patientObj?.personResponseDto?.address?.address[0]?.district\n    ),\n    address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\n    landmark: \"\",\n    phoneNumber:\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n        ?.value,\n    sexId: props?.patientObj?.personResponseDto?.gender?.id,\n    dob: props?.patientObj.personResponseDto?.dateOfBirth,\n    age: \"\",\n    dateOfBirth: props?.patientObj.personResponseDto?.dateOfBirth,\n    hivStatus: props?.patientObj?.hivTestResult2\n      ? props?.patientObj?.hivTestResult2\n      : props?.patientObj?.hivTestResult\n      ? props?.patientObj?.hivTestResult\n      : \"\",\n    referredFromFacility: \"\",\n    nameOfPersonReferringClient: \"\",\n    nameOfReferringFacility: Cookies.get(\"facilityName\"),\n    addressOfReferringFacility: \"\",\n    phoneNoOfReferringFacility: \"\",\n    referredTo: \"\",\n    nameOfContactPerson: \"\",\n    nameOfReceivingFacility: \"\",\n    addressOfReceivingFacility: \"\",\n    phoneNoOfReceivingFacility: \"\",\n    isDateOfBirthEstimated: false,\n    serviceNeeded: \"\",\n    comments: \"\",\n    receivingStateFacility: \"\",\n    receivingLgaFacility: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    htsClientUuid: props && props.patientObj ? props.patientObj?.uuid : \"\",\n  });\n  const viewReferralInfo = () => {\n    axios\n      .get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFormInfo(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  useEffect(() => {\n    viewReferralInfo();\n  }, []);\n\n  const handleContentChange = (e) => {\n    setContentDropDown(e.target.value);\n    if (e.target.value === \"showReferringUnit\") {\n      setContent({\n        showReferringUnit: true,\n        showServiceProviderUnit: false,\n      });\n    }\n\n    if (e.target.value === \"showServiceProviderUnit\") {\n      setContent({\n        showReferringUnit: false,\n        showServiceProviderUnit: true,\n      });\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <div className=\"form-group  col-md-8\">\n          <FormGroup>\n            <Label>\n              Referral Type <span style={{ color: \"red\" }}> *</span>\n            </Label>\n            <select\n              className=\"form-control\"\n              name=\"contentDropDown\"\n              id=\"contentDropDown\"\n              onChange={handleContentChange}\n              style={{\n                border: \"1px solid #014D88\",\n                borderRadius: \"0.2rem\",\n              }}\n            >\n              <option value={\"\"}>Select Refarral form type</option>\n              <option value={\"showReferringUnit\"}>Referral form</option>\n              <option value={\"showServiceProviderUnit\"}>\n                Service Provider form\n              </option>\n            </select>\n          </FormGroup>\n        </div>\n      </div>\n      <Card className={classes.root}>\n        {content.showReferringUnit && (\n          <RefferralUnit\n            patientObj={patientObj}\n            formInfo={formInfo}\n            row={props.row}\n            handleItemClick={props.handleItemClick}\n            setCompleted={props.setCompleted}\n            completed={props.completed}\n          />\n        )}\n        {content.showServiceProviderUnit && (\n          <CardBody>\n            <ServicesProvided\n              patientObj={patientObj}\n              formInfo={formInfo}\n              row={props.row}\n              handleItemClick={props.handleItemClick}\n              etCompleted={props.setCompleted}\n              completed={props.completed}\n            />\n          </CardBody>\n        )}\n        {/* recieving facility  */}\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ViewClientReferral;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/ClientReferralHistory.js",["899"],"import React, {Fragment, useState} from \"react\";\nimport {Col, Row} from \"react-bootstrap\";\nimport PNSList from \"../../NewRegistration/PartnerNotificationServices/PNSlist\";\nimport AddIndexContact from \"../../ContinuesHTSEnrollment/Elicitation/AddIndexContact\";\nimport {Button} from \"semantic-ui-react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport ClientRerralList from \"./ClientRerralList\";\n\nconst ClientReferralHistory = (props) => {\n    let history = useHistory();\n\n    const [activePage, setActivePage] = useState(\"list\");\n    const handleIClickPage = (activeItem) => {\n        setActivePage(activeItem);\n    };\n    const handleItemClick = (page, completedMenu) => {\n        props.handleItemClick(page);\n        if (props.completed.includes(completedMenu)) {\n        } else {\n            props.setCompleted([...props.completed, completedMenu]);\n        }\n    };\n    const handleDone = (row, actionType) => {\n        if(props === \"existing\"){\n         props.setActivePage({\n            ...props.activePage,\n            activePage: \"home\",\n            activeObject: row,\n            actionType: actionType,\n        });\n        }else{\n            \n        history.push(\"/\");\n        }\n   \n    };\n\n    return (\n        <Fragment>\n            <Row>\n                <Col md={12}>\n                    {activePage === \"list\" && (\n                        <ClientRerralList\n                            activePage={activePage}\n                            setActivePage={setActivePage}\n                            handleIClickPage={handleIClickPage}\n                            patientObj={props.patientObj}\n                            handleItemClick={handleItemClick}\n                            setRow={props.setRow}\n                        />\n                    )}\n                    {activePage === \"add\" && (\n                        <AddIndexContact\n                            activePage={activePage}\n                            setActivePage={setActivePage}\n                            handleIClickPage={handleIClickPage}\n                            patientObj={props.patientObj}\n                        />\n                    )}\n                    <br />\n                    <div className=\"row\">\n                        <div className=\"form-group mb-3 col-md-12\">\n                            <Button\n                                content=\"Back\"\n                                icon=\"left arrow\"\n                                labelPosition=\"left\"\n                                style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                                onClick={() =>\n                                    handleItemClick(\"recency-testing\", \"recency-testing\")\n                                }\n                            />\n                            <Button\n                                content=\"Done\"\n                                icon=\"list\"\n                                labelPosition=\"left\"\n                                style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                                onClick={() => handleDone()}\n                            />\n                        </div>\n                    </div>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n};\n\nexport default ClientReferralHistory;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/utility/index.js",["900","901","902","903","904","905","906","907","908","909","910","911","912","913","914"],"import { token, url as baseUrl } from \"../api\";\nimport axios from \"axios\";\nimport Cookies from \"js-cookie\";\n//To make a text field accept alphabet value only\nexport const alphabetOnly = (value) => {\n  const result = value.replace(/[^a-z]/gi, \"\");\n  return result;\n};\n\n//*********************** REUSABLE API *****************8*/\n\n// Get all genders\nexport const getAllGenders = async () => {\n  try {\n    const response = await axios.get(`${baseUrl}application-codesets/v2/SEX`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n  } catch (e) {}\n};\n\n//Get all country\nexport const getAllCountry = async () => {\n  try {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/0`,\n      {\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    );\n    return response.data;\n  } catch (e) {}\n};\n\n//\n//\n\n//Get all state by state by country Id\nexport const getAllStateByCountryId = async () => {\n  try {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/1`,\n      {\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    );\n    return response.data;\n  } catch (e) {}\n};\n\n//Get all state by province by state Id (it needs stateId as parameter)\nexport const getAllProvinces = async (stateId) => {\n  try {\n    const response = await axios.get(\n      `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n      {\n        headers: { Authorization: `Bearer ${token}` },\n      }\n    );\n    return response.data;\n  } catch (e) {}\n};\n\n//Get all state by province by state Id (it needs stateId as parameter)\nexport const getAcount = async () => {\n  try {\n    const response = await axios.get(`${baseUrl}account`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    Cookies.set(\"facilityName\", response.data.currentOrganisationUnitName);\n\n    return response.data;\n  } catch (e) {}\n};\n//get if patient is pregnant\n\n\n\nexport const checkPregnantPatient =  async(id) => {\n   try {\n     const response = await axios.get(\n       `${baseUrl}application-codesets/v2/PREGNANCY_STATUS`,\n       {\n         headers: { Authorization: `Bearer ${token}` },\n       }\n     );\n     //Get the pregnant object\n     let result = response.data.filter((each, index) => {\n       return each.code === \"PREGANACY_STATUS_PREGNANT\";\n     });\n     //compare the object id with  parameter\n\n    //  console.log(result[0].id, id, Number(result[0].id) === Number(id));\n\n    //  return result[0].id;\n     if (Number(result[0].id) === Number(id)) {\n       // return true;\n       return true;\n     } else {\n       return false;\n     }\n   } catch (e) {}\n\n\n  \n\n};\n\n\n\n\n\n\n// TEST_SETTING_OTHERS_PMTCT_(POST_ANC1:_PREGNANCYL&DBF)\n\n//check modality\nexport const getCheckModality = (patientObj) => {\n  if (\n    patientObj ===  \"FACILITY_HTS_TEST_SETTING_ANC\" ||\n    patientObj === \"FACILITY_HTS_TEST_SETTING_L&D\" ||\n    patientObj === \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\" \n  ) {\n\n\n    return \"skip\";\n  } else {\n    localStorage.setItem(\"modality\", \"fill\");\n    return \"fill\";\n  }\n};\n\n//check modality for new HTS\nexport const getCheckModalityForHTS = (patientObj) => {\n  if (\n    patientObj ===  \"FACILITY_HTS_TEST_SETTING_ANC\" ||\n    patientObj === \"FACILITY_HTS_TEST_SETTING_L&D\" ||\n    patientObj === \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\" \n  ) {\n    return \"show\";\n  } else {\n    return \"hidden\";\n  }\n};\n\n// Permission implementation\n\nconst generateFormCode = (formName) => {\n  switch (formName) {\n    case \"Risk_Stratification\":\n      return {\n        name: \"Risk_Stratification\",\n        code: \"risk\",\n        general: true,\n        condition: [],\n      };\n      break;\n    case \"Client_intake_form\":\n      return {\n        name: \"Client_intake_form\",\n        code: \"basic\",\n        general: true,\n        condition: [],\n      };\n      break;\n    case \"Pre_Test_Counseling\":\n      return {\n        name: \"Pre_Test_Counseling\",\n        code: \"pre-test-counsel\",\n        general: true,\n        condition: [\"age < 15\", \"pmtct modality\"],\n      };\n      break;\n    case \"Request_and_Result_Form\":\n      return {\n        name: \"Request_and_Result_Form\",\n        code: \"hiv-test\",\n        general: true,\n        condition: [],\n      };\n      break;\n    case \"Post_Test_Counseling\":\n      return {\n        name: \"Post_Test_Counseling\",\n        code: \"post-test\",\n        general: true,\n        condition: [],\n      };\n      break;\n    case \"HIV_Recency_Testing\":\n      return {\n        name: \"HIV_Recency_Testing\",\n        code: \"recency-testing\",\n        general: true,\n        condition: [\"age < 15\", \"-HIV status\"],\n      };\n      break;\n    case \"Nigeria_PNS_Form\":\n      return {\n        name: \"Nigeria_PNS_Form\",\n        code: \"pns\",\n        general: false,\n        condition: [\"-HIV status\"],\n      };\n      break;\n    case \"Referral_Form\":\n      return {\n        name: \"Referral_Form\",\n        code: \"refferal-history\",\n        general: false,\n        condition: [],\n      };\n  }\n};\n\n// note people with that condition will not see the form\nlet ArrayOfAllForms = [\n  {\n    name: \"Risk_Stratification\",\n    code: \"risk\",\n    general: true,\n    condition: [],\n  },\n  { name: \"Client_intake_form\", code: \"basic\", general: true, condition: [] },\n  {\n    name: \"Pre_Test_Counseling\",\n    code: \"pre-test-counsel\",\n    general: true,\n    condition: [\"age < 15\", \"pmtct modality\"],\n  },\n  {\n    name: \"Request_and_Result_Form\",\n    code: \"hiv-test\",\n    general: true,\n    condition: [],\n  },\n  {\n    name: \"Post_Test_Counseling\",\n    code: \"post-test\",\n    general: true,\n    condition: [],\n  },\n  {\n    name: \"HIV_Recency_Testing\",\n    code: \"recency-testing\",\n    general: true,\n    condition: [\"age < 15\", \"-HIV status\"],\n  },\n  {\n    name: \"Family_Index_Testing_Form\",\n    code: \"fit\",\n    general: false,\n    condition: [\"-HIV status\"],\n  },\n  {\n    name: \"Nigeria_PNS_Form\",\n    code: \"pns\",\n    general: false,\n    condition: [\"-HIV status\"],\n  },\n  {\n    name: \"Referral_Form\",\n    code: \"refferal-history\",\n    general: false,\n    condition: [],\n  },\n];\n\n\n\n\nexport const getListOfPermission = (permittedForms) => {\n\n  let newListOfForms = [];\n\n  //if it is admin then return all form\n  if (permittedForms.includes(\"all_permission\")) {\n    return ArrayOfAllForms;\n  } else {\n    // map through all form array using nuser as the argument\n\n    ArrayOfAllForms.map((each, index) => {\n      if (each.general) {\n        newListOfForms.push(each);\n      } else {\n        if (permittedForms.includes(each.name)) {\n          // generate object body\n          let objGenerated = generateFormCode(each.name);\n          newListOfForms.push(objGenerated);\n        }\n      }\n    });\n\n    return newListOfForms;\n  }\n};\n\n\nexport const getNextForm = (formName, age, pmtctModality, hivStatus) => {\n  let authorizedForm = JSON.parse(localStorage.getItem(\"generatedPermission\"));\n  let lengthOfAuthForm = authorizedForm.length;\n\n  // Get the index of the current form\n  let IndexOfForm = authorizedForm.findIndex((each) => {\n    return each.name === formName;\n  });\n\n  // Check if there are more forms after this one\n  if (lengthOfAuthForm > IndexOfForm + 1) {\n    let nextForm = authorizedForm[IndexOfForm + 1];\n\n    // Check if there's another form after the next one (for skipping)\n    let skipToForm = null;\n    if (lengthOfAuthForm > IndexOfForm + 2) {\n      skipToForm = authorizedForm[IndexOfForm + 2];\n    } else {\n      // If there's no form to skip to, use the next form as fallback\n      skipToForm = nextForm;\n    }\n\n    // If the next form has no conditions\n    if (nextForm.condition.length === 0) {\n      // Return: [nextFormCode, currentFormCode, skipToFormCode]\n      return [nextForm.code, authorizedForm[IndexOfForm].code, skipToForm.code];\n    } else {\n      // Handle forms with conditions\n      let answer = loopThroughForms(\n        nextForm,\n        authorizedForm[IndexOfForm],\n        IndexOfForm,\n        age,\n        pmtctModality,\n        hivStatus\n      );\n\n      // Add the skip form code to the answer\n      if (Array.isArray(answer) && answer.length === 2) {\n        answer.push(skipToForm.code);\n      }\n\n      return answer;\n    }\n  } else {\n    // No more forms, return current form code for all positions\n    return [\n      authorizedForm[IndexOfForm].code,\n      authorizedForm[IndexOfForm].code,\n      authorizedForm[IndexOfForm].code,\n    ];\n  }\n};\n\n//function to double skip a form due to other condition\n\nexport const getDoubleSkipForm = (code) => {\n  let authorizedForm = JSON.parse(localStorage.getItem(\"generatedPermission\"));\n\n  let lengthOfAuthForm = authorizedForm.length;\n\n  // get the index of the form\n  let IndexOfForm = authorizedForm.findIndex((each) => {\n    return each.code === code;\n  });\n\n  // use the index of the form to send the code of the next page\n  let nextPage;\n\n  if (lengthOfAuthForm > IndexOfForm + 1) {\n    nextPage = IndexOfForm + 1;\n\n    let nextForm = authorizedForm[nextPage];\n\n    // console.log([nextForm.code, authorizedForm[IndexOfForm].code]);\n\n    return [nextForm.code, authorizedForm[IndexOfForm].code];\n  } else {\n    return \"non\";\n  }\n};\n\nexport const checkNextPageCondition = (\n  nextForm,\n  currentForm,\n  IndexOfForm,\n  age,\n  pmtctModality,\n  hivStatus\n) => {\n  let ageCondition = undefined;\n  let pmctctModalityCondition = undefined;\n  let HivStatuscondition = undefined;\nlet authorizedForm = JSON.parse(localStorage.getItem(\"generatedPermission\"));\n\n\n \n\n if (nextForm.condition.length === 0) {\n\n    return [nextForm.code, authorizedForm[IndexOfForm].code];\n\n } else {\n   // check if patient obj conform with the codition\n   nextForm.condition.map((each, index) => {\n     if (each === \"age < 15\") {\n       ageCondition = age < 15 ? true : false;\n     } else if (each === \"pmtct modality\") {\n       pmctctModalityCondition = pmtctModality === \"skip\" ? true : false;\n     } else if (each === \"-HIV status\" && hivStatus) {\n       HivStatuscondition =\n         hivStatus.toLowerCase() === \"negative\" ? true : false;\n     } else if (each === \"-HIV status\" && !hivStatus) {\n       HivStatuscondition = true\n       \n     }\n   });\n   //type of form\n   let checkformType = [\n     ageCondition,\n     pmctctModalityCondition,\n     HivStatuscondition,\n   ];\n\n   let confirmedFormType = checkformType.filter((each, index) => {\n     return each !== undefined;\n   });\n\n  //  console.log(\"total condition seen\", confirmedFormType);\n   // check if any condition is true\n   let answer = confirmedFormType.some((each) => {\n     return each === true;\n   });\n\n   // skip to the next page ie +1+1\n   if (answer) {\n     // indexPage +1 +1 check the next page condtion ;\n\n     return \"recall \" + IndexOfForm;\n   } else {\n     return [nextForm.code, authorizedForm[IndexOfForm].code];\n   }\n }\n};\n\nexport const loopThroughForms = (\n  nextForm,\n  currentForm,\n  IndexOfForm,\n  age,\n  pmtctModality,\n  hivStatus\n) => {\nlet authorizedForm = JSON.parse(localStorage.getItem(\"generatedPermission\"));\nlet latestNextForm = nextForm;\nlet nextFormIndex =\n  authorizedForm.length > IndexOfForm + 1 ? IndexOfForm + 1 : IndexOfForm;\n\n  //get the index of the next form\n\n  for (let i = nextFormIndex; i < authorizedForm.length; i++) {\n   \n    let theNextPage = checkNextPageCondition(\n      authorizedForm[i],\n      authorizedForm[IndexOfForm],\n      IndexOfForm,\n      age,\n      pmtctModality,\n      hivStatus\n    );\n\n    if (theNextPage.includes(\"recall\")) {\n      // console.log(authorizedForm[i]);\n    } else {\n      return theNextPage;\n    }\n  }\n};\n\n\nexport const loopThroughFormBackward = (\n  nextForm,\n  currentForm,\n  IndexOfForm,\n  age,\n  pmtctModality,\n  hivStatus\n) => {\n  let authorizedForm = JSON.parse(localStorage.getItem(\"generatedPermission\"));\n  // console.log(\"length of the authorized form \", authorizedForm.length);\n  let nextFormIndex =\n  IndexOfForm - 1 >= 0 ? IndexOfForm - 1 : IndexOfForm;\n\n  //get the index of the next form\n\n  for (let i = nextFormIndex; i > 0; i--) {\n    let theNextPage = checkNextPageCondition(\n      authorizedForm[i],\n      authorizedForm[IndexOfForm],\n      IndexOfForm,\n      age,\n      pmtctModality,\n      hivStatus\n    );\n\n    if (theNextPage.includes(\"recall\")) {\n      // console.log(authorizedForm[i]);\n    } else {\n      return theNextPage;\n    }\n  }\n};\nexport const getPreviousForm = (formName, age, pmtctModality, hivStatus) => {\n\n  let ageCondition = undefined;\n  let pmctctModalityCondition = undefined;\n  let HivStatuscondition = undefined;\n  pmtctModality = pmtctModality !== \"\"\n    ? pmtctModality\n    : localStorage.getItem(\"modality\");\n\n  let authorizedForm = JSON.parse(localStorage.getItem(\"generatedPermission\"));\n\n  let lengthOfAuthForm = authorizedForm.length;\n\n  // get the index of the form\n  let IndexOfForm = authorizedForm.findIndex((each) => {\n    return each.name === formName;\n  });\n\n  // use the index of the form to send the code of the next page\n  let prevPage;\n\n  \n  if (IndexOfForm - 1 >= 0) {\n    prevPage = IndexOfForm - 1;\n\n    let nextForm = authorizedForm[prevPage];\n\n   \n\n    //  confirm if there are no condition on the  NEXT form\n    if (nextForm.condition.length === 0) {\n      return [nextForm.code, authorizedForm[IndexOfForm].code];\n    } else {\n      let answer = loopThroughFormBackward(\n        nextForm,\n        authorizedForm[IndexOfForm],\n        IndexOfForm,\n        age,\n        pmtctModality,\n        hivStatus\n      );\n       return answer;\n    }\n\n    //\n  } else {\n    return [\"\", \"\"];\n  }\n};\n\n\n\nexport const getCurentForm=(activeItem)=>{\n    \n\n    switch(activeItem){\n      case  \"risk\": \n      return \"Risk_Stratification\";\n    \n      case  \"basic\": \n      return \"Client_intake_form\"; \n\n      case  \"pre-test-counsel\": \n      return \"Pre_Test_Counseling\";\n\n      case  \"hiv-test\": \n      return \"Request_and_Result_Form\";\n\n      case  \"post-test\": \n      return \"Post_Test_Counseling\";\n\n      case  \"recency-testing\": \n      return \"HIV_Recency_Testing\";\n\n      case  \"fit\": \n      return \"Family_Index_Testing_Form\";\n\n      case  \"fit-history\": \n      return \"Family_Index_Testing_Form\";\n\n      case  \"view-fit\": \n      return \"Family_Index_Testing_Form\";\n\n      case  \"pns\": \n      return \"Nigeria_PNS_Form\";\n\n      case  \"pns-history\": \n      return \"Nigeria_PNS_Form\";\n\n\n      case  \"client-referral\": \n      return \"\";\n\n      case  \"refferal-history\": \n      return \"Referral_Form\";\n\n      case  \"view-referral\": \n      return \"Referral_Form\";\n\n      default:\n        return \"\";    }\n\n  }\n\n\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/utils/index.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Elicitation/AddIndexContact.js",["915","916","917","918","919","920","921","922","923","924","925"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport Badge from \"@mui/material/Badge\";\nimport PersonIcon from \"@mui/icons-material/Person\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst AddIndexContact = (props) => {\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [sexs, setSexs] = useState([]);\n  const [notificationContact, setNotificationContact] = useState([]);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [indexTesting, setIndexTesting] = useState([]);\n  const [consent, setConsent] = useState([]);\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  const [errors, setErrors] = useState({});\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [elicitedCount, setElicitedCount] = useState(0);\n\n  let temp = { ...errors };\n  const [objValuesIndex, setObjValuesIndex] = useState({\n    htsClientId: null,\n    indexNotificationServicesElicitation: {},\n    personId: null,\n  });\n\n  const [objValues, setObjValues] = useState({\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    dob: \"\",\n    phoneNumber: \"\",\n    altPhoneNumber: \"\",\n    sex: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\n    physicalHurt: \"\",\n    threatenToHurt: \"\",\n    address: \"\",\n    hangOutSpots: \"\",\n    relativeToIndexClient: \"\",\n    currentlyLiveWithPartner: \"\",\n    partnerTestedPositive: \"\",\n    sexuallyUncomfortable: \"\",\n    notificationMethod: \"\",\n    datePartnerCameForTesting: \"\",\n    offeredIns: \"\",\n    acceptedIns: \"\",\n    elicited: \"\",\n    stateId: \"\",\n    lga: \"\",\n    dateTested: \"\",\n    currentHivStatus: \"\",\n  });\n\n  useEffect(() => {\n    Sex();\n    getStates();\n    NotificationContact();\n    IndexTesting();\n    Consent();\n    if (props.patientObj) {\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\n        setHivTestDate(props.patientObj.dateVisit);\n      } else {\n        setHivTestDate(\"\");\n      }\n    }\n  }, [props.patientObj]);\n\n  function getStateByCountryId(getCountryId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setStates(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  function getProvincesId(getStateId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    setObjValues({ ...objValues, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(\n          response.data.sort((x, y) => {\n            return x.id - y.id;\n          })\n        );\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getStates = () => {\n    getStateByCountryId(\"1\");\n    setObjValues({ ...objValues, countryId: 1 });\n  };\n\n  //Get list of Genders from\n  const Sex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSexs(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  ///CONSENT\tYes\t\ten\tCONSENT\n  const Consent = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setConsent(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const NotificationContact = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setNotificationContact(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n  const handleInputChange = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\n    //     setHideNumChild(true)\n    // }else{\n    //     setHideNumChild(false)\n    // }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age_now--;\n      }\n      objValues.age = age_now;\n\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setObjValues({ ...objValues, age: \"\" });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n\n    setObjValues({ ...objValues, dob: e.target.value });\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value === \"Actual\") {\n      objValues.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value === \"Estimated\") {\n      objValues.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setObjValues({ ...objValues, age: e.target.value });\n  };\n  //End of Date of Birth and Age handling\n  const checkPhoneNumberBasic = (e, inputName) => {\n    const limit = 10;\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\n  };\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n  const validate = () => {\n    //HTS FORM VALIDATION\n    //temp.acceptedIns = objValues.acceptedIns ? \"\" : \"This field is required.\"\n    temp.offeredIns = objValues.offeredIns ? \"\" : \"This field is required.\";\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setSaving(true);\n      objValues.isDateOfBirthEstimated =\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\n      axios\n        .post(`${baseUrl}index-elicitation`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          toast.success(\"Record save successfully\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          if (\n            objValues.offeredIns !== \"No\" &&\n            objValues.acceptedIns !== \"No\" &&\n            objValues.elicited !== \"No\"\n          ) {\n            setElicitedCount(elicitedCount + 1);\n            setObjValues({\n              firstName: \"\",\n              middleName: \"\",\n              lastName: \"\",\n              dob: \"\",\n              phoneNumber: \"\",\n              altPhoneNumber: \"\",\n              sex: \"\",\n              htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\n              physicalHurt: \"\",\n              threatenToHurt: \"\",\n              address: \"\",\n              hangOutSpots: \"\",\n              relativeToIndexClient: \"\",\n              currentlyLiveWithPartner: \"\",\n              partnerTestedPositive: \"\",\n              sexuallyUncomfortable: \"\",\n              notificationMethod: \"\",\n              datePartnerCameForTesting: \"\",\n              age: \"\",\n              isDateOfBirthEstimated: false,\n              //offeredIns:\"\",\n              //acceptedIns:\"\",\n              //elicited: \"\",\n              stateId: \"\",\n              lga: \"\",\n              dateTested: \"\",\n              currentHivStatus: \"\",\n            });\n          }\n          //handleItemClickPage('list')\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>\n            Index Notification Services - Elicitation\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end  mr-2 mt-2\"\n              onClick={() => handleItemClickPage(\"list\")}\n              //startIcon={<FaUserPlus size=\"10\"/>}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>\n                {\" \"}\n                Back To Client Index List\n              </span>\n            </Button>\n          </h2>\n          {elicitedCount === 0 ? (\n            \"\"\n          ) : (\n            <Badge badgeContent={elicitedCount} color=\"primary\">\n              Elicited Clients\n              <PersonIcon color=\"action\" />\n            </Badge>\n          )}\n          <br />\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Offered INS ? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"offeredIns\"\n                    id=\"offeredIns\"\n                    value={objValues.offeredIns}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {consent.map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.offeredIns !== \"\" ? (\n                    <span className={classes.error}>{errors.offeredIns}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.offeredIns !== \"\" && objValues.offeredIns !== \"No\" && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Accepted INS ? <span style={{ color: \"red\" }}> </span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"acceptedIns\"\n                      id=\"acceptedIns\"\n                      value={objValues.acceptedIns}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}></option>\n                      {consent.map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n              {objValues.acceptedIns !== \"\" &&\n                objValues.acceptedIns !== \"No\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Elicited ? <span style={{ color: \"red\" }}> </span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"elicited\"\n                        id=\"elicited\"\n                        value={objValues.elicited}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.display}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                )}\n            </div>\n\n            <div className=\"row\">\n              {objValues.elicited !== \"\" && objValues.elicited !== \"No\" && (\n                <>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">First Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"firstName\"\n                        value={objValues.firstName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Middle Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"middleName\"\n                        id=\"middleName\"\n                        value={objValues.middleName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Last Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={objValues.lastName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-2 col-md-2\">\n                    <FormGroup>\n                      <Label>Date Of Birth</Label>\n                      <div className=\"radio\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            value=\"Actual\"\n                            name=\"dateOfBirth\"\n                            defaultChecked\n                            onChange={(e) => handleDateOfBirthChange(e)}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />{\" \"}\n                          Actual\n                        </label>\n                      </div>\n                      <div className=\"radio\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            value=\"Estimated\"\n                            name=\"dateOfBirth\"\n                            onChange={(e) => handleDateOfBirthChange(e)}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />{\" \"}\n                          Estimated\n                        </label>\n                      </div>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-3\">\n                    <FormGroup>\n                      <Label>Date</Label>\n                      <input\n                        className=\"form-control\"\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"dob\"\n                        id=\"dob\"\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        value={objValues.dob}\n                        onChange={handleDobChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-3\">\n                    <FormGroup>\n                      <Label>Age</Label>\n                      <input\n                        className=\"form-control\"\n                        type=\"number\"\n                        name=\"age\"\n                        id=\"age\"\n                        value={objValues.age}\n                        disabled={ageDisabled}\n                        onChange={handleAgeChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Phone Number</Label>\n\n                      <PhoneInput\n                        containerStyle={{\n                          width: \"100%\",\n                          border: \"1px solid #014D88\",\n                        }}\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                        country={\"ng\"}\n                        placeholder=\"(234)7099999999\"\n                        minLength={10}\n                        name=\"phoneNumber\"\n                        id=\"phoneNumber\"\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                        value={objValues.phoneNumber}\n                        onChange={(e) => {\n                          checkPhoneNumberBasic(e, \"phoneNumber\");\n                        }}\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                      />\n                      {errors.phoneNumber !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.phoneNumber}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Alternative Phone Number</Label>\n                      <PhoneInput\n                        containerStyle={{\n                          width: \"100%\",\n                          border: \"1px solid #014D88\",\n                        }}\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                        country={\"ng\"}\n                        placeholder=\"(234)7099999999\"\n                        minLength={10}\n                        name=\"altPhoneNumber\"\n                        id=\"altPhoneNumber\"\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                        value={objValues.altPhoneNumber}\n                        onChange={(e) => {\n                          checkPhoneNumberBasic(e, \"altPhoneNumber\");\n                        }}\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Sex *</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"sex\"\n                        id=\"sex\"\n                        value={objValues.sex}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {sexs.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        State <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"state\"\n                        id=\"state\"\n                        onChange={getProvinces}\n                        value={objValues.stateId}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {states.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.name}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.stateId !== \"\" ? (\n                        <span className={classes.error}>{errors.stateId}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        LGA <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lga\"\n                        id=\"lga\"\n                        value={objValues.lga}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {provinces.map((value, index) => (\n                          <option key={index} value={value.id}>\n                            {value.name}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.lga !== \"\" ? (\n                        <span className={classes.error}>{errors.lga}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Address</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"address\"\n                        id=\"address\"\n                        value={objValues.address}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Hang-out spots</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"hangOutSpots\"\n                        id=\"hangOutSpots\"\n                        value={objValues.hangOutSpots}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Relationship to Index Client *</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"relativeToIndexClient\"\n                        id=\"relativeToIndexClient\"\n                        value={objValues.relativeToIndexClient}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {indexTesting.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Do you currently live with this partner? *</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"currentlyLiveWithPartner\"\n                        id=\"currentlyLiveWithPartner\"\n                        value={objValues.currentlyLiveWithPartner}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value={\"true\"}>Yes</option>\n                        <option value={\"false\"}>No</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        As far as you know, has this partner ever tested\n                        positive for HIV *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"partnerTestedPositive\"\n                        id=\"partnerTestedPositive\"\n                        value={objValues.partnerTestedPositive}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever hit, kick, slapped or otherwise\n                        physical hurt you? *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"physicalHurt\"\n                        id=\"physicalHurt\"\n                        value={objValues.physicalHurt}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever threatened to hurt you? *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"threatenToHurt\"\n                        id=\"threatenToHurt\"\n                        value={objValues.threatenToHurt}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever threatened to force you to do\n                        something sexually that made you uncomfortable ? *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"sexuallyUncomfortable\"\n                        id=\"sexuallyUncomfortable\"\n                        value={objValues.sexuallyUncomfortable}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Notification Method selected*</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"notificationMethod\"\n                        id=\"notificationMethod\"\n                        value={objValues.notificationMethod}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {notificationContact.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">\n                        If contract by which date will partner come for testing?\n                      </Label>\n                      <Input\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"datePartnerCameForTesting\"\n                        id=\"datePartnerCameForTesting\"\n                        value={objValues.datePartnerCameForTesting}\n                        onChange={handleInputChange}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                      {errors.datePartnerComeForTesting !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.datePartnerComeForTesting}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        HIV Status of Index Client{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"currentHivStatus\"\n                        id=\"currentHivStatus\"\n                        value={objValues.currentHivStatus}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"negative\">Negative</option>\n                        <option value=\"positive\">Positive</option>\n                        <option value=\"unknown\">Unknown</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  {objValues.currentHivStatus !== \"\" &&\n                    objValues.currentHivStatus === \"positive\" && (\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"\">\n                            Date Tested?{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <Input\n                            type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                            name=\"dateTested\"\n                            id=\"dateTested\"\n                            value={objValues.dateTested}\n                            onChange={handleInputChange}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.25rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                    )}\n                </>\n              )}\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                  <Button\n                    content=\"Save\"\n                    icon=\"save\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default AddIndexContact;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/Elicitation/IndexContactList.js",["926","927","928","929","930","931","932","933"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../../../api\";\n//import { token as token } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst PatientnHistory = (props) => {\n  const [indexClientList, setIndexClientList] = useState([]);\n  //const [patientObj, setpatientObj] = useState([])\n  const patientId =\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\n  //const [key, setKey] = useState('home');\n  //console.log(props)\n  useEffect(() => {\n    patients();\n  }, []);\n  ///GET LIST OF Patients\n  async function patients() {\n    axios\n      .get(`${baseUrl}hts/${props.patientObj.id}/index-elicitation`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setIndexClientList(response.data);\n      })\n      .catch((error) => {});\n  }\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n  const handleIEditIndex = (page, activePage) => {\n    console.log(page);\n    console.log(activePage);\n    //props.setActivePage({...props.activePage, activePage:\"activePage\", activeObject:row, actionType:actionType})\n    //props.handleIClickPage(page)\n  };\n\n  const calculate_age = (dob) => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now + \" year(s)\";\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\" float-end  mr-2 mt-2\"\n        onClick={() => handleItemClickPage(\"add\")}\n        //startIcon={<FaUserPlus size=\"10\"/>}\n      >\n        <span style={{ textTransform: \"capitalize\" }}>New Index Client </span>\n      </Button>\n      <br />\n      <br />\n      <br />\n      <br />\n      <MaterialTable\n        icons={tableIcons}\n        title=\"List of  client contact\"\n        columns={[\n          { title: \"Name\", field: \"name\" },\n          { title: \"Age\", field: \"age\" },\n          { title: \"Phone Number\", field: \"phone\" },\n          { title: \"Adress\", field: \"address\" },\n          // { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        data={indexClientList\n          .filter((b) => b.firstName !== \"\")\n          .map((row) => ({\n            name: row.firstName + \" \" + row.lastName,\n            age: calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n            phone: row.phoneNumber,\n            address: row.address,\n            actions: (\n              <>\n                {/* <Menu.Menu position='right'  >\n                            <Menu.Item >\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\n                                <Dropdown item text='Action'>\n\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\n                                \n                                <Dropdown.Item  \n                                //onClick={()=>handleIEditIndex(row, 'update')}\n                                >\n                                    <Icon name='edit' />Edit</Dropdown.Item>\n                                <Dropdown.Item  \n                                //onClick={()=>LoadDeletePage(row, 'delete')}\n                                > <Icon name='trash' /> Delete</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                                </Button>\n                            </Menu.Item>\n                        </Menu.Menu> */}\n              </>\n            ),\n          }))}\n        options={{\n          headerStyle: {\n            //backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PatientnHistory;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Index.js",["934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949"],"import React, { useState } from 'react';\n\nimport { Col, Form,CardBody,  Row,CardTitle, CardText,\n   } from \"reactstrap\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Highcharts from 'highcharts';\n import HighchartsReact from 'highcharts-react-official';\nimport {NewlyEnrolledArtBySex} from './Highcharts/NewlyEnrolledArtBySex';\nimport {NewlyEnrolledArtByAge} from './Highcharts/NewlyEnrolledArtByAge';\nimport {ReceivingArtByAge}  from './Highcharts/ReceivingArtByAge';\nimport {ReceivingArtBySex} from './Highcharts/ReceivingArtBySex';\nimport { Progress } from 'reactstrap';\n\n\n// Load Highcharts modules\n//require(\"highcharts/modules/exporting\")(Highcharts);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n        margin: theme.spacing(1),\n        width: 200,\n    },\n},\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n}));\n\nconst SummaryView = (props) => {\n  const classes = useStyles();\n  const [chartValue, setChartValue] = useState(\"\");\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggle = () => setDropdownOpen(!dropdownOpen);\n  const [state, setState] = useState({ activeItem: 'gamepad' })\n\n  const handleItemClick = (e, { name }) => setState({ activeItem: name })\n  const { activeItem } = state\n  const chartPage  = e => {\n\n    setChartValue(e)\n  }\n\n  //Menu Icon \n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n\n\n  return (\n    <div  spacing={5} style={{ padding: 20 }} >\n      <Row>\n        <Col md={12}>\n          {/* The second Column Card Layout  */}\n        <Row>\n                 \n                  <Col  lg={6} md={6} sm={12} xs={12} className=\"mb-4\">\n                  <Card><CardBody>\n                    <HighchartsReact highcharts={Highcharts} options={ReceivingArtBySex} />\n                  </CardBody></Card>\n                  </Col>\n                  <Col  lg={6} md={6} sm={12} xs={12} className=\"mb-4\">\n                  <Card><CardBody>\n                    <HighchartsReact highcharts={Highcharts} options={ReceivingArtByAge} />\n                  </CardBody></Card>\n                  </Col>\n              </Row>\n\n           \n        </Col>\n      </Row>\n\n      \n\n      \n\n    </div>\n  );\n}\n\nexport default SummaryView;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/NewlyEnrolledArtBySex.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/ReceivingArtBySex.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/ReceivingArtByAge.js",[],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Visualisation/DashboardAnalytics/SummaryView/Highcharts/NewlyEnrolledArtByAge.js",["950","951"],"import Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\n\n\n\nexport const NewlyEnrolledArtByAge = {\n    chart: {\n        \n        plotBackgroundColor: null,\n        plotBorderWidth: null,\n        plotShadow: false,\n        type: 'pie'\n    },\n    title: {\n        text: 'Number of Adults and Children newly enrolled on ART '\n    },\n    tooltip: {\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n    },\n    accessibility: {\n        point: {\n            valueSuffix: '%'\n        }\n    },\n    plotOptions: {\n        pie: {\n            allowPointSelect: true,\n            cursor: 'pointer',\n            dataLabels: {\n                enabled: true,\n                format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n                connectorColor: 'black'\n            },\n            showInLegend: true\n        }\n    },\n    series: [{\n        name: 'Newly Enrolled on ART by Age',\n        data: [\n            \n            { name: '25 + ', sliced: true, y: 61.41 },\n            { name: '20-24 ', y: 11.84 },\n            { name: '10-19 ', y: 10.85 },\n            { name: '≤ 9 ', y: 4.67 },\n        ]\n    }]\n};","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/ClientRerralList.js",["952","953","954","955"],"import React, { forwardRef, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport { Button, Dropdown, Icon, Menu } from \"semantic-ui-react\";\nimport MaterialTable from \"material-table\";\nimport { Modal } from \"react-bootstrap\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport Check from \"@material-ui/icons/Check\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport Search from \"@material-ui/icons/Search\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\nconst ClientRerralList = (props) => {\n  const [indexClientList, setIndexClientList] = useState([]);\n  const [recordSelected, setRecordSelected] = useState({});\n\n  const [open, setOpen] = React.useState(false);\n  const [serviceMapping, setServiceMapping] = useState({});\n  const [serviceNeeded, setServiceNeeded] = useState([]);\n  const toggle = () => setOpen(!open);\n\n  //const [patientObj, setpatientObj] = useState([])\n  const patientId =\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\n  //const [key, setKey] = useState('home');\n  //console.log(props)\n  useEffect(() => {\n    patients();\n  }, []);\n  //get services needed\n  const SERVICE_NEEDED = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setServiceNeeded(response.data);\n          const mapping = {};\n          response.data.forEach((item) => {\n            mapping[item.code] = item.display;\n          });\n          setServiceMapping(mapping);\n        }\n      })\n      .catch((e) => {\n        console.error(\"Fetch Services error:\", e);\n      });\n  };\n\n  useEffect(() => {\n    SERVICE_NEEDED();\n  }, []);\n\n  async function patients() {\n    axios\n      .get(`${baseUrl}hts-client-referral/all/${patientId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setIndexClientList(response.data);\n      })\n      .catch((error) => {});\n  }\n  const addNewPns = (e) => {\n    e.preventDefault();\n    props.handleItemClick(\"client-referral\");\n  };\n  const LoadViewPage = (row, actionType) => {\n    props.handleItemClick(\"view-referral\");\n    props.setRow({ row: row, action: actionType });\n  };\n  const LoadModal = (row) => {\n    toggle();\n    // console.log(row);\n    setRecordSelected(row);\n  };\n  const LoadDeletePage = (row) => {\n    axios\n      .delete(`${baseUrl}hts-client-referral/${recordSelected.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        toast.success(\"Record Deleted Successfully\");\n        toggle();\n        patients();\n        // setSaving(false);\n      })\n      .catch((error) => {\n        // setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage);\n        } else {\n          toast.error(\"Something went wrong. Please try again...\");\n        }\n      });\n  };\n  return (\n    <>\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className=\" float-end  mr-2 mt-2\"\n          onClick={(e) => addNewPns(e)}\n          //startIcon={<FaUserPlus size=\"10\"/>}\n        >\n          <span style={{ textTransform: \"capitalize\" }}> Refer Client</span>\n        </Button>\n        <br />\n        <br />\n        <br />\n        <br />\n        <MaterialTable\n          icons={tableIcons}\n          title=\"List of  client submitted referral forms\"\n          columns={[\n            { title: \"Date visited\", field: \"date\" },\n            { title: \"Service needed\", field: \"service\" },\n            //   { title: \"Phone Number\", field: \"phone\" },\n            { title: \"Receiving Facility\", field: \"receiving\" },\n            { title: \"Actions\", field: \"actions\", filtering: false },\n          ]}\n          isLoading={props.loading}\n          data={indexClientList\n            .filter((b) => b.firstName !== \"\")\n            .map((row) => ({\n              date: row.dateVisit,\n              // service: serviceMapping[row.serviceNeeded] || row.serviceNeeded,\n                service: Object.values(row.serviceNeeded).join(', '),\n              // phone: row.phoneNumber,\n              receiving: row.nameOfReceivingFacility,\n              actions: (\n                <div>\n                  <Menu.Menu position=\"right\">\n                    <Menu.Item>\n                      <Button\n                          style={{ backgroundColor: \"rgb(153,46,98)\" }}\n                          primary\n                          onClick={(e) => {\n                            e.preventDefault();\n                          }}\n                      >\n                      <Dropdown\n                        item\n                        text=\"Action\"\n                        onClick={(e) => {\n                          e.preventDefault();\n                        }}\n                      >\n                        <Dropdown.Menu style={{ marginTop: \"10px\" }}>\n                          <Dropdown.Item\n                            onClick={(e) => LoadViewPage(row, \"view\")}\n                          >\n                            {\" \"}\n                            <Icon name=\"eye\" />\n                            View\n                          </Dropdown.Item>\n                          <Dropdown.Item\n                            onClick={() => LoadViewPage(row, \"update\")}\n                          >\n                            <Icon name=\"edit\" />\n                            Edit\n                          </Dropdown.Item>\n                          <Dropdown.Item onClick={() => LoadModal(row)}>\n                            <Icon name=\"delete\" />\n                            Delete\n                          </Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown>\n                       </Button>\n                    </Menu.Item>\n                  </Menu.Menu>\n                </div>\n              ),\n            }))}\n          options={{\n            headerStyle: {\n              //backgroundColor: \"#9F9FA5\",\n              color: \"#000\",\n            },\n            searchFieldStyle: {\n              width: \"200%\",\n              margingLeft: \"250px\",\n            },\n            filtering: false,\n            exportButton: false,\n            //   searchFieldAlignment: \"left\",\n            pageSizeOptions: [10, 20, 100],\n            pageSize: 10,\n            debounceInterval: 400,\n          }}\n        />\n      </div>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>\n            Are you Sure you want to delete{\" \"}\n            {/* <b>{row && record.activityName}</b> */}\n          </h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => LoadDeletePage(recordSelected)}\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\n            // disabled={saving}\n          >\n            Yes\n            {/* {saving === false ? \"Yes\" : \"Deleting...\"} */}\n          </Button>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n            // disabled={saving}\n          >\n            No\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ClientRerralList;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Elicitation/AddIndexContact.js",["956","957","958","959","960","961","962","963","964","965","966","967","968"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport Badge from \"@mui/material/Badge\";\nimport PersonIcon from \"@mui/icons-material/Person\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst AddIndexContact = (props) => {\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [sexs, setSexs] = useState([]);\n  const [notificationContact, setNotificationContact] = useState([]);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [indexTesting, setIndexTesting] = useState([]);\n  const [consent, setConsent] = useState([]);\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  const [errors, setErrors] = useState({});\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [elicitedCount, setElicitedCount] = useState(0);\n\n  let temp = { ...errors };\n  const [objValuesIndex, setObjValuesIndex] = useState({\n    htsClientId: null,\n    indexNotificationServicesElicitation: {},\n    personId: null,\n  });\n\n  const [objValues, setObjValues] = useState({\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    dob: \"\",\n    phoneNumber: \"\",\n    altPhoneNumber: \"\",\n    sex: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\n    physicalHurt: \"\",\n    threatenToHurt: \"\",\n    address: \"\",\n    hangOutSpots: \"\",\n    relativeToIndexClient: \"\",\n    currentlyLiveWithPartner: \"\",\n    partnerTestedPositive: \"\",\n    sexuallyUncomfortable: \"\",\n    notificationMethod: \"\",\n    datePartnerCameForTesting: \"\",\n    offeredIns: \"\",\n    acceptedIns: \"\",\n    elicited: \"\",\n    stateId: \"\",\n    lga: \"\",\n    dateTested: \"\",\n    currentHivStatus: \"\",\n  });\n\n  useEffect(() => {\n    Sex();\n    getStates();\n    NotificationContact();\n    IndexTesting();\n    Consent();\n    if (props.patientObj) {\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\n        setHivTestDate(props.patientObj.dateVisit);\n      } else {\n        setHivTestDate(\"\");\n      }\n    }\n  }, [props.patientObj]);\n\n  function getStateByCountryId(getCountryId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setStates(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  function getProvincesId(getStateId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    setObjValues({ ...objValues, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(\n          response.data.sort((x, y) => {\n            return x.id - y.id;\n          })\n        );\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getStates = () => {\n    getStateByCountryId(\"1\");\n    setObjValues({ ...objValues, countryId: 1 });\n  };\n\n  //Get list of Genders from\n  const Sex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSexs(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  ///CONSENT\tYes\t\ten\tCONSENT\n  const Consent = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setConsent(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const NotificationContact = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setNotificationContact(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\n    //     setHideNumChild(true)\n    // }else{\n    //     setHideNumChild(false)\n    // }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n        age_now--;\n      }\n      objValues.age = age_now;\n\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setObjValues({ ...objValues, age: \"\" });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n\n    setObjValues({ ...objValues, dob: e.target.value });\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      objValues.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      objValues.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setObjValues({ ...objValues, age: e.target.value });\n  };\n  //End of Date of Birth and Age handling\n  const checkPhoneNumberBasic = (e, inputName) => {\n    const limit = 10;\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\n  };\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n  const validate = () => {\n    //HTS FORM VALIDATION\n    //temp.acceptedIns = objValues.acceptedIns ? \"\" : \"This field is required.\"\n    temp.offeredIns = objValues.offeredIns ? \"\" : \"This field is required.\";\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setSaving(true);\n      objValues.isDateOfBirthEstimated =\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\n      axios\n        .post(`${baseUrl}index-elicitation`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          toast.success(\"Record save successfully\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n          if (\n            objValues.offeredIns !== \"No\" &&\n            objValues.acceptedIns !== \"No\" &&\n            objValues.elicited !== \"No\"\n          ) {\n            setElicitedCount(elicitedCount + 1);\n            setObjValues({\n              firstName: \"\",\n              middleName: \"\",\n              lastName: \"\",\n              dob: \"\",\n              phoneNumber: \"\",\n              altPhoneNumber: \"\",\n              sex: \"\",\n              htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\n              physicalHurt: \"\",\n              threatenToHurt: \"\",\n              address: \"\",\n              hangOutSpots: \"\",\n              relativeToIndexClient: \"\",\n              currentlyLiveWithPartner: \"\",\n              partnerTestedPositive: \"\",\n              sexuallyUncomfortable: \"\",\n              notificationMethod: \"\",\n              datePartnerCameForTesting: \"\",\n              age: \"\",\n              isDateOfBirthEstimated: false,\n              //offeredIns:\"\",\n              //acceptedIns:\"\",\n              //elicited: \"\",\n              stateId: \"\",\n              lga: \"\",\n              dateTested: \"\",\n              currentHivStatus: \"\",\n            });\n          }\n          //handleItemClickPage('list')\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>\n            Index Notification Services - Elicitation\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end  mr-2 mt-2\"\n              onClick={() => handleItemClickPage(\"list\")}\n              //startIcon={<FaUserPlus size=\"10\"/>}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>\n                {\" \"}\n                Back To Client Index List\n              </span>\n            </Button>\n          </h2>\n          {elicitedCount === 0 ? (\n            \"\"\n          ) : (\n            <Badge badgeContent={elicitedCount} color=\"primary\">\n              Elicited Clients\n              <PersonIcon color=\"action\" />\n            </Badge>\n          )}\n          <br />\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Offered INS ? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"offeredIns\"\n                    id=\"offeredIns\"\n                    value={objValues.offeredIns}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {consent.map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.offeredIns !== \"\" ? (\n                    <span className={classes.error}>{errors.offeredIns}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.offeredIns !== \"\" && objValues.offeredIns !== \"No\" && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Accepted INS ? <span style={{ color: \"red\" }}> </span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"acceptedIns\"\n                      id=\"acceptedIns\"\n                      value={objValues.acceptedIns}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}></option>\n                      {consent.map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n              {objValues.acceptedIns !== \"\" &&\n                objValues.acceptedIns !== \"No\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Elicited ? <span style={{ color: \"red\" }}> </span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"elicited\"\n                        id=\"elicited\"\n                        value={objValues.elicited}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.display}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                )}\n            </div>\n\n            <div className=\"row\">\n              {objValues.elicited !== \"\" && objValues.elicited !== \"No\" && (\n                <>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">First Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"firstName\"\n                        value={objValues.firstName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Middle Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"middleName\"\n                        id=\"middleName\"\n                        value={objValues.middleName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Last Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={objValues.lastName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-2 col-md-2\">\n                    <FormGroup>\n                      <Label>Date Of Birth</Label>\n                      <div className=\"radio\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            value=\"Actual\"\n                            name=\"dateOfBirth\"\n                            defaultChecked\n                            onChange={(e) => handleDateOfBirthChange(e)}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />{\" \"}\n                          Actual\n                        </label>\n                      </div>\n                      <div className=\"radio\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            value=\"Estimated\"\n                            name=\"dateOfBirth\"\n                            onChange={(e) => handleDateOfBirthChange(e)}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />{\" \"}\n                          Estimated\n                        </label>\n                      </div>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-3\">\n                    <FormGroup>\n                      <Label>Date</Label>\n                      <input\n                        className=\"form-control\"\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"dob\"\n                        id=\"dob\"\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        value={objValues.dob}\n                        onChange={handleDobChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-3\">\n                    <FormGroup>\n                      <Label>Age</Label>\n                      <input\n                        className=\"form-control\"\n                        type=\"number\"\n                        name=\"age\"\n                        id=\"age\"\n                        value={objValues.age}\n                        disabled={ageDisabled}\n                        onChange={handleAgeChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Phone Number</Label>\n\n                      <PhoneInput\n                        containerStyle={{\n                          width: \"100%\",\n                          border: \"1px solid #014D88\",\n                        }}\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                        country={\"ng\"}\n                        placeholder=\"(234)7099999999\"\n                        minLength={10}\n                        name=\"phoneNumber\"\n                        id=\"phoneNumber\"\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                        value={objValues.phoneNumber}\n                        onChange={(e) => {\n                          checkPhoneNumberBasic(e, \"phoneNumber\");\n                        }}\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                      />\n                      {errors.phoneNumber !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.phoneNumber}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Alternative Phone Number</Label>\n                      <PhoneInput\n                        containerStyle={{\n                          width: \"100%\",\n                          border: \"1px solid #014D88\",\n                        }}\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                        country={\"ng\"}\n                        placeholder=\"(234)7099999999\"\n                        minLength={10}\n                        name=\"altPhoneNumber\"\n                        id=\"altPhoneNumber\"\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                        value={objValues.altPhoneNumber}\n                        onChange={(e) => {\n                          checkPhoneNumberBasic(e, \"altPhoneNumber\");\n                        }}\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Sex *</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"sex\"\n                        id=\"sex\"\n                        value={objValues.sex}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {sexs.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        State <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"state\"\n                        id=\"state\"\n                        onChange={getProvinces}\n                        value={objValues.stateId}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {states.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.name}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.stateId !== \"\" ? (\n                        <span className={classes.error}>{errors.stateId}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        LGA <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lga\"\n                        id=\"lga\"\n                        value={objValues.lga}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {provinces.map((value, index) => (\n                          <option key={index} value={value.id}>\n                            {value.name}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.lga !== \"\" ? (\n                        <span className={classes.error}>{errors.lga}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Address</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"address\"\n                        id=\"address\"\n                        value={objValues.address}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Hang-out spots</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"hangOutSpots\"\n                        id=\"hangOutSpots\"\n                        value={objValues.hangOutSpots}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Relationship to Index Client *</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"relativeToIndexClient\"\n                        id=\"relativeToIndexClient\"\n                        value={objValues.relativeToIndexClient}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {indexTesting.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Do you currently live with this partner? *</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"currentlyLiveWithPartner\"\n                        id=\"currentlyLiveWithPartner\"\n                        value={objValues.currentlyLiveWithPartner}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value={\"true\"}>Yes</option>\n                        <option value={\"false\"}>No</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        As far as you know, has this partner ever tested\n                        positive for HIV *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"partnerTestedPositive\"\n                        id=\"partnerTestedPositive\"\n                        value={objValues.partnerTestedPositive}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever hit, kick, slapped or otherwise\n                        physical hurt you? *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"physicalHurt\"\n                        id=\"physicalHurt\"\n                        value={objValues.physicalHurt}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever threatened to hurt you? *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"threatenToHurt\"\n                        id=\"threatenToHurt\"\n                        value={objValues.threatenToHurt}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever threatened to force you to do\n                        something sexually that made you uncomfortable ? *\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"sexuallyUncomfortable\"\n                        id=\"sexuallyUncomfortable\"\n                        value={objValues.sexuallyUncomfortable}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Notification Method selected*</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"notificationMethod\"\n                        id=\"notificationMethod\"\n                        value={objValues.notificationMethod}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {notificationContact.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">\n                        If contract by which date will partner come for testing?\n                      </Label>\n                      <Input\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"datePartnerCameForTesting\"\n                        id=\"datePartnerCameForTesting\"\n                        value={objValues.datePartnerCameForTesting}\n                        onChange={handleInputChange}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                      {errors.datePartnerComeForTesting !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.datePartnerComeForTesting}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        HIV Status of Index Client{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"currentHivStatus\"\n                        id=\"currentHivStatus\"\n                        value={objValues.currentHivStatus}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"negative\">Negative</option>\n                        <option value=\"positive\">Positive</option>\n                        <option value=\"unknown\">Unknown</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  {objValues.currentHivStatus !== \"\" &&\n                    objValues.currentHivStatus === \"positive\" && (\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"\">\n                            Date Tested?{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <Input\n                            type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                            name=\"dateTested\"\n                            id=\"dateTested\"\n                            value={objValues.dateTested}\n                            onChange={handleInputChange}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.25rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                    )}\n                </>\n              )}\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                  <Button\n                    content=\"Save\"\n                    icon=\"save\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default AddIndexContact;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/ServicesProvided.js",["969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\n\nimport PhoneInput from \"react-phone-input-2\";\nimport { getAllGenders, alphabetOnly } from \"../../../../utility\";\nimport {useHistory} from \"react-router-dom\";\nimport DualListBox from \"react-dual-listbox\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst ServicesProvided = (props) => {\n  const classes = useStyles();\n\n  const [errors, setErrors] = useState({});\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [genders, setGenders] = useState([]);\n    const [serviceNeeded, setServiceNeeded] = useState([]);\n    const [selectedServiceNeeded, setSelectServiceNeeded] = useState([]);\n\n    const [payload, setPayload] = useState({\n        nameOfFacilityProvider: props?.formInfo?.nameOfReceivingFacility,\n        addressOfFacilityProvider: props?.formInfo?.addressOfReceivingFacility || \"\",\n        visitDate: props?.formInfo?.receivingOrganization?.visitDate || \"\",\n        comments: props?.formInfo?.comments || \"\",\n        clientFirstName: props?.patientObj?.personResponseDto?.firstName,\n        clientLastName: props?.patientObj?.personResponseDto?.surname,\n        clientMiddleName: props?.patientObj?.personResponseDto?.otherName,\n        nameOfServiceProvider: props?.formInfo?.receivingOrganization?.nameOfServiceProvider || \"\",\n        signature: props?.formInfo?.receivingOrganization?.signature || \"\",\n        phoneNumber: props?.formInfo?.receivingOrganization?.phoneNumber || \"\",\n        categoryOfService: props?.formInfo?.receivingOrganization?.categoryOfService\n            || {},\n        receivingFacilityLgaName: props?.formInfo?.receivingFacilityLgaName,\n        receivingFacilityStateName: props?.formInfo?.receivingFacilityStateName\n    });\n\n const history = useHistory();\n  const [states1, setStates1] = useState([])\n  const [lgas1, setLGAs1] = useState([])\n  const [facilities1, setFacilities1] = useState([])\n  const [selectedState, setSelectedState] = useState({})\n  const [selectedFacility, setSelectedFacility] = useState({});\n  const [selectedLga, setSelectedLga] = useState({});\n\n    const handleItemClick = (page, completedMenu) => {\n        props.handleItemClick(page);\n        if (props.completed.includes(completedMenu)) {\n        } else {\n            props.setCompleted([...props.completed, completedMenu]);\n        }\n    };\n\n    const checkNumberLimit = (e) => {\n        const limit = 11;\n        const acceptedNumber = e.slice(0, limit);\n        return acceptedNumber;\n    };\n    const handleInputChangePhoneNumber = (e, inputName) => {\n        const limit = 11;\n        const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n        setPayload({ ...payload, [inputName]: NumberValue });\n    };\n\n\n  // ##############################################\n\n    const SERVICE_NEEDED = () => {\n        axios\n            .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            })\n            .then((response) => {\n                if (response.data) {\n                    // create array of objects from the response\n                    const serviceNeeded = response.data.map((service) => {\n                        return {\n                            value: service.display,\n                            label: service.display\n                        }\n                    });\n                    setServiceNeeded(serviceNeeded);\n                    // console.log(\"serviceNeeded\", serviceNeeded)\n                }\n            })\n            .catch((e) => {\n                // handle error\n            });\n    };\n\n    useEffect(() => {\n        // Fetch the saved serviceNeeded from the backend\n        axios.get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\n            headers: { Authorization: `Bearer ${token}` },\n        })\n            .then((response) => {\n                // Convert the serviceNeeded object into an array of its values\n                const serviceNeededArray = Object.values(response.data.serviceNeeded);\n\n                // Set the serviceNeededArray to selectedServiceNeeded state\n                setSelectServiceNeeded(serviceNeededArray);\n            })\n            .catch((error) => {\n                // Handle error...\n            });\n    }, []);\n\n\n  const loadStates1 = () => {\n    axios.get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n        .then((response) => {\n          if (response.data) {\n            setStates1(response.data);\n          }\n        })\n        .catch((e) => {\n          // console.log(\"Fetch states error\" + e);\n        });\n  };\n\n\n\n  const loadLGA1 = (id) => {\n    axios.get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n        .then((response) => {\n          if (response.data) {\n            setLGAs1(response.data);\n            // const selectedLga = response.data.find(lga => lga.id === id);\n            // setPayload(prevPayload => ({ ...prevPayload, lgaTransferTo: selectedLga ? selectedLga.name : \"\" }));\n          }\n\n        })\n        .catch((e) => {\n          // console.log(\"Fetch LGA error\" + e);\n        });\n  };\n\n  const loadFacilities1 = (id) => {\n    axios.get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    })\n        .then((response) => {\n          if (response.data) {\n            setFacilities1(response.data);\n\n          }\n        })\n        .catch((e) => {\n          // console.log(\"Fetch Facilities error\" + e);\n        });\n  };\n\n  const handleInputChangeLocation = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if(e.target.name === 'stateTransferTo'){\n      let filteredState = states1.filter((each)=>{\n        return each.name.toLowerCase()  === e.target.value.toLowerCase()\n      })\n      setPayload({ ...payload, receivingFacilityStateName : e.target.value });\n\n      loadLGA1(filteredState[0].id);\n    }\n    if(e.target.name === 'lgaTransferTo'){\n      let filteredState = lgas1.filter((each)=>{\n        return each.name.toLowerCase()  === e.target.value.toLowerCase()\n      })\n      setPayload({ ...payload, [e.target.name]: e.target.value });\n      loadFacilities1(filteredState[0].id);\n\n    }\n\n  };\n  // ################################################\n  const getGenders = () => {\n    getAllGenders()\n      .then((res) => {\n        setGenders(res);\n      })\n      .catch((e) => {\n        // console.log(\"error\", e);\n      });\n    // ;\n  };\n\n\n  useEffect(() => {\n    getGenders();\n    loadStates1()\n    SERVICE_NEEDED()\n  }, []);\n\n  const checkPhoneNumberBasic = (e, inputName) => {\n    if (e) {\n      setErrors({ ...errors, phoneNumber: \"\" });\n    }\n    const limit = 10;\n    setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\n  };\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"nameOfFacilityProvider\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"addressOfFacilityProvider\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"clientFirstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"clientMiddleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"clientLastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfServiceProvider\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else {\n      setPayload({ ...payload, [e.target.name]: e.target.value });\n    }\n  };\n\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n    temp.nameOfFacilityProvider = payload.nameOfFacilityProvider\n      ? \"\"\n      : \"This field is required.\";\n    temp.addressOfFacilityProvider = payload.addressOfFacilityProvider\n      ? \"\"\n      : \"This field is required.\";\n    temp.visitDate = payload.visitDate ? \"\" : \"This field is required.\";\n    // temp.clientFirstName = payload.clientFirstName\n    //   ? \"\"\n    //   : \"This field is required.\";\n    // temp.clientLastName = payload.clientLastName\n    //   ? \"\"\n    //   : \"This field is required.\";\n    temp.nameOfServiceProvider = payload.nameOfServiceProvider\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.signature = payload.signature ? \"\" : \"This field is required.\";\n    temp.phoneNumber = payload.phoneNumber ? \"\" : \"This field is required.\";\n\n    temp.categoryOfService = payload.categoryOfService\n      ? \"\"\n      : \"This field is required.\";\n     // console.log(\"temp\", temp);\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const data = {\n      htsClientReferralId: props.row.row.id,\n      receivingOrganizationDTO: payload\n    };\n    if (validate()) {\n      try {\n        setSaving(true);\n        await axios.put(`${baseUrl}hts-client-referral/${props.row.row.id}`, data, {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        setSaving(false);\n        toast.success(\"Record saved successfully\", { position: toast.POSITION.BOTTOM_CENTER });\n          props.handleItemClick(\"refferal-history\");\n      } catch (error) {\n        setSaving(false);\n        const errorMessage = error.response?.data?.apierror?.message || \"Something went wrong, please try again\";\n        toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\n      }\n    }\n  };\n\n  return (\n    <>\n      {\" \"}\n      <div>\n        <h2 style={{ color: \"#000\" }}>Client Referral Form </h2>\n        <br />\n        <div className=\"row\">\n          <div\n            className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n            style={{\n              backgroundColor: \"#992E62\",\n              width: \"125%\",\n              height: \"35px\",\n              color: \"#fff\",\n              fontWeight: \"bold\",\n            }}\n          >\n            Referral Form For Services Provided\n          </div>\n\n          <p style={{ color: \"black\", marginBottom: \"20px\" }}>\n            <i>\n              Note: This form should be filled out by the organization providing\n              the service\n            </i>\n          </p>\n          <div className=\"row\">\n            {/*###############################*/}\n            {/*<div className=\"form-group mb-3 col-md-6\">*/}\n            {/*  <FormGroup>*/}\n            {/*    <Label for=\"firstName\">*/}\n            {/*      Facility providing service State*/}\n            {/*    </Label>*/}\n            {/*    <Input*/}\n            {/*        className=\"form-control\"*/}\n            {/*        type=\"text\"*/}\n            {/*        name=\"receivingFacilityStateName\"*/}\n            {/*        id=\"receivingFacilityStateName\"*/}\n            {/*        value={payload.receivingFacilityStateName}*/}\n            {/*        onChange={handleInputChange}*/}\n            {/*        style={{*/}\n            {/*          border: \"1px solid #014D88\",*/}\n            {/*          borderRadius: \"0.2rem\",*/}\n            {/*        }}*/}\n            {/*        disabled*/}\n            {/*    />*/}\n            {/*    {errors.nameOfServiceProvider !== \"\" ? (*/}\n            {/*        <span className={classes.error}>*/}\n            {/*        {errors.nameOfServiceProvider}*/}\n            {/*      </span>*/}\n            {/*    ) : (*/}\n            {/*        \"\"*/}\n            {/*    )}*/}\n            {/*  </FormGroup>*/}\n            {/*</div>*/}\n\n            {/*<div className=\"form-group mb-3 col-md-6\">*/}\n            {/*  <FormGroup>*/}\n            {/*    <Label for=\"firstName\">*/}\n            {/*      Facility providing service LGA*/}\n            {/*    </Label>*/}\n            {/*    <Input*/}\n            {/*        className=\"form-control\"*/}\n            {/*        type=\"text\"*/}\n            {/*        name=\"receivingFacilityLgaName\"*/}\n            {/*        id=\"receivingFacilityLgaName\"*/}\n            {/*        value={payload.receivingFacilityLgaName}*/}\n            {/*        onChange={handleInputChange}*/}\n            {/*        style={{*/}\n            {/*          border: \"1px solid #014D88\",*/}\n            {/*          borderRadius: \"0.2rem\",*/}\n            {/*        }}*/}\n            {/*        disabled*/}\n            {/*    />*/}\n            {/*  </FormGroup>*/}\n            {/*</div>*/}\n\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"firstName\">Facility providing Service</Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"nameOfFacilityProvider\"\n                  id=\"nameOfFacilityProvider\"\n                  value={payload.nameOfFacilityProvider}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  disabled\n                />\n              </FormGroup>\n            </div>\n            {/*###############################*/}\n\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"firstName\">\n                  Address of Facility providing the service{\" \"}\n                  <span style={{ color: \"red\" }}> *</span>\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"addressOfFacilityProvider\"\n                  id=\"addressOfFacilityProvider\"\n                  value={payload.addressOfFacilityProvider}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  // disabled={props.row.action === \"view\" ? true : false}\n                  disabled\n                />\n                {errors.addressOfFacilityProvider !== \"\" ? (\n                  <span className={classes.error}>\n                    {errors.addressOfFacilityProvider}\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </div>\n\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"\">\n                  Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                </Label>\n                <Input\n                  type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                  name=\"visitDate\"\n                  id=\"visitDate\"\n                  value={payload.visitDate}\n                  onChange={handleInputChange}\n                  min={props.formInfo.dateVisit}\n                  max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.25rem\",\n                  }}\n                  disabled={props.row.action === \"view\" ? true : false}\n                />\n                {errors.visitDate !== \"\" ? (\n                  <span className={classes.error}>{errors.visitDate}</span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </div>\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"firstName\">\n                  Client First Name <span style={{ color: \"red\" }}> *</span>\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"clientFirstName\"\n                  id=\"clientFirstName\"\n                  value={payload.clientFirstName}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  // disabled={props.row.action === \"view\" ? true : false}\n                  disabled\n                />\n                {errors.clientFirstName !== \"\" ? (\n                  <span className={classes.error}>\n                    {errors.clientFirstName}\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </div>\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"clientMiddleName\">\n                  Client Middle Name\n                  {/* <span style={{ color: \"red\" }}> *</span> */}\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"clientMiddleName\"\n                  id=\"clientMiddleName\"\n                  value={payload.clientMiddleName}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  // disabled={props.row.action === \"view\" ? true : false}\n                  disabled\n                />\n              </FormGroup>\n            </div>\n\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"clientLastName\">\n                  Client Last Name <span style={{ color: \"red\" }}> *</span>\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"clientLastName\"\n                  id=\"clientLastName\"\n                  value={payload.clientLastName}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  // disabled={props.row.action === \"view\" ? true : false}\n                  disabled\n                />\n                {errors.clientLastName !== \"\" ? (\n                  <span className={classes.error}>{errors.clientLastName}</span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </div>\n\n            <div className=\"form-group mb-3 col-md-12\">\n              <FormGroup>\n                <Label for=\"firstName\">\n                  Comments\n                  {/* <span style={{ color: \"red\" }}> *</span> */}\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"textarea\"\n                  rows=\"4\"\n                  cols=\"7\"\n                  name=\"comments\"\n                  id=\"comments\"\n                  value={payload.comments}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                    height: \"100px\",\n                  }}\n                  disabled={props.row.action === \"view\" ? true : false}\n                />\n                {/* {errors.firstName !== \"\" ? (\n                  <span className={classes.error}>{errors.firstName}</span>\n                ) : (\n                  \"\"\n                )} */}\n              </FormGroup>\n            </div>\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"firstName\">\n                  Name of service provider\n                  <span style={{ color: \"red\" }}> *</span>\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"nameOfServiceProvider\"\n                  id=\"nameOfServiceProvider\"\n                  value={payload.nameOfServiceProvider}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  disabled={props.row.action === \"view\" ? true : false}\n                />\n                {errors.nameOfServiceProvider !== \"\" ? (\n                  <span className={classes.error}>\n                    {errors.nameOfServiceProvider}\n                  </span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </div>\n            <div className=\"form-group mb-3 col-md-6\">\n              <FormGroup>\n                <Label for=\"firstName\">\n                  Signature\n                  <span style={{ color: \"red\" }}> *</span>\n                </Label>\n                <Input\n                  className=\"form-control\"\n                  type=\"text\"\n                  name=\"signature\"\n                  id=\"signature\"\n                  value={payload.signature}\n                  onChange={handleInputChange}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  disabled={props.row.action === \"view\" ? true : false}\n                />\n                {errors.signature !== \"\" ? (\n                  <span className={classes.error}>{errors.signature}</span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </div>\n            <div className=\"form-group  col-md-4\">\n              <FormGroup>\n                <Label>\n                  Phone Number <span style={{ color: \"red\" }}> *</span>\n                </Label>\n                <Input\n                  type=\"text\"\n                  name=\"phoneNumber\"\n                  id=\"phoneNumber\"\n                  onChange={(e) => {\n                    handleInputChangePhoneNumber(e, \"phoneNumber\");\n                  }}\n                  value={payload.phoneNumber}\n                  style={{\n                    border: \"1px solid #014D88\",\n                    borderRadius: \"0.2rem\",\n                  }}\n                  disabled={props.row.action === \"view\" ? true : false}\n                  // required\n                />\n                {errors.phoneNumber !== \"\" ? (\n                  <span className={classes.error}>{errors.phoneNumber}</span>\n                ) : (\n                  \"\"\n                )}\n              </FormGroup>\n            </div>\n            {/*<div className=\"form-group mb-3 col-md-6\">*/}\n            {/*  <FormGroup>*/}\n            {/*    <Label for=\"firstName\">Categories of Services </Label>*/}\n            {/*    <Input*/}\n            {/*      className=\"form-control\"*/}\n            {/*      type=\"text\"*/}\n            {/*      name=\"serviceCategory\"*/}\n            {/*      id=\"serviceCategory\"*/}\n            {/*      value={payload.categoryOfService}*/}\n            {/*      onChange={handleInputChange}*/}\n            {/*      style={{*/}\n            {/*        border: \"1px solid #014D88\",*/}\n            {/*        borderRadius: \"0.2rem\",*/}\n            {/*      }}*/}\n            {/*      disabled*/}\n            {/*    />*/}\n            {/*  </FormGroup>*/}\n            {/*</div>*/}\n              <div className=\"form-group mb-3 col-md-12\">\n                  <FormGroup>\n                      <Label for=\"dualListBox\">\n                          Categories of Services\n                      </Label>\n              <DualListBox\n                  options={serviceNeeded}\n                  selected={selectedServiceNeeded}\n                  onChange={(value) => {\n                      // Update selectedServiceNeeded state\n                      setSelectServiceNeeded(value);\n                      // Convert selectedServiceNeeded array into an object\n                      const serviceNeededObject = value.reduce((obj, item, index) => {\n                          obj[index] = item;\n                          return obj;\n                      }, {});\n                      // Update serviceNeeded in payload\n                      setPayload({ ...payload, categoryOfService: serviceNeededObject });\n                  }}\n                  // disabled={props.row.action === \"view\" ? true : false}\n                  disabled\n              />\n                  </FormGroup>\n              </div>\n          </div>\n          <br />\n\n          <br />\n\n          <br />\n          {props.row.action === \"update\" && (\n            <div className=\"row\">\n              {/*<div className=\"form-group mb-3 col-md-12\">*/}\n              {/*  <Button*/}\n              {/*    content=\"Done\"*/}\n              {/*    type=\"submit\"*/}\n              {/*    // icon=\"right arrow\"*/}\n              {/*    // labelPosition=\"right\"*/}\n              {/*    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}*/}\n              {/*    onClick={() => {*/}\n              {/*      history.push(\"/\");*/}\n              {/*    }}*/}\n              {/*    disabled={saving}*/}\n              {/*  />*/}\n              {/*</div>*/}\n              <div className=\"form-group mb-3 mt-5 col-md-6\">\n                <Button\n                  content=\"Done\"\n                  type=\"submit\"\n                  // icon=\"right arrow\"\n                  // labelPosition=\"right\"\n                  style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                  onClick={handleSubmit}\n                  disabled={saving}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ServicesProvided;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/PartnerNotificationServices/PNSlist.js",["994","995","996","997","998"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../../../api\";\n//import { token as token } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { Modal } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst PNSList = (props) => {\n  let history = useHistory();\n  const [indexClientList, setIndexClientList] = useState([]);\n  const [recordSelected, setRecordSelected] = useState({});\n\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n\n  //const [patientObj, setpatientObj] = useState([])\n  const patientId =\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\n  //const [key, setKey] = useState('home');\n  //console.log(props)\n  useEffect(() => {\n    patients();\n  }, []);\n  ///GET LIST OF Patients\n  async function patients() {\n    axios\n      .get(\n        `${baseUrl}hts-personal-notification-service/${props.patientObj.id}/hts-client`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setIndexClientList(response.data);\n      })\n      .catch((error) => {});\n  }\n  const addNewPns = (e) => {\n    e.preventDefault();\n    props.handleItemClick(\"pns\");\n  };\n  const LoadViewPage = (row, actionType) => {\n    props.handleItemClick(\"view-pns\");\n    props.setRow({ row: row, action: actionType });\n  };\n  const LoadModal = (row) => {\n    toggle();\n    setRecordSelected(row);\n  };\n\n  const enrollEllicitedPatient = (row, actionType) => {\n    console.log(row);\n    let obj = {\n      uuid: row.uuid,\n      type: \"partner\",\n      clientCode: props?.patientObj?.clientCode,\n    };\n    localStorage.setItem(\"index\", JSON.stringify(obj));\n    history.push(\"/register-patient\");\n  };\n  const LoadDeletePage = (row) => {\n    // setSaving(true);\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\n    axios\n      .delete(\n        `${baseUrl}hts-personal-notification-service/${recordSelected.id}`,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        toast.success(\"Record Deleted Successfully\");\n        toggle();\n        patients();\n        // setSaving(false);\n      })\n      .catch((error) => {\n        // setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage);\n        } else {\n          toast.error(\"Something went wrong. Please try again...\");\n        }\n      });\n  };\n  return (\n    <>\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className=\" float-end  mr-2 mt-2\"\n          onClick={(e) => addNewPns(e)}\n          //startIcon={<FaUserPlus size=\"10\"/>}\n        >\n          <span style={{ textTransform: \"capitalize\" }}>Add New PNS </span>\n        </Button>\n        <br />\n        <br />\n        <br />\n        <br />\n        <MaterialTable\n          icons={tableIcons}\n          title=\"List of  client contact\"\n          columns={[\n            { title: \"Partner Name\", field: \"date\" },\n            { title: \"Partner ID\", field: \"age\" },\n            //   { title: \"Phone Number\", field: \"phone\" },\n            { title: \"Partner Address\", field: \"address\" },\n            { title: \"Actions\", field: \"actions\", filtering: false },\n          ]}\n          isLoading={props.loading}\n          data={indexClientList\n            .filter((b) => b.firstName !== \"\")\n            .map((row) => ({\n              date: row.htsClientInformation.partnerName,\n              age: row.partnerId,\n              // phone: row.phoneNumber,\n              address: row.htsClientInformation.partnerAddress,\n              actions: (\n                <div>\n                  <Menu.Menu position=\"right\">\n                    <Menu.Item>\n                      <Button\n                        style={{ backgroundColor: \"rgb(153,46,98)\" }}\n                        primary\n                        onClick={(e) => {\n                          e.preventDefault();\n                        }}\n                      >\n                        <Dropdown\n                          item\n                          text=\"Action\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                          }}\n                        >\n                          <Dropdown.Menu style={{ marginTop: \"10px\" }}>\n                            {row?.isHtsClient === \"No\"  && \n                         <Dropdown.Item\n                            onClick={() =>\n                              enrollEllicitedPatient(row, \"enroll\")\n                            }\n                          >\n                            {\" \"}\n                            <Icon name=\"save\" />\n                            Enroll\n                          </Dropdown.Item>}\n                           \n                           \n                            <Dropdown.Item\n                              onClick={(e) => LoadViewPage(row, \"view\")}\n                            >\n                              {\" \"}\n                              <Icon name=\"eye\" />\n                              View\n                            </Dropdown.Item>\n                            <Dropdown.Item\n                              onClick={() => LoadViewPage(row, \"update\")}\n                            >\n                              <Icon name=\"edit\" />\n                              Edit\n                            </Dropdown.Item>\n                            <Dropdown.Item onClick={() => LoadModal(row)}>\n                              <Icon name=\"delete\" />\n                              Delete\n                            </Dropdown.Item>\n                          </Dropdown.Menu>\n                        </Dropdown>\n                      </Button>\n                    </Menu.Item>\n                  </Menu.Menu>\n                </div>\n              ),\n            }))}\n          options={{\n            headerStyle: {\n              //backgroundColor: \"#9F9FA5\",\n              color: \"#000\",\n            },\n            searchFieldStyle: {\n              width: \"200%\",\n              margingLeft: \"250px\",\n            },\n            filtering: false,\n            exportButton: false,\n            //   searchFieldAlignment: \"left\",\n            pageSizeOptions: [10, 20, 100],\n            pageSize: 10,\n            debounceInterval: 400,\n          }}\n        />\n      </div>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        backdrop=\"static\"\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>\n            Are you Sure you want to delete{\" \"}\n            {/* <b>{row && record.activityName}</b> */}\n          </h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={() => LoadDeletePage(recordSelected)}\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\n            // disabled={saving}\n          >\n            Yes\n            {/* {saving === false ? \"Yes\" : \"Deleting...\"} */}\n          </Button>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n            // disabled={saving}\n          >\n            No\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default PNSList;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/ClientReferral/RefferalUnit.js",["999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../../api\";\n\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport Select from \"react-select\";\n// import { getAcount } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\nimport \"react-dual-listbox/lib/react-dual-listbox.css\";\nimport {\n  getAllStateByCountryId,\n  getAllCountry,\n  getAllProvinces,\n  getAllGenders,\n  alphabetOnly,\n} from \"../../../../../utility\";\nimport { calculate_age } from \"../../../utils\";\nimport { useHistory } from \"react-router-dom\";\nimport DualListBox from \"react-dual-listbox\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst RefferralUnit = (props) => {\n  // console.log(\"props.patientObj\", props.patientObj);\n  const patientObj = props.patientObj;\n  const classes = useStyles();\n  const [errors, setErrors] = useState({});\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n\n  const [states, setStates] = useState([]);\n  const [genders, setGenders] = useState([]);\n  const [hivStatus, setHivStatus] = useState([]);\n  const [serviceNeeded, setServiceNeeded] = useState([]);\n\n  const [facilityName, setFacilityName] = useState(Cookies.get(\"facilityName\"));\n  const [allFacilities, setAllFacilities] = useState([]);\n  // console.log(Cookies.get(\"facilityName\"));\n  const [statesOfTheReceivingFacility, setStateOfTheReceivingFacility] =\n    useState([]);\n  const [lgasOfTheReceivingFacility, setLgasOfTheReceivingFacility] = useState(\n    []\n  );\n  const [receivingFacilities, setReceivingFacilities] = useState([]);\n  const [receivingFacility, setReceivingFacility] = useState([]);\n  const [selectedReceivingState, setSelectedReceivingState] = useState({});\n  const [selectedReceivingFacility, setSelectedReceivingFacility] = useState(\n    {}\n  );\n  const [selectedReceivingLga, setSelectedReceivingLga] = useState({});\n  const history = useHistory();\n  const [selectedServiceNeeded, setSelectServiceNeeded] = useState([]);\n\n  const [payload, setPayload] = useState({\n    dateVisit: props?.formInfo?.dateVisit,\n    firstName: props?.patientObj?.personResponseDto?.firstName,\n    middleName: props?.patientObj?.personResponseDto?.otherName,\n    lastName: props?.patientObj?.personResponseDto?.surname,\n    hospitalNumber:\n      props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\n    countryId: \"1\",\n    stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\n    province: Number(\n      props?.patientObj?.personResponseDto?.address?.address[0]?.district\n    ),\n    address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\n    landmark: \"\",\n    phoneNumber:\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n        ?.value,\n    sexId: props?.patientObj?.personResponseDto?.gender?.id,\n    dob: props?.patientObj.personResponseDto?.dateOfBirth,\n    age: \"\",\n    dateOfBirth: props?.patientObj.personResponseDto?.dateOfBirth,\n    hivStatus: props?.patientObj?.hivTestResult2\n      ? props?.patientObj?.hivTestResult2\n      : props?.patientObj?.hivTestResult\n      ? props?.patientObj?.hivTestResult\n      : \"\",\n    referredFromFacility: props?.formInfo?.referredFromFacility,\n    nameOfPersonReferringClient: props?.formInfo?.nameOfPersonReferringClient,\n    nameOfReferringFacility: props?.formInfo?.nameOfReferringFacility,\n    addressOfReferringFacility: props?.formInfo?.addressOfReferringFacility,\n    phoneNoOfReferringFacility: props?.formInfo?.phoneNoOfReferringFacility,\n    referredTo: props?.formInfo?.referredTo,\n    nameOfContactPerson: props?.formInfo?.nameOfContactPerson,\n    nameOfReceivingFacility: props?.formInfo?.nameOfReceivingFacility,\n    addressOfReceivingFacility: props?.formInfo?.addressOfReceivingFacility,\n    phoneNoOfReceivingFacility: props?.formInfo?.phoneNoOfReceivingFacility,\n    isDateOfBirthEstimated: false,\n    serviceNeeded: props?.formInfo?.serviceNeeded,\n    comments: props?.formInfo?.comments,\n    receivingFacilityStateName: props.formInfo.receivingFacilityStateName,\n    receivingFacilityLgaName: props.formInfo.receivingFacilityLgaName,\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    htsClientUuid: props && props.patientObj ? props.patientObj?.uuid : \"\",\n  });\n\n  // console.log(\"PAYLOAD\", payload);\n  // console.log(\"props.formInfo\", props.formInfo);\n  const loadGenders = useCallback(async () => {\n    getAllGenders()\n      .then((response) => {\n        setGenders(response);\n      })\n      .catch(() => {});\n  }, []);\n  const getReceivinglga = (id) => {\n    getAllProvinces(id)\n      .then((res) => {\n        setLgasOfTheReceivingFacility(res);\n      })\n      .catch((e) => {});\n  };\n\n  const getProvincesWithId = (id) => {\n    getAllProvinces(id)\n      .then((res) => {\n        setProvinces(res);\n      })\n      .catch((e) => {});\n  };\n  useEffect(() => {\n    loadGenders();\n    getCountry();\n    getStateByCountryId();\n\n    if (props?.patientObj?.personResponseDto?.address?.address[0]?.stateId) {\n      getProvincesWithId(\n        props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n      );\n    }\n  }, []);\n\n  //Get list of State\n  const getStateByCountryId = () => {\n    getAllStateByCountryId()\n      .then((res) => {\n        setStates(res);\n\n        let ans = res.filter((each, index) => {\n          return (\n            each.name.toLowerCase() ===\n            props.formInfo.receivingFacilityStateName.toLowerCase()\n          );\n        });\n\n        getReceivinglga(ans[0].id);\n      })\n      .catch(() => {});\n  };\n  const checkPhoneNumberBasic = (e, inputName) => {\n    if (e) {\n      setErrors({ ...errors, phoneNumber: \"\" });\n    }\n    const limit = 10;\n\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\n    } else if (inputName === \"phoneNoOfReferringFacility\") {\n      setPayload({\n        ...payload,\n        phoneNoOfReferringFacility: e.slice(0, limit),\n      });\n    } else if (inputName === \"phoneNoOfReceivingFacility\") {\n      setPayload({ ...payload, phoneNoOfReceivingFacility: e.slice(0, limit) });\n    }\n  };\n\n  // handle Facility Name to slect drop down\n  const handleInputChangeObject = (e) => {\n    // console.log(e);\n    setPayload({\n      ...payload,\n      nameOfReceivingFacility: e.name,\n      addressOfReceivingFacility: e.parentParentOrganisationUnitName,\n      // lgaTransferTo: e.parentOrganisationUnitName,\n    });\n    setErrors({ ...errors, nameOfReceivingFacility: \"\" });\n    // setSelectedState(e.parentParentOrganisationUnitName);\n    // setSelectedLga(e.parentOrganisationUnitName);\n  };\n\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    if (e.target.value) {\n      setErrors({ ...errors, stateId: \"\" });\n    }\n    setPayload({ ...payload, stateId: e.target.value });\n    getAllProvinces(stateId)\n      .then((res) => {\n        setProvinces(res);\n      })\n      .catch((e) => {});\n  };\n  const getCountry = () => {\n    getAllCountry()\n      .then((res) => {\n        setCountries(res);\n      })\n      .catch((e) => {\n        // console.log(e);\n      });\n\n    // console.log(response);\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setPayload({ ...payload, [inputName]: NumberValue });\n  };\n\n  // ########################################################################\n  const loadStates = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setStateOfTheReceivingFacility(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch states error\" + e);\n      });\n  };\n\n  const loadLGA = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setLgasOfTheReceivingFacility(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch LGA error\" + e);\n      });\n  };\n\n  const loadFacilities = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setReceivingFacilities(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const SERVICE_NEEDED = () => {\n    axios\n        .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        })\n        .then((response) => {\n          if (response.data) {\n            // create array of objects from the response\n            const serviceNeeded = response.data.map((service) => {\n              return {\n                value: service.display,\n                label: service.display\n              }\n            });\n            setServiceNeeded(serviceNeeded);\n            // console.log(\"serviceNeeded\", serviceNeeded)\n          }\n        })\n        .catch((e) => {\n          // handle error\n        });\n  };\n\n\n  useEffect(() => {\n    axios.get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    })\n        .then((response) => {\n          // Convert the serviceNeeded object into an array of its values\n          const serviceNeededArray = Object.values(response.data.serviceNeeded);\n\n          // Set the serviceNeededArray to selectedServiceNeeded state\n          setSelectServiceNeeded(serviceNeededArray);\n        })\n        .catch((error) => {\n          // Handle error...\n        });\n  }, []);\n\n  useEffect(() => {\n    loadStates();\n    SERVICE_NEEDED();\n\n    loadLGA();\n  }, []);\n\n  // ###########################################################################\n  //Get list of HIV STATUS ENROLLMENT\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfContactPerson\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfPersonReferringClient\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}patient/exist/hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n        }\n      }\n\n      getHosiptalNumber();\n    } else {\n      setPayload({ ...payload, [e.target.name]: e.target.value });\n    }\n  };\n\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      payload.age = age_now;\n\n      //setpayload({...payload, age: age_now});\n    } else {\n      setPayload({ ...payload, age: \"\" });\n    }\n    setPayload({ ...payload, [e.target.name]: e.target.value });\n\n    setPayload({ ...payload, dob: e.target.value });\n    if (payload.age !== \"\" && payload.age <= 15) {\n      // props.setHideOtherMenu(true);\n    } else if (payload.age !== \"\" && payload.age > 15) {\n      // props.setHideOtherMenu(true);\n    } else {\n      // props.setHideOtherMenu(true);\n    }\n\n    if (payload.age !== \"\" && payload.age >= 85) {\n      toggle();\n    }\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      payload.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      payload.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      if (e.target.value !== \"\" && e.target.value >= 85) {\n        toggle();\n      }\n      if (e.target.value !== \"\" && e.target.value <= 15) {\n        props.setHideOtherMenu(false);\n      } else if (e.target.value !== \"\" && e.target.value > 15) {\n        props.setHideOtherMenu(true);\n      } else {\n        props.setHideOtherMenu(true);\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setPayload({ ...payload, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      payload.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setPayload({ ...payload, age: e.target.value });\n  };\n\n  // const handleItemClick = (page, completedMenu) => {\n  //     props.handleItemClick(page);\n  //     if (props.completed.includes(completedMenu)) {\n  //     } else {\n  //         props.setCompleted([...props.completed, completedMenu]);\n  //     }\n  // };\n  const validate = () => {\n    //HTS FORM VALIDATION\n    temp.dateVisit = payload.dateVisit ? \"\" : \"This field is required.\";\n    temp.firstName = payload.firstName ? \"\" : \"This field is required.\";\n    temp.lastName = payload.lastName ? \"\" : \"This field is required.\";\n    temp.stateId = payload.stateId ? \"\" : \"This field is required.\";\n    temp.province = payload.province ? \"\" : \"This field is required.\";\n    temp.address = payload.address ? \"\" : \"This field is required.\";\n    temp.phoneNumber = payload.phoneNumber ? \"\" : \"This field is required.\";\n    temp.sexId = payload.sexId ? \"\" : \"This field is required.\";\n    temp.dob = payload.dob ? \"\" : \"This field is required.\";\n    // temp.age = payload.age ? \"\" : \"This field is required.\";\n    // temp.hivStatus = payload.hivStatus ? \"\" : \"This field is required.\";\n    // temp.stateTransferTo = payload.receivingFacilityStateName? \"\" : \"This field is required.\";\n    // temp.lgaTransferTo = payload.receivingFacilityLgaName ? \"\" : \"This field is required.\";\n    // temp.stateTransferTo = payload.receivingFacilityStateName ? \"\" : \"This field is required.\";\n    temp.facilityTransferTo = payload.nameOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.referredFromFacility = payload.referredFromFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.nameOfPersonReferringClient = payload.nameOfPersonReferringClient\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.nameOfReferringFacility = payload.nameOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.addressOfReferringFacility = payload.addressOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.phoneNoOfReferringFacility = payload.phoneNoOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.nameOfContactPerson = payload.nameOfContactPerson\n      ? \"\"\n      : \"This field is required.\";\n    temp.nameOfReceivingFacility = payload.nameOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.addressOfReceivingFacility = payload.addressOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.phoneNoOfReceivingFacility = payload.phoneNoOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.serviceNeeded = payload.serviceNeeded ? \"\" : \"This field is required.\";\n    // console.log(\"temp\", temp);\n    temp.referredTo = payload.referredTo ? \"\" : \"This field is required.\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const postPayload = (payload) => {\n    axios\n      .post(`${baseUrl}risk-stratification`, payload, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSaving(false);\n\n        //toast.success(\"Risk stratification save succesfully!\");\n      })\n      .catch((error) => {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage, {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        } else {\n          toast.error(\"Something went wrong. Please try again...\", {\n            position: toast.POSITION.BOTTOM_CENTER,\n          });\n        }\n      });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (validate()) {\n      try {\n        setSaving(true);\n        await axios.put(\n          `${baseUrl}hts-client-referral/update-hts-client-referral/${props.row.row.id}`,\n          payload,\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n        setSaving(false);\n        toast.success(\"Record saved successfully\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        props.handleItemClick(\"refferal-history\");\n        // history.push(\"/\")\n      } catch (error) {\n        setSaving(false);\n        // console.log(\"error\", error);\n        const errorMessage =\n          error.response?.data?.apierror?.message ||\n          \"Something went wrong, please try again\";\n        toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>\n            Client Referral Form -{\" \"}\n            {props.row.action === \"update\" ? \"Update\" : \"View\"}{\" \"}\n          </h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Referral Form For Referring Unit\n              </div>\n\n              <p style={{ color: \"black\", marginBottom: \"20px\" }}>\n                <i>\n                  Note: This form is to be filed by the organization making the\n                  referral (Referring unit or organization)\n                </i>\n              </p>\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Date <span style={{color: \"red\"}}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"dateVisit\"\n                        id=\"dateVisit\"\n                        value={payload.dateVisit}\n                        onChange={handleInputChange}\n                        min=\"1929-12-31\"\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.dateVisit !== \"\" ? (\n                        <span className={classes.error}>{errors.dateVisit}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      First Name <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"firstName\"\n                        value={payload.firstName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                    />\n                    {errors.firstName !== \"\" ? (\n                        <span className={classes.error}>{errors.firstName}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>Middle Name</Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"middleName\"\n                        id=\"middleName\"\n                        value={payload.middleName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                    />\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Last Name <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={payload.lastName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                    />\n                    {errors.lastName !== \"\" ? (\n                        <span className={classes.error}>{errors.lastName}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"patientId\">\n                      Hospital Number <span style={{color: \"red\"}}> *</span>{\" \"}\n                    </Label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"hospitalNumber\"\n                        id=\"hospitalNumber\"\n                        value={payload.hospitalNumber}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                    />\n                    {errors.hospitalNumber !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.hospitalNumber}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                    {hospitalNumStatus === true ? (\n                        <span className={classes.error}>\n                        {\"Hospital number already exist\"}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                    {/* {hospitalNumStatus2===true ? (\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\n                                                    ) :\"\"} */}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Country <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <select\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"countryId\"\n                        id=\"countryId\"\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        value={payload.countryId}\n                        disabled\n                        //onChange={getStates}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {countries.map((value, index) => (\n                          <option key={index} value={value.id}>\n                            {value.name}\n                          </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      State <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <select\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"stateId\"\n                        id=\"stateId\"\n                        value={payload.stateId}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        onChange={getProvinces}\n                        disabled\n                    >\n                      <option value=\"\">Select</option>\n                      {states.map((value, index) => (\n                          <option key={index} value={value.id}>\n                            {value.name}\n                          </option>\n                      ))}\n                    </select>\n                    {errors.stateId !== \"\" ? (\n                        <span className={classes.error}>{errors.stateId}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Province/District/LGA{\" \"}\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <select\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"province\"\n                        id=\"province\"\n                        value={payload.province}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                        onChange={handleInputChange}\n                    >\n                      <option value=\"\">Select</option>\n                      {provinces.map((value, index) => (\n                          <option key={index} value={value.id}>\n                            {value.name}\n                          </option>\n                      ))}\n                    </select>\n                    {errors.province !== \"\" ? (\n                        <span className={classes.error}>{errors.province}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Street Address <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"address\"\n                        id=\"address\"\n                        value={payload.address}\n                        disabled\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                    />\n                    {errors.address !== \"\" ? (\n                        <span className={classes.error}>{errors.address}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Landmark</Label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"landmark\"\n                        id=\"landmark\"\n                        value={payload.landmark}\n                        disabled\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                    />\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        type=\"text\"\n                        name=\"phoneNumber\"\n                        id=\"phoneNumber\"\n                        onChange={(e) => {\n                          handleInputChangePhoneNumber(e, \"phoneNumber\");\n                        }}\n                        value={payload.phoneNumber}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                        // required\n                    />\n                    {errors.phoneNumber !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.phoneNumber}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Sex <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <select\n                        className=\"form-control\"\n                        name=\"sexId\"\n                        id=\"sexId\"\n                        onChange={handleInputChange}\n                        value={payload.sexId}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                    >\n                      <option value={\"\"}>Select</option>\n                      {genders &&\n                          genders.map((gender, index) => (\n                              <option key={gender.id} value={gender.id}>\n                                {gender.display}\n                              </option>\n                          ))}\n                    </select>\n                    {errors.sexId !== \"\" ? (\n                        <span className={classes.error}>{errors.sexId}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/* <div className=\"form-group mb-2 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Date Of Birth <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <div className=\"radio\">\n                      <label>\n                        <input\n                          type=\"radio\"\n                          value=\"Actual\"\n                          name=\"dateOfBirth\"\n                          defaultChecked\n                          onChange={(e) => handleDateOfBirthChange(e)}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />{\" \"}\n                        Actual\n                      </label>\n                    </div>\n                    <div className=\"radio\">\n                      <label>\n                        <input\n                          type=\"radio\"\n                          value=\"Estimated\"\n                          name=\"dateOfBirth\"\n                          onChange={(e) => handleDateOfBirthChange(e)}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        />{\" \"}\n                        Estimated\n                      </label>\n                    </div>\n                  </FormGroup>\n                </div> */}\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Date Of Birth<span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <input\n                        className=\"form-control\"\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"dob\"\n                        id=\"dob\"\n                        min=\"1929-12-31\"\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        value={payload.dob}\n                        onChange={handleDobChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                    />\n                    {errors.dob !== \"\" ? (\n                        <span className={classes.error}>{errors.dob}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Age <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <input\n                        className=\"form-control\"\n                        type=\"number\"\n                        name=\"age\"\n                        id=\"age\"\n                        disabled={ageDisabled}\n                        onChange={payload.age}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        value={calculate_age(\n                            props?.patientObj.personResponseDto?.dateOfBirth\n                                ? props?.patientObj?.personResponseDto?.dateOfBirth\n                                : props?.patientObj?.personResponseDto?.dateOfBirth\n                        )}\n                    />\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      HIV Status<span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"hivStatus\"\n                        id=\"hivStatus\"\n                        value={payload.hivStatus}\n                        disabled={ageDisabled}\n                        onChange={handleAgeChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                    />\n                    {/*<select*/}\n                    {/*  className=\"form-control\"*/}\n                    {/*  name=\"hivStatus\"*/}\n                    {/*  id=\"hivStatus\"*/}\n                    {/*  onChange={handleInputChange}*/}\n                    {/*  value={payload.hivStatus}*/}\n                    {/*  style={{*/}\n                    {/*    border: \"1px solid #014D88\",*/}\n                    {/*    borderRadius: \"0.2rem\",*/}\n                    {/*  }}*/}\n                    {/*>*/}\n                    {/*<option value={\"\"}>Select</option>*/}\n                    {/*{hivStatus.map((gender, index) => (*/}\n                    {/*  <option key={gender.id} value={gender.id}>*/}\n                    {/*    {gender.display}*/}\n                    {/*  </option>*/}\n                    {/*))}*/}\n                    {/*</select>*/}\n                    {errors.hivStatus !== \"\" ? (\n                        <span className={classes.error}>{errors.hivStatus}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Referred from (Department):\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        name=\"referredFromFacility\"\n                        id=\"referredFromFacility\"\n                        value={payload.referredFromFacility}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n\n                    {errors.referredFromFacility !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.referredFromFacility}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Name of Person Referring Client\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"nameOfPersonReferringClient\"\n                        id=\"nameOfPersonReferringClient\"\n                        value={payload.nameOfPersonReferringClient}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.nameOfPersonReferringClient !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.nameOfPersonReferringClient}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Name of Referring Facility\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"nameOfReferringFacility\"\n                        id=\"nameOfReferringFacility\"\n                        value={payload.nameOfReferringFacility}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled\n                    />\n                    {errors.nameOfReferringFacility !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.nameOfReferringFacility}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Address of Referring Facility\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"addressOfReferringFacility\"\n                        id=\"addressOfReferringFacility\"\n                        value={payload.addressOfReferringFacility}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.addressOfReferringFacility !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.addressOfReferringFacility}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number of Referring Facility{\" \"}\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        type=\"text\"\n                        name=\"phoneNoOfReferringFacility\"\n                        id=\"phoneNoOfReferringFacility\"\n                        onChange={(e) => {\n                          handleInputChangePhoneNumber(\n                              e,\n                              \"phoneNoOfReferringFacility\"\n                          );\n                        }}\n                        value={payload.phoneNoOfReferringFacility}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.phoneNoOfReferringFacility !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.phoneNoOfReferringFacility}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Referred to (Department)\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"referredTo\"\n                        id=\"referredTo\"\n                        value={payload.referredTo}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.referredTo !== \"\" ? (\n                        <span className={classes.error}>{errors.referredTo}</span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Name of Contact Person:\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"nameOfContactPerson\"\n                        id=\"nameOfContactPerson\"\n                        value={payload.nameOfContactPerson}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.nameOfContactPerson !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.nameOfContactPerson}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/* props.row.action === \"update\" && */}\n                {\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label\n                          for=\"\"\n                          style={{color: \"#014d88\", fontWeight: \"bolder\"}}\n                      >\n                        Receiving Facility State{\" \"}\n                        <span style={{color: \"red\"}}> *</span>{\" \"}\n                      </Label>\n                      <Input\n                          type=\"select\"\n                          name=\"stateId\"\n                          style={{\n                            height: \"40px\",\n                            border: \"solid 1px #014d88\",\n                            borderRadius: \"5px\",\n                            fontWeight: \"bolder\",\n                            appearance: \"auto\",\n                          }}\n                          required\n                          disabled={props.row.action === \"view\" ? true : false}\n                          onChange={(e) => {\n                            if (e.target.value !== \"\") {\n                              const filterState =\n                                  statesOfTheReceivingFacility.filter((st) => {\n                                    return st.name === e.target.value;\n                                  });\n                              setSelectedReceivingState(filterState);\n\n                              setPayload((prevPayload) => ({\n                                ...prevPayload,\n                                receivingFacilityStateName: filterState[0].name,\n                              }));\n\n                              getReceivinglga(filterState[0].id);\n                            }\n                          }}\n                          value={payload.receivingFacilityStateName}\n                      >\n                        {/*{console.log(*/}\n                        {/*    \"receivng\",*/}\n                        {/*    payload.receivingFacilityStateName*/}\n                        {/*)}*/}\n                        <option>Select State</option>\n                        {states.map((state) => (\n                            <option key={state?.id} value={state?.name}>\n                              {state.name}\n                            </option>\n                        ))}\n                      </Input>\n                    </FormGroup>\n                  </div>\n                }\n                {/* props.row.action === \"update\" &&  */}\n                {\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label\n                          for=\"\"\n                          style={{color: \"#014d88\", fontWeight: \"bolder\"}}\n                      >\n                        {\" \"}\n                        Receiving Facility LGA{\" \"}\n                        <span style={{color: \"red\"}}> *</span>\n                      </Label>\n                      <Input\n                          type=\"select\"\n                          name=\" receivingFacilityLgaName\"\n                          style={{\n                            height: \"40px\",\n                            border: \"solid 1px #014d88\",\n                            borderRadius: \"5px\",\n                            fontWeight: \"bolder\",\n                            appearance: \"auto\",\n                          }}\n                          required\n                          disabled={props.row.action === \"view\" ? true : false}\n                          value={payload.receivingFacilityLgaName}\n                          onChange={(e) => {\n                            if (e.target.value !== \"\") {\n                              const filterlga = lgasOfTheReceivingFacility.filter(\n                                  (lg) => {\n                                    return lg.name === e.target.value;\n                                  }\n                              );\n                              setSelectedReceivingLga(filterlga);\n                              setPayload((prevPayload) => ({\n                                ...prevPayload,\n                                receivingFacilityLgaName: filterlga[0].name,\n                              }));\n                              loadFacilities(filterlga[0].id);\n                            }\n                          }}\n                      >\n                        {/*{console.log(\"receivng\", payload.receivingFacilityLgaName)}*/}\n                        <option>Select LGA</option>\n                        {lgasOfTheReceivingFacility.map((lga) => (\n                            <option key={lga.id} value={lga.name}>\n                              {lga.name}\n                            </option>\n                        ))}\n                      </Input>\n                      {errors.lgaId !== \"\" ? (\n                          <span className={classes.error}>{errors.lgaId}</span>\n                      ) : (\n                          \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                }\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                        for=\"\"\n                        style={{color: \"#014d88\", fontWeight: \"bolder\"}}\n                    >\n                      Name of Receiving Facility\n                      <span style={{color: \"red\"}}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                        type=\"select\"\n                        name=\"nameOfReceivingFacility\"\n                        style={{\n                          height: \"40px\",\n                          border: \"solid 1px #014d88\",\n                          borderRadius: \"5px\",\n                          fontWeight: \"bolder\",\n                          appearance: \"auto\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                        //   disabled\n                        // required\n                        value={payload.nameOfReceivingFacility}\n                        onChange={handleInputChange}\n                    >\n                      <option>Select State</option>\n                      {receivingFacilities.length > 0 &&\n                          receivingFacilities.map((fa) => (\n                              <option key={fa.id} value={fa.name}>\n                                {fa.name}\n                              </option>\n                          ))}\n\n                      {receivingFacilities.length < 1 && (\n                          <option\n                              key={3}\n                              value={payload?.nameOfReceivingFacility}\n                          >\n                            {payload?.nameOfReceivingFacility}\n                          </option>\n                      )}\n                    </Input>\n                    {errors.nameOfReceivingFacility !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.nameOfReceivingFacility}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Address of the Receiving Facility\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"addressOfReceivingFacility\"\n                        id=\"addressOfReceivingFacility\"\n                        value={payload.addressOfReceivingFacility}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.addressOfReceivingFacility !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.addressOfReceivingFacility}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone No of Receiving Facility\n                      <span style={{color: \"red\"}}> *</span>\n                    </Label>\n                    <Input\n                        type=\"text\"\n                        name=\"phoneNoOfReceivingFacility\"\n                        id=\"phoneNoOfReceivingFacility\"\n                        onChange={(e) => {\n                          handleInputChangePhoneNumber(\n                              e,\n                              \"phoneNoOfReceivingFacility\"\n                          );\n                        }}\n                        value={payload.phoneNoOfReceivingFacility}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {errors.phoneNoOfReceivingFacility !== \"\" ? (\n                        <span className={classes.error}>\n                        {errors.phoneNoOfReceivingFacility}\n                      </span>\n                    ) : (\n                        \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/*<div className=\"form-group mb-3 col-md-4\">*/}\n                {/*  <FormGroup>*/}\n                {/*    <Label for=\"firstName\">*/}\n                {/*      Services needed*/}\n                {/*      <span style={{ color: \"red\" }}> *</span>*/}\n                {/*    </Label>*/}\n                {/*    <select*/}\n                {/*      className=\"form-control\"*/}\n                {/*      name=\"serviceNeeded\"*/}\n                {/*      id=\"serviceNeeded\"*/}\n                {/*      onChange={handleInputChange}*/}\n                {/*      value={payload.serviceNeeded}*/}\n                {/*      style={{*/}\n                {/*        border: \"1px solid #014D88\",*/}\n                {/*        borderRadius: \"0.2rem\",*/}\n                {/*      }}*/}\n                {/*      disabled={props.row.action === \"view\" ? true : false}*/}\n                {/*    >*/}\n                {/*      <option value={\"\"}>Select Service</option>*/}\n                {/*      {serviceNeeded.map((value, index) => (*/}\n                {/*        <option key={value.id} value={value.code}>*/}\n                {/*          {value.display}*/}\n                {/*        </option>*/}\n                {/*      ))}*/}\n                {/*    </select>*/}\n\n                {/*    {errors.serviceNeeded !== \"\" ? (*/}\n                {/*      <span className={classes.error}>*/}\n                {/*        {errors.serviceNeeded}*/}\n                {/*      </span>*/}\n                {/*    ) : (*/}\n                {/*      \"\"*/}\n                {/*    )}*/}\n                {/*  </FormGroup>*/}\n                {/*</div>*/}\n\n                <div className=\"form-group mb-3 col-md-12\">\n                  <DualListBox\n                      options={serviceNeeded}\n                      selected={selectedServiceNeeded}\n                      disabled={props.row.action === \"view\" ? true : false}\n                      onChange={(value) => {\n                        // Update selectedServiceNeeded state\n                        setSelectServiceNeeded(value);\n                        // Convert selectedServiceNeeded array into an object\n                        const serviceNeededObject = value.reduce(\n                            (obj, item, index) => {\n                              obj[index] = item;\n                              return obj;\n                            },\n                            {}\n                        );\n\n                        // Update serviceNeeded in payload\n                        setPayload({\n                          ...payload,\n                          serviceNeeded: serviceNeededObject,\n                        });\n                      }}\n                  />\n                </div>\n\n\n                <div className=\"form-group mb-3 col-md-12\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Comments\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\n                    </Label>\n                    <Input\n                        className=\"form-control\"\n                        type=\"textarea\"\n                        rows=\"4\"\n                        cols=\"7\"\n                        name=\"comments\"\n                        id=\"comments\"\n                        value={payload.comments}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                          height: \"100px\",\n                        }}\n                        disabled={props.row.action === \"view\" ? true : false}\n                    />\n                    {/* {errors.firstName !== \"\" ? (\n                      <span className={classes.error}>{errors.firstName}</span>\n                    ) : (\n                      \"\"\n                    )} */}\n                  </FormGroup>\n                </div>\n              </div>\n              <br/>\n\n              <br/>\n\n              {/* <hr /> */}\n              {saving ? <Spinner/> : \"\"}\n              <br/>\n              {props.row.action === \"update\" && (\n                  <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-6\">\n                      <Button\n                          content=\"Update\"\n                          type=\"submit\"\n                          icon=\"right arrow\"\n                          labelPosition=\"right\"\n                          style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\n                          onClick={handleSubmit}\n                          disabled={saving}\n                      />\n                    </div>\n                  </div>\n              )}\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <Modal\n          show={open}\n          toggle={toggle}\n          className=\"fade\"\n          size=\"sm\"\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default RefferralUnit;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistration/FeedbackModal.js",["1031","1032","1033","1034","1035","1036"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { Modal } from \"react-bootstrap\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst styles = {\n  color: \"#f85032\",\n  fontSize: \"11px\",\n};\n\nconst FeedbackModal = ({\n  openModal,\n  toggleModal,\n  setOpenModal,\n  predictionValue,\n  clientId,\n  setSavingFeedback,\n}) => {\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  let temp = { ...errors };\n\n  const [payload, setPayload] = useState({\n    facilityId: 0,\n    patientId: clientId,\n    primaryBasisToTest: \"\",\n    clientTestedDespiteLowRiskScore: \"\",\n    reasonForTestingDespiteLowRiskScore: \"\",\n    clientTestedDespiteHighRiskScore: \"\",\n    mainReasonForTestingThisClient: \"\",\n    optionMainReasonForTestingThisClient: \"\",\n    mainReasonForNotTestingThisClient: \"\",\n    optionMainReasonForNotTestingThisClient: \"\",\n    riskScoreContributeToTheClinicalDecision: \"\",\n  });\n\n  const validate = () => {\n    const temp = { ...errors };\n\n    temp.primaryBasisToTest = payload.primaryBasisToTest\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.clientTestedDespiteLowRiskScore =\n      payload.clientTestedDespiteLowRiskScore ? \"\" : \"This field is required.\";\n\n    temp.reasonForTestingDespiteLowRiskScore =\n      payload.reasonForTestingDespiteLowRiskScore\n        ? \"\"\n        : \"This field is required.\";\n\n    temp.creasonForTestingDespiteLowRiskScore =\n      payload.reasonForTestingDespiteLowRiskScore\n        ? \"\"\n        : \"This field is required.\";\n\n    temp.clientTestedDespiteHighRiskScore =\n      payload.clientTestedDespiteHighRiskScore ? \"\" : \"This field is required.\";\n\n    temp.mainReasonForTestingThisClient = payload.mainReasonForTestingThisClient\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.optionMainReasonForTestingThisClient =\n      payload.optionMainReasonForTestingThisClient\n        ? \"\"\n        : \"This field is required.\";\n\n    temp.mainReasonForNotTestingThisClient =\n      payload.mainReasonForNotTestingThisClient\n        ? \"\"\n        : \"This field is required.\";\n\n    temp.optionMainReasonForNotTestingThisClient =\n      payload.optionMainReasonForNotTestingThisClient\n        ? \"\"\n        : \"This field is required.\";\n\n    temp.riskScoreContributeToTheClinicalDecision =\n      payload.riskScoreContributeToTheClinicalDecision\n        ? \"\"\n        : \"This field is required.\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const handlePayload = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    e.preventDefault();\n    setPayload({\n      ...payload,\n      [e.target.name]: e.target.value,\n    });\n    if (e.target.name === \"primaryBasisToTest\") {\n      setErrors({\n        ...temp,\n        clientTestedDespiteLowRiskScore: \"\",\n        reasonForTestingDespiteLowRiskScore: \"\",\n      });\n    }\n  };\n\n  const handleSubmitFeedback = (e) => {\n    e.preventDefault();\n\n    //if (validate()) {\n    setSaving(true);\n    axios\n      .post(`${baseUrl}feedback`, payload, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((resp) => {\n        console.log(\"ML Feedback Submitted\", resp);\n\n        toast.success(`HTS ML Feedback Submitted Sucessfully`, {\n          position: toast.POSITION.BOTTOM_CENTER,\n          duration: 3000,\n        });\n        setSaving(false);\n        setOpenModal(!openModal);\n        setSavingFeedback(true);\n      })\n      .catch((err) => {\n        toast.error(`Something went wrong. Please try again...${err}`, {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        setSaving(false);\n      });\n    //}\n  };\n\n  return (\n    <>\n      <Modal\n        show={openModal}\n        toggle={toggleModal}\n        className=\"fade\"\n        size=\"xl\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Body>\n          <Card className={classes.root}>\n            <CardBody>\n              <h2 style={{ color: \"#000\" }}>HTS ML FEEDBACK QUESTIONS</h2>\n              <br />\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              ></LabelRibbon>\n              <form>\n                <div className=\"row mt-5\">\n                  <div className=\"form-group col-md-4\">\n                    <FormGroup>\n                      <Label for=\"primaryBasisToTest? \">\n                        What was the primary basis for your decision to test or\n                        not test this client?{\" \"}\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        id=\"primaryBasisToTest\"\n                        name=\"primaryBasisToTest\"\n                        onChange={handlePayload}\n                        value={payload?.primaryBasisToTest}\n                      >\n                        <option value=\"\">Select</option>\n                        <option value=\"ML risk score\">ML risk score</option>\n                        <option value=\"Clinical judgment\">\n                          Clinical judgment\n                        </option>\n                        <option value=\"Client history\">Client history</option>\n                        <option value=\"External factors\">\n                          External factors\n                        </option>\n                      </select>\n                      {errors.primaryBasisToTest !== \"\" ? (\n                        <span style={styles}>{errors.primaryBasisToTest}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  {parseFloat(predictionValue) < 0.005575358 && (\n                    <>\n                      <div className=\"form-group col-md-4\">\n                        <FormGroup>\n                          <Label for=\"clientTestedDespiteLowRiskScore ? \">\n                            Was the client tested despite a low-risk score{\" \"}\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            id=\"clientTestedDespiteLowRiskScore\"\n                            name=\"clientTestedDespiteLowRiskScore\"\n                            onChange={handlePayload}\n                            value={payload?.clientTestedDespiteLowRiskScore}\n                          >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                          </select>\n                          {errors.clientTestedDespiteLowRiskScore !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.clientTestedDespiteLowRiskScore}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      {payload?.clientTestedDespiteLowRiskScore === \"Yes\" && (\n                        <div className=\"form-group col-md-4\">\n                          <FormGroup>\n                            <Label for=\"reasonForTestingDespiteLowRiskScore\">\n                              What was the main reason for testing despite a\n                              low-risk score?\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              id=\"reasonForTestingDespiteLowRiskScore\"\n                              name=\"reasonForTestingDespiteLowRiskScore\"\n                              onChange={handlePayload}\n                              value={\n                                payload?.reasonForTestingDespiteLowRiskScore\n                              }\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Clinical symptoms\">\n                                Clinical symptoms\n                              </option>\n                              <option value=\"Client’s request\">\n                                Client’s request\n                              </option>\n                              <option value=\"High exposure risk\">\n                                High exposure risk\n                              </option>\n                              <option value=\"Others – Free text to specify\">\n                                Others – Free text to specify\n                              </option>\n                            </select>\n                            {errors.reasonForTestingDespiteLowRiskScore !==\n                            \"\" ? (\n                              <span className={classes.error}>\n                                {errors.reasonForTestingDespiteLowRiskScore}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                      {payload?.clientTestedDespiteLowRiskScore === \"Yes\" &&\n                        payload?.reasonForTestingDespiteLowRiskScore ===\n                          \"Others – Free text to specify\" && (\n                          <div className=\"form-group col-md-4\">\n                            <FormGroup>\n                              <Label for=\"optionMainReasonForTestingThisClient \">\n                                Free text to specify?{\" \"}\n                              </Label>\n                              <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                id=\"optionMainReasonForTestingThisClient?\"\n                                name=\"optionMainReasonForTestingThisClient\"\n                                onChange={handlePayload}\n                                value={\n                                  payload?.optionMainReasonForTestingThisClient\n                                }\n                              />\n\n                              {errors.optionMainReasonForTestingThisClient !==\n                              \"\" ? (\n                                <span style={styles}>\n                                  {errors.optionMainReasonForTestingThisClient}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                        )}\n                    </>\n                  )}\n                  {parseFloat(predictionValue) > 0.02719647 && (\n                    <>\n                      <div className=\"form-group col-md-4\">\n                        <FormGroup>\n                          <Label for=\"clientTestedDespiteHighRiskScore \">\n                            Was the client Tested with a high-risk score?{\" \"}\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            id=\"clientTestedDespiteHighRiskScore\"\n                            name=\"clientTestedDespiteHighRiskScore\"\n                            onChange={handlePayload}\n                            value={payload?.clientTestedDespiteHighRiskScore}\n                          >\n                            <option value=\"\">Select</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                          </select>\n                          {errors.clientTestedDespiteHighRiskScore !== \"\" ? (\n                            <span style={styles}>\n                              {errors.clientTestedDespiteHighRiskScore}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      {payload?.clientTestedDespiteHighRiskScore === \"Yes\" && (\n                        <div className=\"form-group col-md-4\">\n                          <FormGroup>\n                            <Label for=\"mainReasonForTestingThisClient \">\n                              What was the main reason for testing this client?{\" \"}\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              id=\" mainReasonForTestingThisClient?\"\n                              name=\"mainReasonForTestingThisClient\"\n                              onChange={handlePayload}\n                              value={payload?.mainReasonForTestingThisClient}\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Trust in the ML score\">\n                                Trust in the ML score\n                              </option>\n                              <option value=\"Symptoms\">Symptoms</option>\n                              <option value=\"Client Choice\">\n                                Client Choice\n                              </option>\n                              <option value=\"Health-care provider’s decision\">\n                                Health-care provider’s decision\n                              </option>\n                              <option value=\"Other priorities\">\n                                Other priorities\n                              </option>\n                            </select>\n                            {errors.mainReasonForTestingThisClient !== \"\" ? (\n                              <span style={styles}>\n                                {errors.mainReasonForTestingThisClient}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                      {(payload?.mainReasonForTestingThisClient ===\n                        \"Health-care provider’s decision\" ||\n                        payload?.mainReasonForTestingThisClient ===\n                          \"Other priorities\") && (\n                        <div className=\"form-group col-md-4\">\n                          <FormGroup>\n                            <Label for=\"optionMainReasonForTestingThisClient \">\n                              optional main reason?{\" \"}\n                            </Label>\n                            <input\n                              className=\"form-control\"\n                              type=\"text\"\n                              id=\"optionMainReasonForTestingThisClient?\"\n                              name=\"optionMainReasonForTestingThisClient\"\n                              onChange={handlePayload}\n                              value={\n                                payload?.optionMainReasonForTestingThisClient\n                              }\n                            />\n\n                            {errors.optionMainReasonForTestingThisClient !==\n                            \"\" ? (\n                              <span style={styles}>\n                                {errors.optionMainReasonForTestingThisClient}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                      {payload?.clientTestedDespiteHighRiskScore === \"No\" && (\n                        <div className=\"form-group col-md-4\">\n                          <FormGroup>\n                            <Label for=\"mainReasonForNotTestingThisClient \">\n                              {\" \"}\n                              What was the main reason for not testing this\n                              client?\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              id=\"mainReasonForNotTestingThisClient?\"\n                              name=\"mainReasonForNotTestingThisClient\"\n                              onChange={handlePayload}\n                              value={payload?.mainReasonForNotTestingThisClient}\n                            >\n                              <option value=\"\">Select</option>\n                              <option value=\"Lack of trust in the ML score\">\n                                Lack of trust in the ML score\n                              </option>\n                              <option value=\"No noticeable symptoms\">\n                                No noticeable symptoms\n                              </option>\n                              <option value=\"Client refusal\">\n                                Client refusal\n                              </option>\n                              <option value=\"Health-care provider’s decision\">\n                                {\" \"}\n                                Health-care provider’s decision\n                              </option>\n                            </select>\n                            {errors.mainReasonForNotTestingThisClient !== \"\" ? (\n                              <span style={styles}>\n                                {errors.mainReasonForNotTestingThisClient}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                      {payload?.mainReasonForNotTestingThisClient ===\n                        \"Health-care provider’s decision\" && (\n                        <div className=\"form-group col-md-4\">\n                          <FormGroup>\n                            <Label for=\"optionMainReasonForNotTestingThisClient \">\n                              optional Reason For Not Testing?\n                            </Label>\n                            <input\n                              className=\"form-control\"\n                              type=\"text\"\n                              id=\"optionMainReasonForNotTestingThisClient?\"\n                              name=\"optionMainReasonForNotTestingThisClient\"\n                              onChange={handlePayload}\n                              value={\n                                payload?.optionMainReasonForNotTestingThisClient\n                              }\n                            />\n                            {errors.optionMainReasonForNotTestingThisClient !==\n                            \"\" ? (\n                              <span style={styles}>\n                                {errors.optionMainReasonForNotTestingThisClient}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    </>\n                  )}\n                    <div className=\"form-group col-md-4\">\n                      <FormGroup>\n                        <Label for=\"riskScoreContributeToTheClinicalDecision \">\n                          Did the ML model risk score contribute to the\n                          clinical decision-making regarding testing for this\n                          client?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          id=\"riskScoreContributeToTheClinicalDecision?\"\n                          name=\"riskScoreContributeToTheClinicalDecision\"\n                          onChange={handlePayload}\n                          value={\n                            payload?.riskScoreContributeToTheClinicalDecision\n                          }\n                        >\n                          <option value=\"\">Select</option>\n                          <option value=\"Yes, significantly\">\n                            Yes, significantly\n                          </option>\n                          <option value=\"Yes, slightly \">Yes, slightly</option>\n                          <option value=\"No change\">No change</option>\n                          <option value=\"Caused doubt\">Caused doubt</option>\n                        </select>\n                        {errors.riskScoreContributeToTheClinicalDecision !==\n                        \"\" ? (\n                          <span style={styles}>\n                            {errors.riskScoreContributeToTheClinicalDecision}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  <br />\n\n                  <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-6 mt-5\">\n                      <Button\n                        content=\"Cancel\"\n                        type=\"reset\"\n                        icon=\"cancel\"\n                        labelPosition=\"right\"\n                        style={{\n                          backgroundColor: \"rgb(153, 46, 98)\",\n                          color: \"#fff\",\n                        }}\n                        onClick={() => {\n                          setOpenModal(!openModal);\n                        }}\n                        disabled={saving}\n                      />\n                      <Button\n                        content=\"Save\"\n                        type=\"submit\"\n                        icon=\"save\"\n                        labelPosition=\"right\"\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                        onClick={handleSubmitFeedback}\n                        disabled={saving}\n                      />\n                      {saving && <Spinner animation=\"border\" />}\n                    </div>\n                  </div>\n                </div>\n              </form>\n            </CardBody>\n          </Card>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default FeedbackModal;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/HIVSTPatientHistory.js",["1037","1038","1039"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { toast } from \"react-toastify\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst HIVSTPatientHistory = (props) => {\n  const [hivstHistory, setHivstHistory] = useState([]);\n  let history = useHistory();\n\n  useEffect(() => {\n    //patients()\n    FetchHivstHistory();\n  }, [props.patientObj]);\n\n  const LoadViewPage = (row, actionType) => {\n    props.setActivePage({\n      ...props.activePage,\n      activePage: \"hivst_view\",\n      activeObject: row,\n      actionType: actionType,\n    });\n  };\n\n  const FetchHivstHistory = () => {\n    axios\n      .get(`${baseUrl}hivst?patientId=${props.patientObj.personId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //set the last date of visit after the response\n        setHivstHistory(response.data);\n      })\n      .catch((error) => {\n        //setLoading(false)\n      });\n  };\n\n  const handleHTSDelete = (row) => {\n    axios\n      .delete(`${baseUrl}hivst/${props.patientObj.hivstId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        toast.success(`HIVST patient deleted successfully`);\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        console.err(err);\n      });\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"HIV Self Testing History \"\n        columns={[\n          { title: \"Date of Visit\", field: \"dateOfVisit\" },\n          { title: \"Service Delivery Point\", field: \"serviceDeliveryPoint\" },\n          {\n            title: \"Number of Test Kits Received\",\n            field: \"numberOfHivstKitsReceived\",\n          },\n          { title: \"User Type\", field: \"userType\" },\n          {\n            title: \"Type of HIVST Kit Received\",\n            field: \"typeOfHivstKitReceived\",\n            filtering: false,\n          },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={props.loading}\n        data={hivstHistory.map((row) => ({\n          // id: row.id,\n          dateOfVisit: row.dateOfVisit,\n          serviceDeliveryPoint: row.serviceDeliveryPoint,\n          numberOfHivstKitsReceived: row.numberOfHivstKitsReceived,\n          userType: row.userType,\n          typeOfHivstKitReceived: row.typeOfHivstKitReceived,\n\n          actions: (\n            <div>\n              <Menu.Menu position=\"right\">\n                <Menu.Item>\n                  <Button\n                    style={{ backgroundColor: \"rgb(153,46,98)\" }}\n                    primary\n                    onClick={(e) => {\n                      e.preventDefault();\n                    }}\n                  >\n                    <Dropdown item text=\"Action\">\n                      <Dropdown.Menu style={{ marginTop: \"10px\" }}>\n                        <Dropdown.Item\n                          onClick={() => LoadViewPage(row, \"view\")}\n                        >\n                          {\" \"}\n                          <Icon name=\"eye\" />\n                          View\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          onClick={() => LoadViewPage(row, \"update\")}\n                        >\n                          <Icon name=\"edit\" />\n                          Edit\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => handleHTSDelete(row)}>\n                          <Icon name=\"delete\" />\n                          Delete\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </Button>\n                </Menu.Item>\n              </Menu.Menu>\n            </div>\n          ),\n        }))}\n        options={{\n          headerStyle: {\n            //backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default HIVSTPatientHistory;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/ExistenceClientHIVSTRegistration.js",["1040","1041","1042","1043","1044","1045","1046","1047","1048"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { Card, CardBody } from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n// import FamilyIndexTestingForm from \"./NewRegistration/FamilyIndexTestingForm\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Icon, Menu, Sticky } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport HIVSTPatientRegistration from \"./HIVSTPatientRegistration\";\n// import RiskStratification from \"../ContinuesHTSEnrollment/RiskStratification\";\n// import BasicInfo from \"../ContinuesHTSEnrollment/BasicInfo\";\n// import PreTest from \"../ContinuesHTSEnrollment/PreTest\";\n// import HivTestResult from \"../ContinuesHTSEnrollment/HivTestResult\";\n// import PostTest from \"../ContinuesHTSEnrollment/PostTest\";\n// import IndexingContactTracing from \"../ContinuesHTSEnrollment/Elicitation\";\n// import RecencyTesting from \"../ContinuesHTSEnrollment/RecencyTesting\";\n// import Others from \"../ContinuesHTSEnrollment/Others\";\n// import PNSHistory from \"../NewRegistration/PartnerNotificationServices/PNSHistory\";\n// import PnsForm from \"../NewRegistration/PartnerNotificationServices/PnsForm\";\n// import ViewPNSForm from \"../NewRegistration/PartnerNotificationServices/ViewPnsForm\";\n// import ReferralUnit from \"../ContinuesHTSEnrollment/ClientReferral/ReferralUnit\";\n\nconst ExistenceClientHIVSTRegistration = (props) => {\n    const location = useLocation();\n    const locationState = location.state;\n    const [activeItem, setactiveItem] = useState(\"reg\");\n    const [completed, setCompleted] = useState([]);\n    const [hideOtherMenu, setHideOtherMenu] = useState(true);\n    // const [saving, setSaving] = useState(false);\n    const [patientObj2, setPatientObj2] = useState({});\n\n    const handleItemClick = (activeItem) => {\n        setactiveItem(activeItem);\n        //setCompleted({...completed, ...completedMenu})\n    };\n\n    return (<>\n        <ToastContainer autoClose={3000} hideProgressBar />\n\n        <Card>\n            <CardBody>\n                <form>\n                    <div className=\"row\">\n                        <h3> HIV SELF TEST </h3>\n                        <br />\n                        <br />\n                        <div className=\"col-md-3 col-sm-3 col-lg-3\">\n                            <Menu\n                                size=\"large\"\n                                vertical\n                                style={{ backgroundColor: \"#014D88\" }}\n                            >\n                                <Menu.Item\n                                    name=\"inbox\"\n                                    active={activeItem === \"reg\"}\n                                    onClick={() => handleItemClick(\"reg\")}\n                                    style={{\n                                        backgroundColor: activeItem === \"reg\" ? \"#000\" : \"\",\n                                    }}\n                                >\n                                    <span style={{ color: \"#fff\" }}>\n                                        {\" \"}\n                                        Patient Registration\n                                        {completed.includes(\"reg\") && (<Icon name=\"check\" color=\"green\" />)}\n                                    </span>\n                                </Menu.Item>\n                            </Menu>\n                        </div>\n                        <div\n                            className=\"col-md-9 col-sm-9 col-lg-9 \"\n                            style={{\n                                backgroundColor: \"#fff\", margingLeft: \"-50px\", paddingLeft: \"-20px\",\n                            }}\n                        >\n                            {activeItem === \"reg\" && ( <HIVSTPatientRegistration\n                                handleItemClick={handleItemClick}\n                                setCompleted={setCompleted}\n                                completed={completed}\n                                setPatientObj={setPatientObj2}\n                                patientObj={patientObj2}\n                                setHideOtherMenu={setHideOtherMenu}\n                                // patientAge={props.patientAge}\n                                // setExtra={setExtra}\n                                // extra={extra}\n                                patientObject={locationState.patientObject}\n                            // activePage={props.activePage}\n                            // setActivePage={props.setActivePage}\n                            />)}\n                        </div>\n                    </div>\n                </form>\n            </CardBody>\n        </Card>\n    </>);\n\n};\nexport default ExistenceClientHIVSTRegistration;","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContineousRegistrationTesting.js",["1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { Card, CardBody } from \"reactstrap\";\nimport FamilyIndexHistory from \"./NewRegistration/PartnerNotificationServices/FamilyIndexhIstory\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport FamilyIndexTestingForm from \"./NewRegistration/FamilyIndexTestingForm\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Icon, Menu, Sticky } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport BasicInfo from \"./ContinuesHTSEnrollment/BasicInfo\";\nimport PreTest from \"./ContinuesHTSEnrollment/PreTest\";\nimport HivTestResult from \"./ContinuesHTSEnrollment/HivTestResult\";\nimport IndexingContactTracing from \"./ContinuesHTSEnrollment/Elicitation/Index\";\nimport Others from \"./ContinuesHTSEnrollment/Others\";\nimport PostTest from \"./ContinuesHTSEnrollment/PostTest\";\nimport RecencyTesting from \"./ContinuesHTSEnrollment/RecencyTesting\";\nimport RiskStratification from \"./ContinuesHTSEnrollment/RiskStratification\";\nimport PNSHistory from \"./NewRegistration/PartnerNotificationServices/PNSHistory\";\nimport PnsForm from \"./NewRegistration/PartnerNotificationServices/PnsForm\";\nimport ViewPNSForm from \"./NewRegistration/PartnerNotificationServices/ViewPnsForm\";\nimport ReferralUnit from \"./ContinuesHTSEnrollment/ClientReferral/ReferralUnit\";\nimport RefferralUnit from \"./NewRegistration/RefferalUnit\";\nimport ClientReferralHistory from \"./NewRegistrationEnrollement/ClientReferral/ClientReferralHistory\";\nimport ViewClientReferral from \"./NewRegistrationEnrollement/ClientReferral/Referrall_view_update\";\nimport { set } from \"js-cookie\";\nimport { getCheckModality, getCurentForm } from \"../../../utility\";\nimport { getPreviousForm } from \"../../../utility\";\nimport { calculate_age } from \"../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst UserRegistration = (props) => {\n\n    const history = useHistory();\n\n  const location = useLocation();\n  const locationState = location.state;\n  // const [saving, setSaving] = useState(false);\n  const [activeItem, setactiveItem] = useState(\"risk\");\n  const [completed, setCompleted] = useState([]);\n  const [showBackButton, setShowBackButton] = useState(true);\n  const [basicInfo, setBasicInfo] = useState({});\n  const [hideOtherMenu, setHideOtherMenu] = useState(true);\n  const [organizationInfo, setOrganizationInfo] = useState({});\n  const [row, setRow] = useState({});\n  const [modalityCheck, setModalityCheck] = useState(\"\");\n  const [selectedRow, setSelectedRow] = useState({});\n\n  const [permissions, setPermission] = useState(\n    JSON.parse(localStorage.getItem(\"stringifiedPermmision\"))\n  );\n  const [action, setAction] = useState(\"\");\n\n  const [patientObj2, setPatientObj2] = useState(\n    {\n    breastFeeding: \"\",\n    capturedBy: \"\",\n    cd4: {},\n    clientCode: \"\",\n    riskStratificationCode: \"\",\n    confirmatoryTest: {},\n    dateVisit: \"\",\n    extra: {},\n    firstTimeVisit: \"\",\n    hepatitisTesting: {},\n    hivTestResult: \"\",\n    id: \"\",\n    indexClient: \"\",\n    indexClientCode: \"\",\n    indexElicitation: [\n      {\n        address: \"\",\n        altPhoneNumber: \"\",\n        archived: 0,\n        currentlyLiveWithPartner: true,\n        datePartnerCameForTesting: \"\",\n        dob: \"\",\n        extra: {},\n        facilityId: 0,\n        firstName: \"\",\n        hangOutSpots: \"\",\n        htsClient: {\n          archived: 0,\n          breastFeeding: 0,\n          capturedBy: \"\",\n          cd4: {},\n          clientCode: \"\",\n          confirmatoryTest: {},\n          dateVisit: \"\",\n          extra: {},\n          facilityId: 0,\n          firstTimeVisit: true,\n          hepatitisTesting: {},\n          hivTestResult: \"\",\n          id: 0,\n          indexClient: true,\n          indexClientCode: \"\",\n          indexNotificationServicesElicitation: {},\n          knowledgeAssessment: {},\n          numChildren: 0,\n          numWives: 0,\n          others: {},\n          person: {\n            active: \"\",\n            address: {},\n            archived: 0,\n            contact: {},\n            contactPoint: {},\n            createdDate: \"\",\n            dateOfBirth: \"\",\n            dateOfRegistration: \"\",\n            deceased: true,\n            deceasedDateTime: \"\",\n            education: {},\n            employmentStatus: {},\n            emrId: \"\",\n            facilityId: 0,\n            firstName: \"string\",\n            gender: {},\n            hospitalNumber: \"\",\n            id: \"\",\n            identifier: {},\n            isDateOfBirthEstimated: true,\n            lastModifiedDate: \"\",\n            maritalStatus: {},\n            new: true,\n            ninNumber: \"\",\n            organization: {},\n            otherName: \"\",\n            sex: \"\",\n            surname: \"\",\n            uuid: \"\",\n          },\n          personUuid: \"\",\n          postTestCounselingKnowledgeAssessment: {},\n          pregnant: \"\",\n          previouslyTested: true,\n          recency: {},\n          referredFrom: \"\",\n          relationWithIndexClient: \"\",\n          riskAssessment: {},\n          sexPartnerRiskAssessment: {},\n          stiScreening: {},\n          syphilisTesting: {},\n          targetGroup: 0,\n          tbScreening: {},\n          test1: {},\n          testingSetting: \"\",\n          tieBreakerTest: {},\n          typeCounseling: \"\",\n          uuid: \"\",\n        },\n        htsClientUuid: \"\",\n        id: \"\",\n        isDateOfBirthEstimated: true,\n        lastName: \"\",\n        middleName: \"\",\n        notificationMethod: \"\",\n        partnerTestedPositive: \"\",\n        phoneNumber: \"\",\n        physicalHurt: \"\",\n        relationshipToIndexClient: \"\",\n        sex: \"\",\n        sexuallyUncomfortable: \"\",\n        threatenToHurt: \"\",\n        uuid: \"\",\n      },\n    ],\n    indexNotificationServicesElicitation: {},\n    knowledgeAssessment: {},\n    numChildren: \"\",\n    numWives: \"\",\n    others: {},\n    personId: \"\",\n    personResponseDto: {\n      active: true,\n\n      address: {\n        address: [\n          {\n            city: \"\",\n            line: [\"\"],\n            stateId: \"\",\n            district: \"\",\n            countryId: 1,\n            postalCode: \"\",\n            organisationUnitId: 0,\n          },\n        ],\n      },\n      biometricStatus: true,\n      checkInDate: \"\",\n      contact: {},\n      contactPoint: {\n        contactPoint: [\n          {\n            type: \"phone\",\n            value: \"\",\n          },\n        ],\n      },\n      dateOfBirth: \"\",\n      dateOfRegistration: \"\",\n      deceased: true,\n      deceasedDateTime: \"\",\n      education: {},\n      employmentStatus: {},\n      emrId: \"\",\n      encounterDate: \"\",\n      facilityId: \"\",\n      firstName: \"\",\n      gender: {},\n      id: \"\",\n      identifier: {},\n      isDateOfBirthEstimated: true,\n      maritalStatus: {},\n      ninNumber: \"\",\n      organization: {},\n      otherName: \"\",\n      sex: \"\",\n      surname: \"\",\n      visitId: \"\",\n    },\n    postTestCounselingKnowledgeAssessment: {},\n    pregnant: \"\",\n    previouslyTested: \"\",\n    recency: {},\n    referredFrom: \"\",\n    relationWithIndexClient: \"\",\n    riskAssessment: {},\n    sexPartnerRiskAssessment: {},\n    stiScreening: {},\n    syphilisTesting: {},\n    targetGroup: \"\",\n    tbScreening: {},\n    test1: {},\n    testingSetting: \"\",\n    tieBreakerTest: {},\n    typeCounseling: \"\",\n    riskStratificationResponseDto: null,\n  });\n\n  const [extra, setExtra] = useState({\n    risk: \"\",\n    index: \"\",\n    pre: \"\",\n    post: \"\",\n    recency: \"\",\n    elicitation: \"\",\n  });\n  const handleItemClick = (activeItem) => {\n    setactiveItem(activeItem);\n    //setCompleted({...completed, ...completedMenu})\n  };\n\n\n  const clearInfo=()=>{\n    setCompleted([])\n    setPatientObj2(\n      {\n        breastFeeding: \"\",\n        capturedBy: \"\",\n        cd4: {},\n        clientCode: \"\",\n        riskStratificationCode: \"\",\n        confirmatoryTest: {},\n        dateVisit: \"\",\n        extra: {},\n        firstTimeVisit: \"\",\n        hepatitisTesting: {},\n        hivTestResult: \"\",\n        id: \"\",\n        indexClient: \"\",\n        indexClientCode: \"\",\n        indexElicitation: [\n          {\n            address: \"\",\n            altPhoneNumber: \"\",\n            archived: 0,\n            currentlyLiveWithPartner: true,\n            datePartnerCameForTesting: \"\",\n            dob: \"\",\n            extra: {},\n            facilityId: 0,\n            firstName: \"\",\n            hangOutSpots: \"\",\n            htsClient: {\n              archived: 0,\n              breastFeeding: 0,\n              capturedBy: \"\",\n              cd4: {},\n              clientCode: \"\",\n              confirmatoryTest: {},\n              dateVisit: \"\",\n              extra: {},\n              facilityId: 0,\n              firstTimeVisit: true,\n              hepatitisTesting: {},\n              hivTestResult: \"\",\n              id: 0,\n              indexClient: true,\n              indexClientCode: \"\",\n              indexNotificationServicesElicitation: {},\n              knowledgeAssessment: {},\n              numChildren: 0,\n              numWives: 0,\n              others: {},\n              person: {\n                active: \"\",\n                address: {},\n                archived: 0,\n                contact: {},\n                contactPoint: {},\n                createdDate: \"\",\n                dateOfBirth: \"\",\n                dateOfRegistration: \"\",\n                deceased: true,\n                deceasedDateTime: \"\",\n                education: {},\n                employmentStatus: {},\n                emrId: \"\",\n                facilityId: 0,\n                firstName: \"string\",\n                gender: {},\n                hospitalNumber: \"\",\n                id: \"\",\n                identifier: {},\n                isDateOfBirthEstimated: true,\n                lastModifiedDate: \"\",\n                maritalStatus: {},\n                new: true,\n                ninNumber: \"\",\n                organization: {},\n                otherName: \"\",\n                sex: \"\",\n                surname: \"\",\n                uuid: \"\",\n              },\n              personUuid: \"\",\n              postTestCounselingKnowledgeAssessment: {},\n              pregnant: \"\",\n              previouslyTested: true,\n              recency: {},\n              referredFrom: \"\",\n              relationWithIndexClient: \"\",\n              riskAssessment: {},\n              sexPartnerRiskAssessment: {},\n              stiScreening: {},\n              syphilisTesting: {},\n              targetGroup: 0,\n              tbScreening: {},\n              test1: {},\n              testingSetting: \"\",\n              tieBreakerTest: {},\n              typeCounseling: \"\",\n              uuid: \"\",\n            },\n            htsClientUuid: \"\",\n            id: \"\",\n            isDateOfBirthEstimated: true,\n            lastName: \"\",\n            middleName: \"\",\n            notificationMethod: \"\",\n            partnerTestedPositive: \"\",\n            phoneNumber: \"\",\n            physicalHurt: \"\",\n            relationshipToIndexClient: \"\",\n            sex: \"\",\n            sexuallyUncomfortable: \"\",\n            threatenToHurt: \"\",\n            uuid: \"\",\n          },\n        ],\n        indexNotificationServicesElicitation: {},\n        knowledgeAssessment: {},\n        numChildren: \"\",\n        numWives: \"\",\n        others: {},\n        personId: \"\",\n        personResponseDto: {\n          active: true,\n    \n          address: {\n            address: [\n              {\n                city: \"\",\n                line: [\"\"],\n                stateId: \"\",\n                district: \"\",\n                countryId: 1,\n                postalCode: \"\",\n                organisationUnitId: 0,\n              },\n            ],\n          },\n          biometricStatus: true,\n          checkInDate: \"\",\n          contact: {},\n          contactPoint: {\n            contactPoint: [\n              {\n                type: \"phone\",\n                value: \"\",\n              },\n            ],\n          },\n          dateOfBirth: \"\",\n          dateOfRegistration: \"\",\n          deceased: true,\n          deceasedDateTime: \"\",\n          education: {},\n          employmentStatus: {},\n          emrId: \"\",\n          encounterDate: \"\",\n          facilityId: \"\",\n          firstName: \"\",\n          gender: {},\n          id: \"\",\n          identifier: {},\n          isDateOfBirthEstimated: true,\n          maritalStatus: {},\n          ninNumber: \"\",\n          organization: {},\n          otherName: \"\",\n          sex: \"\",\n          surname: \"\",\n          visitId: \"\",\n        },\n        postTestCounselingKnowledgeAssessment: {},\n        pregnant: \"\",\n        previouslyTested: \"\",\n        recency: {},\n        referredFrom: \"\",\n        relationWithIndexClient: \"\",\n        riskAssessment: {},\n        sexPartnerRiskAssessment: {},\n        stiScreening: {},\n        syphilisTesting: {},\n        targetGroup: \"\",\n        tbScreening: {},\n        test1: {},\n        testingSetting: \"\",\n        tieBreakerTest: {},\n        typeCounseling: \"\",\n        riskStratificationResponseDto: null,\n      }\n  )\n  // setPatientObj2(0)\n    setHideOtherMenu(true)\n    setExtra({\n      risk: \"\",\n      index: \"\",\n      pre: \"\",\n      post: \"\",\n      recency: \"\",\n      elicitation: \"\",\n    })\n    setOrganizationInfo({})\n  }\n\n\n\n\n  const getPrevForm=(e)=>{\n    if( activeItem === \"risk\"){\n      history.push(\"/\");\n\n    }else{\n      e.preventDefault()\n    let currentForm =   getCurentForm(activeItem)\n\n      let age = calculate_age(\n        basicInfo?.personResponseDto?.dateOfBirth\n          ? basicInfo?.personResponseDto?.dateOfBirth\n          : patientObj2?.personResponseDto?.dateOfBirth\n      );\n\n      let hivStatus = patientObj2?.hivTestResult;\n\n      let checkModality = patientObj2?.riskStratificationResponseDto?.testingSetting? patientObj2.riskStratificationResponseDto.testingSetting: \"\";\n      let isPMTCTModality =getCheckModality(checkModality)\n\n    let answer =  getPreviousForm(currentForm, age, isPMTCTModality, hivStatus); \n    if (answer[0]  && answer[1]) {\n      if(answer[0] === \"fit\"){\n        handleItemClick(\"fit-history\");\n\n      }else if(answer[0] === \"pns\"){\n\n        handleItemClick(\"pns-history\");\n\n      }else{\n        handleItemClick(answer[0]);\n\n      }\n    }else{\n    history.push(\"/\");\n\n    }\n}\n} \n\n\n\n\n  useEffect(() => {\n    setModalityCheck(\n      getCheckModality(patientObj2?.riskStratificationResponseDto?.testingSetting)\n    );\n  }, [patientObj2]);\n\n\n\n\n\n  return (\n    <>\n      <ToastContainer autoClose={3000} hideProgressBar />\n\n      <Card>\n        <CardBody>\n          <form>\n            <div className=\"row\">\n              <h3>\n                HIV COUNSELLING AND TESTING \n                {showBackButton &&  <div>\n                    {/* <Link to={\"/\"}> */}\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      className=\" float-end\"\n                      //startIcon={<FaUserPlus size=\"10\"/>}\n                      onClick={getPrevForm}\n                      style={{ backgroundColor: \"#014d88\" }}\n                    >\n                      <span style={{ textTransform: \"capitalize\" }}>Back</span>\n                    </Button>\n                    {/* </Link> */}\n                  </div>}\n\n\n                \n              </h3>{\" \"}\n              <br />\n              <br />\n              <div className=\"col-md-3 col-sm-3 col-lg-3\">\n                <Menu\n                  size=\"large\"\n                  vertical\n                  style={{ backgroundColor: \"#014D88\" }}\n                >\n                  <Menu.Item\n                    name=\"inbox\"\n                    active={activeItem === \"risk\"}\n                    onClick={() => handleItemClick(\"risk\")}\n                    style={{\n                      backgroundColor: activeItem === \"risk\" ? \"#000\" : \"\",\n                    }}\n                  >\n                    <span style={{ color: \"#fff\" }}>\n                      {\" \"}\n                      Risk Stratification\n                      {completed.includes(\"risk\") && (\n                        <Icon name=\"check\" color=\"green\" />\n                      )}\n                    </span>\n                  </Menu.Item>\n                  {hideOtherMenu === false && (\n                    <>\n                      <Menu.Item\n                        name=\"inbox\"\n                        active={activeItem === \"basic\"}\n                        onClick={() => handleItemClick(\"basic\")}\n                        style={{\n                          backgroundColor: activeItem === \"basic\" ? \"#000\" : \"\",\n                        }}\n                        disabled={activeItem !== \"basic\" ? true : false}\n                      >\n                        <span style={{ color: \"#fff\" }}>\n                          {\" \"}\n                          Basic Information\n                          {completed.includes(\"basic\") && (\n                            <Icon name=\"check\" color=\"green\" />\n                          )}\n                        </span>\n                      </Menu.Item>\n                      {patientObj2.riskStratificationResponseDto?.age >= 15  &&\n                        modalityCheck == \"fill\" && (\n                          <Menu.Item\n                            name=\"spam\"\n                            active={activeItem === \"pre-test-counsel\"}\n                            onClick={() => handleItemClick(\"pre-test-counsel\")}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"pre-test-counsel\" ? \"#000\" : \"\",\n                            }}\n                            disabled={\n                              activeItem !== \"pre-test-counsel\" ? true : false\n                            }\n                            \n                          >\n                         {/* <Label>2</Label> */}\n                            <span style={{ color: \"#fff\" }}>\n                              Pre Test Counseling\n                              {completed.includes(\"pre-test-counsel\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>\n                        )}\n\n\n\n                      {permissions.includes(\"Request_and_Result_Form\") && (\n                        <Menu.Item\n                          name=\"inbox\"\n                          active={activeItem === \"hiv-test\"}\n                          onClick={() => handleItemClick(\"hiv-test\")}\n                          style={{\n                            backgroundColor:\n                              activeItem === \"hiv-test\" ? \"#000\" : \"\",\n                          }}\n                          //disabled={activeItem !== 'hiv-test' ? true : false}\n                        >\n                          <span style={{ color: \"#fff\" }}>\n                            Request {\"&\"} Result Form\n                            {completed.includes(\"hiv-test\") && (\n                              <Icon name=\"check\" color=\"green\" />\n                            )}\n                          </span>\n\n                          {/* <Label color='teal'>3</Label> */}\n                        </Menu.Item>\n                      )}\n                      <Menu.Item\n                        name=\"spam\"\n                        active={activeItem === \"post-test\"}\n                        onClick={() => handleItemClick(\"post-test\")}\n                        style={{\n                          backgroundColor:\n                            activeItem === \"post-test\" ? \"#000\" : \"\",\n                        }}\n                        disabled={activeItem !== \"post-test\" ? true : false}\n                      >\n                        {/* <Label>4</Label> */}\n                        <span style={{ color: \"#fff\" }}>\n                          Post Test Counseling\n                          {completed.includes(\"post-test\") && (\n                            <Icon name=\"check\" color=\"green\" />\n                          )}\n                        </span>\n                      </Menu.Item>\n                \n                      {patientObj2?.hivTestResult &&\n                        patientObj2?.hivTestResult === \"Positive\" &&\n                        patientObj2.riskStratificationResponseDto?.age >= 15 &&\n                        permissions.includes(\"Request_and_Result_Form\") && (\n                          <Menu.Item\n                            name=\"spam\"\n                            active={activeItem === \"recency-testing\"}\n                            onClick={() => {\n                              handleItemClick(\"recency-testing\");\n                            }}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"recency-testing\" ? \"#000\" : \"\",\n                            }}\n                            disabled={\n                              activeItem !== \"recency-testing\" ? true : false\n                            }\n                          >\n                            {/* <Label>4</Label> */}\n                            <span style={{ color: \"#fff\" }}>\n                              HIV Recency Testing\n                              {completed.includes(\"recency-testing\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>\n                        )}\n              \n                      {patientObj2?.hivTestResult &&\n                        patientObj2?.hivTestResult === \"Positive\" && (\n                          <Menu.Item\n                            name=\"spam\"\n                            active={activeItem === \"fit\"}\n                            onClick={() => handleItemClick(\"fit\")}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"fit\" ? \"#000\" : \"\",\n                            }}\n                           \n                          >\n                            <span style={{ color: \"#fff\" }}>\n                              Family Index Testing form\n                              {completed.includes(\"fit\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>\n                        )} \n                      {permissions.includes(\"Nigeria_PNS_Form\") &&\n                        patientObj2?.hivTestResult &&\n                        patientObj2?.hivTestResult === \"Positive\" && (\n                          <Menu.Item\n                            name=\"inbox\"\n                            active={activeItem === \"pns-history\"}\n                            onClick={() => handleItemClick(\"pns-history\")}\n                            style={{\n                              backgroundColor:\n                                activeItem === \"pns-history\" ? \"#000\" : \"\",\n                            }}\n                          >\n                            <span style={{ color: \"#fff\" }}>\n                              {\" \"}\n                              Partner Notification Services\n                              {completed.includes(\"pns\") && (\n                                <Icon name=\"check\" color=\"green\" />\n                              )}\n                            </span>\n                          </Menu.Item>)}\n\n                     \n                     {permissions.includes(\"Referral_Form\") && ( \n                        <Menu.Item\n                          name=\"inbox\"\n                          active={activeItem === \"refferal-history\"}\n                          onClick={() => handleItemClick(\"refferal-history\")}\n                          style={{\n                            backgroundColor:\n                              activeItem === \"refferal-history\" ? \"#000\" : \"\",\n                          }}\n                        >\n                          <span style={{ color: \"#fff\" }}>\n                            {\" \"}\n                            Client Referral Service\n                            {completed.includes(\"refferal\") && (\n                              <Icon name=\"check\" color=\"green\" />\n                            )}\n                          </span>\n                        </Menu.Item>\n                  )}\n                  </>)}\n                </Menu>\n              </div>\n              <div\n                className=\"col-md-9 col-sm-9 col-lg-9 \"\n                style={{\n                  backgroundColor: \"#fff\",\n                  margingLeft: \"-50px\",\n                  paddingLeft: \"-20px\",\n                }}\n              >\n                {activeItem === \"risk\" && (\n                  <RiskStratification\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setHideOtherMenu={setHideOtherMenu}\n                    patientAge={props.patientAge}\n                    setExtra={setExtra}\n                    extra={extra}\n                    patientObject={locationState.patientObject}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    setOrganizationInfo={setOrganizationInfo}\n                    personInfo={props.personInfo}\n                    newHTSType={props.newHTSType}\n                  />\n                )}\n\n                {activeItem === \"basic\" && (\n                  <BasicInfo\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    clientCode={props.clientCode}\n                    patientAge={props.patientAge}\n                    sex={locationState.patientObject.gender}\n                    setExtra={setExtra}\n                    extra={extra}\n                    patientList={props.patientList}\n                    patientObject={locationState.patientObject}\n                    setBasicInfo={setBasicInfo}\n                    checkedInPatient={props.checkedInPatient}\n                  />\n                )}\n\n\n\n                {activeItem === \"pre-test-counsel\" && (\n                  <PreTest\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    clientCode={props.clientCode}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"hiv-test\" && (\n                  <HivTestResult\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    clientCode={props.clientCode}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"post-test\" && (\n                  <PostTest\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    clientCode={props.clientCode}\n                    patientAge={props.patientAge}\n                    patientsHistory={props.patients}\n                  />\n                )}\n                {activeItem === \"indexing\" && (\n                  <IndexingContactTracing\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    clientCode={props.clientCode}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"recency-testing\" && (\n                  <RecencyTesting\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    clientCode={props.clientCode}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"others\" && (\n                  <Others\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    clientCode={props.clientCode}\n                    patientAge={props.patientAge}\n                  />\n                )}\n                {activeItem === \"pns-history\" && (\n                  <PNSHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    setRow={setRow}\n                  />\n                )}\n\n                {activeItem === \"pns\" && (\n                  <PnsForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    // addNewForm={false}\n                  />\n                )}\n\n                {activeItem === \"view-pns\" && (\n                  <ViewPNSForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    row={row}\n                  />\n                )}\n                {activeItem === \"fit\" && (\n                  <FamilyIndexTestingForm\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    history={true}\n                  />\n                )}\n\n\n                \n          {activeItem === \"fit-history\" && (\n                  <FamilyIndexHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={true}\n                    nextButton={true}\n                    selectedRow={selectedRow}\n                    setSelectedRow={setSelectedRow}\n                    clearInfo={clearInfo}\n                    // row={row}\n                    setAction={setAction}\n                  />\n                )}\n                {/*{activeItem === \"new-referral\" && (*/}\n                {/*  <ReferralUnit*/}\n                {/*    handleItemClick={handleItemClick}*/}\n                {/*    setCompleted={setCompleted}*/}\n                {/*    completed={completed}*/}\n                {/*    setPatientObj={setPatientObj2}*/}\n                {/*    patientObj={patientObj2}*/}\n                {/*    setExtra={setExtra}*/}\n                {/*    extra={extra}*/}\n                {/*    basicInfo={basicInfo}*/}\n                {/*    organizationInfo={organizationInfo}*/}\n                {/*    addNewForm={false}*/}\n                {/*  />*/}\n                {/*)}*/}\n                {activeItem === \"client-referral\" && (\n                  <RefferralUnit\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                  />\n                )}\n                {activeItem === \"refferal-history\" && (\n                  <ClientReferralHistory\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    activePage={props.activePage}\n                    setActivePage={props.setActivePage}\n                    setRow={setRow}\n                    status={\"existing\"}\n\n                  />\n                )}\n                {activeItem === \"view-referral\" && (\n                  <ViewClientReferral\n                    handleItemClick={handleItemClick}\n                    setCompleted={setCompleted}\n                    completed={completed}\n                    setPatientObj={setPatientObj2}\n                    patientObj={patientObj2}\n                    setExtra={setExtra}\n                    extra={extra}\n                    basicInfo={basicInfo}\n                    organizationInfo={organizationInfo}\n                    addNewForm={false}\n                    row={row}\n                  />\n                )}\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default UserRegistration;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/History/History.js",["1060","1061","1062","1063"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { toast } from \"react-toastify\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst PatientnHistory = (props) => {\n  let history = useHistory();\n  useEffect(() => {\n    //patients()\n  }, [props.patientObj]);\n\n  const LoadViewPage = (row, actionType) => {\n    props.setActivePage({\n      ...props.activePage,\n      activePage: \"view\",\n      activeObject: row,\n      actionType: actionType,\n    });\n  };\n\n  const handleHTSDelete = (row) => {\n    axios\n      .delete(`${baseUrl}hts/${row.id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        toast.success(\n          `HTS patient with client code ${row.clientCode}, deleted successfully`\n        );\n        history.push(\"/\");\n      })\n      .catch((err) => {\n        console.err(err);\n      });\n  };\n\n  return (\n    <div>\n      <MaterialTable\n        icons={tableIcons}\n        title=\"HTS HISTORY\"\n        columns={[\n          // { title: \"HTS ID\", field: \"id\" },\n          { title: \"Date\", field: \"date\" },\n          { title: \"Client Code\", field: \"clientCode\" },\n          { title: \"Pre Test Counseling\", field: \"pre\" },\n          { title: \"Recency Test\", field: \"rencency\" },\n          { title: \"Post Test\", field: \"post\" },\n          // { title: \"Index Notification\", field: \"indexNotifiation\", filtering: false },\n          {\n            title: \"Request & Result\",\n            field: \"requestResult\",\n            filtering: false,\n          },\n          { title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        isLoading={props.loading}\n        data={props.patientList.map((row) => ({\n          // id: row.id,\n          date: row.dateVisit,\n          clientCode: row.clientCode,\n\n          pre: row.knowledgeAssessment ? \"Filled\" : \"Not Filled \",\n          requestResult: row.confirmatoryTest ? \"Filled\" : \"Not Filled \",\n          rencency: row.recency ? \"Filled\" : \"Not Filled \",\n          post: row.postTestCounselingKnowledgeAssessment\n            ? \"Filled\"\n            : \"Not Filled \",\n          //indexNotifiation:row.indexNotificationServicesElicitation ? \"Filled\":\"Not Filled \",\n\n          actions: (\n            <div>\n              <Menu.Menu position=\"right\">\n                <Menu.Item>\n                  <Button\n                    style={{ backgroundColor: \"rgb(153,46,98)\" }}\n                    primary\n                    onClick={(e) => {\n                      e.preventDefault();\n                    }}\n                  >\n                    <Dropdown item text=\"Action\">\n                      <Dropdown.Menu style={{ marginTop: \"10px\" }}>\n                        <Dropdown.Item\n                          onClick={() => LoadViewPage(row, \"view\")}\n                        >\n                          {\" \"}\n                          <Icon name=\"eye\" />\n                          View\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          onClick={() => LoadViewPage(row, \"update\")}\n                        >\n                          <Icon name=\"edit\" />\n                          Edit\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={() => handleHTSDelete(row)}>\n                          <Icon name=\"delete\" />\n                          Delete\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </Button>\n                </Menu.Item>\n              </Menu.Menu>\n            </div>\n          ),\n        }))}\n        options={{\n          headerStyle: {\n            //backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PatientnHistory;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/RiskStratification.js",["1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\n//import SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n//import PhoneInput from 'react-phone-input-2'\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport { getNextForm } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\nimport {validateVisitDateWithDOB} from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst RiskStratification = (props) => {\n\n\n  const classes = useStyles();\n  const history = useHistory();\n  const [entryPointSetting, setEntryPointSetting] = useState([]);\n\n  const [enrollSetting, setEnrollSetting] = useState([]);\n  const [entryPoint, setEntryPoint] = useState([]);\n  const [entryPointCommunity, setEntryPointCommunity] = useState([]);\n  let riskCountQuestion = [];\n  const [kP, setKP] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [riskCount, setRiskCount] = useState(0);\n  const [isPMTCTModality, setIsPMTCTModality] = useState(false);\n  const [showRiskAssessment, setShowRiskAssessment] = useState(false);\n  let communitySpokeList = [\n    \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\",\n    \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\",\n    \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\",\n    \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\",\n  ];\n\n  const [spokeFacList, setSpokeFacList] = useState([]);\n  const [showHealthFacility, setShowHealthFacility] = useState(\n    communitySpokeList.includes(\n      props?.activePage?.activeObject?.riskStratificationResponseDto\n        .testingSetting\n    )\n      ? true\n      : false\n  );\n\n  const [objValues, setObjValues] = useState({\n    age: props.patientAge,\n    dob: props.patientObj.dateOfBirth\n      ? props.patientObj.dateOfBirth\n      : props?.personInfopersonResponseDto?.dateOfBirth,\n    visitDate: \"\",\n    dateOfBirth: props.patientObj.dateOfBirth\n      ? props.patientObj.dateOfBirth\n      : props?.personInfopersonResponseDto?.dateOfBirth,\n    dateOfRegistration: \"\", //props.patientObj.dateOfRegistration,\n    isDateOfBirthEstimated: \"\", //props.patientObj.personResponseDto.isDateOfBirthEstimated\n    targetGroup: \"\",\n    testingSetting: \"\", //\n    modality: \"\", //\n    code: \"\",\n    id: \"\",\n    personId: props.patientObj.id,\n    riskAssessment: {},\n    entryPoint: \"\",\n    careProvider: \"\",\n    communityEntryPoint: \"\",\n    spokeFacility: \"\",\n    healthFacility: \"\",\n  });\n  const [riskAssessment, setRiskAssessment] = useState({\n    // everHadSexualIntercourse:\"\",\n    // bloodtransInlastThreeMonths:\"\",\n    // uprotectedSexWithCasualLastThreeMonths:\"\",\n    // uprotectedSexWithRegularPartnerLastThreeMonths:\"\",\n    // unprotectedVaginalSex:\"\",\n    // uprotectedAnalSex:\"\",\n    // stiLastThreeMonths:\"\",\n    // sexUnderInfluence :\"\",\n    // moreThanOneSexPartnerLastThreeMonths:\"\",\n    // experiencePain:\"\",\n    // haveSexWithoutCondom:\"\",\n    // abuseDrug:\"\",\n    // bloodTransfusion:\"\",\n    // consistentWeightFeverNightCough:\"\",\n    // soldPaidVaginalSex:\"\",\n    //New Question\n    lastHivTestForceToHaveSex: \"\",\n    lastHivTestHadAnal: \"\",\n    lastHivTestInjectedDrugs: \"\",\n    whatWasTheResult: \"\",\n    lastHivTestDone: \"\",\n    diagnosedWithTb: \"\",\n    lastHivTestPainfulUrination: \"\",\n    lastHivTestBloodTransfusion: \"\",\n    lastHivTestVaginalOral: \"\",\n    lastHivTestBasedOnRequest: \"\",\n  });\n  useEffect(() => {\n    KP();\n    // EnrollmentSetting();\n    EntryPoint();\n    // HTS_ENTRY_POINT_COMMUNITY();\n    //\n\n    if (props.activePage.activeObject.riskStratificationResponseDto !== null) {\n      if (\n        props.activePage.activeObject.riskStratificationResponseDto\n          .entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\"\n      ) {\n        HTS_ENTRY_POINT_COMMUNITY();\n      } else if (\n        props.activePage.activeObject.riskStratificationResponseDto\n          .entryPoint === \"HTS_ENTRY_POINT_FACILITY\"\n      ) {\n        HTS_ENTRY_POINT_FACILITY();\n      }\n      setObjValues(props.activePage.activeObject.riskStratificationResponseDto);\n\n      SettingModality(\n        props.activePage.activeObject.riskStratificationResponseDto\n          .testingSetting\n      );\n      setRiskAssessment(\n        props.activePage.activeObject.riskStratificationResponseDto &&\n          props.activePage.activeObject.riskStratificationResponseDto\n            .riskAssessment\n      );\n    }\n  }, [props.patientObj]);\n  //Get list of HIV STATUS ENROLLMENT\n  const EnrollmentSetting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const EntryPoint = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/HTS_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEntryPoint(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n\n  const getSpokeFaclityByHubSite = () => {\n    let facility = Cookies.get(\"facilityName\");\n    axios\n      .get(`${baseUrl}hts/spoke-site?hubSite=${facility}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSpokeFacList(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of KP\n  const KP = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (props.patientObject.gender) {\n          let kpList = [];\n          let gender = props.patientObject.gender.toLowerCase();\n          if (gender === \"female\") {\n            response.data.map((each, index) => {\n              if (each.code !== \"TARGET_GROUP_MSM\") {\n                kpList.push(each);\n              }\n            });\n          } else if (gender === \"male\") {\n            response.data.map((each, index) => {\n              if (each.code !== \"TARGET_GROUP_FSW\") {\n                kpList.push(each);\n              }\n            });\n          }\n\n          setKP(kpList);\n        } else {\n          setKP(response.data);\n        }\n      })\n      .catch((error) => {});\n  };\n\n  //Set HTS menu registration\n  const getMenuLogic = () => {\n    // first logic\n    // if (objValues.age !== \"\" && objValues.age <= 15) {\n    //   props.setHideOtherMenu(true);\n    // } else if (objValues.age !== \"\" && objValues.age > 15) {\n    //   props.setHideOtherMenu(true);\n    // } else {\n    //   props.setHideOtherMenu(true);\n    // }\n\n    // if (objValues.age !== \"\" && objValues.age >= 85) {\n    //   toggle();\n    // }\n\n    //secound logic\n    props.setHideOtherMenu(false);\n  };\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEntryPointSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(\n        `${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        setEntryPointSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const checkPMTCTModality = (modality) => {\n    if (\n      modality === \"FACILITY_HTS_TEST_SETTING_ANC\" ||\n      modality === \"FACILITY_HTS_TEST_SETTING_L&D\" ||\n      modality === \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\n    ) {\n      setIsPMTCTModality(true);\n      setErrors({\n        ...errors,\n        lastHivTestDone: \"\",\n        whatWasTheResult: \"\",\n        lastHivTestVaginalOral: \"\",\n        lastHivTestBloodTransfusion: \"\",\n        lastHivTestPainfulUrination: \"\",\n        diagnosedWithTb: \"\",\n        lastHivTestInjectedDrugs: \"\",\n        lastHivTestHadAnal: \"\",\n        lastHivTestForceToHaveSex: \"\",\n      });\n      return true;\n    } else {\n      setIsPMTCTModality(false);\n      return false;\n    }\n  };\n\n  const RESTRICTED_SETTINGS = [\n    \"FACILITY_HTS_TEST_SETTING_ANC\",\n    \"FACILITY_HTS_TEST_SETTING_L&D\",\n    \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\n  ];\n\n  const MSM_CODE = \"TARGET_GROUP_MSM\";\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n  if( props?.patientObject?.gender === \"Male\" ) {\n    if (e.target.name === \"targetGroup\") {\n      const isRestrictedSetting =\n          objValues.testingSetting &&\n          RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n      if (e.target.value === \"TARGET_GROUP_MSM\" && isRestrictedSetting) {\n        toast.error(\n            \"MSM cannot be selected when ANC, L&D, or Postnatal Ward/Breastfeeding is chosen.\",\n            {\n              position: toast.POSITION.BOTTOM_CENTER,\n            }\n        );\n        return;\n      }\n    }\n  }\n\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"testingSetting\" && e.target.value !== \"\") {\n      setErrors({ ...temp, spokeFacility: \"\", healthFacility: \"\" });\n\n      SettingModality(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      let ans = checkPMTCTModality(e.target.value);\n\n      if (\n        e.target.value ===\n          \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\"\n      ) {\n        setShowHealthFacility(true);\n      } else {\n        setShowHealthFacility(false);\n      }\n\n      displayRiskAssessment(\n        riskAssessment.lastHivTestBasedOnRequest,\n        objValues.age,\n        ans\n      );\n\n      //get spoke sites\n      if (\n        e.target.value === \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" ||\n        e.target.value ===\n          \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\"\n      ) {\n        getSpokeFaclityByHubSite();\n      }\n\n      //set risk count\n      if (\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_STANDALONE_HTS\" ||\n        e.target.value === \"FACILITY_HTS_TEST_SETTING_STANDALONE_HTS\"\n      ) {\n        setRiskCount(1);\n      } else if (\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CT\" ||\n        e.target.value === \"FACILITY_HTS_TEST_SETTING_CT\"\n      ) {\n        setRiskCount(1);\n      } else if (e.target.value === \"FACILITY_HTS_TEST_SETTING_TB\") {\n        setRiskCount(1);\n      } else if (e.target.value === \"FACILITY_HTS_TEST_SETTING_STI\") {\n        setRiskCount(1);\n      } else if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_OUTREACH\") {\n        setRiskCount(1);\n      } else {\n        setRiskCount(0);\n      }\n    }\n\n    if (e.target.name === \"entryPoint\") {\n      if (e.target.value === \"HTS_ENTRY_POINT_COMMUNITY\") {\n        HTS_ENTRY_POINT_COMMUNITY();\n      } else if (e.target.value === \"HTS_ENTRY_POINT_FACILITY\") {\n        HTS_ENTRY_POINT_FACILITY();\n      }\n    }\n\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n\n  const displayRiskAssessment = (lastVisit, age, isPMTCTModalityValue) => {\n    let SecAge = age !== \"\" ? age : 0;\n    let ans;\n\n    // for the section to show\n    //  Conditions are : age > 15, riskAssessment.lastHivTestBasedOnRequest === \"false\" and PMTCT Modality === true\n\n    if (lastVisit === \"false\") {\n      if (SecAge < 15 || isPMTCTModalityValue) {\n        setShowRiskAssessment(false);\n        ans = false;\n\n        //\n        if (age !== \"\") {\n          setRiskAssessment({\n            ...riskAssessment,\n            lastHivTestForceToHaveSex: \"\",\n            lastHivTestHadAnal: \"\",\n            lastHivTestInjectedDrugs: \"\",\n            whatWasTheResult: \"\",\n            lastHivTestDone: \"\",\n            diagnosedWithTb: \"\",\n            lastHivTestPainfulUrination: \"\",\n            lastHivTestBloodTransfusion: \"\",\n            lastHivTestVaginalOral: \"\",\n          });\n        }\n\n        //\n      } else if (SecAge > 15) {\n        setShowRiskAssessment(true);\n        ans = true;\n      } else if (lastVisit === \"false\") {\n        setShowRiskAssessment(true);\n        ans = true;\n      } else {\n        setShowRiskAssessment(false);\n        ans = false;\n      }\n    } else {\n      setShowRiskAssessment(false);\n      ans = false;\n    }\n  };\n\n  //Date of Birth and Age handle\n  //Get list of DSD Model Type\n  function SettingModality(settingId) {\n    const setting = settingId;\n    axios\n      .get(`${baseUrl}application-codesets/v2/${setting}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n    temp.dateVisit = objValues.visitDate ? \"\" : \"This field is required.\";\n    temp.entryPoint = objValues.entryPoint ? \"\" : \"This field is required.\";\n    temp.testingSetting = objValues.testingSetting\n      ? \"\"\n      : \"This field is required.\";\n    // temp.modality = objValues.modality ? \"\" : \"This field is required.\";\n    temp.lastHivTestBasedOnRequest = riskAssessment.lastHivTestBasedOnRequest\n      ? \"\"\n      : \"This field is required.\";\n\n    props.patientAge > 15 &&\n      (temp.targetGroup = objValues.targetGroup\n        ? \"\"\n        : \"This field is required.\");\n\n    // objValues.entryPoint !== \"\" &&\n    //     objValues.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\" &&\n    //     (temp.communityEntryPoint = objValues.communityEntryPoint\n    //       ? \"\"\n    //       : \"This field is required.\");\n\n    objValues.testingSetting ===\n      \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" &&\n      (temp.spokeFacility = objValues.spokeFacility\n        ? \"\"\n        : \"This field is required.\");\n\n    showHealthFacility &&\n      (temp.healthFacility = objValues.healthFacility\n        ? \"\"\n        : \"This field is required.\");\n    //objValues.age>15 && riskAssessment.lastHivTestBasedOnRequest==='false' && riskAssessment.lastHivTestDone!==\"\" && riskAssessment.lastHivTestDone!=='Never' && (temp.whatWasTheResult = riskAssessment.whatWasTheResult ? \"\" : \"This field is required.\" )\n\n    //Risk Assement section\n    if (\n      objValues.age > 15 &&\n      riskAssessment.lastHivTestBasedOnRequest === \"false\" &&\n      showRiskAssessment\n    ) {\n      temp.lastHivTestDone = riskAssessment.lastHivTestDone\n        ? \"\"\n        : \"This field is required.\";\n      riskAssessment.lastHivTestDone !== \"\" &&\n        riskAssessment.lastHivTestDone !== \"Never\" &&\n        (temp.whatWasTheResult = riskAssessment.whatWasTheResult\n          ? \"\"\n          : \"This field is required.\");\n\n      temp.lastHivTestVaginalOral = riskAssessment.lastHivTestVaginalOral\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestBloodTransfusion =\n        riskAssessment.lastHivTestBloodTransfusion\n          ? \"\"\n          : \"This field is required.\";\n\n      temp.lastHivTestPainfulUrination =\n        riskAssessment.lastHivTestPainfulUrination\n          ? \"\"\n          : \"This field is required.\";\n\n      temp.diagnosedWithTb = riskAssessment.diagnosedWithTb\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestInjectedDrugs = riskAssessment.lastHivTestInjectedDrugs\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestHadAnal = riskAssessment.lastHivTestHadAnal\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestForceToHaveSex = riskAssessment.lastHivTestForceToHaveSex\n        ? \"\"\n        : \"This field is required.\";\n    }\n    //targetGroup\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  // Getting the number count of riskAssessment True\n  const actualRiskCountTrue = Object.values(riskAssessment);\n  riskCountQuestion = actualRiskCountTrue.filter((x) => x === \"true\");\n\n  const handleInputChangeRiskAssessment = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n\n    if (e.target.name === \"lastHivTestBasedOnRequest\") {\n      displayRiskAssessment(e.target.value, objValues.age, isPMTCTModality);\n      setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n    }\n  };\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const patientGender = props.patientObject?.gender || \"\";\n\n    // Rule 1: Female patients shouldn't select MSM under restricted settings\n    const isRestrictedSetting =\n        objValues.testingSetting &&\n        RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n    const isMSMSelected =\n        objValues.targetGroup === \"TARGET_GROUP_MSM\";\n\n    const isFemale =\n        patientGender === \"Female\" || patientGender === \"F\";\n\n    if (isFemale && isRestrictedSetting && isMSMSelected) {\n      toast.error(\n          \"MSM cannot be selected when ANC, L&D, or Postnatal Ward/Breastfeeding is chosen.\",\n          {\n            position: toast.POSITION.BOTTOM_CENTER,\n          }\n      );\n      return;\n    }\n\n    // Rule 2: Male patients shouldn't select female-only settings\n    const isMale =\n        patientGender === \"Male\" || patientGender === \"M\";\n\n    if (isMale && isRestrictedSetting) {\n      toast.error(\n          \"This setting is only applicable for female patients.\",\n          {\n            position: toast.POSITION.BOTTOM_CENTER,\n          }\n      );\n      return;\n    }\n    // Validate visit date\n    const visitDateError = validateVisitDateWithDOB(objValues.dob, objValues.visitDate);\n    if (visitDateError) {\n      toast.error(visitDateError, {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n      return;\n    }\n\n    getMenuLogic(objValues);\n    let newModality = isPMTCTModality ? \"skip\" : \"fill\";\n    let latestForm = getNextForm(\n        \"Risk_Stratification\",\n        objValues.age,\n        newModality,\n        \"unknown\"\n    );\n\n    props.patientObj.targetGroup = objValues.targetGroup;\n    props.patientObj.testingSetting = objValues.testingSetting;\n    props.patientObj.dateVisit = objValues.visitDate;\n    props.patientObj.modality = objValues.modality;\n    props.patientObj.riskStratificationResponseDto = objValues;\n    objValues.riskAssessment = riskAssessment;\n\n    // Save logic\n    if (\n        props.patientObj.riskStratificationResponseDto &&\n        props.patientObj.riskStratificationResponseDto.id\n    ) {\n      if (validate()) {\n        setSaving(true);\n        handleItemClick(latestForm[0], latestForm[1]);\n        props.setHideOtherMenu(false);\n\n        axios\n            .put(\n                `${baseUrl}risk-stratification/${props.patientObj.riskStratificationResponseDto.id}`,\n                objValues,\n                { headers: { Authorization: `Bearer ${token}` } }\n            )\n            .then((response) => {\n              setSaving(false);\n              props.patientObj.riskStratificationResponseDto = response.data;\n              objValues.code = response.data.code;\n              props.setExtra(objValues);\n              toast.success(\"Risk stratification saved successfully!\");\n            })\n            .catch((error) => {\n              setSaving(false);\n              const errorMessage =\n                  error.response?.data?.apierror?.message ||\n                  \"Something went wrong. Please try again.\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            });\n      }\n    } else {\n      if (validate()) {\n        setSaving(true);\n        objValues.dob = props.patientObj.dateOfBirth\n            ? props.patientObj.dateOfBirth\n            : props?.personInfopersonResponseDto?.dateOfBirth;\n\n        axios\n            .post(`${baseUrl}risk-stratification`, objValues, {\n              headers: { Authorization: `Bearer ${token}` },\n            })\n            .then((response) => {\n              setSaving(false);\n              objValues.code = response.data.code;\n              props.setExtra(objValues);\n              handleItemClick(latestForm[0], latestForm[1]);\n              props.setHideOtherMenu(false);\n              toast.success(\"Risk stratification saved successfully!\");\n            })\n            .catch((error) => {\n              setSaving(false);\n              const errorMessage =\n                  error.response?.data?.apierror?.message ||\n                  \"Something went wrong. Please try again.\";\n              toast.error(errorMessage, {\n                position: toast.POSITION.BOTTOM_CENTER,\n              });\n            });\n      } else {\n        toast.error(\"Please correct all errors before submitting.\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n      }\n    }\n  };\n\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>RISK STRATIFICATION</h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Modality\n              </div>\n              <div className=\"row\">\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Entry Point <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"entryPoint\"\n                      id=\"entryPoint\"\n                      value={objValues.entryPoint}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {entryPoint.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.entryPoint !== \"\" ? (\n                      <span className={classes.error}>{errors.entryPoint}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/* {objValues.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\" && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Community Entry Point{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"communityEntryPoint\"\n                        id=\"communityEntryPoint\"\n                        value={objValues.communityEntryPoint}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}>Select</option>\n                        {entryPointCommunity.map((value) => (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.communityEntryPoint !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.communityEntryPoint}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )} */}\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Visit Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"visitDate\"\n                      id=\"visitDate\"\n                      value={objValues.visitDate}\n                      onChange={handleInputChange}\n                      min={\n                        props?.patientObj?.personResponseDto?.dateOfRegistration\n                      }\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      readOnly={props.activePage.actionType === \"view\"}\n                    />\n                    {errors.dateVisit !== \"\" ? (\n                      <span className={classes.error}>{errors.dateVisit}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Setting <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"testingSetting\"\n                      id=\"testingSetting\"\n                      value={objValues.testingSetting}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {entryPointSetting &&\n                        entryPointSetting.map((value) => (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n\n                      {/* <option value=\"TEST_SETTING_CT\">CT</option>\n                                        <option value=\"TEST_SETTING_TB\">TB</option>\n                                        <option value=\"TEST_SETTING_STI\">STI</option>\n                                        <option value=\"TEST_SETTING_OPD\">OPD</option>\n                                        <option value=\"TEST_SETTING_WARD\">WARD</option>\n                                        <option value=\"TEST_SETTING_STANDALONE_HTS\">STANDALONE HTS</option>\n                                        \n                                        <option value=\"TEST_SETTING_FP\">FP</option>\n                                        <option value=\"TEST_SETTING_OUTREACH\">OUTREACH</option>\n                                        <option value=\"TEST_SETTING_OTHERS\">OTHERS</option> */}\n                    </select>\n                    {errors.testingSetting !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.testingSetting}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/* <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Modality <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"modality\"\n                      id=\"modality\"\n                      value={objValues.modality}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {setting.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.modality !== \"\" ? (\n                      <span className={classes.error}>{errors.modality}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div> */}\n\n                {objValues.testingSetting ===\n                  \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Spoke Health Facility{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n\n                      {spokeFacList.length > 0 ? (\n                        <>\n                          {\" \"}\n                          <select\n                            className=\"form-control\"\n                            name=\"spokeFacility\"\n                            id=\"spokeFacility\"\n                            value={objValues.spokeFacility}\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                              textTransform: \"capitalize  !important\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {spokeFacList.map((value) => (\n                              <option key={value.id} value={value.spokeSite}>\n                                {value.spokeSite}\n                              </option>\n                            ))}\n                          </select>\n                        </>\n                      ) : (\n                        <Input\n                          type=\"text\"\n                          name=\"spokeFacility\"\n                          id=\"spokeFacility\"\n                          value={objValues.spokeFacility}\n                          //value={Math.floor(Math.random() * 1093328)}\n                          // onBlur={checkClientCode}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      )}\n                      {errors.spokeFacility !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.spokeFacility}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n                {showHealthFacility && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Health Facility <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      {spokeFacList.length > 0 ? (\n                        <select\n                          className=\"form-control\"\n                          name=\"healthFacility\"\n                          id=\"healthFacility\"\n                          value={objValues.healthFacility}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                            textTransform: \"capitalize  !important\",\n                          }}\n                        >\n                          <option value={\"\"}>Select</option>\n                          {spokeFacList.map((value) => (\n                            <option key={value.id} value={value.spokeSite}>\n                              {value.spokeSite}\n                            </option>\n                          ))}\n                        </select>\n                      ) : (\n                        <Input\n                          type=\"text\"\n                          name=\"healthFacility\"\n                          id=\"healthFacility\"\n                          value={objValues.healthFacility}\n                          //value={Math.floor(Math.random() * 1093328)}\n                          // onBlur={checkClientCode}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      )}\n                      {errors.healthFacility !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.healthFacility}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Target Group <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"targetGroup\"\n                      id=\"targetGroup\"\n                      onChange={handleInputChange}\n                      value={objValues.targetGroup}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {kP\n                        .filter((value) => {\n                          if (\n                            props.patientAge > 14 &&\n                            (value.id === 961 || value.id === 475)\n                          ) {\n                            return false;\n                          }\n                          return true;\n                        })\n                        .map((value) => {\n                          return (\n                            <option key={value.id} value={value.code}>\n                              {value.display}\n                            </option>\n                          );\n                        })}\n                    </select>\n                    {errors.targetGroup !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.targetGroup}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              </div>\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Is this HIV test based on a Clinician/Doctor/Health Care\n                      Provider's request ?{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"lastHivTestBasedOnRequest\"\n                      id=\"lastHivTestBasedOnRequest\"\n                      value={riskAssessment.lastHivTestBasedOnRequest}\n                      onChange={handleInputChangeRiskAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}>Select</option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.lastHivTestBasedOnRequest !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.lastHivTestBasedOnRequest}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              </div>\n              <br />\n              {showRiskAssessment && (\n                <>\n                  <div\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                    style={{\n                      backgroundColor: \"#992E62\",\n                      width: \"125%\",\n                      height: \"35px\",\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    HIV Risk Assessment (Last 3 months)\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        When was your last HIV test done?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestDone\"\n                        id=\"lastHivTestDone\"\n                        value={riskAssessment.lastHivTestDone}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"<1\"> {\"< 1\"} month</option>\n                        <option value=\"1-3 Months\">1-3 Months</option>\n                        <option value=\"4-6 Months\">4-6 Months</option>\n                        <option value=\">6 Months\"> {\">6\"} Months</option>\n                        <option value=\"Never\"> Never</option>\n                      </select>\n                      {errors.lastHivTestDone !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestDone}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {riskAssessment.lastHivTestDone !== \"\" &&\n                    riskAssessment.lastHivTestDone !== \"Never\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            What was the result?{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"whatWasTheResult\"\n                            id=\"whatWasTheResult\"\n                            value={riskAssessment.whatWasTheResult}\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled={props.activePage.actionType === \"view\"}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"Positive\">Positive</option>\n                            <option value=\"Negative\">Negative</option>\n                          </select>\n                          {errors.whatWasTheResult !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.whatWasTheResult}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had anal or vaginal\n                        or oral sex without a condom with someone who was HIV\n                        positive or unaware of their HIV status?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestVaginalOral\"\n                        id=\"lastHivTestVaginalOral\"\n                        value={riskAssessment.lastHivTestVaginalOral}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestVaginalOral !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestVaginalOral}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had a blood or blood\n                        product transfusion?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestBloodTransfusion\"\n                        id=\"lastHivTestBloodTransfusion\"\n                        value={riskAssessment.lastHivTestBloodTransfusion}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestBloodTransfusion !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestBloodTransfusion}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you experienced painful\n                        urination, lower abdominal pain, vaginal or penile\n                        discharge, pain during sexual intercourse, thick,\n                        cloudy, or foul smelling discharge and/or small bumps or\n                        blisters near the mouth, penis, vagina, or anal areas?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestPainfulUrination\"\n                        id=\"lastHivTestPainfulUrination\"\n                        value={riskAssessment.lastHivTestPainfulUrination}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestPainfulUrination !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestPainfulUrination}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you been diagnosed with TB or currently have any of\n                        the following symptoms : cough, fever, weight loss,\n                        night sweats? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"diagnosedWithTb\"\n                        id=\"diagnosedWithTb\"\n                        value={riskAssessment.diagnosedWithTb}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.diagnosedWithTb !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.diagnosedWithTb}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you ever injected drugs,\n                        shared needles or other sharp objects with someone known\n                        to be HIV positive or who you didn’t know their HIV\n                        status? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestInjectedDrugs\"\n                        id=\"sexUnderInfluence\"\n                        value={riskAssessment.lastHivTestInjectedDrugs}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestInjectedDrugs !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestInjectedDrugs}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had anal, oral or\n                        vaginal sex in exchange for money or other benefits?\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestHadAnal\"\n                        id=\"lastHivTestHadAnal\"\n                        value={riskAssessment.lastHivTestHadAnal}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestHadAnal !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestHadAnal}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you been forced to have\n                        sex? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestForceToHaveSex\"\n                        id=\"moreThanOneSexPartnerLastThreeMonths\"\n                        value={riskAssessment.lastHivTestForceToHaveSex}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestForceToHaveSex !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestForceToHaveSex}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <br />\n                </>\n              )}\n\n              <br />\n              <Message warning>\n                <h4> Risk assessment score </h4>\n                <b>\n                  Score :\n                  {riskCount +\n                    (props.patientAge > 15 ? riskCountQuestion.length : 0)}\n                </b>\n              </Message>\n              <hr />\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                  {props.activePage.actionType === \"update\" && (\n                    <Button\n                      content=\"Update & Continue\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  )}\n                  {props.activePage.actionType === \"view\" && (\n                    <Button\n                      content=\"Next\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  )}\n\n                  {/* <Button content='Save ' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit} disabled={saving}/> */}\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default RiskStratification;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/RecencyTesting.js",["1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { getNextForm } from \"../../../../utility\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst Recency = (props) => {\n  console.log(\"data1\", props.patientObj);\n  const classes = useStyles();\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  let temp = { ...errors };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n\n  const [objValues, setObjValues] = useState({\n    htsClientId: clientId,\n    recency: {},\n    personId: patientID,\n  });\n  const [recency, setRecency] = useState({\n    optOutRTRI:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.optOutRTRI\n        : \"\",\n    optOutRTRITestName:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.optOutRTRITestName\n        : \"\",\n    optOutRTRITestDate:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.optOutRTRITestDate\n        : \"\",\n    rencencyId:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.rencencyId\n        : \"\",\n    controlLine:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.controlLine\n        : \"\",\n    verififcationLine:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.verififcationLine\n        : \"\",\n    longTermLine:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.longTermLine\n        : \"\",\n    rencencyInterpretation:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.rencencyInterpretation\n        : \"\",\n    hasViralLoad:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.hasViralLoad\n        : \"\",\n    sampleCollectedDate:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleCollectedDate\n        : \"\",\n    sampleReferanceNumber:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleReferanceNumber\n        : \"\",\n    dateSampleSentToPCRLab:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.dateSampleSentToPCRLab\n        : \"\",\n    sampleTestDate:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleTestDate\n        : \"\",\n    sampleType:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleType\n        : \"\",\n    receivingPcrLab:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.receivingPcrLab\n        : \"\",\n    viralLoadResultClassification:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.viralLoadResultClassification\n        : \"\",\n    recencyResult:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.recencyResult\n        : \"\",\n    finalRecencyResult:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.finalRecencyResult\n        : \"\",\n    viralLoadConfirmationResult:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.viralLoadConfirmationResult\n        : \"\",\n    receivedResultDate:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.receivedResultDate\n        : \"\",\n  });\n\n  useEffect(() => {\n    if (props.patientObj && props.patientObj.recency !== null) {\n      // console.log(props.patientObj.recency);\n      setRecency(props.patientObj.recency);\n    }\n    if (props.patientObj) {\n      if (\n        props.patientObj.confirmatoryTest2 &&\n        props.patientObj.confirmatoryTest2.date2 !== \"\"\n      ) {\n        setHivTestDate(props.patientObj.confirmatoryTest2.date2);\n      } else if (\n        props.patientObj.confirmatoryTest &&\n        props.patientObj.confirmatoryTest.date !== \"\"\n      ) {\n        setHivTestDate(props.patientObj.confirmatoryTest.date);\n      } else {\n        setHivTestDate(\"\");\n      }\n    }\n    if (\n      recency.longTermLine === \"true\" &&\n      recency.verififcationLine === \"true\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"RTRI Long Term\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Long Term\" });\n    } else if (\n      recency.longTermLine === \"false\" &&\n      recency.verififcationLine === \"true\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"RTRI Recent\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Recent\" });\n      //setRecency ({...recency,  ['hasViralLoad']: 'true'});\n    } else if (\n      recency.longTermLine === \"false\" &&\n      recency.verififcationLine === \"false\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"Negative\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Negative\" });\n    } else if (\n      recency.longTermLine === \"true\" &&\n      recency.verififcationLine === \"true\" &&\n      recency.controlLine === \"false\"\n    ) {\n      recency.rencencyInterpretation = \"Invalid\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\n    } else if (\n      recency.longTermLine === \"true\" &&\n      recency.verififcationLine === \"false\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"Invalid\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\n    } else {\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"\" });\n    }\n    if (recency.optOutRTRI === \"true\") {\n      setRecency({\n        optOutRTRI:\n          props.patientObj && props.patientObj.recency !== null\n            ? props.patientObj.recency.optOutRTRI\n            : \"\",\n        optOutRTRITestName: \"\",\n        optOutRTRITestDate: \"\",\n        rencencyId: \"\",\n        controlLine: \"\",\n        verififcationLine: \"\",\n        longTermLine: \"\",\n        rencencyInterpretation: \"\",\n        hasViralLoad: \"\",\n        sampleCollectedDate: \"\",\n        sampleReferanceNumber: \"\",\n        dateSampleSentToPCRLab: \"\",\n        sampleTestDate: \"\",\n        sampleType: \"\",\n        receivingPcrLab: \"\",\n        viralLoadResultClassification: \"\",\n\n        recencyResult: \"\",\n        finalRecencyResult: \"\",\n        viralLoadConfirmationResult: \"\",\n        receivedResultDate: \"\",\n      });\n    }\n  }, [\n    recency.longTermLine,\n    recency.verififcationLine,\n    recency.controlLine,\n    props.patientObj,\n  ]);\n\n  const handleInputChangeRecency = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"viralLoadConfirmationResult\") {\n      if (e.target.value >= 1000) {\n        recency.viralLoadResultClassification = \">=1000\";\n        recency.finalRecencyResult = \"RITA Recent\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value < 1000) {\n        recency.viralLoadResultClassification = \"<1000\";\n        recency.finalRecencyResult = \"RITA Long term\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      }\n    }\n\n    if(e.target.name === \"controlLine\" || e.target.name === \"verififcationLine\" ||   e.target.name === \"longTermLine\"){\n      setErrors({...errors, hasViralLoad: \"\"})\n        // hasViralLoad\n      \n      }\n      \n    if (e.target.name === \"viralLoadResultClassification\") {\n      if (e.target.value === \">=1000\") {\n        recency.finalRecencyResult = \"RITA Recent\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value === \"<1000\") {\n        recency.finalRecencyResult = \"RITA Long term\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value === \"Failed run\") {\n        recency.finalRecencyResult = \"RITA Inconclusive\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value === \"Invalid viral load result\") {\n        recency.finalRecencyResult = \"RITA Inconclusive\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else {\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      }\n    } else if (e.target.name === \"rencencyId\" && e.target.value !== \"\") {\n      const recencyIdNumberValue = checkRecencyLimit(e.target.value);\n      setRecency({ ...recency, [e.target.name]: recencyIdNumberValue });\n    }else if(e.target.name === \"optOutRTRI\"){\n      setRecency({\n        // optOutRTRI: \"false\",\n        optOutRTRITestName: \"\",\n        optOutRTRITestDate: \"\",\n        rencencyId: \"\",\n        controlLine: \"\",\n        verififcationLine: \"\",\n        longTermLine: \"\",\n        rencencyInterpretation: \"\",\n        hasViralLoad: \"\",\n        sampleCollectedDate: \"\",\n        sampleReferanceNumber: \"\",\n        dateSampleSentToPCRLab: \"\",\n        sampleTestDate: \"\",\n        sampleType: \"\",\n        receivingPcrLab: \"\",\n        viralLoadResultClassification: \"\",\n        recencyResult: \"\",\n        finalRecencyResult: \"\",\n        viralLoadConfirmationResult: \"\",\n         [e.target.name]: e.target.value });\n\n         setErrors({ ...temp,\n          optOutRTRITestName: \"\",\n          optOutRTRITestDate: \"\",\n          rencencyId: \"\",\n          controlLine: \"\",\n          verififcationLine: \"\",\n          longTermLine: \"\",\n          rencencyInterpretation: \"\",\n          hasViralLoad: \"\",\n          sampleCollectedDate: \"\",\n          sampleReferanceNumber: \"\",\n          dateSampleSentToPCRLab: \"\",\n          sampleTestDate: \"\",\n          sampleType: \"\",\n          receivingPcrLab: \"\",\n          viralLoadResultClassification: \"\",\n          recencyResult: \"\",\n          finalRecencyResult: \"\",\n          viralLoadConfirmationResult: \"\", [e.target.name]: \"\" });\n\n    } else if (e.target.name === \"receivedResultDate\") {\n      setRecency({ ...recency, [e.target.name]: e.target.value });\n    } else {\n      setRecency({ ...recency, [e.target.name]: e.target.value });\n    }\n  };\n  const checkRecencyLimit = (e) => {\n    const limit = 10;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n    recency.optOutRTRI === \"false\" &&\n    (temp.optOutRTRITestName = recency.optOutRTRITestName\n      ? \"\"\n      : \"This field is required.\");\n\n\n     recency.optOutRTRI === \"false\" &&\n      (temp.optOutRTRITestDate = recency.optOutRTRITestDate\n        ? \"\"\n        : \"This field is required.\");\n\n  \n      recency.optOutRTRI === \"false\" &&\n        (temp.rencencyId = recency.rencencyId\n          ? \"\"\n          : \"This field is required.\");\n\n         recency.optOutRTRI === \"false\" &&\n          (temp.controlLine = recency.controlLine\n            ? \"\"\n            : \"This field is required.\")\n\n            \n  \n          recency.optOutRTRI === \"false\" &&\n          (temp.verififcationLine = recency.verififcationLine\n            ? \"\"\n            : \"This field is required.\");\n\n\n            recency.optOutRTRI === \"false\" &&\n            (temp.longTermLine = recency.longTermLine\n              ? \"\"\n              : \"This field is required.\")\n\n\n\n              recency.optOutRTRI === \"false\" &&\n              (temp.rencencyInterpretation = recency.rencencyInterpretation\n                ? \"\"\n                : \"This field is required.\")\n\n      recency.hasViralLoad == \"true\" &&\n        (temp.sampleReferanceNumber = recency.sampleReferanceNumber\n          ? \"\"\n          : \"This field is required.\");\n\n    // {  recency.sampleCollectedDate!=='' && (temp.dateSampleSentToPCRLab = recency.dateSampleSentToPCRLab ? \"\" : \"This field is required.\")}\n\n      recency.hasViralLoad == \"true\" &&\n        (temp.sampleType = recency.sampleType ? \"\" : \"This field is required.\");\n\n\n          recency.rencencyInterpretation === \"RTRI Recent\" &&\n            (temp.hasViralLoad = recency.hasViralLoad\n              ? \"\"\n              : \"This field is required.\");\n \n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n      let latestForm = getNextForm(\n        \"HIV_Recency_Testing\",\n        props.patientAge,\n        \"\",\n        props?.patientObj?.hivTestResult\n      );\n    objValues.htsClientId = clientId;\n    objValues.recency = recency;\n    objValues.personId = patientID;\n    //console.log(recency)\n    if (validate() ) {\n      setSaving(true);\n      axios\n        .put(`${baseUrl}hts/${clientId}/recency`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          props.setPatientObj(response.data);\n          //toast.success(\"Risk Assesment successful\");\n          //comment this out for release\n          // handleItemClick(\"fit-history\", \"recency-testing\");\n          if (\n            props?.patientObj?.hivTestResult && props?.patientObj?.hivTestResult.toLowerCase() ===\n            \"positive\"\n          ) {\n            handleItemClick(\"pns-history\", \"recency-testing\");\n          }\n\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2>RECENCY FORM </h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>RECENCY</h5>\n              </LabelRibbon>\n              <br />\n              <br />\n\n              \n              <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Opt Out of RTRI? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"optOutRTRI\"\n                    id=\"optOutRTRI\"\n                    value={recency.optOutRTRI}\n                    onChange={handleInputChangeRecency}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-8\"></div>\n              {recency.optOutRTRI === \"false\" && (\n                <>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Test Name <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"optOutRTRITestName\"\n                        id=\"optOutRTRITestName\"\n                        value={recency.optOutRTRITestName}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"Asante\">Asante</option>\n                        <option value=\"Others\">Others</option>\n                      </select>\n                      {errors.optOutRTRITestName !== \"\" ? (\n                      <span className={classes.error}>{errors.optOutRTRITestName}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Test Date <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        type=\"date\"                      \n                         onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"optOutRTRITestDate\"\n                        id=\"optOutRTRITestDate\"\n                        value={recency.optOutRTRITestDate}\n                        onChange={handleInputChangeRecency}\n                        min={\n                          hivTestDate !== \"\" && hivTestDate !== null\n                            ? hivTestDate\n                            : \"\"\n                        }\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                      {errors.optOutRTRITestDate !== \"\" ? (\n                      <span className={classes.error}>{errors.optOutRTRITestDate}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Recency ID <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        className=\"form-control\"\n                        name=\"rencencyId\"\n                        id=\"rencencyId\"\n                        type=\"text\"\n                        value={recency.rencencyId}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                  {errors.rencencyId !== \"\" ? (\n                      <span className={classes.error}>{errors.rencencyId}</span>\n                    ) : (\n                      \"\"\n                    )}\n\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Control Line <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"controlLine\"\n                        id=\"controlLine\"\n                        value={recency.controlLine}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.controlLine !== \"\" ? (\n                      <span className={classes.error}>{errors.controlLine}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Verification Line{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"verififcationLine\"\n                        id=\"verififcationLine\"\n                        value={recency.verififcationLine}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.verififcationLine !== \"\" ? (\n                      <span className={classes.error}>{errors.verififcationLine}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Long Term Line <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"longTermLine\"\n                        id=\"longTermLine\"\n                        value={recency.longTermLine}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.longTermLine !== \"\" ? (\n                      <span className={classes.error}>{errors.longTermLine}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Recency Interpretation{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        className=\"form-control\"\n                        name=\"rencencyInterpretation\"\n                        id=\"rencencyInterpretation\"\n                        type=\"text\"\n                        value={recency.rencencyInterpretation}\n                        disabled\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                      {errors.rencencyInterpretation !== \"\" ? (\n                      <span className={classes.error}>{errors.rencencyInterpretation}</span>\n                    ) : (\n                      \"\"\n                    )}\n\n                    </FormGroup>\n                  </div>\n                  {recency.rencencyInterpretation === \"RTRI Recent\" && (\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Has Viral Load been ordered? <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"hasViralLoad\"\n                          id=\"hasViralLoad\"\n                          value={recency.hasViralLoad}\n                          onChange={handleInputChangeRecency}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.hasViralLoad !== \"\" ? (\n                      <span className={classes.error}>{errors.hasViralLoad}</span>\n                    ) : (\n                      \"\"\n                    )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  {recency.hasViralLoad === \"true\" && (\n                    <>\n                      <div className=\"row\">\n                        <h4>Recency Viral Load Classification :</h4>\n                        <br />\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Recency Sample Collected Date</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"sampleCollectedDate\"\n                              id=\"sampleCollectedDate\"\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                              value={recency.sampleCollectedDate}\n                              min={recency.optOutRTRITestDate}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              readOnly={props.activePage.actionType === \"view\"}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Sample Reference Number{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"sampleReferanceNumber\"\n                              id=\"sampleReferanceNumber\"\n                              type=\"text\"\n                              value={recency.sampleReferanceNumber}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            />\n                            {errors.sampleReferanceNumber !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.sampleReferanceNumber}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Sample Type{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"sampleType\"\n                              id=\"sampleType\"\n                              value={recency.sampleType}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"DBS\">DBS</option>\n                              <option value=\"Plasma\">Plasma</option>\n                            </select>\n                            {errors.sampleType !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.sampleType}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Date Recency Sample Sent to PCR Lab</Label>\n                            <Input\n                                className=\"form-control\"\n                                name=\"dateSampleSentToPCRLab\"\n                                id=\"dateSampleSentToPCRLab\"\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                // min={recency.optOutRTRITestDate}\n                                min={recency.sampleCollectedDate}\n                                value={recency.dateSampleSentToPCRLab}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                onChange={handleInputChangeRecency}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                readOnly={props.activePage.actionType === \"view\"}\n                            />\n                            {errors.dateSampleSentToPCRLab !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.dateSampleSentToPCRLab}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Recency Sample Test Date</Label>\n                            <Input\n                                className=\"form-control\"\n                                name=\"sampleTestDate\"\n                                id=\"sampleTestDate\"\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                // min={recency.optOutRTRITestDate}\n                                min={recency.dateSampleSentToPCRLab}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                value={recency.sampleTestDate}\n                                onChange={handleInputChangeRecency}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                readOnly={props.activePage.actionType === \"view\"}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Receiving PCR Lab</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"receivingPcrLab\"\n                              id=\"receivingPcrLab\"\n                              type=\"text\"\n                              value={recency.receivingPcrLab}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              readOnly={props.activePage.actionType === \"view\"}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Viral Load Confirmation Result (copies/ml)\n                            </Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"viralLoadConfirmationResult\"\n                              id=\"viralLoadConfirmationResult\"\n                              type=\"number\"\n                              value={recency.viralLoadConfirmationResult}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            />\n                          </FormGroup>\n                        </div>\n\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Viral Load Result Received Date\n                            </Label>\n                            <Input\n                                className=\"form-control\"\n                                name=\"receivedResultDate\"\n                                id=\"receivedResultDate\"\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                // min={recency.optOutRTRITestDate}\n                                min={recency.sampleTestDate}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                value={recency.receivedResultDate}\n                                onChange={handleInputChangeRecency}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                readOnly={props.activePage.actionType === \"view\"}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Viral Load Result Classification and\n                              Result (copies/ml)\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"viralLoadResultClassification\"\n                              id=\"viralLoadResultClassification\"\n                              value={recency.viralLoadResultClassification}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}>Select</option>\n                              <option value=\">=1000\">{\">= \"} 1000</option>\n                              <option value=\"<1000\">{\"< \"} 1000</option>\n                              <option value=\"Failed run\">Failed run</option>\n                              <option value=\"Invalid viral load result\">\n                                Invalid viral load result\n                              </option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                        {/* <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Result (copies/ml)</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"recencyResult\"\n                                            id=\"recencyResult\"\n                                            type=\"text\"\n                                            value={recency.recencyResult}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n\n                                    </FormGroup>\n                                </div> */}\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Final Recency Result</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"finalRecencyResult\"\n                              id=\"finalRecencyResult\"\n                              type=\"text\"\n                              disabled\n                              value={recency.finalRecencyResult}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              readOnly={props.activePage.actionType === \"view\"}\n                            />\n                          </FormGroup>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* <Button\n                    content=\"Back\"\n                    icon=\"left arrow\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={() => handleItemClick(\"post-test\", \"post-test\")}\n                  /> */}\n                  <Button\n                    content=\"Save & Continue\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={\n                      props.patientObj?.postTestCounselingKnowledgeAssessment\n                        ?.hivTestResult === \"true\" && recency.optOutRTRI === \"\"\n                        ? true\n                        : false\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default Recency;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/PostTest.js",["1094","1095","1096","1097","1098"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory } from \"react-router-dom\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst PostTest = (props) => {\n  console.log(\"post\", props);\n  const classes = useStyles();\n  const history = useHistory();\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [saving, setSaving] = useState(false);\n  const { postTestCounselingKnowledgeAssessment } = props.patientObj;\n\n  ///const [errors, setErrors] = useState({});\n  const [objValues, setObjValues] = useState({\n    htsClientId: clientId,\n    postTestCounselingKnowledgeAssessment: {},\n    personId: patientID,\n  });\n\n  const [postTest, setPostTest] = useState({\n    hivTestResult: \"\",\n    hivTestBefore:\n      props.activePage.activeObject?.riskStratificationResponseDto\n        ?.riskAssessment?.lastHivTestDone !== \"Never\" &&\n      props.activePage.activeObject?.riskStratificationResponseDto\n        ?.riskAssessment?.whatWasTheResult === \"Positive\"\n        ? \"Previously tested positive in HIV care\"\n        : postTestCounselingKnowledgeAssessment?.hivTestBefore,\n    hivRequestResult: postTestCounselingKnowledgeAssessment?.hivRequestResult,\n    hivRequestResultCt:\n      postTestCounselingKnowledgeAssessment?.hivRequestResultCt,\n    clientReceivedHivTestResult:\n      postTestCounselingKnowledgeAssessment?.clientReceivedHivTestResult,\n    postTestCounseling:\n      postTestCounselingKnowledgeAssessment?.postTestCounseling,\n    riskReduction: postTestCounselingKnowledgeAssessment?.riskReduction,\n    postTestDisclosure:\n      postTestCounselingKnowledgeAssessment?.postTestDisclosure,\n    bringPartnerHivtesting:\n      postTestCounselingKnowledgeAssessment?.bringPartnerHivtesting,\n    childrenHivtesting:\n      postTestCounselingKnowledgeAssessment?.childrenHivtesting,\n    informationFp: postTestCounselingKnowledgeAssessment?.informationFp,\n    partnerFpThanCondom:\n      postTestCounselingKnowledgeAssessment?.partnerFpThanCondom,\n    partnerFpUseCondom:\n      postTestCounselingKnowledgeAssessment?.partnerFpUseCondom,\n    correctCondomUse: postTestCounselingKnowledgeAssessment?.correctCondomUse,\n    condomProvidedToClient:\n      postTestCounselingKnowledgeAssessment?.condomProvidedToClient,\n    unprotectedSexRegularPartnerLastThreeMonth:\n      postTestCounselingKnowledgeAssessment?.unprotectedSexRegularPartnerLastThreeMonth,\n    referredToServices:\n      postTestCounselingKnowledgeAssessment?.referredToServices,\n    lubricantProvidedToClient:\n      postTestCounselingKnowledgeAssessment?.lubricantProvidedToClient,\n    condomProvidedToClientCount:\n      postTestCounselingKnowledgeAssessment?.condomProvidedToClientCount,\n    lubricantProvidedToClientCount:\n      postTestCounselingKnowledgeAssessment?.lubricantProvidedToClientCount,\n  });\n  const handleInputChangePostTest = (e) => {\n    if (e.target.name === \"lubricantProvidedToClientCount\") {\n      if (e.target.value >= 0) {\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\n      }\n    }else if (e.target.name === \"condomProvidedToClientCount\") {\n      if (e.target.value >= 0) {\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\n      } else {\n        setPostTest({ ...postTest, [e.target.name]: 0 });\n      }\n    } else {\n      setPostTest({ ...postTest, [e.target.name]: e.target.value });\n    }\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  useEffect(() => {\n    //console.log(props.patientObj.postTestCounselingKnowledgeAssessment)\n    setPostTest({\n      ...postTest,\n      ...props.patientObj.postTestCounselingKnowledgeAssessment,\n    });\n\n    if (\n      props.patientObj?.hivTestResult2?.length > 0 &&\n      props.patientObj.hivTestResult2 === \"Positive\"\n    ) {\n      postTest.hivTestResult = \"true\";\n      setPostTest({ ...postTest, hivTestResult: \"true\" });\n    } else if (\n      props.patientObj?.hivTestResult2?.length > 0 &&\n      props.patientObj.hivTestResult2 === \"Negative\"\n    ) {\n      postTest.hivTestResult = \"false\";\n      setPostTest({ ...postTest, hivTestResult: \"false\" });\n    } else if (\n      props.patientObj?.hivTestResult?.length > 0 &&\n      props.patientObj.hivTestResult === \"Positive\"\n    ) {\n      postTest.hivTestResult = \"true\";\n      setPostTest({ ...postTest, hivTestResult: \"true\" });\n    } else if (\n      props.patientObj?.hivTestResult?.length > 0 &&\n      props.patientObj.hivTestResult === \"Negative\"\n    ) {\n      postTest.hivTestResult = \"false\";\n      setPostTest({ ...postTest, hivTestResult: \"false\" });\n    }\n  }, [props.patientObj]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n      let latestForm = getNextForm(\n        \"Post_Test_Counseling\",\n        props?.patientAge,\n        \"\",\n        props?.patientObj?.hivTestResult\n      );\n\n    if (props.activePage.actionType === \"view\") {\n      //e.preventDefault();\n         handleItemClick(latestForm[0], latestForm[1]);\n    }\n    if (props.activePage.actionType === \"update\") {\n      setSaving(true);\n      //e.preventDefault();\n\n      objValues.htsClientId = clientId;\n      objValues.postTestCounselingKnowledgeAssessment = postTest;\n      objValues.personId = patientID;\n      axios\n        .put(`${baseUrl}hts/${clientId}/post-test-counseling`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n\n          props.setPatientObj(response.data);\n          toast.success(\"Post Test Assesment successful\");\n          handleItemClick(latestForm[0], latestForm[1]);\n\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2>POST TEST COUNSELING</h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\n              </LabelRibbon>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    HIV test result <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivTestResult\"\n                    id=\"hivTestResult\"\n                    value={postTest.hivTestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    // disabled={props.activePage.actionType === \"view\"}\n                    disabled={true}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Positive</option>\n                    <option value=\"false\">Negative</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Have you been tested for HIV before within this year?{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivTestBefore\"\n                    id=\"hivTestBefore\"\n                    value={postTest.hivTestBefore}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Not previously tested\">\n                      Not previously tested\n                    </option>\n                    <option value=\"Previously tested negative\">\n                      Previously tested negative\n                    </option>\n                    <option value=\"Previously tested positive in HIV care\">\n                      Previously tested positive in HIV care\n                    </option>\n                    <option value=\"Previously tested positive not in HIV care\">\n                      Previously tested positive not in HIV care\n                    </option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>HIV Request and Result form signed by tester </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivRequestResult\"\n                    id=\"hivRequestResult\"\n                    value={postTest.hivRequestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    HIV Request and Result form filled with CT Intake Form{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivRequestResultCt\"\n                    id=\"hivRequestResultCt\"\n                    value={postTest.hivRequestResultCt}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client received HIV test result </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"clientReceivedHivTestResult\"\n                    id=\"clientReceivedHivTestResult\"\n                    value={postTest.clientReceivedHivTestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Post test counseling done </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"postTestCounseling\"\n                    id=\"postTestCounseling\"\n                    value={postTest.postTestCounseling}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Risk reduction plan developed </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"riskReduction\"\n                    id=\"riskReduction\"\n                    value={postTest.riskReduction}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Post test disclosure plan developed </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"postTestDisclosure\"\n                    id=\"postTestDisclosure\"\n                    value={postTest.postTestDisclosure}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Will bring partner(s) for HIV testing </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"bringPartnerHivtesting\"\n                    id=\"bringPartnerHivtesting\"\n                    value={postTest.bringPartnerHivtesting}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Will bring own children {\"<5\"} years for HIV testing{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"childrenHivtesting\"\n                    id=\"childrenHivtesting\"\n                    value={postTest.childrenHivtesting}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Provided with information on FP and dual contraception{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"informationFp\"\n                    id=\"informationFp\"\n                    value={postTest.informationFp}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Client/Partner use FP methods (other than condom)\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"partnerFpThanCondom\"\n                    id=\"partnerFpThanCondom\"\n                    value={postTest.partnerFpThanCondom}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client/Partner use condoms as (one) FP method </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"partnerFpUseCondom\"\n                    id=\"partnerFpUseCondom\"\n                    value={postTest.partnerFpUseCondom}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Correct condom use demonstrated </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"correctCondomUse\"\n                    id=\"correctCondomUse\"\n                    value={postTest.correctCondomUse}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Condoms provided to client </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"condomProvidedToClient\"\n                    id=\"condomProvidedToClient\"\n                    value={postTest.condomProvidedToClient}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              {postTest.condomProvidedToClient !== null &&\n                postTest.condomProvidedToClient === \"true\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>How many condoms were provided to client </Label>\n                      <Input\n                        type=\"number\"\n                        name=\"condomProvidedToClientCount\"\n                        id=\"condomProvidedToClientCount\"\n                        value={postTest.condomProvidedToClientCount}\n                        onChange={handleInputChangePostTest}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Lubricant were provided to client </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"lubricantProvidedToClient\"\n                    id=\"lubricantProvidedToClient\"\n                    value={postTest.lubricantProvidedToClient}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              {postTest.lubricantProvidedToClient !== null &&\n                postTest.lubricantProvidedToClient === \"true\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>How many lubricant provided to client </Label>\n                      <Input\n                        type=\"number\"\n                        name=\"lubricantProvidedToClientCount\"\n                        id=\"lubricantProvidedToClientCount\"\n                        value={postTest.lubricantProvidedToClientCount}\n                        onChange={handleInputChangePostTest}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n\n              {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        id=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        value={postTest.unprotectedSexRegularPartnerLastThreeMonth}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n              {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular particular in the last 3 months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sex\"\n                                        id=\"sex\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client referred to other services </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"referredToServices\"\n                    id=\"referredToServices\"\n                    value={postTest.referredToServices}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <Message success>\n                <h4>\n                  If client tests HIV negative, and HIV Risk Assessment Score{\" \"}\n                  {\">0\"} or there is evidence for a STI syndrome, recommend\n                  re-testing after 3 months\n                </h4>\n              </Message>\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* <Button\n                    content=\"Back\"\n                    icon=\"left arrow\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={() => handleItemClick(\"hiv-test\", \"hiv-test\")}\n                  /> */}\n\n                  {props.activePage.actionType === \"update\" && (\n                    <Button\n                      content=\"Update & Continue\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      // disabled={saving}\n                    />\n                  )}\n                  {props.activePage.actionType === \"view\" && (\n                    <Button\n                      content=\"Next\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default PostTest;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Others.js",["1099","1100","1101","1102","1103","1104","1105","1106","1107","1108"],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/HivTestResult.js",["1109","1110","1111","1112","1113","1114"],"import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { toast } from \"react-toastify\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\nimport { calculate_age } from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst HivTestResult = (props) => {\n\n  const [finalResult, setFinalResult] = useState(\"\");\n  const [resultStatus, setResultStatus] = useState(\"\");\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  let temp = { ...errors };\n  //console.log(\"data3\", props.patientObj);\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [showCD4Count, setShowCD4Count] = useState(true);\n\n  const patientAge = calculate_age(\n      props.patientObj.personResponseDto &&\n        props.patientObj.personResponseDto.dateOfBirth\n        ? props.patientObj.personResponseDto.dateOfBirth\n        : 0\n    \n  );\n\n\n\n  const [objValues, setObjValues] = useState({\n    confirmatoryTest: {},\n    confirmatoryTest2: {},\n    hivTestResult: \"\",\n    hivTestResult2: \"\",\n    htsClientId: \"\",\n    personId: props.patientObj ? props.patientObj.id : \"\",\n    test1: {},\n    test2: {},\n    tieBreakerTest: {},\n    tieBreakerTest2: {},\n    syphilisTesting: {},\n    hepatitisTesting: {},\n    others: {},\n    cd4: {},\n    prepOffered: \"\",\n    prepAccepted: \"\",\n  });\n  const handleInputChange = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  const [initialTest1, setInitailTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [initialTest12, setInitailTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeCd4Count = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setCd4Count({ ...cd4Count, [e.target.name]: e.target.value });\n  };\n  const [cd4Count, setCd4Count] = useState({\n    cd4Count: \"\",\n    cd4SemiQuantitative: \"\",\n    cd4FlowCyteometry: \"\",\n  });\n  const handleInputChangeInitial = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n    if (e.target.name === \"result\") {\n      //  clear the all other fields if there changes in initialTest1 result is changes\n      setConfirmatoryTest({\n        date: \"\",\n        result: \"\",\n      });\n      setTieBreakerTest({\n        date: \"\",\n        result: \"\",\n      });\n      setInitailTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n        confirmatoryTestdate: \"\",\n        confirmatoryTestresult: \"\",\n        retestingDate: \"\",\n        retestingResult: \"\",\n        tieBreakerDate: \"\",\n        tieBreakerResult: \"\",\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n        prepOffered: \"\",\n        prepAccepted: \"\",\n      });\n      setInitailTest({ ...initialTest1, [e.target.name]: e.target.value });\n\n      if (e.target.value === \"No\") {\n        //This is to show cd4 count section\n        setShowCD4Count(false);\n      }\n    } else {\n      setInitailTest({ ...initialTest1, [e.target.name]: e.target.value });\n      setErrors({ date: \"\", prepOffered: \"\", prepAccepted: \"\" });\n      //This is to show cd4 count section\n      setShowCD4Count(true);\n    }\n  };\n\n  const handleInputChangeInitial2 = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n\n    if (e.target.name === \"result2\") {\n      //clear the all other the input fields that follows the initialTest2, if there changes in initialTest12 result is changes\n      setInitailTest2({ ...initialTest12, [e.target.name]: e.target.value });\n\n      //  setTieBreakerTest({\n      //     date: \"\",\n      //     result: \"\",\n      // })\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n\n        tieBreakerDate: \"\",\n        tieBreakerResult: \"\",\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n      });\n\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n      if (e.target.value === \"No\") {\n        setConfirmatoryTest2({\n          date: \"\",\n          result: \"\",\n        });\n        setTieBreakerTest2({\n          date: \"\",\n          result: \"\",\n        });\n\n        //This is to show cd4 count section\n        setShowCD4Count(false);\n      }\n    } else {\n      setInitailTest2({ ...initialTest12, [e.target.name]: e.target.value });\n      //This is to show cd4 count section\n      setShowCD4Count(true);\n    }\n  };\n  const [confirmatoryTest, setConfirmatoryTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [confirmatoryTest2, setConfirmatoryTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeConfirmatory = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n    setConfirmatoryTest({\n      ...confirmatoryTest,\n      [e.target.name]: e.target.value,\n    });\n\n    // clear all the input fields that follows the confirmatoryTest, if there changes in confirmatoryTest result is changes.\n\n    if (e.target.name === \"result\") {\n      setInitailTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest({\n        date: \"\",\n        result: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n        retestingDate: \"\",\n        retestingResult: \"\",\n        tieBreakerDate: \"\",\n        tieBreakerResult: \"\",\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n      });\n    }\n\n    //This is to show cd4 count section\n    if (initialTest1.result === \"Yes\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const handleInputChangeConfirmatory2 = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n\n    if (e.target.name === \"result2\") {\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\n    }\n    setConfirmatoryTest2({\n      ...confirmatoryTest2,\n      [e.target.name]: e.target.value,\n    });\n    //This is to show cd4 count section\n    if (initialTest12.result2 === \"Yes\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const [tieBreakerTest, setTieBreakerTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [tieBreakerTest2, setTieBreakerTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeTie = (e) => {\n    setErrors({ ...temp, [e.target.id]: \"\" });\n    setTieBreakerTest({ ...tieBreakerTest, [e.target.name]: e.target.value });\n\n    if (e.target.name === \"result\") {\n      setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n      setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n      });\n\n      setErrors({\n        ...temp,\n        [e.target.id]: \"\",\n\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n      });\n    }\n    //This is to show cd4 count section\n    if (confirmatoryTest.result === \"No\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else if (confirmatoryTest.result === \"No\" && e.target.value === \"No\") {\n      setShowCD4Count(false);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const handleInputChangeTie2 = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setTieBreakerTest2({ ...tieBreakerTest2, [e.target.name]: e.target.value });\n    //This is to show cd4 count section\n    if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n    } else if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"No\") {\n      setShowCD4Count(false);\n    } else {\n      setShowCD4Count(true);\n    }\n  };\n  const [syphills, setSyphills] = useState({\n    syphilisTestResult: \"\",\n    // result  :\"\",\n  });\n  const handleInputChangeSyphills = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setSyphills({ ...syphills, [e.target.name]: e.target.value });\n  };\n  const [hepatitis, setHepatitis] = useState({\n    hepatitisCTestResult: \"\",\n    hepatitisBTestResult: \"\",\n    longitude: \"\",\n    latitude: \"\",\n    adhocCode: \"\",\n  });\n  const handleInputChangeHepatitis = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setHepatitis({ ...hepatitis, [e.target.name]: e.target.value });\n  };\n  const [others, setOthers] = useState({\n    longitude: \"\",\n    latitude: \"\",\n    adhocCode: \"\",\n  });\n  useEffect(() => {\n    if (props.patientObj) {\n      setCd4Count(\n        props.patientObj && props.patientObj.cd4 !== null\n          ? props.patientObj.cd4\n          : {}\n      );\n      setInitailTest(\n        props.patientObj && props.patientObj.test1 !== null\n          ? props.patientObj.test1\n          : {}\n      );\n      setConfirmatoryTest(\n        props.patientObj && props.patientObj.confirmatoryTest !== null\n          ? props.patientObj.confirmatoryTest\n          : {}\n      );\n      setTieBreakerTest(\n        props.patientObj && props.patientObj.tieBreakerTest !== null\n          ? props.patientObj.tieBreakerTest\n          : {}\n      );\n      setSyphills(\n        props.patientObj && props.patientObj.syphilisTesting !== null\n          ? props.patientObj.syphilisTesting\n          : {}\n      );\n      setHepatitis(\n        props.patientObj && props.patientObj.hepatitisTesting !== null\n          ? props.patientObj.hepatitisTesting\n          : {}\n      );\n      setOthers(\n        props.patientObj && props.patientObj.others !== null\n          ? props.patientObj.others\n          : {}\n      );\n\n      setInitailTest2(\n        props.patientObj && props.patientObj.test2 !== null\n          ? props.patientObj.test2\n          : {}\n      );\n      setConfirmatoryTest2(\n        props.patientObj && props.patientObj.confirmatoryTest2 !== null\n          ? props.patientObj.confirmatoryTest2\n          : {}\n      );\n      setTieBreakerTest2(\n        props.patientObj && props.patientObj.tieBreakerTest2 !== null\n          ? props.patientObj.tieBreakerTest2\n          : {}\n      );\n      //Logic for cd4 count section to show\n      if (\n        props.patientObj.hivTestResult !== null &&\n        props.patientObj.hivTestResult !== \"\" &&\n        props.patientObj.hivTestResult === \"Positive\"\n      ) {\n        setShowCD4Count(true);\n      } else {\n        setShowCD4Count(false);\n      }\n      if (\n        props.patientObj.hivTestResult2 !== null &&\n        props.patientObj.hivTestResult2 !== \"\" &&\n        props.patientObj.hivTestResult2 === \"Positive\"\n      ) {\n        setShowCD4Count(true);\n      } else {\n        setShowCD4Count(false);\n      }\n    }\n  }, [props.patientObj]); //initialTest12, tieBreakerTest2, confirmatoryTest2,\n\n  const handleInputChangeOthers = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setOthers({ ...others, [e.target.name]: e.target.value });\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const validate = () => {\n    // initialTest1.date !== \"\" &&\n    //   initialTest1.result === \"No\" &&\n    //   (temp.prepOffered = objValues.prepOffered\n    //     ? \"\"\n    //     : \"The Prep Offered field is required.\");\n    // initialTest1.date !== \"\" &&\n    //   initialTest1.result === \"No\" &&\n    //   objValues.prepOffered === \"true\" &&\n    //   (temp.prepAccepted = objValues.prepAccepted\n    //     ? \"\"\n    //     : \"The Prep Accepted field is required.\");\n\n    //initial Test date should not be empty\n    temp.initialTest1date = initialTest1.date ? \"\" : \"This field is required.\";\n\n    //initial Test result should not be empty\n    temp.initialTest1result = initialTest1.result\n      ? \"\"\n      : \"This field is required.\";\n\n    // if initial test = \"reactive\"or \"yes\", confirmatory test should be compulsory\n    initialTest1.result === \"Yes\" &&\n      (temp.confirmatoryTestdate = confirmatoryTest.date\n        ? \"\"\n        : \"This field is required.\");\n    initialTest1.result === \"Yes\" &&\n      (temp.confirmatoryTestresult = confirmatoryTest.result\n        ? \"\"\n        : \"This field is required.\");\n\n    //if confirmatory = \"reactive\"or \"yes\", Retest should be compulsory\n    confirmatoryTest.result === \"Yes\" &&\n      (temp.retestingDate = initialTest12.date2\n        ? \"\"\n        : \"This field is required.\");\n    confirmatoryTest.result === \"Yes\" &&\n      (temp.retestingResult = initialTest12.result2\n        ? \"\"\n        : \"This field is required.\");\n\n    //if confirmatory = \"non reactive\"or \"No\", Tie breaker should be compulsory\n    confirmatoryTest.result === \"No\" &&\n      (temp.tieBreakerDate = tieBreakerTest2.date2\n        ? \"\"\n        : \"This field is required.\");\n    confirmatoryTest.result === \"No\" &&\n      (temp.tieBreakerResult = tieBreakerTest2.result2\n        ? \"\"\n        : \"This field is required.\");\n\n    //if confirmatory = \"non reactive\"or \"No\", Tie breaker should be compulsory\n    confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      (temp.confirmatoryTest2Date2 = confirmatoryTest2.date2\n        ? \"\"\n        : \"This field is required.\");\n    confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      (temp.confirmatoryTestResult2 = confirmatoryTest2.result2\n        ? \"\"\n        : \"This field is required.\");\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  useEffect(() => {\n    let result = \"\";\n\n    if (initialTest1.result === \"No\") {\n      result = \"Negative\";\n    } else if (\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"No\" &&\n      (initialTest1.result === \"Yes\" || initialTest1.result !== \"\")\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"No\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"No\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    }\n\n    setFinalResult(result);\n  }, [\n    initialTest1.result,\n    confirmatoryTest.result,\n    tieBreakerTest.result,\n    initialTest12.result2,\n    confirmatoryTest2.result2,\n    tieBreakerTest2.result2,\n  ]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(errors);\n\n    let latestForm = getNextForm(\n      \"Request_and_Result_Form\",\n      props.patientAge,\n      \"\",\n      \"unknown\"\n    );\n\n    if (validate()) {\n      if (finalResult === \"\") {\n        toast.error(\"Final result is required for submission.\");\n        return;\n      }\n      //logic to get Hiv result test\n      setSaving(true);\n      if (initialTest12.result2 === \"No\") {\n        objValues.hivTestResult2 = \"Negative\";\n      } else if (\n        initialTest12.result2 === \"Yes\" &&\n        confirmatoryTest2.result2 === \"Yes\"\n      ) {\n        objValues.hivTestResult2 = \"Positive\";\n      }\n      // else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2===''){\n      //     objValues.hivTestResult2=\"Negative\"\n      // }\n      else if (\n        confirmatoryTest2.result2 === \"No\" &&\n        tieBreakerTest2.result2 === \"Yes\"\n      ) {\n        objValues.hivTestResult2 = \"Positive\";\n      } else if (\n        confirmatoryTest2.result2 === \"No\" &&\n        tieBreakerTest2.result2 === \"No\"\n      ) {\n        objValues.hivTestResult2 = \"Negative\";\n      } else {\n        objValues.hivTestResult2 = \"\";\n      }\n\n      if (initialTest1.result === \"No\") {\n        objValues.hivTestResult = \"Negative\";\n      } else if (\n        initialTest1.result === \"Yes\" &&\n        confirmatoryTest.result === \"Yes\"\n      ) {\n        objValues.hivTestResult = \"Positive\";\n      }\n      // else if(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result===''){\n      //     objValues.hivTestResult=\"Negative\"\n      // }\n      else if (\n        confirmatoryTest.result === \"No\" &&\n        tieBreakerTest.result === \"Yes\"\n      ) {\n        objValues.hivTestResult = \"Positive\";\n      } else if (\n        confirmatoryTest.result === \"No\" &&\n        tieBreakerTest.result === \"No\"\n      ) {\n        objValues.hivTestResult = \"Negative\";\n      } else {\n        objValues.hivTestResult = \"\";\n      }\n      if (props.activePage.actionType === \"view\") {\n        //e.preventDefault();\n        handleItemClick(latestForm[0], latestForm[1]);\n      }\n      if (props.activePage.actionType === \"update\") {\n        objValues.htsClientId = clientId;\n        objValues.confirmatoryTest = confirmatoryTest;\n        objValues.confirmatoryTest2 = confirmatoryTest2;\n        objValues.personId = patientID;\n        objValues.test1 = initialTest1;\n        objValues.test2 = initialTest12;\n        objValues.tieBreakerTest = tieBreakerTest;\n        objValues.tieBreakerTest2 = tieBreakerTest2;\n        objValues.syphilisTesting = syphills;\n        objValues.hepatitisTesting = hepatitis;\n\n        objValues.cd4 = cd4Count;\n        objValues.others = others;\n\n        //console.log(clientId, objValues)\n        axios\n          .put(`${baseUrl}hts/${clientId}/request-result`, objValues, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            props.setPatientObj(response.data);\n            handleItemClick(latestForm[0], latestForm[1]);\n          })\n          .catch((error) => {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage);\n            } else {\n              toast.error(\"Something went wrong. Please try again...\");\n            }\n          });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>REQUEST AND RESULT FORM</h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h4 style={{ color: \"#fff\" }}>HIV TEST RESULT</h4>\n              </LabelRibbon>\n              <br />\n              <div className=\"form-group  col-md-2\"></div>\n              <h4>Initial Test : </h4>\n              <div className=\"form-group mb-3 col-md-5\">\n                <FormGroup>\n                  <Label for=\"\"> Date </Label>\n                  <Input\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"date\"\n                    id=\"initialTest1date\"\n                    value={initialTest1.date}\n                    onChange={handleInputChangeInitial}\n                    min={props?.patientObj?.dateVisit}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    required\n                    disabled={props.activePage.actionType === \"view\"}\n                  />\n                  {errors.initialTest1date !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.initialTest1date}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {initialTest1.date && (\n                <div className=\"form-group  col-md-5\">\n                  <FormGroup>\n                    <Label>Result </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"result\"\n                      id=\"initialTest1result\"\n                      value={initialTest1.result}\n                      onChange={handleInputChangeInitial}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      //disabled={initialTest1.date === \"\" ? true : false}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"Yes\">Reactive</option>\n                      <option value=\"No\">Non Reactive</option>\n                    </select>\n                    {errors.initialTest1result !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.initialTest1result}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              <div className=\"form-group  col-md-2\"></div>\n              {initialTest1.result === \"Yes\" && (\n                <>\n                  <h4>Confirmatory Test:</h4>\n                  <div className=\"form-group mb-3 col-md-5\">\n                    <FormGroup>\n                      <Label for=\"\">Date</Label>\n                      <Input\n                        type=\"date\"\n                        onKeyPress={(e) => {\n                          e.preventDefault();\n                        }}\n                        name=\"date\"\n                        id=\"confirmatoryTestdate\"\n                        value={confirmatoryTest.date}\n                        onChange={handleInputChangeConfirmatory}\n                        min={initialTest1.date}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        required\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                      {errors.confirmatoryTestdate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.confirmatoryTestdate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {confirmatoryTest.date && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>Result </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"result\"\n                          id=\"confirmatoryTestresult\"\n                          value={confirmatoryTest.result}\n                          onChange={handleInputChangeConfirmatory}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"Yes\">Reactive</option>\n                          <option value=\"No\">Non Reactive</option>\n                        </select>\n                        {errors.confirmatoryTestresult !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.confirmatoryTestresult}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-2\"></div>\n                </>\n              )}\n              {confirmatoryTest.result === \"No\" && (\n                <>\n                  <h4>Tie Breaker Test:</h4>\n                  <div className=\"form-group mb-3 col-md-5\">\n                    <FormGroup>\n                      <Label for=\"\"> Date </Label>\n                      <Input\n                        type=\"date\"\n                        onKeyPress={(e) => {\n                          e.preventDefault();\n                        }}\n                        name=\"date\"\n                        id=\"tieBreakerDate\"\n                        value={tieBreakerTest.date}\n                        onChange={handleInputChangeTie}\n                        min={confirmatoryTest.date}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        required\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                      {errors.tieBreakerDate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.tieBreakerDate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {tieBreakerTest.date && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>Result </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"result\"\n                          id=\"tieBreakerResult\"\n                          value={tieBreakerTest.result}\n                          onChange={handleInputChangeTie}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          //disabled={tieBreakerTest.date === \"\" ? true : false}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"Yes\">Reactive</option>\n                          <option value=\"No\">Non Reactive</option>\n                        </select>\n                        {errors.tieBreakerResult !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.tieBreakerResult}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-2\"></div>\n                </>\n              )}\n              <div className=\"row\">\n                <div className=\"form-group  col-md-12\">\n                  {initialTest1.result === \"No\" && (\n                    <>\n                      <b> Result : </b>\n                      <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                      <b> Final Result : </b>\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      <br />\n                    </>\n                  )}\n                  {initialTest1.result === \"No\" &&\n                    confirmatoryTest.result === \"No\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                      </>\n                    )}\n                  {/*{initialTest1.result === \"Yes\" &&*/}\n                  {/*    confirmatoryTest.result === \"No\" &&*/}\n                  {/*    tieBreakerTest.result === \"No\" && (*/}\n                  {/*        <>*/}\n                  {/*            <b> Final Result : </b>*/}\n                  {/*            <LabelRibbon color=\"red\"> Negative</LabelRibbon>*/}\n                  {/*        </>*/}\n                  {/*    )*/}\n                  {/*}*/}\n\n                  {initialTest1.result === \"Yes\" &&\n                    confirmatoryTest.result === \"Yes\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\n                        <br />\n                        <hr />\n                        <div className=\"row\">\n                          <h4>RETESTING:</h4>\n                          <div className=\"form-group mb-3 col-md-5\">\n                            <FormGroup>\n                              <Label for=\"\"> Date </Label>\n                              <Input\n                                type=\"date\"\n                                onKeyPress={(e) => {\n                                  e.preventDefault();\n                                }}\n                                name=\"date2\"\n                                id=\"retestingDate\"\n                                value={initialTest12.date2}\n                                onChange={handleInputChangeInitial2}\n                                min={confirmatoryTest.date}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.25rem\",\n                                }}\n                                required\n                                readOnly={\n                                  props.activePage.actionType === \"view\"\n                                }\n                              />\n                              {errors.retestingDate !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingDate}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n\n                          <div className=\"form-group  col-md-5\">\n                            <FormGroup>\n                              <Label>Result </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"result2\"\n                                id=\"retestingResult\"\n                                value={initialTest12.result2}\n                                onChange={handleInputChangeInitial2}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                // disabled={\n                                //   initialTest12.date2 === \"\" ? true : false\n                                // }\n                                disabled={\n                                  props.activePage.actionType === \"view\"\n                                }\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"Yes\">Reactive</option>\n                                <option value=\"No\">Non Reactive</option>\n                              </select>\n                              {errors.retestingResult !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingResult}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n\n                          <div className=\"form-group  col-md-2\"></div>\n                          {initialTest12.result2 === \"Yes\" && (\n                            <>\n                              <h4>Confirmatory Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"confirmatoryTest2Date2\"\n                                    value={confirmatoryTest2.date2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    min={initialTest12.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                    readOnly={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  />\n                                  {errors.confirmatoryTest2Date2 !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.confirmatoryTest2Date2}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"confirmatoryTestResult2\"\n                                    value={confirmatoryTest2.result2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    // disabled={\n                                    //   confirmatoryTest2.date2 === \"\"\n                                    //     ? true\n                                    //     : false\n                                    // }\n                                    disabled={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                  {errors.confirmatoryTestResult2 !== \"\" ? (\n                                    <span className={classes.error}>\n                                      {errors.confirmatoryTestResult2}\n                                    </span>\n                                  ) : (\n                                    \"\"\n                                  )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                          {confirmatoryTest2.result2 === \"No\" && (\n                            <>\n                              <h4>Tie Breaker Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={tieBreakerTest2.date2}\n                                    onChange={handleInputChangeTie2}\n                                    min={confirmatoryTest2.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                    readOnly={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={tieBreakerTest2.result2}\n                                    onChange={handleInputChangeTie2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      tieBreakerTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    )}\n                  {/* This is result for Test 1 */}\n                  {/* {(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result==='' ) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )} */}\n                  {confirmatoryTest.result === \"No\" &&\n                    tieBreakerTest.result === \"Yes\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\n                        <br />\n                        <hr />\n\n                        <div className=\"row\">\n                          <h4>Retesting:</h4>\n                          <div className=\"form-group mb-3 col-md-5\">\n                            <FormGroup>\n                              <Label for=\"\"> Date </Label>\n                              <Input\n                                type=\"date\"\n                                onKeyPress={(e) => {\n                                  e.preventDefault();\n                                }}\n                                name=\"date2\"\n                                id=\"retestingDate\"\n                                value={initialTest12.date2}\n                                onChange={handleInputChangeInitial2}\n                                min={tieBreakerTest.date}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.25rem\",\n                                }}\n                                required\n                              />\n                              {errors.retestingDate !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingDate}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          <div className=\"form-group  col-md-5\">\n                            <FormGroup>\n                              <Label>Result </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"result2\"\n                                id=\"retestingResult\"\n                                value={initialTest12.result2}\n                                onChange={handleInputChangeInitial2}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                disabled={\n                                  initialTest12.date2 === \"\" ? true : false\n                                }\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"Yes\">Reactive</option>\n                                <option value=\"No\">Non Reactive</option>\n                              </select>\n                              {errors.retestingResult !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingResult}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          <div className=\"form-group  col-md-2\"></div>\n                          {initialTest12.result2 === \"Yes\" && (\n                            <>\n                              <h4>Confirmatory Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={confirmatoryTest2.date2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    min={initialTest12.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                    readOnly={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={confirmatoryTest2.result2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    // disabled={\n                                    //   confirmatoryTest2.date2 === \"\"\n                                    //     ? true\n                                    //     : false\n                                    // }\n                                    disabled={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                          {confirmatoryTest2.result2 === \"No\" && (\n                            <>\n                              <h4>Tie Breaker Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"\n                                    onKeyPress={(e) => {\n                                      e.preventDefault();\n                                    }}\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={tieBreakerTest2.date2}\n                                    onChange={handleInputChangeTie2}\n                                    min={confirmatoryTest2.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                    readOnly={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={tieBreakerTest2.result2}\n                                    onChange={handleInputChangeTie2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    // disabled={\n                                    //   tieBreakerTest2.date2 === \"\"\n                                    //     ? true\n                                    //     : false\n                                    // }\n                                    disabled={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    )}\n                  {errors.prepOffered !== \"\" ? (\n                    <span className={classes.error}>{errors.prepOffered}</span>\n                  ) : (\n                    \"\"\n                  )}\n                  {errors.prepAccepted !== \"\" ? (\n                    <span className={classes.error}>{errors.prepAccepted}</span>\n                  ) : (\n                    \"\"\n                  )}\n                  {confirmatoryTest.result === \"No\" &&\n                    tieBreakerTest.result === \"No\" &&\n                    (initialTest1.result === \"Yes\" ||\n                      initialTest1.result !== \"\") && (\n                      <>\n                        <>\n                          <b> Result : </b>\n                          <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                          <b> Final Result : </b>\n                          <LabelRibbon color=\"green\"> Negative</LabelRibbon>\n                        </>\n                        <br />\n                        <div className=\"row\">\n                          <div className=\"form-group  col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Prep Offered{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"prepOffered\"\n                                id=\"prepOffered\"\n                                value={objValues.prepOffered}\n                                onChange={handleInputChange}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                disabled={\n                                  props.activePage.actionType === \"view\"\n                                }\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"true\">Yes</option>\n                                <option value=\"false\">No</option>\n                              </select>\n                            </FormGroup>\n                          </div>\n                          {objValues.prepOffered !== \"\" &&\n                            objValues.prepOffered === \"true\" && (\n                              <div className=\"form-group  col-md-6\">\n                                <FormGroup>\n                                  <Label>\n                                    Prep Accepted{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"prepAccepted\"\n                                    id=\"prepAccepted\"\n                                    value={objValues.prepAccepted}\n                                    onChange={handleInputChange}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      props.activePage.actionType === \"view\"\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"true\">Yes</option>\n                                    <option value=\"false\">No</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                            )}\n                        </div>\n                      </>\n                    )}\n                  {/* END of  result for Test 1 */}\n                  {/* This is result for Test 2 */}\n                  {initialTest12.result2 === \"No\" && (\n                    <>\n                      <b> Final Result : </b>\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      <br />\n                      <br />\n                      <div className=\"row\">\n                        <div className=\"form-group  col-md-5\">\n                          <FormGroup>\n                            <Label>\n                              Prep Offered{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"prepOffered\"\n                              id=\"prepOffered\"\n                              value={objValues.prepOffered}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                        {objValues.prepOffered !== \"\" &&\n                          objValues.prepOffered === \"true\" && (\n                            <div className=\"form-group  col-md-5\">\n                              <FormGroup>\n                                <Label>\n                                  Prep Accepted{\" \"}\n                                  <span style={{ color: \"red\" }}> *</span>\n                                </Label>\n                                <select\n                                  className=\"form-control\"\n                                  name=\"prepAccepted\"\n                                  id=\"prepAccepted\"\n                                  value={objValues.prepAccepted}\n                                  onChange={handleInputChange}\n                                  style={{\n                                    border: \"1px solid #014D88\",\n                                    borderRadius: \"0.2rem\",\n                                  }}\n                                  disabled={\n                                    props.activePage.actionType === \"view\"\n                                  }\n                                >\n                                  <option value={\"\"}></option>\n                                  <option value=\"true\">Yes</option>\n                                  <option value=\"false\">No</option>\n                                </select>\n                              </FormGroup>\n                            </div>\n                          )}\n                      </div>\n                    </>\n                  )}\n                  {initialTest12.result2 === \"No\" &&\n                    confirmatoryTest2.result2 === \"No\" && (\n                      <>\n                        <b> FinalnResult : </b>\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      </>\n                    )}\n\n                  {initialTest12.result2 === \"Yes\" &&\n                    confirmatoryTest2.result2 === \"Yes\" && (\n                      <>\n                        <b> Final Result : </b>\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\n                        <br />\n                      </>\n                    )}\n                  {/* {(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='' ) && (\n                                    <LabelRibbon color=\"green\" >\n                                        Negative\n                                    </LabelRibbon>\n                                )} */}\n                  {confirmatoryTest2.result2 === \"No\" &&\n                    tieBreakerTest2.result2 === \"Yes\" && (\n                      <>\n                        <b>Final Result : </b>\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\n                      </>\n                    )}\n                  {confirmatoryTest2.result2 === \"No\" &&\n                    tieBreakerTest2.result2 === \"No\" &&\n                    (initialTest12.result2 === \"Yes\" ||\n                      initialTest12.result2 === \"Yes\" ||\n                      initialTest12.result2 === \"\") && (\n                      <>\n                        <b>Final Result : </b>\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      </>\n                    )}\n\n                  {/* END of  result for Test 2*/}\n                </div>\n              </div>\n              {initialTest1.result === \"No\" && patientAge >= 10 && (\n                <>\n                  <div className=\"row\">\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Prep Offered <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"prepOffered\"\n                          id=\"prepOffered\"\n                          value={objValues.prepOffered}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props?.activePage?.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {objValues.prepOffered !== \"\" &&\n                      objValues.prepOffered === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Prep Accepted{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"prepAccepted\"\n                              id=\"prepAccepted\"\n                              value={objValues.prepAccepted}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                      )}\n                  </div>\n                </>\n              )}\n              {confirmatoryTest2.result2 === \"No\" &&\n                tieBreakerTest2.result2 === \"No\" && (\n                  <>\n                    <div className=\"row\">\n                      <div className=\"form-group  col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Prep Offered{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"prepOffered\"\n                            id=\"prepOffered\"\n                            value={objValues.prepOffered}\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled={props.activePage.actionType === \"view\"}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                        </FormGroup>\n                      </div>\n                      {objValues.prepOffered !== \"\" &&\n                        objValues.prepOffered === \"true\" && (\n                          <div className=\"form-group  col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Prep Accepted{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"prepAccepted\"\n                                id=\"prepAccepted\"\n                                value={objValues.prepAccepted}\n                                onChange={handleInputChange}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"true\">Yes</option>\n                                <option value=\"false\">No</option>\n                              </select>\n                            </FormGroup>\n                          </div>\n                        )}\n                    </div>\n                  </>\n                )}\n              {showCD4Count && (\n                <>\n                  <LabelRibbon\n                    as=\"a\"\n                    color=\"blue\"\n                    style={{ width: \"106%\", height: \"35px\" }}\n                    ribbon\n                  >\n                    <h5 style={{ color: \"#fff\" }}>CD4 Count</h5>\n                  </LabelRibbon>\n                  <br /> <br />\n                  <div className=\"form-group  col-md-5\">\n                    <FormGroup>\n                      <Label>CD4 Type </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"cd4Count\"\n                        id=\"cd4Count\"\n                        value={cd4Count.cd4Count}\n                        onChange={handleInputChangeCd4Count}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"Semi-Quantitative\">\n                          Semi-Quantitative\n                        </option>\n                        <option value=\"Flow Cyteometry\">Flow cytometry</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  {cd4Count.cd4Count === \"Semi-Quantitative\" && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>CD4 Type Value</Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"cd4SemiQuantitative\"\n                          id=\"cd4SemiQuantitative\"\n                          value={cd4Count.cd4SemiQuantitative}\n                          onChange={handleInputChangeCd4Count}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"<200\">{\"<200\"}</option>\n                          <option value=\">=200\">{\">=200\"}</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                  )}\n                  {cd4Count.cd4Count === \"Flow Cyteometry\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">CD4 Type Value</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"cd4FlowCyteometry\"\n                          id=\"cd4FlowCyteometry\"\n                          value={cd4Count.cd4FlowCyteometry}\n                          onChange={handleInputChangeCd4Count}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        />\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-7\"></div>\n                </>\n              )}\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Syphilis Testing</h5>\n              </LabelRibbon>\n              <br /> <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Syphilis test result <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"syphilisTestResult\"\n                    id=\"syphilisTestResult\"\n                    value={syphills.syphilisTestResult}\n                    onChange={handleInputChangeSyphills}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Reactive</option>\n                    <option value=\"No\">Non-Reactive</option>\n                  </select>\n                  {errors.syphilisTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.syphilisTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Hepatitis Testing</h5>\n              </LabelRibbon>\n              <br /> <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis B virus test result{\" \"}\n                    <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hepatitisBTestResult\"\n                    id=\"hepatitisBTestResult\"\n                    value={hepatitis.hepatitisBTestResult}\n                    onChange={handleInputChangeHepatitis}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Positive</option>\n                    <option value=\"No\">Negative</option>\n                  </select>\n                  {errors.hepatitisBTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.hepatitisBTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis C virus test result{\" \"}\n                    <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hepatitisCTestResult\"\n                    id=\"hepatitisCTestResult\"\n                    value={hepatitis.hepatitisCTestResult}\n                    onChange={handleInputChangeHepatitis}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Positive</option>\n                    <option value=\"No\">Negative</option>\n                  </select>\n                  {errors.hepatitisCTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.hepatitisCTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Others</h5>\n              </LabelRibbon>\n              <br /> <br />\n              {props?.patientObj?.riskStratificationResponseDto !== null &&\n                props?.patientObj?.riskStratificationResponseDto\n                  ?.communityEntryPoint !== \"\" && (\n                  <>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Longitude</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"longitude\"\n                          id=\"longitude\"\n                          value={others.longitude}\n                          onChange={handleInputChangeOthers}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          readOnly={props.activePage.actionType === \"view\"}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Latitude</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"latitude\"\n                          id=\"latitude\"\n                          value={others.latitude}\n                          onChange={handleInputChangeOthers}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                          readOnly={props.activePage.actionType === \"view\"}\n                        />\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">Adhoc Code</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"adhocCode\"\n                    id=\"adhocCode\"\n                    value={others.adhocCode}\n                    onChange={handleInputChangeOthers}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    readOnly={props.activePage.actionType === \"view\"}\n                  />\n                </FormGroup>\n              </div>\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* {patientAge <= 15 ? (\n                                        <>\n                                            <Button\n                                                content=\"Back\"\n                                                icon=\"left arrow\"\n                                                labelPosition=\"left\"\n                                                style={{backgroundColor: \"#992E62\", color: \"#fff\"}}\n                                                onClick={() => handleItemClick(\"basic\", \"basic\")}\n                                            />\n                                        </>\n                                    ) : (\n                                        <>\n                                            <Button\n                                                content=\"Back\"\n                                                icon=\"left arrow\"\n                                                labelPosition=\"left\"\n                                                style={{backgroundColor: \"#992E62\", color: \"#fff\"}}\n                                                onClick={() =>\n                                                    handleItemClick(\n                                                        \"pre-test-counsel\",\n                                                        \"pre-test-counsel\"\n                                                    )\n                                                }\n                                            />\n                                        </>\n                                    )} */}\n                  {props.activePage.actionType === \"update\" && (\n                    <Button\n                      content=\"Update & Continue\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  )}\n                  {props.activePage.actionType === \"view\" && (\n                    <Button\n                      content=\"Next\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default HivTestResult;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/PreTest.js",["1115","1116","1117","1118","1119","1120","1121","1122"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport { checkPregnantPatient } from \"../../../../utility\";\nimport {Card, CardContent} from \"@material-ui/core\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getPregnantCodeSet } from \"../../../../utility\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon, Button, Message} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\nimport { getCheckModality } from \"../../../../utility\";\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\nconst BasicInfo = (props) => {\n    const classes = useStyles();\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\n    const sex= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.sex : \"\";\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n    let temp = { ...errors }\n    const [riskAssessmentPartner, setRiskAssessmentPartner]= useState(\n        {\n            sexPartnerHivPositive:\"\",\n            newDiagnosedHivlastThreeMonths:\"\",\n            currentlyArvForPmtct :\"\",\n            knowHivPositiveOnArv :\"\",\n            knowHivPositiveAfterLostToFollowUp:\"\",\n            uprotectedAnalSex  :\"\",\n        }\n    )\n    const [objValues, setObjValues]= useState(\n        {\n            htsClientId: clientId,\n            knowledgeAssessment: {},\n            personId: patientID,\n            riskAssessment: {},\n            stiScreening: {},\n            tbScreening: {},\n            sexPartnerRiskAssessment:{}\n        }\n    )\n    const [knowledgeAssessment, setKnowledgeAssessment] = useState({\n      previousTestedHIVNegative: \"\",\n      timeLastHIVNegativeTestResult: \"\",\n      clientPregnant:'',\n      clientInformHivTransRoutes: \"\",\n      clientInformRiskkHivTrans: \"\",\n      clientInformPreventingsHivTrans: \"\",\n      clientInformPossibleTestResult: \"\",\n      informConsentHivTest: \"\",\n    });\n \n    const [riskAssessment, setRiskAssessment]= useState(\n        {\n            everHadSexualIntercourse:\"\",\n            bloodtransInlastThreeMonths:\"\",\n            uprotectedSexWithCasualLastThreeMonths:\"\",\n            uprotectedSexWithRegularPartnerLastThreeMonths:\"\",\n            unprotectedVaginalSex:\"\",\n            uprotectedAnalSex:\"\",\n            stiLastThreeMonths:\"\",\n            sexUnderInfluence :\"\",\n            moreThanOneSexPartnerLastThreeMonths:\"\",\n            experiencePain:\"\",\n            haveSexWithoutCondom:\"\",\n            abuseDrug:\"\",\n            bloodTransfusion:\"\",\n            consistentWeightFeverNightCough:\"\",\n            soldPaidVaginalSex:\"\",\n        }\n    )\n    const [stiScreening, setStiScreening]= useState(\n        {\n            vaginalDischarge:\"\",\n            lowerAbdominalPains :\"\",\n            urethralDischarge :\"\",\n            complaintsOfScrotal:\"\",\n            complaintsGenitalSore  :\"\",\n\n        }\n    )\n    const [tbScreening, setTbScreening]= useState(\n        {\n            currentCough :\"\",\n            weightLoss  :\"\",\n            lymphadenopathy :\"\",\n            fever :\"\",\n            nightSweats :\"\",\n        }\n    )\n    useEffect(() => {\n\n        if(props.patientObj){\n            setKnowledgeAssessment(props.patientObj.knowledgeAssessment  && props.patientObj.knowledgeAssessment!==null ? props.patientObj.knowledgeAssessment : {})\n            setRiskAssessment(props.patientObj.riskAssessment  && props.patientObj.riskAssessment!==null ? props.patientObj.riskAssessment : {})\n            setRiskAssessmentPartner(props.patientObj.sexPartnerRiskAssessment && props.patientObj.sexPartnerRiskAssessment!==null ? props.patientObj.sexPartnerRiskAssessment : {})\n            setStiScreening(props.patientObj.stiScreening  && props.patientObj.stiScreening!==null? props.patientObj.stiScreening : {})\n            setTbScreening(props.patientObj.tbScreening  && props.patientObj.tbScreening!==null? props.patientObj.tbScreening : {})\n            //patientAge=calculate_age(moment(props.patientObj.personResponseDto.dateOfBirth).format(\"DD-MM-YYYY\"))\n            //console.log(props.patientObj.riskStratificationResponseDto.riskAssessment)\n             if (props?.patientObj?.pregnant) {\n               checkPregnantPatient(props.patientObj.pregnant).then((res) => {\n                 console.log(\"my result\", res);\n                 setKnowledgeAssessment({\n                   ...knowledgeAssessment,\n                   clientPregnant: res ? \"true\" : \"false\",\n                 });\n               });\n             }\n            if(props.patientObj.riskStratificationResponseDto && Object.keys(props.patientObj.riskStratificationResponseDto.riskAssessment).length !== 0 && props.patientObj.riskAssessment===null){\n                //setRiskAssessment({...riskAssessment, ...props.patientObj.riskStratificationResponseDto.riskAssessment})\n                props.patientObj.riskStratificationResponseDto.riskAssessment.whatWasTheResult!==\"\" && props.patientObj.riskStratificationResponseDto.riskAssessment.whatWasTheResult==='Positive' ? knowledgeAssessment.previousTestedHIVNegative='false' :\n                knowledgeAssessment.previousTestedHIVNegative='true'\n            }else{\n                setRiskAssessment({...riskAssessment, ...props.patientObj.riskAssessment})\n            }\n            knowledgeAssessment.clientPregnant=props.patientObj.pregnant===73 ? \"true\" :\"\" ;\n        }\n    }, [props.patientObj]);\n    const handleItemClick =(page, completedMenu)=>{\n        if(props.completed.includes(completedMenu)) {\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n        props.handleItemClick(page)\n    }\n\n    const handleInputChangeKnowledgeAssessment = e => {\n        //setErrors({...temp, [e.target.name]:\"\"})\n\n        setKnowledgeAssessment ({...knowledgeAssessment,  [e.target.name]: e.target.value});\n\n    }\n\n    const handleInputChangeRiskAssessment = e => {\n        setErrors({...temp, [e.target.name]:\"\"})\n        setRiskAssessment ({...riskAssessment,  [e.target.name]: e.target.value});\n    }\n    // Getting the number count of riskAssessment True\n    const actualRiskCountTrue=Object.values(riskAssessment)\n    const riskCount=actualRiskCountTrue.filter((x)=> x==='true')\n\n    const handleInputChangeRiskAssessmentPartner = e => {\n        //setErrors({...temp, [e.target.name]:\"\"})\n        setRiskAssessmentPartner ({...riskAssessmentPartner,  [e.target.name]: e.target.value});\n    }\n    // Getting the number count of sexPartRiskCount True\n    const actualSexPartRiskCountTrue=Object.values(riskAssessmentPartner)\n    const sexPartRiskCount=actualSexPartRiskCountTrue.filter((x)=> x==='true')\n\n    const handleInputChangeStiScreening = e => {\n        //setErrors({...temp, [e.target.name]:\"\"})\n        setStiScreening ({...stiScreening,  [e.target.name]: e.target.value});\n    }\n    // Getting the number count of STI True\n    const actualStiTrue=Object.values(stiScreening)\n    const stiCount=actualStiTrue.filter((x)=> x==='true')\n\n    const [tbCount, settbCount] = useState(0);\n    const handleInputChangeTbScreening = e => {\n        //setErrors({...temp, [e.target.name]:\"\"})\n\n        if(e.target.value==='true') {\n            const newcount = tbCount +1\n            if(newcount>=0 && newcount <=5){\n                settbCount(newcount)\n            }\n        }\n        if(e.target.value==='false') {\n            const newcount = tbCount -1\n            //settbCount(newcount)\n            //console.log(newcount)\n            if(newcount <=0 ){\n\n                settbCount(0)\n            }else{\n                settbCount(newcount)\n            }\n        }\n        setTbScreening ({...tbScreening,  [e.target.name]: e.target.value});\n    }\n     /*****  Validation  */\n     /*****  Validation  */\n     const validate = () => {\n        //HTS FORM VALIDATION\n           //temp.previousTestedHIVNegative = knowledgeAssessment.previousTestedHIVNegative ? \"\" : \"This field is required.\"\n        //    {knowledgeAssessment.previousTestedHIVNegative==='true' && ( temp.timeLastHIVNegativeTestResult = knowledgeAssessment.timeLastHIVNegativeTestResult ? \"\" : \"This field is required.\")}\n        //    temp.clientPregnant = knowledgeAssessment.clientPregnant ? \"\" : \"This field is required.\"\n        //    temp.clientInformHivTransRoutes = knowledgeAssessment.clientInformHivTransRoutes ? \"\" : \"This field is required.\"\n        //    temp.clientInformRiskkHivTrans = knowledgeAssessment.clientInformRiskkHivTrans ? \"\" : \"This field is required.\"\n        //    temp.clientInformPreventingsHivTrans = knowledgeAssessment.clientInformPreventingsHivTrans ? \"\" : \"This field is required.\"\n        //    temp.clientInformPossibleTestResult = knowledgeAssessment.clientInformPossibleTestResult ? \"\" : \"This field is required.\"\n        //    temp.informConsentHivTest = knowledgeAssessment.informConsentHivTest ? \"\" : \"This field is required.\"\n\n        //     temp.currentCough = tbScreening.currentCough ? \"\" : \"This field is required.\"\n        //     temp.weightLoss = tbScreening.weightLoss ? \"\" : \"This field is required.\"\n        //     temp.lymphadenopathy = tbScreening.lymphadenopathy ? \"\" : \"This field is required.\"\n        //     temp.fever = tbScreening.fever ? \"\" : \"This field is required.\"\n        //     temp.nightSweats = tbScreening.nightSweats ? \"\" : \"This field is required.\"\n\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.vaginalDischarge = stiScreening.vaginalDischarge ? \"\" : \"This field is required.\" )\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.lowerAbdominalPains = stiScreening.lowerAbdominalPains ? \"\" : \"This field is required.\")\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.urethralDischarge = stiScreening.urethralDischarge ? \"\" : \"This field is required.\")\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsOfScrotal = stiScreening.complaintsOfScrotal ? \"\" : \"This field is required.\")\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsGenitalSore = stiScreening.complaintsGenitalSore ? \"\" : \"This field is required.\")\n\n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.everHadSexualIntercourse = riskAssessment.everHadSexualIntercourse ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.bloodtransInlastThreeMonths = riskAssessment.bloodtransInlastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithRegularPartnerLastThreeMonths = riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.unprotectedVaginalSex = riskAssessment.unprotectedVaginalSex ? \"\" : \"This field is required.\")\n\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedAnalSex = riskAssessment.uprotectedAnalSex ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.sexUnderInfluence = riskAssessment.sexUnderInfluence ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.moreThanOneSexPartnerLastThreeMonths = riskAssessment.moreThanOneSexPartnerLastThreeMonths ? \"\" : \"This field is required.\")\n\n\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.experiencePain = riskAssessment.experiencePain ? \"\" : \"This field is required.\")\n\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.haveSexWithoutCondom = riskAssessment.haveSexWithoutCondom ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.abuseDrug = riskAssessment.abuseDrug ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.bloodTransfusion = riskAssessment.bloodTransfusion ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.consistentWeightFeverNightCough = riskAssessment.consistentWeightFeverNightCough ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.soldPaidVaginalSex = riskAssessment.soldPaidVaginalSex ? \"\" : \"This field is required.\")\n\n            // temp.sexPartnerHivPositive = tbScreening.sexPartnerHivPositive ? \"\" : \"This field is required.\"\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.newDiagnosedHivlastThreeMonths = tbScreening.newDiagnosedHivlastThreeMonths ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.currentlyArvForPmtct = tbScreening.currentlyArvForPmtct ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && ( temp.knowHivPositiveOnArv = tbScreening.knowHivPositiveOnArv ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.knowHivPositiveAfterLostToFollowUp = tbScreening.knowHivPositiveAfterLostToFollowUp ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.uprotectedAnalSex = tbScreening.uprotectedAnalSex ? \"\" : \"This field is required.\")}\n\n            setErrors({ ...temp })\n        return Object.values(temp).every(x => x === \"\")\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n\n       let modality = getCheckModality(\n         props.patientObj?.riskStratificationResponseDto?.testingSetting\n       );    \n            let latestForm = getNextForm(\n              \"Pre_Test_Counseling\",\n              props.patientAge,\n              modality,\n              \"unknown\"\n            );\n        if(validate()){\n            setSaving(true);\n            objValues.htsClientId= clientId\n            objValues.knowledgeAssessment= knowledgeAssessment\n            objValues.personId= patientID\n            objValues.riskAssessment= riskAssessment\n            objValues.stiScreening=stiScreening\n            objValues.tbScreening=tbScreening\n            objValues.sexPartnerRiskAssessment=riskAssessmentPartner\n            axios.put(`${baseUrl}hts/${clientId}/pre-test-counseling`,objValues,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n\n            )\n            .then(response => {\n                setSaving(false);\n                props.setPatientObj(response.data)\n                //toast.success(\"Risk Assesment successful\");\n                handleItemClick(latestForm[0], latestForm[1]);\n\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                }\n            });\n        }else{\n            toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\n\n        }\n    }\n    //console.log(riskAssessmentPartner)\n\n    return (\n      <>\n        <Card className={classes.root}>\n          <CardBody>\n            <h2>PRE TEST COUNSELING</h2>\n            <form>\n              <div className=\"row\">\n                <div\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                  style={{\n                    backgroundColor: \"rgb(0,181,173)\",\n                    width: \"125%\",\n                    height: \"35px\",\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Knowledge Assessment\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Previously tested HIV negative{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"previousTestedHIVNegative\"\n                      id=\"previousTestedHIVNegative\"\n                      value={knowledgeAssessment.previousTestedHIVNegative}\n                      onChange={handleInputChangeKnowledgeAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.previousTestedHIVNegative !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.previousTestedHIVNegative}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {knowledgeAssessment.previousTestedHIVNegative === \"true\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Time of last HIV Negative test Result</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"timeLastHIVNegativeTestResult\"\n                        id=\"timeLastHIVNegativeTestResult\"\n                        value={\n                          knowledgeAssessment.timeLastHIVNegativeTestResult\n                        }\n                        onChange={handleInputChangeKnowledgeAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"<1\"> {\"< 1\"} month</option>\n                        <option value=\"1-3 Months\">1-3 Months</option>\n                        <option value=\"4-6 Months\">4-6 Months</option>\n                        <option value=\">6 Months\"> {\">6\"} Months</option>\n                        {knowledgeAssessment.previousTestedHIVNegative !==\n                          \"true\" && <option value=\"Never\"> Never</option>}\n                      </select>\n                      {errors.timeLastHIVNegativeTestResult !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.timeLastHIVNegativeTestResult}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n                {sex === \"Female\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Client pregnant </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"clientPregnant\"\n                        id=\"clientPregnant\"\n                        value={knowledgeAssessment.clientPregnant}\n                        onChange={handleInputChangeKnowledgeAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={true}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.clientPregnant !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.clientPregnant}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Client informed about HIV transmission routes{\" \"}\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"clientInformHivTransRoutes\"\n                      id=\"clientInformHivTransRoutes\"\n                      value={knowledgeAssessment.clientInformHivTransRoutes}\n                      onChange={handleInputChangeKnowledgeAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.clientInformHivTransRoutes !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.clientInformHivTransRoutes}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Client informed about risk factors for HIV transmission{\" \"}\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"clientInformRiskkHivTrans\"\n                      id=\"clientInformRiskkHivTrans\"\n                      value={knowledgeAssessment.clientInformRiskkHivTrans}\n                      onChange={handleInputChangeKnowledgeAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.clientInformRiskkHivTrans !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.clientInformRiskkHivTrans}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Client informed on preventing HIV transmission methods{\" \"}\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"clientInformPreventingsHivTrans\"\n                      id=\"clientInformPreventingsHivTrans\"\n                      value={\n                        knowledgeAssessment.clientInformPreventingsHivTrans\n                      }\n                      onChange={handleInputChangeKnowledgeAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.clientInformPreventingsHivTrans !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.clientInformPreventingsHivTrans}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Client informed about possible test results </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"clientInformPossibleTestResult\"\n                      id=\"clientInformPossibleTestResult\"\n                      value={knowledgeAssessment.clientInformPossibleTestResult}\n                      onChange={handleInputChangeKnowledgeAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.clientInformPossibleTestResult !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.clientInformPossibleTestResult}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Informed consent for HIV testing given </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"informConsentHivTest\"\n                      id=\"informConsentHivTest\"\n                      value={knowledgeAssessment.informConsentHivTest}\n                      onChange={handleInputChangeKnowledgeAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.informConsentHivTest !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.informConsentHivTest}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <hr />\n                <br />\n                <div\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                  style={{\n                    backgroundColor: \"#000\",\n                    width: \"125%\",\n                    height: \"35px\",\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Clinical TB screening\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Current cough </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"currentCough\"\n                      id=\"currentCough\"\n                      value={tbScreening.currentCough}\n                      onChange={handleInputChangeTbScreening}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.currentCough !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.currentCough}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Weight loss </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"weightLoss\"\n                      id=\"weightLoss\"\n                      value={tbScreening.weightLoss}\n                      onChange={handleInputChangeTbScreening}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.weightLoss !== \"\" ? (\n                      <span className={classes.error}>{errors.weightLoss}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Lymphadenopathy (swelling of the lymph nodes){\" \"}\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"lymphadenopathy\"\n                      id=\"lymphadenopathy\"\n                      value={tbScreening.lymphadenopathy}\n                      onChange={handleInputChangeTbScreening}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.lymphadenopathy !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.lymphadenopathy}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Fever </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"fever\"\n                      id=\"fever\"\n                      value={tbScreening.fever}\n                      onChange={handleInputChangeTbScreening}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.fever !== \"\" ? (\n                      <span className={classes.error}>{errors.fever}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Night sweats</Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"nightSweats\"\n                      id=\"nightSweats\"\n                      value={tbScreening.nightSweats}\n                      onChange={handleInputChangeTbScreening}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.nightSweats !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nightSweats}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <Message warning>\n                  <h4>\n                    TB Screening score (calculate the sum of the TB assessment)\n                    If score {\">= 1\"}, test for Xper MTB RIF or refer to TB\n                    service{\" \"}\n                  </h4>\n                  <b>Score : {tbCount}</b>\n                </Message>\n                <hr />\n                <br />\n                {props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" && (\n                  <>\n                    <div\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                      style={{\n                        backgroundColor: \"#992E62\",\n                        width: \"125%\",\n                        height: \"35px\",\n                        color: \"#fff\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      HIV Risk Assessment (Last 3 months)\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Ever had sexual intercourse{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"everHadSexualIntercourse\"\n                          id=\"everHadSexualIntercourse\"\n                          value={riskAssessment.everHadSexualIntercourse}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.everHadSexualIntercourse !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.everHadSexualIntercourse}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Blood transfusion in last 3 months{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"bloodtransInlastThreeMonths\"\n                          id=\"bloodtransInlastThreeMonths\"\n                          value={riskAssessment.bloodtransInlastThreeMonths}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.bloodtransInlastThreeMonths !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.bloodtransInlastThreeMonths}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Unprotected sex with casual partner in last 3\n                              months <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"uprotectedSexWithCasualLastThreeMonths\"\n                              id=\"uprotectedSexWithCasualLastThreeMonths\"\n                              value={\n                                riskAssessment.uprotectedSexWithCasualLastThreeMonths\n                              }\n                              onChange={handleInputChangeRiskAssessment}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                            {errors.uprotectedSexWithCasualLastThreeMonths !==\n                            \"\" ? (\n                              <span className={classes.error}>\n                                {errors.uprotectedSexWithCasualLastThreeMonths}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Unprotected sex with regular partner in the last\n                              3months <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                              id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                              value={\n                                riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths\n                              }\n                              onChange={handleInputChangeRiskAssessment}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                            {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\n                            \"\" ? (\n                              <span className={classes.error}>\n                                {\n                                  errors.uprotectedSexWithRegularPartnerLastThreeMonths\n                                }\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Unprotected vaginal sex{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"unprotectedVaginalSex\"\n                              id=\"unprotectedVaginalSex\"\n                              value={riskAssessment.unprotectedVaginalSex}\n                              onChange={handleInputChangeRiskAssessment}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                            {errors.unprotectedVaginalSex !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.unprotectedVaginalSex}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Unprotected Anal sex{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"uprotectedAnalSex\"\n                              id=\"uprotectedAnalSex\"\n                              value={riskAssessment.uprotectedAnalSex}\n                              onChange={handleInputChangeRiskAssessment}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                            {errors.uprotectedAnalSex !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.uprotectedAnalSex}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              STI in last 3 months{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"stiLastThreeMonths\"\n                              id=\"stiLastThreeMonths\"\n                              value={riskAssessment.stiLastThreeMonths}\n                              onChange={handleInputChangeRiskAssessment}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                            {errors.stiLastThreeMonths !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.stiLastThreeMonths}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Sex under the influence of drugs or alcohol{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"sexUnderInfluence\"\n                              id=\"sexUnderInfluence\"\n                              value={riskAssessment.sexUnderInfluence}\n                              onChange={handleInputChangeRiskAssessment}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                            {errors.sexUnderInfluence !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.sexUnderInfluence}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              More than 1 sex partner during last 3 months{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"moreThanOneSexPartnerLastThreeMonths\"\n                              id=\"moreThanOneSexPartnerLastThreeMonths\"\n                              value={\n                                riskAssessment.moreThanOneSexPartnerLastThreeMonths\n                              }\n                              onChange={handleInputChangeRiskAssessment}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                              disabled={props.activePage.actionType === \"view\"}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                            {errors.moreThanOneSexPartnerLastThreeMonths !==\n                            \"\" ? (\n                              <span className={classes.error}>\n                                {errors.moreThanOneSexPartnerLastThreeMonths}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                      )}\n                    <Message warning>\n                      <h4> Risk assessment score (sum of all 7 answers)</h4>\n                      <b>Score : {riskCount.length}</b>\n                    </Message>\n                    <hr />\n                    <br />\n                  </>\n                )}\n                {props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" && (\n                  <>\n                    <div\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                      style={{\n                        backgroundColor: \"#992E62\",\n                        width: \"125%\",\n                        height: \"35px\",\n                        color: \"#fff\",\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      HIV Risk Assessment (Last 3 months)\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Have you/your partner experienced lower abdominal\n                          pain, smelly discharge, blisters and wounds around\n                          you/partner vagina, penis anus or mouth?{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"experiencePain\"\n                          id=\"experiencePain\"\n                          value={riskAssessment.experiencePain}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.experiencePain !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.experiencePain}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Have you/partner had sex without a condom with someone\n                          of unknown HIV status, or you/partner raped by person\n                          with unknown HIV status?{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"haveSexWithoutCondom\"\n                          id=\"haveSexWithoutCondom\"\n                          value={riskAssessment.haveSexWithoutCondom}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.haveSexWithoutCondom !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.haveSexWithoutCondom}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Have you had a condom burst with your partner during\n                          sexual intercourse?{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>{\" \"}\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"haveCondomBurst\"\n                          id=\"haveCondomBurst\"\n                          value={riskAssessment.haveCondomBurst}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.haveCondomBurst !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.haveCondomBurst}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Do you/partner share needles/syringes, other sharp\n                          objects or used abuse drug substances of any kind?{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"abuseDrug\"\n                          id=\"abuseDrug\"\n                          value={riskAssessment.abuseDrug}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.abuseDrug !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.abuseDrug}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Have you/partner had any blood or blood product\n                          transfusion? <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"bloodTransfusion\"\n                          id=\"bloodTransfusion\"\n                          value={riskAssessment.bloodTransfusion}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.bloodTransfusion !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.bloodTransfusion}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Have you/partner experienced coughing, weight loss,\n                          fever, night sweats consistently?{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"consistentWeightFeverNightCough\"\n                          id=\"consistentWeightFeverNightCough\"\n                          value={riskAssessment.consistentWeightFeverNightCough}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.consistentWeightFeverNightCough !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.consistentWeightFeverNightCough}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Have you/partner paid or sold vaginal, anal or oral\n                          sex? <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"soldPaidVaginalSex\"\n                          id=\"soldPaidVaginalSex\"\n                          value={riskAssessment.soldPaidVaginalSex}\n                          onChange={handleInputChangeRiskAssessment}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.soldPaidVaginalSex !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.soldPaidVaginalSex}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <Message warning>\n                      <h4> Risk assessment score (sum of all 7 answers)</h4>\n                      <b>Score :{riskCount.length}</b>\n                    </Message>\n                    <hr />\n                    <br />\n                  </>\n                )}\n                <div\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                  style={{\n                    backgroundColor: \"#992E62\",\n                    width: \"125%\",\n                    height: \"35px\",\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Sex Partner Risk Assessment (Last 3 months)\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Have you had sex with a partner who is HIV positive?{\" \"}\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"sexPartnerHivPositive\"\n                      id=\"sexPartnerHivPositive\"\n                      value={riskAssessmentPartner.sexPartnerHivPositive}\n                      onChange={handleInputChangeRiskAssessmentPartner}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={props.activePage.actionType === \"view\"}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.sexPartnerHivPositive !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.sexPartnerHivPositive}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {riskAssessmentPartner.sexPartnerHivPositive === \"true\" && (\n                  <>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Is sex partner newly diagnosed with HIV and started\n                          treatment less than 3-6 months ago?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"newDiagnosedHivlastThreeMonths\"\n                          id=\"newDiagnosedHivlastThreeMonths\"\n                          value={\n                            riskAssessmentPartner.newDiagnosedHivlastThreeMonths\n                          }\n                          onChange={handleInputChangeRiskAssessmentPartner}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.newDiagnosedHivlastThreeMonths !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.newDiagnosedHivlastThreeMonths}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Is sex partner pregnant and currently receiving ARV\n                          for PMTCT?\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"currentlyArvForPmtct\"\n                          id=\"currentlyArvForPmtct\"\n                          value={riskAssessmentPartner.currentlyArvForPmtct}\n                          onChange={handleInputChangeRiskAssessmentPartner}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.currentlyArvForPmtct !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.currentlyArvForPmtct}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Known HIV positive partner on ARV with an unsurpressed\n                          VL\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"knowHivPositiveOnArv\"\n                          id=\"knowHivPositiveOnArv\"\n                          value={riskAssessmentPartner.knowHivPositiveOnArv}\n                          onChange={handleInputChangeRiskAssessmentPartner}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.knowHivPositiveOnArv !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.knowHivPositiveOnArv}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Known HIV positive recently returned to treatment\n                          after being lost to follow up\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"knowHivPositiveAfterLostToFollowUp\"\n                          id=\"knowHivPositiveAfterLostToFollowUp\"\n                          value={\n                            riskAssessmentPartner.knowHivPositiveAfterLostToFollowUp\n                          }\n                          onChange={handleInputChangeRiskAssessmentPartner}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.knowHivPositiveAfterLostToFollowUp !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.knowHivPositiveAfterLostToFollowUp}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>Unprotected Anal sex</Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"uprotectedAnalSex\"\n                          id=\"uprotectedAnalSex\"\n                          value={riskAssessmentPartner.uprotectedAnalSex}\n                          onChange={handleInputChangeRiskAssessmentPartner}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={props.activePage.actionType === \"view\"}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.uprotectedAnalSex !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.uprotectedAnalSex}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n                <Message warning>\n                  <h4>\n                    Sex Partner Risk Assessment score (sum of all 6 answers)\n                  </h4>\n                  <b>Score :{sexPartRiskCount.length}</b>\n                </Message>\n\n                <hr />\n                <br />\n                <div\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                  style={{\n                    backgroundColor: \"#014D88\",\n                    width: \"125%\",\n                    height: \"35px\",\n                    color: \"#fff\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Syndromic STI Screening\n                </div>\n                {props.patientObj &&\n                  props.patientObj.personResponseDto.sex === \"Female\" && (\n                    <>\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Complaints of vaginal discharge or burning when\n                            urinating?\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"vaginalDischarge\"\n                            id=\"vaginalDischarge\"\n                            value={stiScreening.vaginalDischarge}\n                            onChange={handleInputChangeStiScreening}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled={props.activePage.actionType === \"view\"}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.vaginalDischarge !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.vaginalDischarge}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Complaints of lower abdominal pains with or without\n                            vaginal discharge?\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"lowerAbdominalPains\"\n                            id=\"lowerAbdominalPains\"\n                            value={stiScreening.lowerAbdominalPains}\n                            onChange={handleInputChangeStiScreening}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled={props.activePage.actionType === \"view\"}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.lowerAbdominalPains !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.lowerAbdominalPains}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </>\n                  )}\n                {props.patientObj.personResponseDto &&\n                  props.patientObj.personResponseDto.sex === \"Male\" && (\n                    <>\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Complaints of urethral discharge or burning when\n                            urinating?\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"urethralDischarge\"\n                            id=\"urethralDischarge\"\n                            value={stiScreening.urethralDischarge}\n                            onChange={handleInputChangeStiScreening}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled={props.activePage.actionType === \"view\"}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.urethralDischarge !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.urethralDischarge}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>Complaints of scrotal swelling and pain</Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"complaintsOfScrotal\"\n                            id=\"complaintsOfScrotal\"\n                            value={stiScreening.complaintsOfScrotal}\n                            onChange={handleInputChangeStiScreening}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled={props.activePage.actionType === \"view\"}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.complaintsOfScrotal !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.complaintsOfScrotal}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            Complaints of genital sore(s) or swollen inguinal\n                            lymph nodes with or without pains?\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"complaintsGenitalSore\"\n                            id=\"complaintsGenitalSore\"\n                            value={stiScreening.complaintsGenitalSore}\n                            onChange={handleInputChangeStiScreening}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                            disabled={props.activePage.actionType === \"view\"}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                          {errors.complaintsGenitalSore !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.complaintsGenitalSore}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    </>\n                  )}\n                <Message warning>\n                  <h4>\n                    Calculate the sum of the STI screening. If {\">= \"}1, should\n                    be referred for STI test{\" \"}\n                  </h4>\n                  <b>Score :{stiCount.length}</b>\n                </Message>\n\n                {saving ? <Spinner /> : \"\"}\n                <br />\n                <div className=\"row\">\n                  <div className=\"form-group mb-3 col-md-12\">\n                    {/* <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('basic','basic')}/> */}\n                    <Button\n                      content=\"Save & Continue\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  </div>\n                </div>\n              </div>\n            </form>\n          </CardBody>\n        </Card>\n      </>\n    );\n};\n\nexport default BasicInfo","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Elicitation/Index.js",["1123","1124","1125","1126"],"import React, {useState, Fragment } from \"react\";\n\nimport { Row, Col, Card, } from \"react-bootstrap\";\nimport AddIndexContact from './AddIndexContact';\nimport IndexContactList from './IndexContactList'\nimport { FaUserPlus } from \"react-icons/fa\";\nimport { Link } from 'react-router-dom';\n//import Button from '@material-ui/core/Button';\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\n\nconst Elicitation = (props) => {\n    const [activePage, setActivePage]= useState('list')\n    const handleIClickPage =(activeItem)=>{\n        setActivePage(activeItem)\n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n    const handleDone=(row, actionType)=>{\n\n      props.setActivePage({...props.activePage, activePage:\"home\", activeObject:row, actionType:actionType})\n    }\n    \n\n  return (\n    <Fragment>  \n     \n      <Row>       \n        <Col md={12}>\n            {activePage==='list' &&\n                (\n                    <IndexContactList activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>\n                )\n            }\n            {activePage==='add' && (\n                <AddIndexContact activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>        \n            )}\n            <br />\n                <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('recency-testing','recency-testing')}/>\n                <Button content='Done' icon='list' labelPosition='left' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={()=>handleDone()}/>\n                \n                </div>\n                </div>\n        </Col>\n        \n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Elicitation;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/BasicInfo.js",["1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Modal } from \"react-bootstrap\";\n//import { objectValues } from \"react-toastify/dist/utils\";\nimport { getCheckModality } from \"../../../../utility\";\nimport { getNextForm } from \"../../../../utility\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n// THIS IS THE VIEW AND UPDATE PAGE\nconst BasicInfo = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  //console.log(\"enr\", props.activePage.activeObject);\n  const [errors, setErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n  //const [hideNumChild, setHideNumChild] = useState(false);\n  const [kP, setKP] = useState([]);\n  const [enrollSetting, setEnrollSetting] = useState([]);\n \n  const [sourceReferral, setSourceReferral] = useState([]);\n  const [gender, setGender] = useState([]);\n  const [counselingType, setCounselingType] = useState([]);\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\n  const [indexTesting, setIndexTesting] = useState([]);\n  let temp = { ...errors };\n  //console.log(props?.patientObj?.dateVisit)\n  const [modalityCheck, setModalityCheck] = useState(\"\");\n  const [objValues, setObjValues] = useState({\n    active: true,\n    clientCode: \"\",\n    age: \"\",\n    dob: \"\",\n    breastFeeding: \"\",\n    dateVisit: props?.patientObj?.dateVisit,\n    firstTimeVisit: null,\n    indexClient: null,\n    numChildren: \"\",\n    numWives: \"\",\n    pregnant: \"\",\n    dateOfBirth: null,\n    dateOfRegistration: null,\n    deceased: true,\n    deceasedDateTime: null,\n    educationId: \"\",\n    employmentStatusId: \"\",\n    facilityId: \"\",\n    firstName: \"\",\n    genderId: \"\",\n    address: \"\",\n    phoneNumber: \"\",\n    isDateOfBirthEstimated: \"\",\n    maritalStatusId: \"\",\n    organizationId: \"\",\n    otherName: \"\",\n    sexId: \"\",\n    state: null,\n    lga: \"\",\n    id: \"\",\n    surname: \"\",\n    previouslyTested: \"\",\n    referredFrom: \"\",\n    targetGroup: \"\",\n    testingSetting: \"\",\n    typeCounseling: \"\",\n    relationWithIndexClient:\n      props.activePage?.activeObject?.relationWithIndexClient,\n    indexClientCode: \"\",\n    comment: \"\",\n    partnerNotificationService: \"\",\n    familyIndex: \"\",\n  });\n\n  useEffect(() => {\n    KP();\n    EnrollmentSetting();\n    SourceReferral();\n    Genders();\n    CounselingType();\n    PregnancyStatus();\n    IndexTesting();\n    setObjValues({\n      ...props.activePage.activeObject,\n      testingSetting:\n        props.activePage.activeObject.riskStratificationResponseDto\n          .testingSetting,\n    });\n\n    // if(props.patientObj){\n    //     objValues.referredFrom=props.patientObj.referredFrom\n    // }\n    //setObjValues({...objectValues, genderId: props.patientObj.personResponseDto.gender.id})\n    //objValues.genderId = props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.gender.id : \"\"\n    setModalityCheck(\n      getCheckModality(\n        props?.patientObj?.riskStratificationResponseDto?.testingSetting\n      )\n    );\n  }, [props.patientObj]);\n  //Get list of KP\n  const KP = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setKP(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of KP\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPregnancyStatus(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(\n        `${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        //console.log(response.data);\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //Remove retesting from the codeset\n        //   let facilityList = []\n        // response.data.map((each, index)=>{\n        //       if(each.code !==\"FACILITY_HTS_TEST_SETTING_RETESTING\"){\n        //         facilityList.push(each);\n        //       }\n\n        // })\n\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of KP\n  const CounselingType = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/COUNSELING_TYPE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setCounselingType(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of HIV STATUS ENROLLMENT\n  const EnrollmentSetting = () => {\n    if (\n      props.patientObj.riskStratificationResponseDto.entryPoint.includes(\n        \"HTS_ENTRY_POINT_COMMUNITY\"\n      )\n    ) {\n      HTS_ENTRY_POINT_COMMUNITY();\n    } else if (\n      props.patientObj.riskStratificationResponseDto.entryPoint.includes(\n        \"HTS_ENTRY_POINT_FACILITY\"\n      )\n    ) {\n      HTS_ENTRY_POINT_FACILITY();\n    } else {\n      setEnrollSetting([]);\n    }\n  };\n\n  //Get list of Source of Referral\n  const SourceReferral = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSourceReferral(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of Genders from\n  const Genders = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/GENDER`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setGender(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    if (e.target.name === \"numChildren\") {\n      if (e.target.value >= 0) {\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      } else {\n        setObjValues({\n          ...objValues,\n          [e.target.name]: 0,\n        });\n      }\n    } else if (e.target.name === \"indexClient\") {\n      setObjValues({\n        ...objValues,\n        [e.target.name]: e.target.value,\n        relationWithIndexClient: \"\",\n        indexClientCode: \"\",\n      });\n      setErrors({\n        ...errors,\n        relationWithIndexClient: \"\",\n        indexClientCode: \"\",\n      });\n    } else if (e.target.name === \"numWives\") {\n      if (e.target.value >= 0) {\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      } else {\n        setObjValues({\n          ...objValues,\n          [e.target.name]: 0,\n        });\n      }\n    } else {\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n    setErrors({ ...temp, [e.target.name]: \"\" });\n  };\n\n  const handleClientCodeCheck = (e) => {\n    axios\n      .get(`${baseUrl}hts/clientCodeCheck`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setGender(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n    temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\n    temp.typeCounseling = objValues.typeCounseling\n      ? \"\"\n      : \"This field is required.\";\n    temp.testingSetting = objValues.testingSetting\n      ? \"\"\n      : \"This field is required.\";\n    temp.targetGroup =\n      objValues.targetGroup !== \"\" ? \"\" : \"This field is required.\";\n    temp.referredFrom =\n      objValues.referredFrom !== \"\" ? \"\" : \"This field is required.\";\n    temp.previouslyTested =\n      objValues.previouslyTested !== \"\" ? \"\" : \"This field is required.\";\n    temp.indexClient =\n      objValues.indexClient !== \"\" ? \"\" : \"This field is required.\";\n    temp.firstTimeVisit =\n      objValues.firstTimeVisit !== \"\" ? \"\" : \"This field is required.\";\n    temp.dateVisit = objValues.dateVisit ? \"\" : \"This field is required.\";\n\n    props?.patientObject?.gender &&\n      props?.patientObject?.gender.toLowerCase() === \"female\" &&\n      (temp.pregnant =\n        objValues.pregnant !== \"\" ? \"\" : \"This field is required.\");\n\n    objValues.indexClient === \"true\" &&\n      (temp.relationWithIndexClient =\n        objValues.relationWithIndexClient !== \"\"\n          ? \"\"\n          : \"This field is required.\");\n\n    objValues.indexClient === \"true\" &&\n      (temp.indexClientCode =\n        objValues.indexClientCode !== \"\" ? \"\" : \"This field is required.\");\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n\n \n  const shouldHideMaritalFields = () => {\n    \n    const isPediatricAndUnder15 =\n      objValues.testingSetting === \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\" &&\n      props.patientAge < 15;\n\n    const isTargetGroupPDorChildrenKP =\n      props.patientObj.targetGroup === \"TARGET_GROUP_PD\" ||\n      props.patientObj.targetGroup === \"TARGET_GROUP_CHILDREN_OF_KP\";\n\n    return isPediatricAndUnder15 || isTargetGroupPDorChildrenKP;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let latestForm = getNextForm(\n      \"Client_intake_form\",\n      props.patientAge,\n      modalityCheck,\n      \"unknown\"\n    );\n    if (props.activePage.actionType === \"update\") {\n      //e.preventDefault();\n      const patientForm = {\n        ...props.patientObj,\n        clientCode: objValues.clientCode,\n        dateVisit: objValues.dateVisit,\n        extra: {},\n        id: objValues.id,\n        firstTimeVisit: objValues.firstTimeVisit,\n        indexClient: objValues.indexClient,\n        numChildren: objValues.numChildren,\n        numWives: objValues.numWives,\n        personId: props.patientObj.personId,\n        hospitalNumber: objValues.clientCode,\n        previouslyTested: objValues.previouslyTested,\n        referredFrom: objValues.referredFrom,\n        targetGroup: objValues.targetGroup,\n        testingSetting: objValues.testingSetting,\n        typeCounseling: objValues.typeCounseling,\n        breastFeeding: objValues.breastFeeding,\n        indexClientCode: objValues.indexClientCode,\n        pregnant: objValues.pregnant,\n        relationWithIndexClient: objValues.relationWithIndexClient,\n        comment: objValues.comment,\n        partnerNotificationService: objValues.partnerNotificationService,\n        familyIndex: objValues.familyIndex,\n      };\n\n      if (validate()) {\n        setSaving(true);\n        axios\n          .put(`${baseUrl}hts/${props.patientObj.id}`, patientForm, {\n            headers: { Authorization: `Bearer ${token}` },\n          })\n          .then((response) => {\n            setSaving(false);\n            props.setPatientObj(response.data);\n            toast.success(\"HTS Test successful\");\n            handleItemClick(latestForm[0], latestForm[1]);\n          })\n          .catch((error) => {\n            setSaving(false);\n            if (error.response && error.response.data) {\n              let errorMessage =\n                error.response.data.apierror &&\n                error.response.data.apierror.message !== \"\"\n                  ? error.response.data.apierror.message\n                  : \"Something went wrong, please try again\";\n              toast.error(errorMessage);\n            } else {\n              toast.error(\"Something went wrong. Please try again...\");\n            }\n          });\n      }\n    }\n    if (props.activePage.actionType === \"view\") {\n      //e.preventDefault();\n      setSaving(true);\n      handleItemClick(latestForm[0], latestForm[1]);\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>CLIENT INTAKE FORM</h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Target Groups <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"targetGroup\"\n                    id=\"targetGroup\"\n                    onChange={handleInputChange}\n                    value={objValues.targetGroup}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    {kP\n                      .filter((value) => {\n                        if (\n                          props.patientAge > 14 &&\n                          (value.id === 961 || value.id === 475)\n                        ) {\n                          return false;\n                        }\n                        return true;\n                      })\n                      .map((value) => {\n                        return (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        );\n                      })}\n                  </select>\n                  {errors.targetGroup !== \"\" ? (\n                    <span className={classes.error}>{errors.targetGroup}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    Client Code <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"clientCode\"\n                    id=\"clientCode\"\n                    value={objValues.clientCode}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    readOnly={\n                      props.activePage.actionType === \"view\" ||\n                      props.activePage.actionType === \"update\"\n                    }\n                  />\n                  {errors.clientCode !== \"\" ? (\n                    <span className={classes.error}>{errors.clientCode}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Referred From <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"referredFrom\"\n                    id=\"referredFrom\"\n                    value={objValues.referredFrom}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    {sourceReferral.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.referredFrom !== \"\" ? (\n                    <span className={classes.error}>{errors.referredFrom}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Setting <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"testingSetting\"\n                    id=\"testingSetting\"\n                    value={objValues.testingSetting}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    {enrollSetting.map((value) => (\n                      <option key={value.id} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.testingSetting !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.testingSetting}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    Visit Date <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"dateVisit\"\n                    id=\"dateVisit\"\n                    value={objValues.dateVisit}\n                    onChange={handleInputChange}\n                    min={objValues.dateOfRegistration}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    readOnly={props?.activePage?.actionType === \"view\"}\n                  />\n                  {errors.dateVisit !== \"\" ? (\n                    <span className={classes.error}>{errors.dateVisit}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              {/* {(objValues.targetGroup!=='457' && objValues.targetGroup!==\"\") && (\n                            <div className=\"form-group  col-md-4\">\n                            <FormGroup>\n                                <Label>Gender</Label>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"genderId\"\n                                    id=\"genderId\"\n                                    value={objValues.genderId}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                >\n                                    <option value={\"\"}></option>\n                                    {gender.map((value) => (\n                                        <option key={value.id} value={value.id}>\n                                            {value.display}\n                                        </option>\n                                    ))}\n                                </select>\n                               \n                            </FormGroup>\n                            </div>\n                            )} */}\n              {/* Number of wives/co-wives field */}\n              {!shouldHideMaritalFields() &&\n                (props.patientObj.personResponseDto.sex === \"Male\" ||\n                  props.patientObj.personResponseDto.sex === \"male\" ||\n                  props.patientObj.personResponseDto.sex === \"MALE\") && (\n                  <div className=\"form-group col-md-4\">\n                    <FormGroup>\n                      <Label>Number of wives/co-wives</Label>\n                      <Input\n                        type=\"number\"\n                        name=\"numWives\"\n                        id=\"numWives\"\n                        min={0}\n                        value={objValues.numWives}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        readOnly={props?.activePage?.actionType === \"view\"}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n\n              {/* Number of Children <5 years field */}\n              {!shouldHideMaritalFields() && (\n                <div className=\"form-group col-md-4\">\n                  <FormGroup>\n                    <Label>Number of Children {\"<5\"} years</Label>\n                    <Input\n                      type=\"number\"\n                      name=\"numChildren\"\n                      id=\"numChildren\"\n                      min={0}\n                      value={objValues.numChildren}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      readOnly={props?.activePage?.actionType === \"view\"}\n                    />\n                  </FormGroup>\n                </div>\n              )}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Index Testing</Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"indexClient\"\n                    id=\"indexClient\"\n                    value={objValues.indexClient}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.indexClient !== \"\" ? (\n                    <span className={classes.error}>{errors.indexClient}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.indexClient === \"true\" && (\n                <>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Relationship of the index client</Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"relationWithIndexClient\"\n                        id=\"relationWithIndexClient\"\n                        value={objValues.relationWithIndexClient}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                        disabled={props.activePage.actionType === \"view\"}\n                      >\n                        <option value={\"\"}></option>\n                        {indexTesting.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.relationWithIndexClient !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.relationWithIndexClient}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Index Client Code/ID\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"indexClientCode\"\n                        id=\"indexClientCode\"\n                        value={objValues.indexClientCode}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        readOnly={props.activePage.actionType === \"view\"}\n                      />\n                    </FormGroup>\n                    {errors.indexClientCode !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.indexClientCode}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </div>\n                </>\n              )}\n              {props.patientObj.personResponseDto.sex &&\n                props.patientObj.personResponseDto.sex.toLowerCase() ===\n                  \"female\" && (\n                  <>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Pregnant Status{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"pregnant\"\n                          id=\"pregnant\"\n                          value={objValues.pregnant}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={\n                            props.patientObj.riskStratificationResponseDto\n                              .testingSetting ===\n                            \"FACILITY_HTS_TEST_SETTING_ANC\"\n                              ? true\n                              : props.activePage.actionType === \"view\"\n                              ? true\n                              : false\n                          }\n                        >\n                          <option value={\"\"}></option>\n                          {pregnancyStatus.map((value) =>\n                            props.patientObj.riskStratificationResponseDto\n                              .testingSetting ===\n                              \"FACILITY_HTS_TEST_SETTING_ANC\" &&\n                            value.code === \"PREGANACY_STATUS_NOT_PREGNANT\" ? (\n                              <></>\n                            ) : (\n                              <option key={value.id} value={value.id}>\n                                {value.display}\n                              </option>\n                            )\n                          )}\n                        </select>\n                        {errors.pregnant !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.pregnant}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    {/*objValues.pregnant!== 73 || objValues.pregnant!== \"73\" && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Breast Feeding</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"breastFeeding\"\n                                        id=\"breastFeeding\"\n                                        value={objValues.breastFeeding}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">YES</option>\n                                        <option value=\"false\">NO</option>\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            )*/}\n                  </>\n                )}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>First time visit</Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"firstTimeVisit\"\n                    id=\"firstTimeVisit\"\n                    value={objValues.firstTimeVisit}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.firstTimeVisit !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.firstTimeVisit}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Previously tested within the last 3 months</Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"previouslyTested\"\n                    id=\"previouslyTested\"\n                    value={objValues.previouslyTested}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.previouslyTested !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.previouslyTested}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Type of Counseling</Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"typeCounseling\"\n                    id=\"typeCounseling\"\n                    value={objValues.typeCounseling}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  >\n                    <option value={\"\"}></option>\n                    {counselingType.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.typeCounseling !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.typeCounseling}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-12\">\n                <FormGroup>\n                  <Label for=\"firstName\">\n                    Comments\n                    {/* <span style={{ color: \"red\" }}> *</span> */}\n                  </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"textarea\"\n                    rows=\"4\"\n                    cols=\"7\"\n                    name=\"comment\"\n                    id=\"comment\"\n                    value={objValues.comment}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                      height: \"100px\",\n                    }}\n                    disabled={props.activePage.actionType === \"view\"}\n                  />\n                </FormGroup>\n              </div>\n\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {props.activePage.actionType === \"update\" && (\n                    <Button\n                      content=\"Update & Continue\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  )}\n                  {props.activePage.actionType === \"view\" && (\n                    <Button\n                      content=\"Next\"\n                      icon=\"right arrow\"\n                      labelPosition=\"right\"\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                      onClick={handleSubmit}\n                      disabled={saving}\n                    />\n                  )}\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default BasicInfo;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/HIVST/HIVSTPatientRegistration.js",["1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170"],"import React, {useEffect, useState} from \"react\";\nimport {CardBody, FormGroup, Input, Label} from \"reactstrap\";\nimport * as moment from \"moment/moment\";\nimport {Card, CardContent} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Select from 'react-select';\n\n\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl} from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport {Button, Icon, Label as LabelSui, List} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport {Modal, Table} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DualListBox from \"react-dual-listbox\";\nimport {calculate_age} from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n        \"& .card-title\": {\n            color: \"#fff\",\n            fontWeight: \"bold\",\n        },\n        \"& .form-control\": {\n            borderRadius: \"0.25rem\",\n            height: \"41px\",\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\",\n        },\n        \"& select\": {\n            \"-webkit-appearance\": \"listbox !important\",\n        },\n        \"& p\": {\n            color: \"red\",\n        },\n        \"& label\": {\n            fontSize: \"14px\",\n            color: \"#014d88\",\n            fontWeight: \"bold\",\n        },\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"12.8px\",\n    },\n    success: {\n        color: \"green\",\n        fontSize: \"12.8px\",\n        fontWeight: \"bold\",\n    },\n}));\n\nconst HIVSTPatientRegistration = (props) => {\n    const patient = props.patientObject;\n    const [saving, setSaving] = useState(false)\n    const classes = useStyles();\n    const history = useHistory();\n    const [errors, setErrors] = useState({});\n    let temp = { ...errors };\n    const [serialNumber, setSerialNumber] = useState(null);\n    const [createdCode, setCreatedCode] = useState(\"\");\n    const [selectedUsers, setSelectedUsers] = useState([]);\n    const [showUserInfo, setShowUserInfo] = useState(false);\n    const [otherText, setOtherText] = useState('');\n    const [otherTestKitUserInfoAvailable, setIsUserInformationAvailable] = useState(false);\n    const [kitUserInformation, setKitUserInformation] = useState([]);\n    const [serviceNeeded, setServiceNeeded] = useState([]);\n    const [hasConductedHIVST, setHasConductedHIVST] = useState(false);\n    const [maritalStatus, setMaritalStatus] = useState([]);\n    const [sexs, setSexs] = useState([]);\n    const [userInformationList, setUserInformationList] = useState([])\n    const [userInformationErrors, setUserInformationErrors] = useState({});\n    const [ageDisabled, setAgeDisabled] = useState(true);\n    const [open, setOpen] = React.useState(false);\n    const toggle = () => setOpen(!open);\n\n    const [objValues, setObjValues] = useState({\n        patientId: patient?.personId ? patient.personId : \"\",\n        // patientObject: {\n        //     surname: patient?.surname ? patient.surname : \"\",\n        //     firstName: patient?.firstName ? patient.firstName : \"\",\n        //     otherName: patient?.otherName ? patient.otherName : \"\",\n        //     dateOfBirth: patient?.dateOfBirth ? patient.dateOfBirth : \"\",\n        //     maritalStatusId: \"1\",\n        //     genderId: patient.gender ? patient.gender : \"\",\n        //     sexId: patient.personResponseDto && patient.personResponseDto.sex !== null\n        //         ? patient.personResponseDto.sex\n        //         : \"\",\n        //     address: \"\",\n        //     dateOfRegistration: \"\",\n        //     hospitalNumber: patient?.hospitalNumber ? patient?.hospitalNumber : \"\",\n        // },\n        dateOfVisit: \"\",\n        serviceDeliveryPoint: \"\",\n        userType: \"\",\n        serialNumber: \"\",\n        clientCode: \"\",\n        previouslyTestedWithin12Months: \"\",\n        resultOfPreviouslyTestedWithin12Months: \"\",\n        consentForFollowUpCalls: \"\",\n        typeOfHivstKitReceived: \"\",\n        numberOfHivstKitsReceived: \"\",\n        nameOfTestKit: \"\",\n        lotNumber: \"\",\n        expiryDate: \"\",\n        testKitUsers: null,\n        testKitUserDetails: [],\n        otherTestKitUserInfoAvailable: \"\",\n        hasConductedHIVST: \"\",\n    });\n\n    const [testKitUserDetails, setUserInformation] = useState(\n        {\n            basicUserInfo: {\n                id: \"\",\n                firstName:\"\",\n                surname:\"\",\n                otherName:\"\",\n                dateOfRegistration:\"\",\n                otherCategory: \"\",\n                clientCode: \"\",\n                dateOfBirth: \"\",\n                age: \"\",\n                sex: \"\",\n                maritalStatusId: \"\",\n                typeOfHivst: \"\",\n                userCategory: \"\",\n                isDateOfBirthEstimated: \"\"\n            },\n            postTestAssessment: {\n                everUsedHivstKit: \"\",\n                everUsedHivstKitForSelfOrOthers: \"\",\n                otherHivstKitUserCategory: \"\",\n                otherHivstKitUserCategoryText: \"\",\n                resultOfHivstTest: \"\",\n                accessConfirmatoryHts: \"\",\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            }\n        }\n    );\n\n\n    const options = [\n        {value: 'myself', label: 'For myself'},\n        {value: 'spouse', label: 'Spouse'},\n        {value: 'children', label: 'Children'},\n        {value: 'sexual partner', label: 'Sexual Partner'},\n        {value: 'social network', label: 'Social Network'},\n        {value: 'others', label: 'Others (Please specify)'},\n    ];\n\n    const matches = useMediaQuery('(max-width:600px)');\n    const style = {fontSize: matches ? '12px' : '16px',};\n\n\n    const SERVICE_NEEDED = () => {\n        axios\n            .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            })\n            .then((response) => {\n                if (response.data) {\n                    // create array of objects from the response\n                    const serviceNeeded = response.data.map((service) => {\n                        return {\n                            value: service.display,\n                            label: service.display\n                        }\n                    });\n                    setServiceNeeded(serviceNeeded);\n                }\n            })\n            .catch((e) => {\n                // handle error\n            });\n    };\n\n    useEffect(() => {\n        SERVICE_NEEDED();\n    }, []);\n\n    const validateObjValues = () => {\n        temp.dateOfVisit = objValues.dateOfVisit ? \"\" : \"This field is required.\";\n        temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\n        temp.serviceDeliveryPoint = objValues.serviceDeliveryPoint ? \"\" : \"This field is required.\";\n        temp.userType = objValues.userType ? \"\" : \"This field is required.\";\n        temp.serialNumber = objValues.serialNumber ? \"\" : \"This field is required.\";\n        temp.previouslyTestedWithin12Months = objValues.previouslyTestedWithin12Months ? \"\" : \"This field is required.\";\n        temp.consentForFollowUpCalls = objValues.consentForFollowUpCalls ? \"\" : \"This field is required.\";\n        if (objValues.previouslyTestedWithin12Months !== \"\" && objValues.previouslyTestedWithin12Months !== \"No\") {\n            temp.resultOfPreviouslyTestedWithin12Months = objValues.resultOfPreviouslyTestedWithin12Months ? \"\" : \"This field is required.\";\n        }\n        temp.nameOfTestKit = objValues.nameOfTestKit ? \"\" : \"This field is required.\";\n        temp.typeOfHivstKitReceived = objValues.typeOfHivstKitReceived ? \"\" : \"This field is required.\";\n        temp.numberOfHivstKitsReceived = objValues.numberOfHivstKitsReceived ? \"\" : \"This field is required.\";\n        temp.expiryDate = objValues.expiryDate ? \"\" : \"This field is required.\";\n        temp.lotNumber = objValues.lotNumber ? \"\" : \"This field is required.\";\n        if(selectedUsers.length === 0) {\n            temp.selectedUsers =   objValues.testKitUsers ? \"\" : \"Please select at least one user\"\n        }\n    \n        setErrors({ ...temp });\n        return Object.values(temp).every((x) => x == \"\");\n    }\n\n    // validate testKitUserDetails\n    const validateUserInformation = () => {\n        // if (objValues.otherTestKitUserInfoAvailable === \"Yes\") {\n            let temp = {};\n            temp.firstName = testKitUserDetails.basicUserInfo.firstName ?  \"\" : \"This field is required.\";\n            temp.surname = testKitUserDetails.basicUserInfo.surname ?  \"\" : \"This field is required.\";\n            temp.userCategory = testKitUserDetails.basicUserInfo.userCategory ? \"\" : \"This field is required.\";\n            // temp.otherCategory = testKitUserDetails.basicUserInfo.userCategory === \"Others\" ? testKitUserDetails.basicUserInfo.otherCategory ? \"\" : \"This field is required.\" : \"\";\n            temp.clientCode = testKitUserDetails.basicUserInfo.clientCode ? \"\" : \"This field is required.\";\n            // temp.dateOfBirth = testKitUserDetails.basicUserInfo.dateOfBirth ? \"\" : \"This field is required.\";\n            temp.typeOfHivst = testKitUserDetails.basicUserInfo.typeOfHivst ? \"\" : \"This field is required.\";\n            // Check if the selected user category is in the selectedUsers array\n            if (!selectedUsers.includes(testKitUserDetails.basicUserInfo.userCategory) && testKitUserDetails.basicUserInfo.userCategory !== \"\" ) {\n                temp.userCategory = \"The selected user category does not match the selected kit users.\";\n            }\n            // the number of kit is empty\n            setUserInformationErrors({...temp});\n            return Object.values(temp).every((x) => x == \"\");\n        // }\n    }\n    const handleInputChange = (e) => {\n        const {name, value} = e.target;\n        let newObjectValues = {...objValues};\n        if (name in objValues) {\n            newObjectValues[name] = value;\n        } else if (name in objValues.postTestAssessment) {\n            newObjectValues.postTestAssessment[name] = value;\n        } else if (name in objValues.postTestAssessment.referralInformation) {\n            newObjectValues.postTestAssessment.referralInformation[name] = value;\n        }\n\n        // Check if the name is \"previouslyTestedWithin12Months\"\n        if (name === \"previouslyTestedWithin12Months\") {\n            newObjectValues.resultOfPreviouslyTestedWithin12Months = \"\";\n        }\n        if (name === \"typeOfHivstKitReceived\") {\n            newObjectValues.numberOfHivstKitsReceived = \"\";\n            newObjectValues.nameOfTestKit = \"\";\n            newObjectValues.lotNumber = \"\";\n            newObjectValues.expiryDate = \"\";\n        }\n        // Check if the name is \"hasConductedHIVST\" and objValues.hasConductedHIVST is \"No\"\n        if (name === \"hasConductedHIVST\") {\n            testKitUserDetails.postTestAssessment = {\n                ...testKitUserDetails.postTestAssessment,\n                everUsedHivstKitForSelfOrOthers: \"\",\n                otherHivstKitUserCategory: \"\",\n                otherHivstKitUserCategoryText: \"\",\n                resultOfHivstTest: \"\",\n                accessConfirmatoryHts: \"\",\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n        }\n// Validate the field and remove the error message if the field is filled\n        if (value) {\n            let tempErrors = {...errors};\n            tempErrors[name] = \"\";\n            setErrors(tempErrors);\n        }\n\n        setObjValues(newObjectValues);\n    }\n\n\n    const handleUserInformationInputChange = (e, section) => {\n        const {name, value} = e.target;\n        let newUserInformation = {...testKitUserDetails};\n\n        if (section === 'postTestAssessment' && name in newUserInformation[section].referralInformation) {\n            newUserInformation[section].referralInformation[name] = value;\n        } else {\n            newUserInformation[section][name] = value;\n        }\n\n        // if everUsedHivstKitForSelfOrOthers  clear otherHivstKitUserCategory\n        if (name === \"everUsedHivstKitForSelfOrOthers\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                otherHivstKitUserCategory: \"\",\n                otherHivstKitUserCategoryText: \"\"\n            };\n        }\n\n        // if  resultOfHivstTestchnages clear all the feilds below\n        if (name === \"resultOfHivstTest\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                accessConfirmatoryHts: \"\",\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n\n        }\n        // if  accessConfirmatoryHtschnages clear all the feilds below\n        if (name === \"accessConfirmatoryHts\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n\n        }\n        // if  referPreventionServiceschnages clear all the feilds below\n        if (name === \"referPreventionServices\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                    dateReferredForPreventionServices: \"\"\n                }\n            };\n        }\n\n        // any change in referredForPreventionServices clear dateReferredForPreventionServices\n        if (name === \"referredForPreventionServices\") {\n            newUserInformation.postTestAssessment.referralInformation = {\n                ...newUserInformation.postTestAssessment.referralInformation,\n                dateReferredForPreventionServices: \"\"\n            };\n        }\n\n        if (name === \"hasConductedHIVST\" && value === \"No\") {\n            newUserInformation.postTestAssessment = {\n                ...newUserInformation.postTestAssessment,\n                everUsedHivstKitForSelfOrOthers: \"\",\n                otherHivstKitUserCategory: \"\",\n                otherHivstKitUserCategoryText: \"\",\n                resultOfHivstTest: \"\",\n                accessConfirmatoryHts: \"\",\n                referPreventionServices: \"\",\n                referralInformation: {\n                    referredForConfirmatoryHts: \"\",\n                    dateReferredForConfirmatoryHts: \"\",\n                    referredForPreventionServices: \"\",\n                }\n            };\n        }\n        // if userCategory changes clear all other fields in basicUserInfo\n        if (name === \"userCategory\") {\n            newUserInformation.basicUserInfo = {\n                ...newUserInformation.basicUserInfo,\n                otherCategory: \"\",\n                clientCode: \"\",\n                dateOfBirth: \"\",\n                age: \"\",\n            }\n        }\n        // validate and remove error message if the field is filled\n        if (value) {\n            let tempErrors = {...userInformationErrors};\n            tempErrors[name] = \"\";\n            setUserInformationErrors(tempErrors);\n        }\n\n        setUserInformation(newUserInformation);\n    };\n\n\n// Function to add a testKitUserDetails object to the list\n\n    const addUserInformation = () => {\n        if(validateUserInformation()) {\n            if(userInformationList.length <= objValues.numberOfHivstKitsReceived) {\n                let newUserInformation = {\n                    basicUserInfo: {\n                        id: \"\",\n                        firstName:testKitUserDetails.basicUserInfo.firstName,\n                        surname:testKitUserDetails.basicUserInfo.surname,\n                        otherName:testKitUserDetails.basicUserInfo.otherName,\n                        dateOfRegistration:testKitUserDetails.basicUserInfo.dateOfRegistration,\n                        otherCategory: testKitUserDetails.basicUserInfo.otherCategory,\n                        clientCode: testKitUserDetails.basicUserInfo.clientCode,\n                        dateOfBirth: testKitUserDetails.basicUserInfo.dateOfBirth,\n                        age: testKitUserDetails.basicUserInfo.age,\n                        sex: testKitUserDetails.basicUserInfo.sex,\n                        maritalStatusId: testKitUserDetails.basicUserInfo.maritalStatusId,\n                        typeOfHivst: testKitUserDetails.basicUserInfo.typeOfHivst,\n                        userCategory: testKitUserDetails.basicUserInfo.userCategory\n                    },\n                    postTestAssessment: {\n                        everUsedHivstKit: testKitUserDetails.postTestAssessment.everUsedHivstKit,\n                        everUsedHivstKitForSelfOrOthers: testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers,\n                        otherHivstKitUserCategory: testKitUserDetails.postTestAssessment.otherHivstKitUserCategory,\n                        otherHivstKitUserCategoryText: testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText,\n                        resultOfHivstTest: testKitUserDetails.postTestAssessment.resultOfHivstTest,\n                        accessConfirmatoryHts: testKitUserDetails.postTestAssessment.accessConfirmatoryHts,\n                        referPreventionServices: testKitUserDetails.postTestAssessment.referPreventionServices,\n                        referralInformation: {\n                            referredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts,\n                            dateReferredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts,\n                            referredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices,\n                            dateReferredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices\n                        }\n                    }\n                }\n                setUserInformationList([...userInformationList, newUserInformation]);\n                setObjValues({...objValues, testKitUserDetails: [...userInformationList, newUserInformation]});\n\n                // clear testKitUserDetails after adding to the list and also set the hasConductedHIVST to No\n                setUserInformation({\n                    basicUserInfo: {\n                        firstName:\"\",\n                        surname:\"\",\n                        otherName:\"\",\n                        dateOfRegistration:\"\",\n                        otherCategory: \"\",\n                        clientCode: \"\",\n                        dateOfBirth: \"\",\n                        age: \"\",\n                        sex: \"\",\n                        maritalStatusId: \"\",\n                        typeOfHivst: \"\",\n                        userCategory: \"\",\n                        isDateOfBirthEstimated: \"\"\n                    },\n                    postTestAssessment: {\n                        everUsedHivstKit: \"\",\n                        everUsedHivstKitForSelfOrOthers: \"\",\n                        otherHivstKitUserCategory: \"\",\n                        otherHivstKitUserCategoryText: \"\",\n                        resultOfHivstTest: \"\",\n                        accessConfirmatoryHts: \"\",\n                        referPreventionServices: \"\",\n                        referralInformation: {\n                            referredForConfirmatoryHts: \"\",\n                            dateReferredForConfirmatoryHts: \"\",\n                            referredForPreventionServices: \"\",\n                            dateReferredForPreventionServices: \"\"\n                        }\n                    }\n                });\n                setObjValues({...objValues, hasConductedHIVST: \"No\"});\n            } else {\n                // console.log(\"Cannot add more user information as it exceeds the number of HIVST kits received.\");\n            }\n        } else{\n            toast.error(\"Please fill all the required fields\");\n        }\n\n    }\n// Function to remove a testKitUserDetails object from the list based on index\n    const removeUserInformation = (index) => {\n        const updatedUserInformationList = userInformationList.filter((_, i) => i !== index);\n        setUserInformationList(updatedUserInformationList);\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\n    };\n\n// Function to update a testKitUserDetails object in the list based on index\n    const updateUserInformation = (index, updatedUserInformation) => {\n        const updatedUserInformationList = userInformationList.map((testKitUserDetails, i) =>\n            i === index ? updatedUserInformation : testKitUserDetails\n        );\n        setUserInformationList(updatedUserInformationList);\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\n    };\n\n// Function to clear the testKitUserDetails list\n    const clearUserInformationList = () => {\n        setUserInformationList([]);\n        setObjValues({...objValues, testKitUserDetails: []});\n    };\n\n\n    const handleKitSelectUserChange = selectedUsers => {\n        // if (objValues.userType === \"Secondary User\") {\n        //     setSelectedUsers([\"myself\"]);\n        //     let newValues = {...objValues, testKitUsers: selectedUsers};\n        //     setObjValues(newValues);\n        // } else\n        // {\n            setSelectedUsers(selectedUsers);\n            let newValues = {...objValues, testKitUsers: selectedUsers};\n            if (!selectedUsers || selectedUsers.length === 0) {\n                setShowUserInfo(false);\n                newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\n            } else if (selectedUsers.length === 1 && selectedUsers[0] === 'myself') {\n                setShowUserInfo(false);\n                newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\n            } else {\n                setShowUserInfo(true);\n            }\n            if (!showUserInfo) {\n                testKitUserDetails.userCategory = \"\";\n                testKitUserDetails.otherCategory = \"\";\n                testKitUserDetails.clientCode = \"\";\n                testKitUserDetails.dateOfBirth = \"\";\n                testKitUserDetails.age = \"\";\n                testKitUserDetails.sex = \"\";\n                testKitUserDetails.maritalStatus = \"\";\n                testKitUserDetails.clientCode = \"\";\n                testKitUserDetails.typeOfHivSelfTest = \"\";\n            }\n            // always clear the userInformationList when the user selects a new user\n            // setUserInformationList([]);\n            setObjValues(newValues);\n        // }\n    };\n    const checkClientCode = (e) => {\n        let code = \"\";\n        if (e.target.name === \"serialNumber\") {\n            code = createdCode + e.target.value;\n            setCreatedCode(code);\n         \n            setObjValues({...objValues, clientCode: code});\n        }\n\n        async function getIndexClientCode() {\n            const indexClientCode = objValues.clientCode;\n            const response = await axios.get(\n                `${baseUrl}hts/client/${indexClientCode}`,\n                {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                        \"Content-Type\": \"text/plain\",\n                    },\n                }\n            );\n        }\n\n        getIndexClientCode();\n    };\n\n\n    const Sex = () => {\n        axios\n            .get(`${baseUrl}application-codesets/v2/SEX`, {\n                headers: {Authorization: `Bearer ${token}`},\n            })\n            .then((response) => {\n                //// console.log(response.data);\n                setSexs(response.data);\n            })\n            .catch((error) => {\n                //// console.log(error);\n            });\n    };\n\n    const MARITALSTATUS = () => {\n        axios\n            .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\n                headers: {Authorization: `Bearer ${token}`},\n            })\n            .then((response) => {\n                //// console.log(response.data);\n                setMaritalStatus(response.data);\n            })\n            .catch((error) => {\n                //// console.log(error);\n            });\n    };\n\n    useEffect(() => {\n        Sex();\n        MARITALSTATUS();\n    }, []);\n\n\n    const setAge = () => {\n        const age = calculate_age(testKitUserDetails.basicUserInfo?.dateOfBirth);\n        setUserInformation(prevState => ({\n            ...prevState,\n            basicUserInfo: {\n                ...prevState.basicUserInfo,\n                age: age\n            }\n        }));\n        return age;\n    }\n\n    const handleDateOfBirthChange1 = (e) => {\n        let newUserInformation = {...testKitUserDetails};\n        newUserInformation.basicUserInfo[e.target.name] = e.target.value;\n        if (e.target.value && new Date(e.target.value) <= new Date()) {\n            const age_now = calculate_age(e.target.value);\n            newUserInformation.basicUserInfo.age = age_now;\n        } else {\n            newUserInformation.basicUserInfo.age = \"\";\n        }\n        setUserInformation(newUserInformation);\n    }\n\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (validateObjValues()) {\n            const userInfoList = userInformationList;\n            objValues.testKitUserDetails = userInformationList;\n            setSaving(true)\n            axios\n                .post(`${baseUrl}hivst`, objValues, {\n                    headers: {\n                        Authorization: `Bearer ${token}`,\n                        \"Content-Type\": \"application/json\",\n                    },\n                })\n                .then((response) => {\n                    if (response.status === 200) {\n                        setSaving(false)\n                        toast.success(\"HIVST Registration Successful\");\n                        history.push(\"/patient/hivst\");\n                    }\n                })\n                .catch((error) => {\n                    setSaving(false)\n                    toast.error(\"An error occurred. Please try again.\");\n                });\n\n        }\n    }\n\n\n    const handleDobChange = (e) => {\n        const today = new Date();\n        const birthDate = new Date(e.target.value);\n        let age_now = today.getFullYear() - birthDate.getFullYear();\n        const m = today.getMonth() - birthDate.getMonth();\n        if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n            age_now--;\n        }\n        setUserInformation({\n            ...testKitUserDetails,\n            basicUserInfo: {\n                ...testKitUserDetails.basicUserInfo,\n                dateOfBirth: e.target.value,\n                age: age_now\n            }\n        });\n    };\n\n    const handleDateOfBirthChange = (e) => {\n        if (e.target.value == \"Actual\") {\n            setUserInformation({\n                ...testKitUserDetails,\n                basicUserInfo: {\n                    ...testKitUserDetails.basicUserInfo,\n                    isDateOfBirthEstimated: false\n                }\n            });\n            setAgeDisabled(true);\n        } else if (e.target.value == \"Estimated\") {\n            setUserInformation({\n                ...testKitUserDetails,\n                basicUserInfo: {\n                    ...testKitUserDetails.basicUserInfo,\n                    isDateOfBirthEstimated: true\n                }\n            });\n            setAgeDisabled(false);\n        }\n    };\n\n    const handleAgeChange = (e) => {\n        if (!ageDisabled && e.target.value) {\n            const currentDate = new Date();\n            currentDate.setDate(15);\n            currentDate.setMonth(5);\n            const estDob = moment(currentDate.toISOString());\n            const dobNew = estDob.add(e.target.value * -1, \"years\");\n            setUserInformation({\n                ...testKitUserDetails,\n                basicUserInfo: {\n                    ...testKitUserDetails.basicUserInfo,\n                    age: e.target.value,\n                    dateOfBirth: moment(dobNew).format(\"YYYY-MM-DD\")\n                }\n            });\n        }\n    };\n\n\n\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n                    <h2 style={{color: \"#000\"}}> HIV SELF - TEST AND RESPONSE CARD </h2>\n                    <br/>\n                    <form>\n                        <div className=\"row mb-7\">\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Visit Date <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                        name=\"dateOfVisit\"\n                                        id=\"dateOfVisit\"\n                                        value={objValues.dateOfVisit}\n                                        onChange={handleInputChange}\n                                        min=\"1929-12-31\"\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                    />\n                                    {errors.dateOfVisit !== \"\" ? (\n                                        <span className={classes.error}>{errors.dateOfVisit}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label >\n                                        Service Delivery Point\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"serviceDeliveryPoint\"\n                                        id=\"serviceDeliveryPoint\"\n                                        value={objValues.serviceDeliveryPoint}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Health Facility\">Health Facility</option>\n                                        <option value=\"Comunity Pharmacy\">Community Pharmacy</option>\n                                        <option value=\"PPMV\">PPMV</option>\n                                        <option value=\"Mobile Distribution\">Mobile Distribution</option>\n                                        <option value=\"Workplace\">WorkPlace</option>\n                                        <option value=\"Others\">Others</option>\n                                        <option value=\"Home based\">Home based</option>\n                                        <option value=\"Door to Door\">Door to Door</option>\n                                    </select>\n                                    {errors.serviceDeliveryPoint !== \"\" ? (\n                                        <span className={classes.error}>{errors.serviceDeliveryPoint}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>\n                                        User Type\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"userType\"\n                                        id=\"userType\"\n                                        value={objValues.userType}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Primary User\">Primary User</option>\n                                        <option value=\"Secondary User\">secondary user</option>\n                                    </select>\n                                    {errors.userType !== \"\" ? (\n                                        <span className={classes.error}>{errors.userType}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Serial Number <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"serialNumber\"\n                                        id=\"serialNumber\"\n                                        value={serialNumber}\n                                        //value={Math.floor(Math.random() * 1093328)}\n                                        onBlur={checkClientCode}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                    />\n                                    {errors.serialNumber !== \"\" ? (\n                                        <span className={classes.error}>{errors.serialNumber}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Client Code <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"clientCode\"\n                                        id=\"clientCode\"\n                                        value={objValues.clientCode}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                        //readOnly={props.activePage.actionType === \"view\"}\n                                    />\n                                     {errors.clientCode !== \"\" ? (\n                                         <span className={classes.error}>{errors.clientCode}</span>\n                                        ) : (\n                                         \"\"\n                                        )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>\n                                        Have you previously tested for HIV in the last 12 months?\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"previouslyTestedWithin12Months\"\n                                        id=\"previouslyTestedWithin12Months\"\n                                        value={objValues.previouslyTestedWithin12Months}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">YES</option>\n                                        <option value=\"No\">NO</option>\n                                    </select>\n                                    {errors.previouslyTestedWithin12Months !== \"\" ? (\n                                        <span className={classes.error}>{errors.previouslyTestedWithin12Months}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            {objValues?.previouslyTestedWithin12Months === \"Yes\" ? (\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label >\n                                            What was the test result?\n                                            <span style={{color: \"red\"}}> *</span>\n                                        </Label>\n                                        <select\n                                            className=\"form-control\"\n                                            name=\"resultOfPreviouslyTestedWithin12Months\"\n                                            id=\"resultOfPreviouslyTestedWithin12Months\"\n                                            value={objValues.resultOfPreviouslyTestedWithin12Months}\n                                            onChange={handleInputChange}\n                                            style={{\n                                                border: \"1px solid #014D88\",\n                                                borderRadius: \"0.2rem\",\n                                            }}\n                                        >\n                                            <option value={\"\"}></option>\n                                            <option value=\"Positive\">Positive</option>\n                                            <option value=\"Negative\">Negative</option>\n                                            <option value=\"Unknown\">Unknown</option>\n                                        </select>\n                                        {errors.resultOfPreviouslyTestedWithin12Months !== \"\" ? (\n                                            <span className={classes.error}>{errors.resultOfPreviouslyTestedWithin12Months}</span>\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </FormGroup>\n                                </div>\n                            ) : \"\"}\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label >\n                                        Do you consent to be followed-up via phone calls?\n                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"consentForFollowUpCalls\"\n                                        id=\"consentForFollowUpCalls\"\n                                        value={objValues.consentForFollowUpCalls}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">YES</option>\n                                        <option value=\"No\">NO</option>\n                                    </select>\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label >\n                                        What type of HIVST kit did you receive/purchase today?\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"typeOfHivstKitReceived\"\n                                        id=\"typeOfHivstKitReceived\"\n                                        value={objValues.typeOfHivstKitReceived}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Oral fluid\">Oral fluid</option>\n                                        <option value=\"Blood\">Blood</option>\n                                    </select>\n                                    {errors.typeOfHivstKitReceived !== \"\" ? (\n                                        <span className={classes.error}>{errors.typeOfHivstKitReceived}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Number of individual HIV self-test kits received? {\" \"}\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"number\"\n                                        name=\"numberOfHivstKitsReceived\"\n                                        id=\"numberOfHivstKitsReceived\"\n                                        value={objValues.numberOfHivstKitsReceived}\n                                        min=\"1\"\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                    />\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"providerNameCompletingForm\">\n                                        Name of Test Kit ?\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"nameOfTestKit\"\n                                        id=\"nameOfTestKit\"\n                                        value={objValues.nameOfTestKit}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                    />\n                                    {errors.nameOfTestKit !== \"\" ? (\n                                        <span className={classes.error}>\n                                            {errors.nameOfTestKit}\n                                        </span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"providerNameCompletingForm\">\n                                        Lot No\n                                        <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        className=\"form-control\"\n                                        type=\"text\"\n                                        name=\"lotNumber\"\n                                        id=\"\" lotNumber\n                                        value={objValues.lotNumber}\n                                        onChange={handleInputChange}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.2rem\",\n                                        }}\n                                    />\n                                    {errors.lotNumber !== \"\" ? (\n                                        <span className={classes.error}>\n                                            {errors.lotNumber}\n                                        </span>\n                                    ) : (\n                                        \"\"\n                                    )}\n\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-4\">\n                                <FormGroup>\n                                    <Label for=\"\">\n                                        Expiry Date <span style={{color: \"red\"}}> *</span>\n                                    </Label>\n                                    <Input\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                        name=\"expiryDate\"\n                                        id=\"expirtyDate\"\n                                        value={objValues.expiryDate}\n                                        onChange={handleInputChange}\n                                        min={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                        max={moment(new Date()).add(5, 'years').format(\"YYYY-MM-DD\")}\n                                        style={{\n                                            border: \"1px solid #014D88\",\n                                            borderRadius: \"0.25rem\",\n                                        }}\n                                    />\n                                    {errors.expiryDate !== \"\" ? (\n                                        <span className={classes.error}>{errors.expiryDate}</span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group mb-3 col-md-12\">\n                                <FormGroup>\n                                    <Label for=\"dualListBox\">\n                                        Who do you want to use the kit for?\n                                    </Label>\n                                    <DualListBox\n                                        options={options}\n                                        selected={selectedUsers}\n                                        onChange={handleKitSelectUserChange}\n                                        // disabled={objValues.userType === \"Secondary User\" ? true : false}\n                                    />\n                                    {errors.testKitUsers !== \"\" ? (\n                                        <span className={classes.error}>\n                                            {errors.testKitUsers}\n                                        </span>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </FormGroup>\n                            </div>\n\n                            {/*<div className=\"form-group mb-7 col-md-4\">*/}\n                            {/*    <FormGroup>*/}\n                            {/*        <Label for=\"testKitUsers\">*/}\n                            {/*            Who do you want to use the kit for?*/}\n                            {/*        </Label>*/}\n                            {/*        <Select*/}\n                            {/*            isMulti*/}\n                            {/*            name=\"whoDoYouWantToUseTheKitFor\"*/}\n                            {/*            options={options}*/}\n                            {/*            className=\"basic-multi-select\"*/}\n                            {/*            classNamePrefix=\"select\"*/}\n                            {/*            onChange={handleKitSelectUserChange}*/}\n                            {/*            styles={{*/}\n                            {/*                control: (provided) => ({*/}\n                            {/*                    ...provided,*/}\n                            {/*                    border: \"1px solid #014D88\",*/}\n                            {/*                    borderRadius: \"0.25rem\",*/}\n                            {/*                }),*/}\n                            {/*            }}*/}\n                            {/*        />*/}\n                            {/*    </FormGroup>*/}\n                            {/*</div>*/}\n\n                            {selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === 'others' &&\n                                <div className=\"form-group mb-3 col-md-4\">\n                                    <FormGroup>\n                                        <Label for=\"testKitUsers\">\n                                            Please Specify\n                                        </Label>\n                                        <Input\n                                            type=\"text\"\n                                            name=\"otherText\"\n                                            id=\"otherText\"\n                                            value={otherText}\n                                            onChange={e => setOtherText(e.target.value)}\n                                            placeholder=\"Please specify\"\n                                            style={{\n                                                border: \"1px solid #014D88\",\n                                                borderRadius: \"0.25rem\",\n                                            }}\n                                        />\n                                    </FormGroup>\n                                </div>\n                            }\n                            {showUserInfo &&\n                                <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label >\n                                            Is user information available?\n                                            <span style={{color: \"red\"}}> *</span>\n                                        </Label>\n                                        <select\n                                            className=\"form-control\"\n                                            name=\"otherTestKitUserInfoAvailable\"\n                                            id=\"otherTestKitUserInfoAvailable\"\n                                            value={objValues.otherTestKitUserInfoAvailable}\n                                            onChange={handleInputChange}\n                                            style={{\n                                                border: \"1px solid #014D88\",\n                                                borderRadius: \"0.2rem\",\n                                            }}\n                                            // disabled={objValues.userType === \"Secondary User\" ? true : false}\n                                        >\n                                            <option value={\"\"}></option>\n                                            <option value=\"Yes\">YES</option>\n                                            <option value=\"No\">NO</option>\n                                        </select>\n                                        {/*                {errors.firstTimeVisit !== \"\" ? (*/}\n                                        {/*                    <span className={classes.error}>*/}\n                                        {/*  {errors.firstTimeVisit}*/}\n                                        {/*</span>*/}\n                                        {/*                ) : (*/}\n                                        {/*                    \"\"*/}\n                                        {/*                )}*/}\n                                    </FormGroup>\n                                </div>\n                            }\n                            {/*{objValues?.otherTestKitUserInfoAvailable === \"Yes\" &&*/}\n                            {selectedUsers.length === 0 ? (\"\") : (\n                                <>\n                                    <div className=\"row center\">\n                                        <div\n                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\n                                            style={{\n                                                backgroundColor: \"#992E62\",\n                                                width: \"125%\",\n                                                height: \"35px\",\n                                                color: \"#fff\",\n                                                fontWeight: \"bold\",\n                                            }}\n                                        >\n                                            Intended Kit User Information\n                                        </div>\n                                    </div>\n                                    <div className=\"row\">\n                                        <div className=\"form-group mb-3 col-md-4\">\n                                            <FormGroup>\n                                                <Label for=\"\">\n                                                    Registration Date\n                                                    {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                </Label>\n                                                <Input\n                                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                    name=\"dateOfRegistration\"\n                                                    id=\"dateOfRegistration\"\n                                                    min=\"1929-12-31\"\n                                                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                    value={testKitUserDetails.basicUserInfo.dateOfRegistration}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                    // disabled\n                                                />\n                                                {/*{errors.dateOfVisit !== \"\" ? (*/}\n                                                {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\n                                                {/*) : (*/}\n                                                {/*    \"\"*/}\n                                                {/*)}*/}\n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group col-md-4\">\n                                            <FormGroup>\n                                                <Label>\n                                                    First Name\n                                                    <span style={{color: \"red\"}}> *</span>\n                                                </Label>\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control\"\n                                                    name=\"firstName\"\n                                                    id=\"firstName\"\n                                                    value={testKitUserDetails.basicUserInfo.firstName}\n                                                    // onChange={handleInputChange1}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                />\n                                                {userInformationErrors.firstName !== \"\" ? (\n                                                    <span\n                                                        className={classes.error}>{userInformationErrors.firstName}</span>\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group col-md-4\">\n                                            <FormGroup>\n                                                <Label>\n                                                    Surname\n                                                    <span style={{color: \"red\"}}> *</span>\n                                                </Label>\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control\"\n                                                    name=\"surname\"\n                                                    id=\"surname\"\n                                                    value={testKitUserDetails.basicUserInfo.surname}\n                                                    // onChange={handleInputChange1}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                />\n                                                {userInformationErrors.surname !== \"\" ? (\n                                                    <span\n                                                        className={classes.error}>{userInformationErrors.surname}</span>\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group col-md-4\">\n                                            <FormGroup>\n                                                <Label>\n                                                    Other name\n                                                </Label>\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control\"\n                                                    name=\"otherName\"\n                                                    id=\"otherName\"\n                                                    value={testKitUserDetails.basicUserInfo.otherName}\n                                                    // onChange={handleInputChange1}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                />\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>\n                                                    user Category\n                                                    <span style={{color: \"red\"}}> *</span>\n                                                </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"userCategory\"\n                                                    id=\"userCategory\"\n                                                    value={testKitUserDetails.basicUserInfo.userCategory}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    {/*{options.map(option => (*/}\n                                                    {/*    <option key={option.value} value={option.value}>*/}\n                                                    {/*        {option.label}*/}\n                                                    {/*    </option>*/}\n                                                    {/*))}*/}\n                                                    {selectedUsers.map((user, index) => (\n                                                        <option key={index} value={user}>{user}</option>\n                                                    ))}\n                                                    ))\n                                                </select>\n                                                {userInformationErrors.userCategory !== \"\" ? (\n                                                    <span\n                                                        className={classes.error}>{userInformationErrors.userCategory}</span>\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </FormGroup>\n                                        </div>\n                                        {testKitUserDetails.basicUserInfo.userCategory === \"others\" ? (\n                                            <div className=\"form-group col-md-4\">\n                                                <FormGroup>\n                                                    <Label>\n                                                        Specify Other Category\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                    </Label>\n                                                    <input\n                                                        type=\"text\"\n                                                        className=\"form-control\"\n                                                        name=\"otherCategory\"\n                                                        id=\"otherCategory\"\n                                                        value={testKitUserDetails.basicUserInfo.otherCategory}\n                                                        // onChange={handleInputChange1}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                    />\n                                                </FormGroup>\n                                            </div>\n                                        ) : \"\"}\n                                        <div className=\"form-group col-md-4\">\n                                            <FormGroup>\n                                                <Label>\n                                                    Client Code\n                                                    <span style={{color: \"red\"}}> *</span>\n                                                </Label>\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control\"\n                                                    name=\"clientCode\"\n                                                    id=\"clientCode\"\n                                                    value={testKitUserDetails.basicUserInfo.clientCode}\n                                                    // onChange={handleInputChange1}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                />\n                                                {userInformationErrors.clientCode !== \"\" ? (\n                                                    <span\n                                                        className={classes.error}>{userInformationErrors.clientCode}</span>\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group mb-2 col-md-2\">\n                                            <FormGroup>\n                                                <Label>\n                                                    Date Of Birth <span style={{color: \"red\"}}> *</span>\n                                                </Label>\n                                                <div className=\"radio\">\n                                                    <label>\n                                                        <input\n                                                            type=\"radio\"\n                                                            value=\"Actual\"\n                                                            name=\"dateOfBirth\"\n                                                            defaultChecked\n                                                            onChange={(e) => handleDateOfBirthChange(e)}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                        />{\" \"}\n                                                        Actual\n                                                    </label>\n                                                </div>\n                                                <div className=\"radio\">\n                                                    <label>\n                                                        <input\n                                                            type=\"radio\"\n                                                            value=\"Estimated\"\n                                                            name=\"dateOfBirth\"\n                                                            onChange={(e) => handleDateOfBirthChange(e)}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                        />{\" \"}\n                                                        Estimated\n                                                    </label>\n                                                </div>\n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group mb-3 col-md-3\">\n                                            <FormGroup>\n                                                <Label>\n                                                    Date <span style={{color: \"red\"}}> *</span>\n                                                </Label>\n                                                <input\n                                                    className=\"form-control\"\n                                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                    name=\"dob\"\n                                                    id=\"dob\"\n                                                    min=\"1929-12-31\"\n                                                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                    value={testKitUserDetails.basicUserInfo.dateOfBirth}\n                                                    onChange={handleDobChange}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                />\n                                            </FormGroup>\n                                        </div>\n                                        <div className=\"form-group mb-3 col-md-3\">\n                                            <FormGroup>\n                                                <Label>\n                                                    Age <span style={{color: \"red\"}}> *</span>\n                                                </Label>\n                                                <input\n                                                    className=\"form-control\"\n                                                    type=\"number\"\n                                                    name=\"age\"\n                                                    id=\"age\"\n                                                    value={testKitUserDetails.basicUserInfo.age}\n                                                    disabled={ageDisabled}\n                                                    onChange={handleAgeChange}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                />\n                                            </FormGroup>\n                                        </div>\n\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label>\n                                                    Sex\n                                                    {/*<span style={{color: \"red\"}}> *</span> */}\n                                                </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"sex\"\n                                                    id=\"sex\"\n                                                    value={testKitUserDetails.basicUserInfo.sex}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    {sexs.map((value) => (\n                                                        <option key={value.id} value={value.display}>\n                                                            {value.display}\n                                                        </option>\n                                                    ))}\n                                                </select>\n                                            </FormGroup>\n                                        </div>\n                                        {testKitUserDetails.basicUserInfo.age > 9 && (\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label>Marital Status</Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"maritalStatusId\"\n                                                        id=\"maritalStatusId\"\n                                                        value={testKitUserDetails.basicUserInfo.maritalStatusId}\n                                                        // onChange={handleInputChange1}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                    >\n                                                        <option value={\"\"}></option>\n                                                        {maritalStatus.map((value) => (\n                                                            <option key={value.id} value={value.id}>\n                                                                {value.display}\n                                                            </option>\n                                                        ))}\n                                                    </select>\n                                                </FormGroup>\n                                            </div>\n                                        )}\n                                        <div className=\"form-group  col-md-4\">\n                                            <FormGroup>\n                                                <Label> Type of HIV Self-Test </Label>\n                                                <select\n                                                    className=\"form-control\"\n                                                    name=\"typeOfHivst\"\n                                                    id=\"typeOfHivst\"\n                                                    value={testKitUserDetails.basicUserInfo.typeOfHivst}\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\n                                                    style={{\n                                                        border: \"1px solid #014D88\",\n                                                        borderRadius: \"0.2rem\",\n                                                    }}\n                                                >\n                                                    <option value={\"\"}></option>\n                                                    <option value=\"Assisted\">\n                                                        Assisted\n                                                    </option>\n                                                    <option value=\"Unassisted\">\n                                                        Unassisted\n                                                    </option>\n                                                </select>\n                                                {\n                                                    userInformationErrors.typeOfHivst !== \"\" ? (\n                                                        <span\n                                                            className={classes.error}>{userInformationErrors.typeOfHivst}</span>\n                                                    ) : (\"\")\n\n                                                }\n                                            </FormGroup>\n                                        </div>\n                                        {/*<div className=\"form-group mb-3 col-md-6\">*/}\n                                        {/*    <LabelSui*/}\n                                        {/*        as=\"a\"*/}\n                                        {/*        color=\"black\"*/}\n                                        {/*        // onClick={handleSubmitfamilyIndexRequestDto}*/}\n                                        {/*        size=\"small\"*/}\n                                        {/*        style={{marginTop: 35}}*/}\n                                        {/*    >*/}\n                                        {/*        <Icon name=\"plus\"/> Add*/}\n                                        {/*    </LabelSui>*/}\n                                        {/*</div>*/}\n                                    </div>\n\n\n                                </>\n                            )}\n\n                            {/*Checkbox to select if the User has conducted the HIVST – if checked, display the*/}\n                            {/*following questions, else the user should be able to save the form.*/}\n                            {/*<div className=\"row mb-7\">*/}\n                            {/*    <div className=\"form-group mb-3 col-md-4\">*/}\n                            {/*        <FormGroup>*/}\n                            {/*            <label>*/}\n                            {/*                <input*/}\n                            {/*                    type=\"checkbox\"*/}\n                            {/*                    checked={objValues.hasConductedHIVST}*/}\n                            {/*                    onChange={() => {*/}\n                            {/*                        setObjValues(prevState => ({*/}\n                            {/*                            ...prevState,*/}\n                            {/*                            hasConductedHIVST: !prevState.hasConductedHIVST*/}\n                            {/*                        }));*/}\n                            {/*                        // console.log(\"Has Conducted HIVST\", !objValues.hasConductedHIVST);*/}\n                            {/*                    }}*/}\n                            {/*                    style={{marginRight: \"10px\"}}*/}\n                            {/*                />*/}\n                            {/*                Have you conducted the HIVST ?*/}\n                            {/*            </label>*/}\n                            {/*        </FormGroup>*/}\n                            {/*    </div>*/}\n                            {/*</div>*/}\n\n\n                            {objValues && objValues.otherTestKitUserInfoAvailable === \"Yes\" &&\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\n                                    <hr style={{width: '100%'}}/>\n                                </div>\n                            }\n                            {objValues && selectedUsers.length > 0 &&\n                                <div className=\"row mb-7\">\n                                    <div className=\"form-group  col-md-4\">\n                                        <FormGroup>\n                                            <Label>\n                                                Have you conducted the HIVST ?\n                                                {/*<span style={{color: \"red\"}}> *</span>*/}\n                                            </Label>\n                                            <select\n                                                className=\"form-control\"\n                                                name=\"hasConductedHIVST\"\n                                                id=\"hasConductedHIVST\"\n                                                value={objValues.hasConductedHIVST}\n                                                onChange={handleInputChange}\n                                                style={{\n                                                    border: \"1px solid #014D88\",\n                                                    borderRadius: \"0.2rem\",\n                                                }}\n                                            >\n                                                <option value={\"\"}></option>\n                                                <option value=\"Yes\">YES</option>\n                                                <option value=\"No\">NO</option>\n                                            </select>\n                                        </FormGroup>\n                                    </div>\n                                </div>\n                            }\n                            <div className=\"row mb-7\">\n                                {objValues.hasConductedHIVST === \"Yes\" ? (\n                                    // Display the following questions if the checkbox is checked\n                                    <>\n                                        <div className=\"row center\">\n                                            <div\n                                                className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\n                                                style={{\n                                                    backgroundColor: \"green\",\n                                                    width: \"125%\",\n                                                    height: \"35px\",\n                                                    color: \"#fff\",\n                                                    fontWeight: \"bold\",\n                                                }}\n                                            >\n\n                                                Section B : HIVST Post Test Assessment\n                                            </div>\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label >\n                                                        Have you ever used HIVST kit?\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                    </Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"everUsedHivstKit\"\n                                                        id=\"everUsedHivstKitl\"\n                                                        // value={objValues.hasConductedHIVST ? \"Yes\" : \"No\"}\n                                                        value={testKitUserDetails?.postTestAssessment?.everUsedHivstKit}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                    >\n                                                        <option value={\"\"}></option>\n                                                        <option value=\"Yes\">YES</option>\n                                                        <option value=\"No\">NO</option>\n                                                    </select>\n                                                </FormGroup>\n                                            </div>\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label >\n                                                        Did you use the HIVST kit for yourself or someone else?\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                    </Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"everUsedHivstKitForSelfOrOthers\"\n                                                        id=\"everUsedHivstKitForSelfOrOthers\"\n                                                        value={testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                    >\n                                                        <option value={\"\"}></option>\n                                                        <option value=\"Self\">Self</option>\n                                                        <option value=\"Someone else\">Someone else</option>\n                                                    </select>\n                                                </FormGroup>\n                                            </div>\n                                            {testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers === \"Someone else\" &&\n                                                <div className=\"form-group  col-md-4\">\n                                                    <FormGroup>\n                                                        <Label >\n                                                            Who did you give it to?\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"otherHivstKitUserCategory\"\n                                                            id=\"otherHivstKitUserCategory\"\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategory}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                        >\n                                                            <option value={\"\"}></option>\n                                                            {options.map(option => (\n                                                                <option key={option.value} value={option.value}>\n                                                                    {option.label}\n                                                                </option>\n                                                            ))}\n                                                        </select>\n                                                    </FormGroup>\n                                                </div>\n                                            }\n                                            {testKitUserDetails.postTestAssessment?.otherHivstKitUserCategory === \"others\" ? (\n                                                <div className=\"form-group col-md-4\">\n                                                    <FormGroup>\n                                                        <Label>\n                                                            Please Specify Other Category\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <input\n                                                            type=\"text\"\n                                                            className=\"form-control\"\n                                                            name=\"otherHivstKitUserCategoryText\"\n                                                            id=\"otherHivstKitUserCategoryText\"\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                        />\n                                                    </FormGroup>\n                                                </div>\n                                            ) : \"\"}\n\n                                            <div className=\"form-group  col-md-4\">\n                                                <FormGroup>\n                                                    <Label >\n                                                        What was the result of the HIVST?\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                    </Label>\n                                                    <select\n                                                        className=\"form-control\"\n                                                        name=\"resultOfHivstTest\"\n                                                        id=\"resultOfHivstTest\"\n                                                        value={testKitUserDetails.postTestAssessment.resultOfHivstTest}\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                        style={{\n                                                            border: \"1px solid #014D88\",\n                                                            borderRadius: \"0.2rem\",\n                                                        }}\n                                                    >\n                                                        <option value={\"\"}></option>\n                                                        <option value=\"Reactive\">Reactive</option>\n                                                        <option value=\"Non-Reactive\">Non Reactive</option>\n                                                        <option value=\"Indeterminate\">Indeterminate</option>\n                                                    </select>\n                                                </FormGroup>\n                                            </div>\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Reactive\" &&\n                                                <div className=\"form-group  col-md-4\">\n                                                    <FormGroup>\n                                                        <Label >\n                                                            Would you like to access HIV testing to confirm my HIVST\n                                                            result?\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"accessConfirmatoryHts\"\n                                                            id=\"accessConfirmatoryHts\"\n                                                            value={testKitUserDetails.postTestAssessment.accessConfirmatoryHts}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                        >\n                                                            <option value={\"\"}></option>\n                                                            <option value=\"Yes\">YES</option>\n                                                            <option value=\"No\">NO</option>\n                                                        </select>\n                                                    </FormGroup>\n                                                </div>\n                                            }\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Non-Reactive\" &&\n                                                <div className=\"form-group  col-md-4\">\n                                                    <FormGroup>\n                                                        <Label >\n                                                            Would you like to be referred for prevention services\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                        </Label>\n                                                        <select\n                                                            className=\"form-control\"\n                                                            name=\"referPreventionServices\"\n                                                            id=\"referPreventionServices\"\n                                                            value={testKitUserDetails.postTestAssessment.referPreventionServices}\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                            style={{\n                                                                border: \"1px solid #014D88\",\n                                                                borderRadius: \"0.2rem\",\n                                                            }}\n                                                        >\n                                                            <option value={\"\"}></option>\n                                                            <option value=\"Yes\">YES</option>\n                                                            <option value=\"No\">NO</option>\n                                                        </select>\n                                                    </FormGroup>\n                                                </div>\n                                            }\n\n                                        </div>\n                                        {\n                                            testKitUserDetails.postTestAssessment\n                                            && testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\"\n                                            || testKitUserDetails.postTestAssessment.referPreventionServices === \"Yes\" ?\n                                                (\n                                                    <div className=\"row center\">\n                                                        <div\n                                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\n                                                            style={{\n                                                                backgroundColor: \"rgba(25, 96, 176, 0.8)\",\n                                                                width: \"125%\",\n                                                                height: \"35px\",\n                                                                color: \"#fff\",\n                                                                fontWeight: \"bold\",\n                                                            }}\n                                                        >\n                                                            Section C : Referral Information\n                                                        </div>\n                                                        {testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\" && <div className=\"form-group  col-md-4\">\n                                                            <FormGroup>\n                                                                <Label >\n                                                                    Referred for Confirmatory HTS Testing\n                                                                    {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                </Label>\n                                                                <select\n                                                                    className=\"form-control\"\n                                                                    name=\"referredForConfirmatoryHts\"\n                                                                    id=\"referredForConfirmatoryHts\"\n                                                                    value={testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts}\n                                                                    onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                                    style={{\n                                                                        border: \"1px solid #014D88\",\n                                                                        borderRadius: \"0.2rem\",\n                                                                    }}\n                                                                >\n                                                                    <option value={\"\"}></option>\n                                                                    <option value=\"Yes\">YES</option>\n                                                                    <option value=\"No\">NO</option>\n                                                                </select>\n                                                            </FormGroup>\n                                                        </div>}\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts === \"Yes\" &&\n                                                            <div className=\"form-group mb-3 col-md-4\">\n                                                                <FormGroup>\n                                                                    <Label for=\"\">\n                                                                        Date referred for confirmatory HTS testing\n                                                                        field\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                    </Label>\n                                                                    <Input\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                                        name=\"dateReferredForConfirmatoryHts\"\n                                                                        id=\"dateReferredForConfirmatoryHts\"\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts}\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n\n                                                                        min={objValues.dateOfVisit}\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                                        style={{\n                                                                            border: \"1px solid #014D88\",\n                                                                            borderRadius: \"0.25rem\",\n                                                                        }}\n                                                                    />\n                                                                </FormGroup>\n                                                            </div>}\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails?.postTestAssessment?.referPreventionServices === \"Yes\" &&\n                                                            <div className=\"form-group  col-md-4\">\n                                                                <FormGroup>\n                                                                    <Label >\n                                                                        Referred for Prevention Services\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                    </Label>\n                                                                    <select\n                                                                        className=\"form-control\"\n                                                                        name=\"referredForPreventionServices\"\n                                                                        id=\"referredForPreventionServices\"\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices}\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n\n                                                                        style={{\n                                                                            border: \"1px solid #014D88\",\n                                                                            borderRadius: \"0.2rem\",\n                                                                        }}\n                                                                    >\n                                                                        <option value={\"\"}></option>\n                                                                        <option value=\"Yes\">YES</option>\n                                                                        <option value=\"No\">NO</option>\n                                                                    </select>\n                                                                </FormGroup>\n                                                            </div>\n                                                        }\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices === \"Yes\" &&\n                                                            <div className=\"form-group mb-3 col-md-4\">\n                                                                <FormGroup>\n                                                                    <Label for=\"\">\n                                                                        Date referred for prevention services\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\n                                                                    </Label>\n                                                                    <Input\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                                                        name=\"dateReferredForPreventionServices\"\n                                                                        id=\"dateReferredForPreventionServices\"\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices}\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\n                                                                        min={objValues.dateOfVisit}\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                                                        style={{\n                                                                            border: \"1px solid #014D88\",\n                                                                            borderRadius: \"0.25rem\",\n                                                                        }}\n                                                                    />\n                                                                    {/*{errors.dateOfVisit !== \"\" ? (*/}\n                                                                    {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\n                                                                    {/*) : (*/}\n                                                                    {/*    \"\"*/}\n                                                                    {/*)}*/}\n                                                                </FormGroup>\n                                                            </div>\n                                                        }\n\n                                                    </div>) : \"\"}\n                                    </>\n                                  ) : ( \"\"\n                                    // Display the save form button if the checkbox is not checked\n                                    // <div className=\"row\">\n                                    //     {// if selected user  is myself only show save button and save secondary user information\n                                    //         selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === \"myself\" &&\n                                    //         <div className=\"form-group mb-3 col-md-6\">\n                                    //             <Button\n                                    //                 content=\"save myself information\"\n                                    //                 icon=\"save\"\n                                    //                 labelPosition=\"right\"\n                                    //                 style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\n                                    //                 onClick={handleSubmit}\n                                    //                 disabled={saving}\n                                    //             />\n                                    //         </div>\n                                    //     }\n                                    //\n                                    // </div>\n                                )}\n                            </div>\n                            {selectedUsers.length > 0 && <div className=\"row\">\n                                <div className=\"form-group mb-3 col-md-6\">\n                                    <LabelSui\n                                        as=\"a\"\n                                        color=\"black\"\n                                        onClick={addUserInformation}\n                                        size=\"small\"\n                                        style={{marginTop: 35}}\n                                    >\n                                        <Icon name=\"plus\"/> Add\n                                    </LabelSui>\n                                </div>\n                            </div>\n                            }\n                            {/*added kit user */}\n                            {userInformationList.length > 0 ? (\n                                <div class=\"row\">\n                                    <List className=\"mb-5\">\n                                        <Table striped responsive>\n                                            <thead style={{\n                                                backgroundColor: \"#014D88\",\n                                                color: \"white\",\n                                                fontSize: \"10px\"\n                                            }}>\n                                            <tr>\n                                                <th>Client Code</th>\n                                                <th>HIV Self Test Type</th>\n                                                {/*<th>Ever used HIVST Kit</th>*/}\n                                                <th>User Category</th>\n                                                <th>Action</th>\n                                            </tr>\n                                            </thead>\n                                            <tbody>\n                                            {userInformationList.map((item, index) => (\n                                                <tr key={index}>\n                                                    <td>{item.basicUserInfo.clientCode}</td>\n                                                    <td>{item.basicUserInfo.typeOfHivst}</td>\n                                                    {/*<th>{item.postTestAssessment.everUsedHivstKit}</th>*/}\n                                                    <td>{item.basicUserInfo.userCategory}</td>\n                                                    <td>\n                                                        <IconButton\n                                                            aria-label=\"delete\"\n                                                            size=\"small\"\n                                                            color=\"error\"\n                                                            onClick={() => removeUserInformation(index)}\n                                                        >\n                                                            <DeleteIcon fontSize=\"inherit\"/>\n                                                        </IconButton>\n                                                        {/*<IconButton>*/}\n                                                        {/*    <EditIcon fontSize=\"inherit\"/>*/}\n                                                        {/*</IconButton>*/}\n                                                    </td>\n                                                </tr>\n                                            ))}\n                                            </tbody>\n                                        </Table>\n                                    </List>\n                                </div>\n                                ) : \" \"}\n                            {/*{selectedUsers.length > 0 &&*/}\n                            {/*    <div className=\"row\">*/}\n                            {/*        <div className=\"form-group mb-3 col-md-6\">*/}\n                            {/*            <Button*/}\n                            {/*                content=\"save\"*/}\n                            {/*                icon=\"save\"*/}\n                            {/*                labelPosition=\"right\"*/}\n                            {/*                style={{backgroundColor: \"#014d88\", color: \"#fff\"}}*/}\n                            {/*                onClick={handleSubmit}*/}\n                            {/*                // disabled={saving}*/}\n                            {/*                disabled={userInformationList.length === 0}*/}\n                            {/*            />*/}\n                            {/*        </div>*/}\n                            {/*    </div>*/}\n                            {/*}*/}\n\n                            {\n                                objValues?.otherTestKitUserInfoAvailable === \"No\" ?\n                                    (\n                                        <div className=\"row mb-7\">\n                                            <div className=\"form-group mb-3 col-md-6\">\n                                                <Button\n                                                    content=\"Save without user Info\"\n                                                    icon=\"save\"\n                                                    labelPosition=\"right\"\n                                                    style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\n                                                    onClick={handleSubmit}\n                                                    disabled={saving}\n                                                />\n                                            </div>\n                                        </div>\n                                    ) :\n                                    (\n                                        <div className=\"row\">\n                                            <div className=\"form-group mb-3 col-md-6\">\n                                                <Button\n                                                    content=\"Save\"\n                                                    icon=\"save\"\n                                                    labelPosition=\"right\"\n                                                    style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\n                                                    onClick={handleSubmit}\n                                                    disabled={userInformationList.length === 0}\n                                                />\n                                            </div>\n                                        </div>\n                                    )\n                            }\n\n                        </div>\n\n                    </form>\n                </CardBody>\n            </Card>\n\n            <Modal\n                show={open}\n                toggle={toggle}\n                className=\"fade\"\n                size=\"sm\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n            >\n                <Modal.Header>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Notification!\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h4>Are you Sure of the Age entered?</h4>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        onClick={toggle}\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    >\n                        Yes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    )\n}\nexport default HIVSTPatientRegistration;","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Others.js",["1171","1172","1173","1174","1175","1176","1177","1178","1179","1180"],"/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/PostTest.js",["1181","1182","1183","1184","1185"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst PostTest = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [saving, setSaving] = useState(false);\n\n  ///const [errors, setErrors] = useState({});\n  const [objValues, setObjValues] = useState({\n    htsClientId: clientId,\n    postTestCounselingKnowledgeAssessment: {},\n    personId: patientID,\n  });\n\n  const [postTest, setPostTest] = useState({\n    hivTestResult: \"\",\n    hivTestBefore:\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\n        ?.lastHivTestDone !== \"Never\" &&\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\n        ?.whatWasTheResult === \"Positive\"\n        ? \"Previously tested positive in HIV care\"\n        : \"\",\n    hivRequestResult: \"\",\n    hivRequestResultCt: \"\",\n    clientReceivedHivTestResult: \"\",\n    postTestCounseling: \"\",\n    riskReduction: \"\",\n    postTestDisclosure: \"\",\n    bringPartnerHivtesting: \"\",\n    childrenHivtesting: \"\",\n    informationFp: \"\",\n    partnerFpThanCondom: \"\",\n    partnerFpUseCondom: \"\",\n    correctCondomUse: \"\",\n    condomProvidedToClient: \"\",\n    unprotectedSexRegularPartnerLastThreeMonth: \"\",\n    referredToServices: \"\",\n    lubricantProvidedToClient: \"\",\n    condomProvidedToClientCount: \"\",\n    lubricantProvidedToClientCount: \"\",\n  });\n\n\n\n  useEffect(() => {\n    if (\n      props.patientObj &&\n      props.patientObj.postTestCounselingKnowledgeAssessment\n    ) {\n      setPostTest(props.patientObj.postTestCounselingKnowledgeAssessment);\n    } else {\n      ///setPostTest(props.patientObj && props.patientObj.postTestCounselingKnowledgeAssessment!==null ? props.patientObj.postTestCounselingKnowledgeAssessment : {})\n      if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult2 !== \"\" &&\n        props.patientObj.hivTestResult2 !== null &&\n        props.patientObj.hivTestResult2 === \"Positive\"\n      ) {\n        postTest.hivTestResult = \"true\";\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\n      } else if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult2 !== \"\" &&\n        props.patientObj.hivTestResult2 !== null &&\n        props.patientObj.hivTestResult2 === \"Negative\"\n      ) {\n        postTest.hivTestResult = \"false\";\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\n      } else if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult !== \"\" &&\n        props.patientObj.hivTestResult !== null &&\n        props.patientObj.hivTestResult === \"Positive\"\n      ) {\n        postTest.hivTestResult = \"true\";\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\n      } else if (\n        postTest.hivTestResult === \"\" &&\n        props.patientObj.hivTestResult !== \"\" &&\n        props.patientObj.hivTestResult !== null &&\n        props.patientObj.hivTestResult === \"Negative\"\n      ) {\n        postTest.hivTestResult = \"false\";\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\n      }\n    }\n  }, [props.patientObj, postTest.hivTestResult]);\n  const handleInputChangePostTest = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n\n    if (e.target.name === \"lubricantProvidedToClientCount\") {\n      if (e.target.value >= 0) {\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\n      }\n    } else if (e.target.name === \"condomProvidedToClientCount\") {\n      if (e.target.value >= 0) {\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\n      } else {\n        setPostTest({ ...postTest, [e.target.name]: 0 });\n      }\n    } else {\n      setPostTest({ ...postTest, [e.target.name]: e.target.value });\n    }\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    //handleItemClick('recency-testing', 'post-test')\n    // if(!(Object.values(postTest).every(x => x === \"\"))){\n    \n   let latestForm = getNextForm(\n     \"Post_Test_Counseling\",\n     props?.patientObj?.riskStratificationResponseDto?.age,\n     \"\",\n     props?.patientObj?.hivTestResult\n   );\n    setSaving(true);\n    objValues.htsClientId = props.patientObj.id;\n    objValues.postTestCounselingKnowledgeAssessment = postTest;\n    objValues.personId = props.patientObj.personResponseDto.id;\n    axios\n      .put(\n        `${baseUrl}hts/${props.patientObj.id}/post-test-counseling`,\n        objValues,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setSaving(false);\n        props.setPatientObj(response.data);\n        toast.success(\"Post test successful\");\n         handleItemClick(latestForm[0], latestForm[1]);\n\n        // handleItemClick(\"recency-testing\", \"post-test\");\n      })\n      .catch((error) => {\n        setSaving(false);\n        if (error.response && error.response.data) {\n          let errorMessage =\n            error.response.data.apierror &&\n            error.response.data.apierror.message !== \"\"\n              ? error.response.data.apierror.message\n              : \"Something went wrong, please try again\";\n          toast.error(errorMessage);\n        } else {\n          toast.error(\"Something went wrong. Please try again...\");\n        }\n      });\n    // }else{\n    //     toast.error(\"All post test fields are required\")\n\n    // }\n  };\n\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2>POST TEST COUNSELING</h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\n              </LabelRibbon>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    HIV test result <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivTestResult\"\n                    id=\"hivTestResult\"\n                    value={postTest.hivTestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                    disabled={true}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Positive</option>\n                    <option value=\"false\">Negative</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Have you been tested for HIV before within this year?{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivTestBefore\"\n                    id=\"hivTestBefore\"\n                    value={postTest.hivTestBefore}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Not previously tested\">\n                      Not previously tested\n                    </option>\n                    <option value=\"Previously tested negative\">\n                      Previously tested negative\n                    </option>\n                    <option value=\"Previously tested positive in HIV care\">\n                      Previously tested positive in HIV care\n                    </option>\n                    <option value=\"Previously tested positive not in HIV care\">\n                      Previously tested positive not in HIV care\n                    </option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>HIV Request and Result form signed by tester </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivRequestResult\"\n                    id=\"hivRequestResult\"\n                    value={postTest.hivRequestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    HIV Request and Result form filled with CT Intake Form{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hivRequestResultCt\"\n                    id=\"hivRequestResultCt\"\n                    value={postTest.hivRequestResultCt}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client received HIV test result </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"clientReceivedHivTestResult\"\n                    id=\"clientReceivedHivTestResult\"\n                    value={postTest.clientReceivedHivTestResult}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Post test counseling done </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"postTestCounseling\"\n                    id=\"postTestCounseling\"\n                    value={postTest.postTestCounseling}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Risk reduction plan developed </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"riskReduction\"\n                    id=\"riskReduction\"\n                    value={postTest.riskReduction}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Post test disclosure plan developed </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"postTestDisclosure\"\n                    id=\"postTestDisclosure\"\n                    value={postTest.postTestDisclosure}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Will bring partner(s) for HIV testing </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"bringPartnerHivtesting\"\n                    id=\"bringPartnerHivtesting\"\n                    value={postTest.bringPartnerHivtesting}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Will bring own children {\"<5\"} years for HIV testing{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"childrenHivtesting\"\n                    id=\"childrenHivtesting\"\n                    value={postTest.childrenHivtesting}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Provided with information on FP and dual contraception{\" \"}\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"informationFp\"\n                    id=\"informationFp\"\n                    value={postTest.informationFp}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Client/Partner use FP methods (other than condom)\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"partnerFpThanCondom\"\n                    id=\"partnerFpThanCondom\"\n                    value={postTest.partnerFpThanCondom}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client/Partner use condoms as (one) FP method </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"partnerFpUseCondom\"\n                    id=\"partnerFpUseCondom\"\n                    value={postTest.partnerFpUseCondom}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Correct condom use demonstrated </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"correctCondomUse\"\n                    id=\"correctCondomUse\"\n                    value={postTest.correctCondomUse}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Condoms provided to client </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"condomProvidedToClient\"\n                    id=\"condomProvidedToClient\"\n                    value={postTest.condomProvidedToClient}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              {postTest.condomProvidedToClient !== null &&\n                postTest.condomProvidedToClient === \"true\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>How many condoms were provided to client </Label>\n                      <Input\n                        type=\"number\"\n                        name=\"condomProvidedToClientCount\"\n                        id=\"condomProvidedToClientCount\"\n                        value={postTest.condomProvidedToClientCount}\n                        onChange={handleInputChangePostTest}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Lubricant were provided to client </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"lubricantProvidedToClient\"\n                    id=\"lubricantProvidedToClient\"\n                    value={postTest.lubricantProvidedToClient}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              {postTest.lubricantProvidedToClient !== null &&\n                postTest.lubricantProvidedToClient === \"true\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>How many lubricant provided to client </Label>\n                      <Input\n                        type=\"number\"\n                        name=\"lubricantProvidedToClientCount\"\n                        id=\"lubricantProvidedToClientCount\"\n                        value={postTest.lubricantProvidedToClientCount}\n                        onChange={handleInputChangePostTest}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n              {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        id=\"unprotectedSexRegularPartnerLastThreeMonth\"\n                                        value={postTest.unprotectedSexRegularPartnerLastThreeMonth}\n                                        onChange={handleInputChangePostTest}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n              {/* <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular particular in the last 3 months</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sex\"\n                                        id=\"sex\"\n                                        \n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"Yes\">Yes</option>\n                                        <option value=\"No\">No</option>\n                                        \n                                    </select>\n                                    \n                                </FormGroup>\n                            </div> */}\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>Client referred to other services </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"referredToServices\"\n                    id=\"referredToServices\"\n                    value={postTest.referredToServices}\n                    onChange={handleInputChangePostTest}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <Message success>\n                <h4>\n                  If client tests HIV negative, and HIV Risk Assessment Score{\" \"}\n                  {\">0\"} or there is evidence for a STI syndrome, recommend\n                  re-testing after 3 months\n                </h4>\n              </Message>\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* <Button\n                    content=\"Back\"\n                    icon=\"left arrow\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={() => handleItemClick(\"hiv-test\", \"hiv-test\")}\n                  /> */}\n                  {/*{postTest.hivTestResult === \"true\" && (*/}\n                  {/*  <Button*/}\n                  {/*    content=\"Save & Continue\"*/}\n                  {/*    icon=\"right arrow\"*/}\n                  {/*    labelPosition=\"right\"*/}\n                  {/*    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}*/}\n                  {/*    onClick={handleSubmit}*/}\n                  {/*  />*/}\n                  {/*)}*/}\n                  {/*{postTest.hivTestResult === \"false\" && (*/}\n                  {/*  <Button*/}\n                  {/*    content=\"Save & Finish\"*/}\n                  {/*    icon=\"right arrow\"*/}\n                  {/*    labelPosition=\"right\"*/}\n                  {/*    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}*/}\n                  {/*    onClick={handleSubmit}*/}\n                  {/*  />*/}\n                  {/*)}*/}\n                  <Button\n                    content=\"Save & Continue\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default PostTest;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Elicitation/Index.js",["1186","1187","1188","1189"],"import React, {useState, Fragment } from \"react\";\n\nimport { Row, Col, Card, } from \"react-bootstrap\";\nimport AddIndexContact from './AddIndexContact';\nimport IndexContactList from './IndexContactList'\nimport { FaUserPlus } from \"react-icons/fa\";\nimport { Link } from 'react-router-dom';\n//import Button from '@material-ui/core/Button';\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\n\nconst Elicitation = (props) => {\n  \n    const [activePage, setActivePage]= useState('list')\n    const handleIClickPage =(activeItem)=>{\n        setActivePage(activeItem)\n    }\n    const handleItemClick =(page, completedMenu)=>{\n        props.handleItemClick(page)\n        if(props.completed.includes(completedMenu)) {\n\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n    }\n    const handleDone=()=>{\n      //window.location.reload(false);\n      props.setActivePage({...props.activePage, activePage:\"home\"})\n     \n    }\n\n\n  return (\n    <Fragment>  \n     \n      <Row>       \n        <Col md={12}>\n            {activePage==='list' &&\n                (\n                    <IndexContactList activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>\n                )\n            }\n            {activePage==='add' && (\n                  <AddIndexContact activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>        \n            )}\n            <br />\n                <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('recency-testing','recency-testing')}/>\n                <Button content='Done' icon='list' labelPosition='left' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={()=>handleDone()}/>\n                \n                </div>\n                </div>\n        </Col>\n        \n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Elicitation;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/BasicInfo.js",["1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MatButton from \"@material-ui/core/Button\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Modal } from \"react-bootstrap\";\nimport { getCheckModality } from \"../../../../utility\";\nimport { getNextForm } from \"../../../../utility\";\nimport { error } from \"highcharts\";\nimport Cookies from \"js-cookie\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n// THIS IS THE CREATE FORM\nconst BasicInfo = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [errors, setErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n  //const [hideNumChild, setHideNumChild] = useState(false);\n  const [kP, setKP] = useState([]);\n  const [enrollSetting, setEnrollSetting] = useState([]);\n  const [sourceReferral, setSourceReferral] = useState([]);\n  const [gender, setGender] = useState([]);\n  const [counselingType, setCounselingType] = useState([]);\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\n  const [indexTesting, setIndexTesting] = useState([]);\n  let temp = { ...errors };\n  const [disableVitals, setDisableVitals] = useState(false)\n\n  const [clientCodeetail, setclientCodeetail] = useState(\"\");\n  const [clientCodeetail2, setclientCodeetail2] = useState(\"\");\n  const [clientCodeCheck, setClientCodeCheck] = useState(\"\");\n  const [createdCode, setCreatedCode] = useState(\"\");\n\n  const [facilityCode, setFacilityCode] = useState(\"\");\n  const [serialNumber, setSerialNumber] = useState(null);\n  const [disableModality, setDisableModality] = useState(props.extra.testingSetting === \"FACILITY_HTS_TEST_SETTING_ANC\" ? true: false);\n\n  const [modalityCheck, setModality] = useState(\"\");\n  const [showPregancy, setShowPregnancy] = useState(false);\n\n  const [objValues, setObjValues] = useState({\n    active: true,\n    personId: props.patientObj.personId,\n    clientCode:\n      props.patientObj && props.patientObj.clientCode\n        ? props.patientObj.clientCode\n        : \"\",\n    breastFeeding:\n      props.patientObj && props.patientObj.breastFeeding\n        ? props.patientObj.breastFeeding\n        : \"\",\n    dateVisit:\n      props.patientObj && props.patientObj.dateVisit\n        ? props.patientObj.dateVisit\n        : \"\",\n    firstTimeVisit:\n       props?.patientObj?.firstTimeVisit\n       ,\n    indexClient: props?.patientObj?.indexClient\n        ,\n    numChildren:\n      props.patientObj && props.patientObj.numChildren\n        ? props.patientObj.numChildren\n        : \"\",\n    numWives:\n      props.patientObj && props.patientObj.numWives\n        ? props.patientObj.numWives\n        : \"\",\n    pregnant:\n      props.patientObj && props.patientObj.pregnant\n        ? props.patientObj.pregnant\n        : \"\",\n    previouslyTested:  props?.patientObj?.previouslyTested ,\n    referredFrom: props.patientObj ? props.patientObj.referredFrom : \"\",\n    riskAssessment:\n      props.patientObj && props.patientObj.riskAssessment\n        ? props.patientObj.riskAssessment\n        : {},\n    riskStratificationCode:\n      props.extra && props.extra.code !== \"\" ? props.extra.code : \"\",\n    targetGroup:\n      props.patientObj && props.patientObj.targetGroup\n        ? props.patientObj.targetGroup\n        : \"\",\n    testingSetting: props.patientObj ? props.patientObj.testingSetting : \"\",\n    typeCounseling: props.patientObj ? props.patientObj.typeCounseling : \"\",\n    relationWithIndexClient: props.patientObj\n      ? props.patientObj.relationWithIndexClient\n      : \"\",\n    indexClientCode: \"\",\n    comment: props?.patientObj?.comment,\n    partnerNotificationService: \"\",\n    familyIndex: \"\",\n\n  });\n\n  const CreateClientCode = () => {\n    let facilityShortCode = \"\";\n    axios\n      .get(`${baseUrl}hts/get-facility-code`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setFacilityCode(response.data);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n\n    let visitDate = new Date(props.patientObj.dateVisit);\n\n    let setting = props.patientObj.testingSetting;\n    let settingCode = \"\";\n    if (setting?.includes(\"SETTING_STI\")) {\n      settingCode = \"STI\";\n    } else if (setting?.includes(\"EMERGENCY\")) {\n      settingCode = \"EME\";\n    } else if (setting?.includes(\"SETTING_INDEX\")) {\n      settingCode = \"IND\";\n    } else if (setting?.includes(\"INPATIENT\")) {\n      settingCode = \"INP\";\n    } else if (setting?.includes(\"PMTCT\")) {\n      settingCode = \"PMTCT\";\n    } else if (setting?.includes(\"TB\")) {\n      settingCode = \"TB\";\n    } else if (setting?.includes(\"VCT\")) {\n      settingCode = \"VCT\";\n    } else if (setting?.includes(\"MOBILE\")) {\n      settingCode = \"MOB\";\n    } else if (setting?.includes(\"SETTING_SNS\")) {\n      settingCode = \"SNS\";\n    } else if (setting?.includes(\"OTHER\")) {\n      settingCode = \"OTH\";\n    }else if (setting?.includes(\"SETTING_ANC\")) {\n      settingCode = \"ANC\";\n    }else if (setting?.includes(\"RETESTING\")) {\n      settingCode = \"RET\";\n    }else if (setting?.includes(\"SETTING_L&D\")) {\n      settingCode = \"L&D\";\n    }else if (setting?.includes(\"POST_NATAL_WARD_BREASTFEEDING\")) {\n      settingCode = \"PNWB\";\n    }else if (setting?.includes(\"NPATIENT\")) {\n      settingCode = \"INP\";\n    }else if (setting?.includes(\"SETTING_CT\")) {\n      settingCode = \"CT\";\n    }else if (setting?.includes(\"SETTING_FP\")) {\n      settingCode = \"FP\";\n    }else if (setting?.includes(\"BLOOD_BANK\")) {\n      settingCode = \"BB\";\n    }else if (setting?.includes(\"PEDIATRIC\")) {\n      settingCode = \"PED\";\n    }else if (setting?.includes(\"MALNUTRITION\")) {\n      settingCode = \"Mal\";\n    }else if (setting?.includes(\"PREP_TESTING\")) {\n      settingCode = \"PrEPT\";\n    }else if (setting?.includes(\"SPOKE_HEALTH_FACILITY\")) {\n      settingCode = \"SPHF\";\n    }else if (setting?.includes(\"STANDALONE\")) {\n      settingCode = \"STAN\";\n    }else if (setting?.includes(\"CONGREGATIONAL\")) {\n      settingCode = \"CON\";\n    }else if (setting?.includes(\"DELIVERY_HOMES\")) {\n      settingCode = \"DEL\";\n    }    else if (setting?.includes(\"TBA_ORTHODOX\")) {\n      settingCode = \"TBAO\";\n    }    else if (setting?.includes(\"TBA_RT-HCW\")) {\n      settingCode = \"TBAH\";\n    }    else if (setting?.includes(\"SETTING_OVC\")) {\n      settingCode = \"OVC\";\n    }    else if (setting?.includes(\"OUTREACH\")) {\n      settingCode = \"OUT\";\n    }  \n\n    let month = visitDate.getMonth();\n    let year = visitDate.getFullYear();\n    let generatedCode =\n      \"C\" + facilityCode + \"/\" + settingCode + \"/\" + month + \"/\" + year + \"/\";\n    setCreatedCode(generatedCode);\n    if(!props.patientObj.id){\n      setObjValues({ ...objValues, clientCode: generatedCode });\n    }else{\n          setSerialNumber(Cookies.get(\"serial-number\"))\n          setDisableVitals(true)\n    }\n  };\n\n\n\n  const getSettingList=()=>{\n\n    if(props.patientObj.riskStratificationResponseDto.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\"){\n      HTS_ENTRY_POINT_COMMUNITY()\n    }else if(props.patientObj.riskStratificationResponseDto.entryPoint === \"HTS_ENTRY_POINT_FACILITY\"){\n\n      HTS_ENTRY_POINT_FACILITY()\n    }else{\n      setEnrollSetting([]);\n\n    }\n\n    setModality(\n      getCheckModality(\n        props?.patientObj?.riskStratificationResponseDto?.testingSetting\n      )\n    );\n  }\n\n\n  useEffect(() => {\n\n    KP();\n    EnrollmentSetting();\n    SourceReferral();\n    Genders();\n    CounselingType();\n    PregnancyStatus();\n    IndexTesting();\n\n    CreateClientCode();\n    getSettingList()\n\n\n   \n\n\n  }, [props.patientObj, facilityCode]);\n\n  const handleSubmitCheckOut = () => {\n    if (\n      props.patientObject.visitId !== null &&\n      props.patientObject.status === \"PENDING\"\n    ) {\n      axios\n        .put(\n          `${baseUrl}patient/visit/checkout/${props.patientObject.visitId}`,\n          props.patientObject.visitId,\n          { headers: { Authorization: `Bearer ${token}` } }\n        )\n        .then((response) => {\n          console.log(response.data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //Remove retesting from the codeset\n        //   let facilityList = []\n        // response.data.map((each, index)=>{\n        //       if(each.code !==\"FACILITY_HTS_TEST_SETTING_RETESTING\"){\n        //         facilityList.push(each);\n        //       }\n\n        // })\n\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n\n  //Get list of KP\n  const KP = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setKP(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of KP\n  const PregnancyStatus = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setPregnancyStatus(response.data);\n               let pregnancyCode = response.data.filter((each, index)=>{\n\n                return each.code === \"PREGANACY_STATUS_PREGNANT\"\n               })                                                        \n\n\n        if (props?.patientObject?.gender.toLowerCase() === \"female\" ) {\n            if( props.extra.testingSetting ===\n              \"FACILITY_HTS_TEST_SETTING_ANC\" \n           ){\n              setShowPregnancy(true);\n\n\n              setObjValues({...objValues, pregnant:pregnancyCode[0].id })\n            }\n          }\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of KP\n  const CounselingType = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/COUNSELING_TYPE`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setCounselingType(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of HIV STATUS ENROLLMENT\n  const EnrollmentSetting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of Source of Referral\n  const SourceReferral = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSourceReferral(response.data);\n      })\n      .catch((error) => {});\n  };\n  //Get list of Genders from\n  const Genders = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/GENDER`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setGender(response.data);\n      })\n      .catch((error) => {});\n  };\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"indexClientCode\" && e.target.value !== \"\") {\n      async function getIndexClientCode() {\n        const indexClientCode = e.target.value;\n        const response = await axios.get(\n          `${baseUrl}hts/client/${indexClientCode}`,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== \"Record Not Found\") {\n          setclientCodeetail2(\"\");\n          setclientCodeetail(response.data);\n        } else {\n          setclientCodeetail(\"\");\n          setclientCodeetail2(response.data);\n        }\n      }\n      getIndexClientCode();\n      setObjValues({\n        ...objValues,\n        [e.target.name]: e.target.value,\n   \n      });\n    }else if(e.target.name === \"serialNumber\" ){\n      setSerialNumber(e.target.value )\n      checkClientCode(e)\n\n    } else if (e.target.name === \"indexClient\") {\n        setObjValues({\n          ...objValues,\n          [e.target.name]: e.target.value,\n          relationWithIndexClient: \"\",\n          indexClientCode: \"\",\n        });\n\n        setErrors({...errors, relationWithIndexClient: \"\", indexClientCode: \"\" })\n    } else if (e.target.name === \"numChildren\") {\n      if (e.target.value >= 0) {\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      } else {\n        setObjValues({\n          ...objValues,\n          [e.target.name]: 0,\n        });\n      }\n    } else if (e.target.name === \"numWives\") {\n      if (e.target.value >= 0) {\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      } else {\n        setObjValues({\n          ...objValues,\n          [e.target.name]: 0,\n        });\n      }\n    } else {\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n    }\n  };\n\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n    temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\n    temp.typeCounseling = objValues.typeCounseling\n      ? \"\"\n      : \"This field is required.\";\n    temp.testingSetting = objValues.testingSetting\n      ? \"\"\n      : \"This field is required.\";\n    temp.targetGroup = objValues.targetGroup ? \"\" : \"This field is required.\";\n    temp.referredFrom = objValues.referredFrom ? \"\" : \"This field is required.\";\n    temp.previouslyTested = objValues.previouslyTested !== \"\"\n      ? \"\"\n      : \"This field is required.\";\n    temp.indexClient = objValues.indexClient !== \"\" ? \"\" : \"This field is required.\";\n    temp.firstTimeVisit = objValues.firstTimeVisit !== \"\"\n      ? \"\"\n      : \"This field is required.\";\n    temp.dateVisit = objValues.dateVisit ? \"\" : \"This field is required.\";\n        \n\n    \n      props?.patientObject?.gender &&\n      props?.patientObject?.gender.toLowerCase() === \"female\" &&\n     ( temp.pregnant =\n        objValues.pregnant !== \"\" ? \"\" : \"This field is required.\");\n\n      objValues.indexClient === \"true\"  &&\n      (temp.relationWithIndexClient =\n              objValues.relationWithIndexClient !== \"\"\n                ? \"\"\n                : \"This field is required.\");\n\n    objValues.indexClient === \"true\" &&\n                  (temp.indexClientCode =\n          objValues.indexClientCode !== \"\" ? \"\" : \"This field is required.\");\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  //checkClientCode\n  //   const checkClientCode = (e) => {\n  //     async function getIndexClientCode() {\n  //       const indexClientCode = objValues.clientCode;\n  //       const response = await axios.get(\n  //         `${baseUrl}hts/client/${indexClientCode}`,\n  //         {\n  //           headers: {\n  //             Authorization: `Bearer ${token}`,\n  //             \"Content-Type\": \"text/plain\",\n  //           },\n  //         }\n  //       );\n  //       // if(response.data!=='Record Not Found'){\n  //       //     setClientCodeCheck(\"Client code already exist\")\n  //       // }else{\n  //       //     setClientCodeCheck(\"\")\n  //       // }\n  //     }\n  //     getIndexClientCode();\n  //   };\n  //checkClientCode\n  const checkClientCode = (e) => {\n    let code = \"\";\n\n\n    if (e.target.name === \"serialNumber\") {\n      // \n      code = createdCode + e.target.value;\n\n      setObjValues({ ...objValues, clientCode: code });\n    }\n    async function getIndexClientCode() {\n      const response = await axios.get(\n        `${baseUrl}hts/get-client-code?code=${code}`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"text/plain\",\n          },\n        }\n      );\n      if(response.data ==='Client code already exist'){\n        // setErrors({...errors,clientCode: \"Client code already exist\" })\n         setClientCodeCheck(\"Client code already exist\")\n         \n      }else {\n          setClientCodeCheck(\"\")\n     \n      }\n    }\n    getIndexClientCode();\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // check next form\n    let latestForm = getNextForm(\n      \"Client_intake_form\",\n      props.patientAge,\n      modalityCheck,\n      \"unknown\"\n    );\n\n    const patientForm = {\n      clientCode: objValues.clientCode,\n      dateVisit: objValues.dateVisit,\n      extra: {},\n      firstTimeVisit: objValues.firstTimeVisit,\n      indexClient: objValues.indexClient,\n      numChildren: objValues.numChildren,\n      numWives: objValues.numWives,\n      personId: props?.patientObject?.personId\n        ? props?.patientObject?.personId\n        : props?.patientObject?.id,\n      hospitalNumber: objValues.clientCode,\n      previouslyTested: objValues.previouslyTested,\n      referredFrom: objValues.referredFrom,\n      targetGroup: objValues.targetGroup,\n      testingSetting: objValues.testingSetting,\n      typeCounseling: objValues.typeCounseling,\n      breastFeeding: objValues.breastFeeding,\n      pregnant: objValues.pregnant,\n      indexClientCode: objValues.indexClientCode,\n      relationWithIndexClient: objValues.relationWithIndexClient,\n      riskStratificationCode:\n        props.extra && props.extra.code !== \"\" ? props.extra.code : \"\",\n      comment: objValues.comment,\n      partnerNotificationService: objValues.partnerNotificationService,\n      familyIndex: objValues.familyIndex,\n\n    };\n\n    props.setPatientObj({ ...props.patientObj, ...objValues });\n    Cookies.set(\"serial-number\", serialNumber)\n\n    if (validate() && clientCodeCheck === \"\") {\n      setSaving(true);\n\n      if(props.patientObj.id && props.completed.includes(\"basic\") ){\n        patientForm.id= props?.patientObj?.id\n        patientForm.personId= props?.patientObj?.personId\n\n        axios\n        .put(`${baseUrl}hts/${props.patientObj.id}`, patientForm, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          let obj = {\n            uuid: \"\",\n            type: \"\",\n            clientCode: \"\",\n          };\n          localStorage.setItem(\"index\", JSON.stringify(obj));\n\n          props.setPatientObj(response.data);\n          props.setBasicInfo(response.data);\n          toast.success(\"Form submitted successfully\");\n\n          handleItemClick(latestForm[0], latestForm[1]);\n        })\n        .catch((error) => {\n          setSaving(false);\n          console.log(error);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        });\n\n      }else{\n        axios\n        .post(`${baseUrl}hts`, patientForm, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          if (props.checkedInPatient) {\n            handleSubmitCheckOut();\n          }\n\n          setSaving(false);\n          props.setPatientObj(response.data);\n          if (response.data && response.data.htsClientUUid) {\n            localStorage.setItem(\n              \"htsClientUUid\",\n              JSON.stringify(response.data.htsClientUUid)\n            );\n          }\n          handleItemClick(latestForm[0], latestForm[1]);\n\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage, {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          } else {\n            toast.error(\"Something went wrong. Please try again...\", {\n              position: toast.POSITION.BOTTOM_CENTER,\n            });\n          }\n        });\n\n      }\n\n\n     \n\n    \n    } else {\n      toast.error(\"All fields are required\", {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    }\n  };\n\n  // useEffect(async ()=> {\n\n  //   await handleClientCodeCheck();\n  //   temp.clientCode = clientCodeCheck === true ? \"\" : \"This field is required.\";\n\n  // },[objValues.clientCode])\n\n\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>CLIENT INTAKE FORM </h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Target Group <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n\n                  <select\n                    className=\"form-control\"\n                    name=\"targetGroup\"\n                    id=\"targetGroup\"\n                    onChange={handleInputChange}\n                    value={objValues.targetGroup}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}>Select</option>\n                    {kP\n                      .filter((value) => {\n                     \n                        if (\n                          props.patientAge > 14 &&\n                          (value.id === 961 || value.id === 475)\n                        ) {\n                          return false;\n                        }\n                        return true;\n                      })\n                      .map((value) => {\n                        return (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        );\n                      })}\n                  </select>\n                  {errors.targetGroup !== \"\" ? (\n                    <span className={classes.error}>{errors.targetGroup}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    Serial Number <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"serialNumber\"\n                    id=\"serialNumber\"\n                    value={serialNumber}\n                    //value={Math.floor(Math.random() * 1093328)}\n                    // onBlur={checkClientCode}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    disabled={disableVitals}\n                  />\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    Client Code <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"text\"\n                    name=\"clientCode\"\n                    id=\"clientCode\"\n                    // value={createdCode + (serialNumber ? serialNumber : \"\")}\n                    value={objValues.clientCode}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    readOnly\n                  />\n                  {/* {errors.clientCode !== \"\" ? (\n                    <span className={classes.error}>{errors.clientCode}</span>\n                  ) : (\n                    \"\"\n                  )} */}\n                  {clientCodeCheck !== \"\" ? (\n                    <span className={classes.error}> {clientCodeCheck}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Referred From <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"referredFrom\"\n                    id=\"referredFrom\"\n                    onChange={handleInputChange}\n                    value={objValues.referredFrom}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {sourceReferral.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.referredFrom !== \"\" ? (\n                    <span className={classes.error}>{errors.referredFrom}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Setting <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"testingSetting\"\n                    id=\"testingSetting\"\n                    value={objValues.testingSetting}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {enrollSetting.map((value) => (\n                      <option key={value.id} value={value.code}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.testingSetting !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.testingSetting}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">\n                    Visit Date <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <Input\n                    type=\"date\"\n                    onKeyPress={(e) => {\n                      e.preventDefault();\n                    }}\n                    name=\"dateVisit\"\n                    id=\"dateVisit\"\n                    value={objValues.dateVisit}\n                    onChange={handleInputChange}\n                    min={objValues.dateOfRegistration}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                  />\n                  {errors.dateVisit !== \"\" ? (\n                    <span className={classes.error}>{errors.dateVisit}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n\n              {/* {(objValues.targetGroup!=='457' && objValues.targetGroup!==\"\") && (\n                            <div className=\"form-group  col-md-4\">\n                            <FormGroup>\n                                <Label>Gender</Label>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"genderId\"\n                                    id=\"genderId\"\n                                    value={objValues.genderId}\n                                    onChange={handleInputChange}\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                >\n                                    <option value={\"\"}></option>\n                                    {gender.map((value) => (\n                                        <option key={value.id} value={value.id}>\n                                            {value.display}\n                                        </option>\n                                    ))}\n                                </select>\n                               \n                            </FormGroup>\n                            </div>\n                            )} */}\n\n              {props.patientAge > 9 && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Number of Children {\"<5\"} years</Label>\n                    <Input\n                      type=\"number\"\n                      name=\"numChildren\"\n                      id=\"numChildren\"\n                      min={0}\n                      value={objValues.numChildren}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n              )}\n              {props?.patientAge > 9 &&\n                props?.patientObject?.gender &&\n                props?.patientObject?.gender.toLowerCase() === \"male\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>Number of wives/co-wives</Label>\n                      <Input\n                        type=\"number\"\n                        name=\"numWives\"\n                        id=\"numWives\"\n                        min={0}\n                        value={objValues.numWives}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                )}\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Index Testing <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"indexClient\"\n                    id=\"indexClient\"\n                    value={objValues.indexClient}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.indexClient !== \"\" ? (\n                    <span className={classes.error}>{errors.indexClient}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.indexClient === \"true\" && (\n                <>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Relationship of the index client{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"relationWithIndexClient\"\n                        id=\"relationWithIndexClient\"\n                        value={objValues.relationWithIndexClient}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {indexTesting.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.relationWithIndexClient !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.relationWithIndexClient}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Index Client Code/ID{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"indexClientCode\"\n                        id=\"indexClientCode\"\n                        value={objValues.indexClientCode}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                      {/* {clientCodeCheck !== \"\" ? (\n                        <span className={classes.error}>{clientCodeCheck}</span>\n                      ) : (\n                        \"\"\n                      )} */}\n                      {errors.indexClientCode !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.indexClientCode}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                </>\n              )}\n              {props?.patientObject?.gender &&\n                props?.patientObject?.gender.toLowerCase() === \"female\" && (\n                  <>\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Pregnant Status{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"pregnant\"\n                          id=\"pregnant\"\n                          value={objValues.pregnant}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={disableModality}\n                        >\n                          <option value={\"\"}></option>\n                          {pregnancyStatus.map((value) => {\n                            return (\n                              <option key={value.id} value={value.id}>\n                                {value.display}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        {errors.pregnant !== \"\" ? (\n                          <span className={classes.error}>\n                            {errors.pregnant}\n                          </span>\n                        ) : (\n                          \"\"\n                        )}\n                      </FormGroup>\n                    </div>\n                    {/* objValues.pregnant === \"\" && (objValues.pregnant!== 73 || objValues.pregnant!== '73') && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Breast Feeding</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"breastFeeding\"\n                                        id=\"breastFeeding\"\n                                        value={objValues.breastFeeding}\n                                        onChange={handleInputChange}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">YES</option>\n                                        <option value=\"false\">NO</option>\n                                    </select>\n                                    \n                                </FormGroup>\n                            </div>\n                            )*/}\n                  </>\n                )}\n\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    First time visit <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"firstTimeVisit\"\n                    id=\"firstTimeVisit\"\n                    value={objValues.firstTimeVisit}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.firstTimeVisit !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.firstTimeVisit}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Previously tested within the last 3 months{\" \"}\n                    <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"previouslyTested\"\n                    id=\"previouslyTested\"\n                    value={objValues.previouslyTested}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">YES</option>\n                    <option value=\"false\">NO</option>\n                  </select>\n                  {errors.previouslyTested !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.previouslyTested}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Type of Counseling <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"typeCounseling\"\n                    id=\"typeCounseling\"\n                    value={objValues.typeCounseling}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {counselingType.map((value) => (\n                      <option key={value.id} value={value.id}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.typeCounseling !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.typeCounseling}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group mb-3 col-md-12\">\n                <FormGroup>\n                  <Label for=\"firstName\">\n                    Comments\n                    {/* <span style={{ color: \"red\" }}> *</span> */}\n                  </Label>\n                  <Input\n                    className=\"form-control\"\n                    type=\"textarea\"\n                    rows=\"4\"\n                    cols=\"7\"\n                    name=\"comment\"\n                    id=\"comment\"\n                    value={objValues.comment}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                      height: \"100px\",\n                    }}\n                  />\n                </FormGroup>\n              </div>\n\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* <Button\n                    content=\"Back\"\n                    icon=\"left arrow\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={() => handleItemClick(\"risk\", \"risk\")}\n                  /> */}\n                  <Button\n                    content=\"Save & Continue\"\n                    type=\"submit\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default BasicInfo;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/HivTestResult.js",["1210","1211","1212","1213","1214","1215"],"import React, { useCallback, useEffect, useState } from \"react\";\n\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { toast } from \"react-toastify\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst HivTestResult = (props) => {\n  const classes = useStyles();\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  let temp = { ...errors };\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  const [showCD4Count, setShowCD4Count] = useState(true);\n  const [finalResult, setFinalResult] = useState(\"\");\n  const calculate_age = (dob) => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now;\n  };\n  const patientAge = calculate_age(\n    moment(\n      props.patientObj.personResponseDto &&\n        props.patientObj.personResponseDto.dateOfBirth\n        ? props.patientObj.personResponseDto.dateOfBirth\n        : 0\n    ).format(\"DD-MM-YYYY\")\n  );\n\n  const [objValues, setObjValues] = useState({\n    confirmatoryTest: {},\n    confirmatoryTest2: {},\n    hivTestResult: \"\",\n    hivTestResult2: \"\",\n    htsClientId: \"\",\n    personId: props.patientObj ? props.patientObj.id : \"\",\n    test1: {},\n    test2: {},\n    tieBreakerTest: {},\n    tieBreakerTest2: {},\n    syphilisTesting: {},\n    hepatitisTesting: {},\n    others: {},\n    cd4: {},\n    prepOffered: \"\",\n    prepAccepted: \"\",\n  });\n  const handleInputChange = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  const [initialTest1, setInitailTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [initialTest12, setInitailTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n\n  const handleInputChangeCd4Count = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setCd4Count({ ...cd4Count, [e.target.name]: e.target.value });\n  };\n  const [cd4Count, setCd4Count] = useState({\n    cd4Count: \"\",\n    cd4SemiQuantitative: \"\",\n    cd4FlowCyteometry: \"\",\n  });\n  const handleInputChangeInitial = (e) => {\n    setErrors({...temp, [e.target.id]:\"\"})\n    if(e.target.name === \"result\"){\n //  clear the all other fields if there changes in initialTest1 result is changes\n        setConfirmatoryTest({\n            date: \"\",\n            result: \"\",\n        })\n        setTieBreakerTest({\n            date: \"\",\n            result: \"\",\n        })\n        setInitailTest2({\n            date2: \"\",\n            result2: \"\",\n        });\n        setConfirmatoryTest2({\n            date2: \"\",\n            result2: \"\",\n        });\n        setTieBreakerTest2({\n            date2: \"\",\n            result2: \"\",\n        });\n    setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\n\n    setErrors({...temp, [e.target.id]:\"\", \n        confirmatoryTestdate: \"\",\n        confirmatoryTestresult: \"\",\n        retestingDate: \"\",\n        retestingResult: \"\",\n        tieBreakerDate: \"\",\n        tieBreakerResult: \"\",\n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n        prepOffered: \"\", \n        prepAccepted: \"\"\n        \n      })\n        setInitailTest({...initialTest1, [e.target.name]: e.target.value});\n\n    if (e.target.value === \"No\") {\n   \n        //This is to show cd4 count section\n        setShowCD4Count(false);\n    }\n    }else {\n        setInitailTest({...initialTest1, [e.target.name]: e.target.value});\n        setErrors({date: \"\", prepOffered: \"\", prepAccepted: \"\"})\n        //This is to show cd4 count section\n        setShowCD4Count(true);\n    }\n    \n\n\n\n\n\n};\n\nconst handleInputChangeInitial2 = (e) => {\n  setErrors({...temp, [e.target.id]:\"\"})\n\n  if(e.target.name === \"result2\"){\n   //clear the all other the input fields that follows the initialTest2, if there changes in initialTest12 result is changes\n   setInitailTest2({...initialTest12, [e.target.name]: e.target.value});\n \n  //  setTieBreakerTest({\n  //     date: \"\",\n  //     result: \"\",\n  // })\n      setConfirmatoryTest2({\n          date2: \"\",\n          result2: \"\",\n      });\n      setTieBreakerTest2({\n          date2: \"\",\n          result2: \"\",\n      });\n\n\n      setErrors({...temp, [e.target.id]:\"\", \n          \n          tieBreakerDate: \"\",\n          tieBreakerResult: \"\",\n          confirmatoryTest2Date2: \"\",\n          confirmatoryTestResult2: \"\",\n      \n          \n        })\n\n      setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\n      if (e.target.value === \"No\") {\n\n          setConfirmatoryTest2({\n              date: \"\",\n              result: \"\",\n          });\n          setTieBreakerTest2({\n              date: \"\",\n              result: \"\",\n          });\n\n\n          //This is to show cd4 count section\n          setShowCD4Count(false);\n      }\n  } else {\n      setInitailTest2({...initialTest12, [e.target.name]: e.target.value});\n      //This is to show cd4 count section\n      setShowCD4Count(true);\n  }\n};\n  const [confirmatoryTest, setConfirmatoryTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [confirmatoryTest2, setConfirmatoryTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeConfirmatory = (e) => {\n    setErrors({...temp, [e.target.id]:\"\"})\n    setConfirmatoryTest({\n        ...confirmatoryTest,\n        [e.target.name]: e.target.value,\n    });\n\n // clear all the input fields that follows the confirmatoryTest, if there changes in confirmatoryTest result is changes.\n\n        if(e.target.name === 'result'){\n            setInitailTest2({\n                date2: \"\",\n                result2: \"\",\n            });\n            setConfirmatoryTest2({\n                date2: \"\",\n                result2: \"\",\n            });\n            setTieBreakerTest({\n                date: \"\",\n                result: \"\",\n            })\n            setTieBreakerTest2({\n                date2: \"\",\n                result2: \"\",\n            });\n            setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\n\n            setErrors({...temp, [e.target.id]:\"\", \n                retestingDate: \"\",\n                retestingResult: \"\",\n                tieBreakerDate: \"\",\n                tieBreakerResult: \"\",\n                confirmatoryTest2Date2: \"\",\n                confirmatoryTestResult2: \"\",\n          \n          \n              })\n    \n        }\n\n    //This is to show cd4 count section\n    if (initialTest1.result === \"Yes\" && e.target.value === \"Yes\") {\n        setShowCD4Count(true);\n    } else {\n        setShowCD4Count(true);\n    }\n};\nconst handleInputChangeConfirmatory2 = (e) => {\n  //setErrors({...temp, [e.target.name]:\"\"})\n\n  if(e.target.name === 'result2'){\n      setTieBreakerTest2({\n          date2: \"\",\n          result2: \"\",\n      });\n      setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\n\n\n  }\n  setConfirmatoryTest2({\n      ...confirmatoryTest2,\n      [e.target.name]: e.target.value,\n  });\n  //This is to show cd4 count section\n  if (initialTest12.result2 === \"Yes\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n  } else {\n      setShowCD4Count(true);\n  }\n};  const [tieBreakerTest, setTieBreakerTest] = useState({\n    date: \"\",\n    result: \"\",\n  });\n  const [tieBreakerTest2, setTieBreakerTest2] = useState({\n    date2: \"\",\n    result2: \"\",\n  });\n  const handleInputChangeTie = (e) => {\n    setErrors({...temp, [e.target.id]:\"\"})\n    setTieBreakerTest({...tieBreakerTest, [e.target.name]: e.target.value});\n  \n  \n  \n  if(e.target.name === \"result\"){\n    \n    setInitailTest2({\n      date2: \"\",\n      result2: \"\",\n    });\n    setConfirmatoryTest2({\n        date2: \"\",\n        result2: \"\",\n    });\n    setTieBreakerTest2({\n        date2: \"\",\n        result2: \"\",\n    });\n\n\n    \n    setErrors({...temp, [e.target.id]:\"\", \n        \n        confirmatoryTest2Date2: \"\",\n        confirmatoryTestResult2: \"\",\n     \n        \n      })\n  }\n    //This is to show cd4 count section\n    if (confirmatoryTest.result === \"No\" && e.target.value === \"Yes\") {\n        setShowCD4Count(true);\n    } else if (confirmatoryTest.result === \"No\" && e.target.value === \"No\") {\n        setShowCD4Count(false);\n    } else {\n        setShowCD4Count(true);\n    }\n};\nconst handleInputChangeTie2 = (e) => {\n  //setErrors({...temp, [e.target.name]:\"\"})\n  setTieBreakerTest2({...tieBreakerTest2, [e.target.name]: e.target.value});\n  //This is to show cd4 count section\n  if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"Yes\") {\n      setShowCD4Count(true);\n  } else if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"No\") {\n      setShowCD4Count(false);\n  } else {\n      setShowCD4Count(true);\n  }\n};\n  const [syphills, setSyphills] = useState({\n    syphilisTestResult: \"\",\n    // result  :\"\",\n  });\n  const handleInputChangeSyphills = (e) => {\n    setErrors({...temp, [e.target.id]:\"\"})\n    setSyphills({ ...syphills, [e.target.name]: e.target.value });\n  };\n  const [hepatitis, setHepatitis] = useState({\n    hepatitisCTestResult: \"\",\n    hepatitisBTestResult: \"\",\n    longitude: \"\",\n    latitude: \"\",\n    adhocCode: \"\",\n  });\n  const handleInputChangeHepatitis = (e) => {\n    setErrors({...temp, [e.target.id]:\"\"})\n    setHepatitis({ ...hepatitis, [e.target.name]: e.target.value });\n  };\n  const [others, setOthers] = useState({\n    longitude: \"\",\n    latitude: \"\",\n    adhocCode: \"\",\n  });\n  useEffect(() => {\n    if (props.patientObj) {\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\n        setHivTestDate(props.patientObj.dateVisit);\n      } else {\n        setHivTestDate(\"\");\n      }\n      setCd4Count(\n        props.patientObj && props.patientObj.cd4 !== null\n          ? props.patientObj.cd4\n          : {}\n      );\n      setInitailTest(\n        props.patientObj && props.patientObj.test1 !== null\n          ? props.patientObj.test1\n          : {}\n      );\n      setConfirmatoryTest(\n        props.patientObj && props.patientObj.confirmatoryTest !== null\n          ? props.patientObj.confirmatoryTest\n          : {}\n      );\n      setTieBreakerTest(\n        props.patientObj && props.patientObj.tieBreakerTest !== null\n          ? props.patientObj.tieBreakerTest\n          : {}\n      );\n      setSyphills(\n        props.patientObj && props.patientObj.syphilisTesting !== null\n          ? props.patientObj.syphilisTesting\n          : {}\n      );\n      setHepatitis(\n        props.patientObj && props.patientObj.hepatitisTesting !== null\n          ? props.patientObj.hepatitisTesting\n          : {}\n      );\n      setOthers(\n        props.patientObj && props.patientObj.others !== null\n          ? props.patientObj.others\n          : {}\n      );\n\n      setInitailTest2(\n        props.patientObj && props.patientObj.test2 !== null\n          ? props.patientObj.test2\n          : {}\n      );\n      setConfirmatoryTest2(\n        props.patientObj && props.patientObj.confirmatoryTest2 !== null\n          ? props.patientObj.confirmatoryTest2\n          : {}\n      );\n      setTieBreakerTest2(\n        props.patientObj && props.patientObj.tieBreakerTest2 !== null\n          ? props.patientObj.tieBreakerTest2\n          : {}\n      );\n\n    }\n  }, [props.patientObj]); //initialTest12, tieBreakerTest2, confirmatoryTest2,\n\n  const handleInputChangeOthers = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    setOthers({ ...others, [e.target.name]: e.target.value });\n  };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const validate = () => {\n    //HTS FORM VALIDATION\n    initialTest1.date !== \"\" &&\n      (temp.date = initialTest1.result ? \"\" : \"This field is required.\");\n\n    // initialTest1.date !== \"\" &&\n    //   initialTest1.result === \"No\" &&\n    //   (temp.prepOffered = objValues.prepOffered\n    //     ? \"\"\n    //     : \"The Prep Offered field is required.\");\n    // initialTest1.date !== \"\" &&\n    //   initialTest1.result === \"No\" &&\n    //   objValues.prepOffered === \"true\" &&\n    //   (temp.prepAccepted = objValues.prepAccepted\n    //     ? \"\"\n    //     : \"The Prep Accepted field is required.\");\n\n\n//initial Test date should not be empty \ntemp.initialTest1date = initialTest1.date? \n\"\"   : \"This field is required.\";\n\n//initial Test result should not be empty \ntemp.initialTest1result = initialTest1.result? \n\"\"   : \"This field is required.\";\n\n// if initial test = \"reactive\"or \"yes\", confirmatory test should be compulsory \ninitialTest1.result === \"Yes\"  && (temp.confirmatoryTestdate = confirmatoryTest.date ? \"\" : \"This field is required.\")\ninitialTest1.result === \"Yes\"  && (temp.confirmatoryTestresult = confirmatoryTest.result ? \"\" : \"This field is required.\")\n\n\n\n//if confirmatory = \"reactive\"or \"yes\", Retest should be compulsory \nconfirmatoryTest.result === \"Yes\"  && (temp.retestingDate = initialTest12.date2 ? \"\" : \"This field is required.\")\nconfirmatoryTest.result === \"Yes\"  && (temp.retestingResult = initialTest12.result2 ? \"\" : \"This field is required.\")\n\n\n\n//if confirmatory = \"non reactive\"or \"No\", Tie breaker should be compulsory \nconfirmatoryTest.result === \"No\"  && (temp.tieBreakerDate = tieBreakerTest2.date2 ? \"\" : \"This field is required.\")\nconfirmatoryTest.result === \"No\"  && (temp.tieBreakerResult = tieBreakerTest2.result2 ? \"\" : \"This field is required.\")\n\n\n//if confirmatory = \"non reactive\"or \"No\", Tie breaker should be compulsory \nconfirmatoryTest.result === \"Yes\"  && initialTest12.result2  === \"Yes\" && (temp.confirmatoryTest2Date2 = confirmatoryTest2.date2? \"\" : \"This field is required.\")\nconfirmatoryTest.result === \"Yes\"  && initialTest12.result2   === \"Yes\" && (temp.confirmatoryTestResult2  = confirmatoryTest2.result2? \"\" : \"This field is required.\")\n\n\n\n\n\n\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  useEffect(() => {\n    let result = \"\";\n\n    if (initialTest1.result === \"No\") {\n      result = \"Negative\";\n    } else if (\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"No\" &&\n      (initialTest1.result === \"Yes\" || initialTest1.result !== \"\")\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"No\"\n    ) {\n      result = \"Negative\";\n    } else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"No\" &&\n      tieBreakerTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"No\"\n    ) {\n      result = \"Negative\";\n    }else if (\n      initialTest1.result === \"Yes\" &&\n      confirmatoryTest.result === \"Yes\" &&\n      initialTest12.result2 === \"Yes\" &&\n      confirmatoryTest2.result2 === \"No\" &&\n      tieBreakerTest2.result2 === \"Yes\"\n    ) {\n      result = \"Positive\";\n    }\n\n    setFinalResult(result);\n  }, [\n    initialTest1.result,\n    confirmatoryTest.result,\n    tieBreakerTest.result,\n    initialTest12.result2,\n    confirmatoryTest2.result2,\n    tieBreakerTest2.result2,\n  ]);\n\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n      let latestForm = getNextForm(\n        \"Request_and_Result_Form\",\n        props.patientAge,\n        \"\",\n        \"unknown\"\n      );\n\n    if (validate()) {\n      if (finalResult === \"\") {\n        toast.error(\"Final result is required for submission.\");\n        return;\n      }\n      setSaving(true);\n      //logic to get Hiv result test\n      if (initialTest12.result2 === \"No\") {\n        objValues.hivTestResult2 = \"Negative\";\n      } else if (\n        initialTest12.result2 === \"Yes\" &&\n        confirmatoryTest2.result2 === \"Yes\"\n      ) {\n        objValues.hivTestResult2 = \"Positive\";\n      }\n      // else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2===''){\n      //     objValues.hivTestResult2=\"Negative\"\n      // }\n      else if (\n        confirmatoryTest2.result2 === \"No\" &&\n        tieBreakerTest2.result2 === \"Yes\"\n      ) {\n        objValues.hivTestResult2 = \"Positive\";\n      } else if (\n        confirmatoryTest2.result2 === \"No\" &&\n        tieBreakerTest2.result2 === \"No\"\n      ) {\n        objValues.hivTestResult2 = \"Negative\";\n      } else {\n        objValues.hivTestResult2 = \"\";\n      }\n\n      if (initialTest1.result === \"No\") {\n        objValues.hivTestResult = \"Negative\";\n      } else if (\n        initialTest1.result === \"Yes\" &&\n        confirmatoryTest.result === \"Yes\"\n      ) {\n        objValues.hivTestResult = \"Positive\";\n      }\n      // else if(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result===''){\n      //     objValues.hivTestResult=\"Negative\"\n      // }\n      else if (\n        confirmatoryTest.result === \"No\" &&\n        tieBreakerTest.result === \"Yes\"\n      ) {\n        objValues.hivTestResult = \"Positive\";\n      } else if (\n        confirmatoryTest.result === \"No\" &&\n        tieBreakerTest.result === \"No\"\n      ) {\n        objValues.hivTestResult = \"Negative\";\n      } else {\n        objValues.hivTestResult = \"\";\n      }\n      objValues.htsClientId = clientId;\n      objValues.confirmatoryTest = confirmatoryTest;\n      objValues.confirmatoryTest2 = confirmatoryTest2;\n      objValues.personId = patientID;\n      objValues.test1 = initialTest1;\n      objValues.test2 = initialTest12;\n      objValues.tieBreakerTest = tieBreakerTest;\n      objValues.tieBreakerTest2 = tieBreakerTest2;\n      objValues.syphilisTesting = syphills;\n      objValues.hepatitisTesting = hepatitis;\n\n      objValues.cd4 = cd4Count;\n      objValues.others = others;\n      axios\n        .put(`${baseUrl}hts/${clientId}/request-result`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          props.setPatientObj(response.data);\n\n          handleItemClick(latestForm[0], latestForm[1]);\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>REQUEST AND RESULT FORM</h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h4 style={{ color: \"#fff\" }}>HIV TEST RESULT</h4>\n              </LabelRibbon>\n              <br />\n              <div className=\"form-group  col-md-2\"></div>\n              <h4>Initial Test : </h4>\n              <div className=\"form-group mb-3 col-md-5\">\n                <FormGroup>\n                  <Label for=\"\"> Date </Label>\n                  <Input\n                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                    name=\"date\"\n                    id=\"initialTest1date\"\n                    value={initialTest1.date}\n                    min={props?.patientObj?.dateVisit}\n                    onChange={handleInputChangeInitial}\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                    required\n                  />\n                  {errors.initialTest1date !== \"\" ? (\n                    <span className={classes.error}>{errors.initialTest1date}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {initialTest1.date && (\n                <div className=\"form-group  col-md-5\">\n                  <FormGroup>\n                    <Label>Result </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"result\"\n                      id=\"initialTest1result\"\n                      value={initialTest1.result}\n                      onChange={handleInputChangeInitial}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={initialTest1.date === \"\" ? true : false}\n                    >\n                      <option value={\"\"}></option>\n                      <option value=\"Yes\">Reactive</option>\n                      <option value=\"No\">Non Reactive</option>\n                    </select>\n                    {errors.initialTest1result !== \"\" ? (\n                      <span className={classes.error}>{errors.initialTest1result}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              )}\n              <div className=\"form-group  col-md-2\"></div>\n              {initialTest1.result === \"Yes\" && (\n                <>\n                  <h4>Confirmatory Test:</h4>\n                  <div className=\"form-group mb-3 col-md-5\">\n                    <FormGroup>\n                      <Label for=\"\"> Date </Label>\n                      <Input\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"date\"\n                        id=\"confirmatoryTestdate\"\n                        value={confirmatoryTest.date}\n                        onChange={handleInputChangeConfirmatory}\n                        min={initialTest1.date}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        required\n                      />\n                      {errors.confirmatoryTestdate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.confirmatoryTestdate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {confirmatoryTest.date && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>Result </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"result\"\n                          id=\"confirmatoryTestresult\"\n                          value={confirmatoryTest.result}\n                          onChange={handleInputChangeConfirmatory}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={confirmatoryTest.date === \"\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"Yes\">Reactive</option>\n                          <option value=\"No\">Non Reactive</option>\n                        </select>\n                        {errors.confirmatoryTestresult !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.confirmatoryTestresult}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-2\"></div>\n                </>\n              )}\n              {confirmatoryTest.result === \"No\" && (\n                <>\n                  <h4>Tie Breaker Test:</h4>\n                  <div className=\"form-group mb-3 col-md-5\">\n                    <FormGroup>\n                      <Label for=\"\"> Date </Label>\n                      <Input\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"date\"\n                        id=\"tieBreakerDate\"\n                        value={tieBreakerTest.date}\n                        onChange={handleInputChangeTie}\n                        min={confirmatoryTest.date}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                        required\n                      />\n                       {errors.tieBreakerDate !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.tieBreakerDate}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {tieBreakerTest.date && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>Result </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"result\"\n                          id=\"tieBreakerResult\"\n                          value={tieBreakerTest.result}\n                          onChange={handleInputChangeTie}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                          disabled={tieBreakerTest.date === \"\" ? true : false}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"Yes\">Reactive</option>\n                          <option value=\"No\">Non Reactive</option>\n                        </select>\n                        {errors.tieBreakerResult !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.tieBreakerResult}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-2\"></div>\n                </>\n              )}\n              <div className=\"row\">\n                <div className=\"form-group  col-md-12\">\n                  {initialTest1.result === \"No\" && (\n                    <>\n                      <b> Result : </b>\n                      <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                      <b> Final Result : </b>\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      <br />\n                    </>\n                  )}\n                  {initialTest1.result === \"No\" &&\n                    confirmatoryTest.result === \"No\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                      </>\n                    )}\n\n                  {initialTest1.result === \"Yes\" &&\n                    confirmatoryTest.result === \"Yes\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\n                        <br />\n                        <hr />\n                        <div className=\"row\">\n                          <h4>RETESTING:</h4>\n                          <div className=\"form-group mb-3 col-md-5\">\n                            <FormGroup>\n                              <Label for=\"\"> Date </Label>\n                              <Input\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                name=\"date2\"\n                                id=\"retestingDate\"\n                                value={initialTest12.date2}\n                                onChange={handleInputChangeInitial2}\n                                min={confirmatoryTest.date}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.25rem\",\n                                }}\n                                required\n                              />\n                              {errors.retestingDate !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.retestingDate}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n\n                          <div className=\"form-group  col-md-5\">\n                            <FormGroup>\n                              <Label>Result </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"result2\"\n                                id=\"result2\"\n                                value={initialTest12.result2}\n                                onChange={handleInputChangeInitial2}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                disabled={\n                                  initialTest12.date2 === \"\" ? true : false\n                                }\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"Yes\">Reactive</option>\n                                <option value=\"No\">Non Reactive</option>\n                              </select>\n                              {errors.result2 !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.result2}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n\n                          <div className=\"form-group  col-md-2\"></div>\n                          {initialTest12.result2 === \"Yes\" && (\n                            <>\n                              <h4>Confirmatory Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                    name=\"date2\"\n                                    id=\"confirmatoryTest2Date2\"\n                                    value={confirmatoryTest2.date2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    min={initialTest12.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                  {errors.confirmatoryTest2Date2 !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.confirmatoryTest2Date2}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"confirmatoryTestResult2\"\n                                    value={confirmatoryTest2.result2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      confirmatoryTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                  {errors.confirmatoryTestResult2 !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.confirmatoryTestResult2}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                          {confirmatoryTest2.result2 === \"No\" && (\n                            <>\n                              <h4>Tie Breaker Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={tieBreakerTest2.date2}\n                                    onChange={handleInputChangeTie2}\n                                    min={confirmatoryTest2.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={tieBreakerTest2.result2}\n                                    onChange={handleInputChangeTie2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      tieBreakerTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    )}\n                  {/* This is result for Test 1 */}\n                  {/* {(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result==='' ) && (\n                                                        <LabelRibbon color=\"green\" >\n                                                            Negative\n                                                        </LabelRibbon>\n                                                    )} */}\n                  {confirmatoryTest.result === \"No\" &&\n                    tieBreakerTest.result === \"Yes\" && (\n                      <>\n                        <b> Result : </b>\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\n                        <br />\n                        <hr />\n\n                        <div className=\"row\">\n                          <h4>Retesting:</h4>\n                          <div className=\"form-group mb-3 col-md-5\">\n                            <FormGroup>\n                              <Label for=\"\"> Date </Label>\n                              <Input\n                                type=\"date\"  onKeyPress={(e)=>{e.preventDefault()}}\n\n                                name=\"date2\"\n                                id=\"date2\"\n                                value={initialTest12.date2}\n                                onChange={handleInputChangeInitial2}\n                                min={tieBreakerTest.date}\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.25rem\",\n                                }}\n                                required\n                              />\n                              {errors.date2 !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.date2}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          <div className=\"form-group  col-md-5\">\n                            <FormGroup>\n                              <Label>Result </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"result2\"\n                                id=\"result2\"\n                                value={initialTest12.result2}\n                                onChange={handleInputChangeInitial2}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                                disabled={\n                                  initialTest12.date2 === \"\" ? true : false\n                                }\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"Yes\">Reactive</option>\n                                <option value=\"No\">Non Reactive</option>\n                              </select>\n                              {errors.result2 !== \"\" ? (\n                                <span className={classes.error}>\n                                  {errors.result2}\n                                </span>\n                              ) : (\n                                \"\"\n                              )}\n                            </FormGroup>\n                          </div>\n                          <div className=\"form-group  col-md-2\"></div>\n                          {initialTest12.result2 === \"Yes\" && (\n                            <>\n                              <h4>Confirmatory Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={confirmatoryTest2.date2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    min={initialTest12.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={confirmatoryTest2.result2}\n                                    onChange={handleInputChangeConfirmatory2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      confirmatoryTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                          {confirmatoryTest2.result2 === \"No\" && (\n                            <>\n                              <h4>Tie Breaker Test 2:</h4>\n                              <div className=\"form-group mb-3 col-md-5\">\n                                <FormGroup>\n                                  <Label for=\"\"> Date </Label>\n                                  <Input\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                                    name=\"date2\"\n                                    id=\"date2\"\n                                    value={tieBreakerTest2.date2}\n                                    onChange={handleInputChangeTie2}\n                                    min={confirmatoryTest2.date2}\n                                    max={moment(new Date()).format(\n                                      \"YYYY-MM-DD\"\n                                    )}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.25rem\",\n                                    }}\n                                    required\n                                  />\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-5\">\n                                <FormGroup>\n                                  <Label>Result </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"result2\"\n                                    id=\"result2\"\n                                    value={tieBreakerTest2.result2}\n                                    onChange={handleInputChangeTie2}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                    disabled={\n                                      tieBreakerTest2.date2 === \"\"\n                                        ? true\n                                        : false\n                                    }\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"Yes\">Reactive</option>\n                                    <option value=\"No\">Non Reactive</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                              <div className=\"form-group  col-md-2\"></div>\n                            </>\n                          )}\n                        </div>\n                      </>\n                    )}\n                  {errors.prepOffered !== \"\" ? (\n                    <span className={classes.error}>{errors.prepOffered}</span>\n                  ) : (\n                    \"\"\n                  )}\n                  {errors.prepAccepted !== \"\" ? (\n                    <span className={classes.error}>{errors.prepAccepted}</span>\n                  ) : (\n                    \"\"\n                  )}\n                  {confirmatoryTest.result === \"No\" &&\n                    tieBreakerTest.result === \"No\" &&\n                    (initialTest1.result === \"Yes\" ||\n                      initialTest1.result !== \"\") && (\n                      <>\n                        <>\n                          <b> Result : </b>\n                          <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\n                          <b> Final Result : </b>\n                          <LabelRibbon color=\"green\"> Negative</LabelRibbon>\n                        </>\n                        <br />\n                        <div className=\"row\">\n                          <div className=\"form-group  col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Prep Offered{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"prepOffered\"\n                                id=\"prepOffered\"\n                                value={objValues.prepOffered}\n                                onChange={handleInputChange}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"true\">Yes</option>\n                                <option value=\"false\">No</option>\n                              </select>\n                            </FormGroup>\n                          </div>\n                          {objValues.prepOffered !== \"\" &&\n                            objValues.prepOffered === \"true\" && (\n                              <div className=\"form-group  col-md-6\">\n                                <FormGroup>\n                                  <Label>\n                                    Prep Accepted{\" \"}\n                                    <span style={{ color: \"red\" }}> *</span>\n                                  </Label>\n                                  <select\n                                    className=\"form-control\"\n                                    name=\"prepAccepted\"\n                                    id=\"prepAccepted\"\n                                    value={objValues.prepAccepted}\n                                    onChange={handleInputChange}\n                                    style={{\n                                      border: \"1px solid #014D88\",\n                                      borderRadius: \"0.2rem\",\n                                    }}\n                                  >\n                                    <option value={\"\"}></option>\n                                    <option value=\"true\">Yes</option>\n                                    <option value=\"false\">No</option>\n                                  </select>\n                                </FormGroup>\n                              </div>\n                            )}\n                        </div>\n                      </>\n                    )}\n                  {/* END of  result for Test 1 */}\n                  {/* This is result for Test 2 */}\n                  {initialTest12.result2 === \"No\" && (\n                    <>\n                      <b> Final Result : </b>\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      <br />\n                      <br />\n                      <div className=\"row\">\n                        <div className=\"form-group  col-md-5\">\n                          <FormGroup>\n                            <Label>\n                              Prep Offered{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"prepOffered\"\n                              id=\"prepOffered\"\n                              value={objValues.prepOffered}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                        {objValues.prepOffered !== \"\" &&\n                          objValues.prepOffered === \"true\" && (\n                            <div className=\"form-group  col-md-5\">\n                              <FormGroup>\n                                <Label>\n                                  Prep Accepted{\" \"}\n                                  <span style={{ color: \"red\" }}> *</span>\n                                </Label>\n                                <select\n                                  className=\"form-control\"\n                                  name=\"prepAccepted\"\n                                  id=\"prepAccepted\"\n                                  value={objValues.prepAccepted}\n                                  onChange={handleInputChange}\n                                  style={{\n                                    border: \"1px solid #014D88\",\n                                    borderRadius: \"0.2rem\",\n                                  }}\n                                >\n                                  <option value={\"\"}></option>\n                                  <option value=\"true\">Yes</option>\n                                  <option value=\"false\">No</option>\n                                </select>\n                              </FormGroup>\n                            </div>\n                          )}\n                      </div>\n                    </>\n                  )}\n                  {initialTest12.result2 === \"No\" &&\n                    confirmatoryTest2.result2 === \"No\" && (\n                      <>\n                        <b> FinalnResult : </b>\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      </>\n                    )}\n\n                  {initialTest12.result2 === \"Yes\" &&\n                    confirmatoryTest2.result2 === \"Yes\" && (\n                      <>\n                        <b> Final Result : </b>\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\n                        <br />\n                      </>\n                    )}\n                  {/* {(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='' ) && (\n                                                        <LabelRibbon color=\"green\" >\n                                                            Negative\n                                                        </LabelRibbon>\n                                                    )} */}\n                  {confirmatoryTest2.result2 === \"No\" &&\n                    tieBreakerTest2.result2 === \"Yes\" && (\n                      <>\n                        <b>Final Result : </b>\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\n                      </>\n                    )}\n                  {confirmatoryTest2.result2 === \"No\" &&\n                    tieBreakerTest2.result2 === \"No\" &&\n                    (initialTest12.result2 === \"Yes\" ||\n                      initialTest12.result2 !== \"\") && (\n                      <>\n                        <b>Final Result : </b>\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\n                      </>\n                    )}\n\n                  {/* END of  result for Test 2*/}\n                </div>\n              </div>\n              {initialTest1.result === \"No\" && (\n                <>\n                  <div className=\"row\">\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Prep Offered <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"prepOffered\"\n                          id=\"prepOffered\"\n                          value={objValues.prepOffered}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {objValues.prepOffered !== \"\" &&\n                      objValues.prepOffered === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Prep Accepted{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"prepAccepted\"\n                              id=\"prepAccepted\"\n                              value={objValues.prepAccepted}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                      )}\n                  </div>\n                </>\n              )}\n              {/* {confirmatoryTest.result === \"No\" &&\n                tieBreakerTest.result === \"No\" && (\n                  <>\n                    <div className=\"row\">\n                      <div className=\"form-group  col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Prep Offered{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"prepOffered\"\n                            id=\"prepOffered\"\n                            value={objValues.prepOffered}\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                        </FormGroup>\n                      </div>\n                      {objValues.prepOffered !== \"\" &&\n                        objValues.prepOffered === \"true\" && (\n                          <div className=\"form-group  col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Prep Accepted{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"prepAccepted\"\n                                id=\"prepAccepted\"\n                                value={objValues.prepAccepted}\n                                onChange={handleInputChange}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"true\">Yes</option>\n                                <option value=\"false\">No</option>\n                              </select>\n                            </FormGroup>\n                          </div>\n                        )}\n                    </div>\n                  </>\n                )} */}\n              {/* {initialTest1.result === \"No\" && (\n                <>\n                  <div className=\"row\">\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Prep Offered <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"prepOffered\"\n                          id=\"prepOffered\"\n                          value={objValues.prepOffered}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                    {objValues.prepOffered !== \"\" &&\n                      objValues.prepOffered === \"true\" && (\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Prep Accepted{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"prepAccepted\"\n                              id=\"prepAccepted\"\n                              value={objValues.prepAccepted}\n                              onChange={handleInputChange}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"true\">Yes</option>\n                              <option value=\"false\">No</option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                      )}\n                  </div>\n                </>\n              )} */}\n              {confirmatoryTest2.result2 === \"No\" &&\n                tieBreakerTest2.result2 === \"No\" && (\n                  <>\n                    <div className=\"row\">\n                      <div className=\"form-group  col-md-6\">\n                        <FormGroup>\n                          <Label>\n                            Prep Offered{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"prepOffered\"\n                            id=\"prepOffered\"\n                            value={objValues.prepOffered}\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"true\">Yes</option>\n                            <option value=\"false\">No</option>\n                          </select>\n                        </FormGroup>\n                      </div>\n                      {objValues.prepOffered !== \"\" &&\n                        objValues.prepOffered === \"true\" && (\n                          <div className=\"form-group  col-md-6\">\n                            <FormGroup>\n                              <Label>\n                                Prep Accepted{\" \"}\n                                <span style={{ color: \"red\" }}> *</span>\n                              </Label>\n                              <select\n                                className=\"form-control\"\n                                name=\"prepAccepted\"\n                                id=\"prepAccepted\"\n                                value={objValues.prepAccepted}\n                                onChange={handleInputChange}\n                                style={{\n                                  border: \"1px solid #014D88\",\n                                  borderRadius: \"0.2rem\",\n                                }}\n                              >\n                                <option value={\"\"}></option>\n                                <option value=\"true\">Yes</option>\n                                <option value=\"false\">No</option>\n                              </select>\n                            </FormGroup>\n                          </div>\n                        )}\n                    </div>\n                  </>\n                )}\n              {showCD4Count && (\n                <>\n                  <LabelRibbon\n                    as=\"a\"\n                    color=\"blue\"\n                    style={{ width: \"106%\", height: \"35px\" }}\n                    ribbon\n                  >\n                    <h5 style={{ color: \"#fff\" }}>CD4 Count</h5>\n                  </LabelRibbon>\n                  <br /> <br />\n                  <div className=\"form-group  col-md-5\">\n                    <FormGroup>\n                      <Label>CD4 Type </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"cd4Count\"\n                        id=\"cd4Count\"\n                        value={cd4Count.cd4Count}\n                        onChange={handleInputChangeCd4Count}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"Semi-Quantitative\">\n                          Semi-Quantitative\n                        </option>\n                        <option value=\"Flow Cyteometry\">Flow cytometry</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  {cd4Count.cd4Count === \"Semi-Quantitative\" && (\n                    <div className=\"form-group  col-md-5\">\n                      <FormGroup>\n                        <Label>CD4 Type Value</Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"cd4SemiQuantitative\"\n                          id=\"cd4SemiQuantitative\"\n                          value={cd4Count.cd4SemiQuantitative}\n                          onChange={handleInputChangeCd4Count}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"<200\">{\"<200\"}</option>\n                          <option value=\">=200\">{\">=200\"}</option>\n                        </select>\n                      </FormGroup>\n                    </div>\n                  )}\n                  {cd4Count.cd4Count === \"Flow Cyteometry\" && (\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">CD4 Type Value</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"cd4FlowCyteometry\"\n                          id=\"cd4FlowCyteometry\"\n                          value={cd4Count.cd4FlowCyteometry}\n                          onChange={handleInputChangeCd4Count}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                  )}\n                  <div className=\"form-group  col-md-7\"></div>\n                </>\n              )}\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Syphilis Testing</h5>\n              </LabelRibbon>\n              <br /> <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Syphilis test result <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"syphilisTestResult\"\n                    id=\"syphilisTestResult\"\n                    value={syphills.syphilisTestResult}\n                    onChange={handleInputChangeSyphills}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Reactive</option>\n                    <option value=\"No\">Non-Reactive</option>\n                  </select>\n                  {errors.syphilisTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.syphilisTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Hepatitis Testing</h5>\n              </LabelRibbon>\n              <br /> <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis B virus test result{\" \"}\n                    <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hepatitisBTestResult\"\n                    id=\"hepatitisBTestResult\"\n                    value={hepatitis.hepatitisBTestResult}\n                    onChange={handleInputChangeHepatitis}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Positive</option>\n                    <option value=\"No\">Negative</option>\n                  </select>\n                  {errors.hepatitisBTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.hepatitisBTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Hepatitis C virus test result{\" \"}\n                    <span style={{ color: \"red\" }}> </span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"hepatitisCTestResult\"\n                    id=\"hepatitisCTestResult\"\n                    value={hepatitis.hepatitisCTestResult}\n                    onChange={handleInputChangeHepatitis}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"Yes\">Positive</option>\n                    <option value=\"No\">Negative</option>\n                  </select>\n                  {errors.hepatitisCTestResult !== \"\" ? (\n                    <span className={classes.error}>\n                      {errors.hepatitisCTestResult}\n                    </span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>Others</h5>\n              </LabelRibbon>\n              <br /> <br />\n              {props?.patientObj?.riskStratificationResponseDto !== null &&\n                props?.patientObj?.riskStratificationResponseDto?.communityEntryPoint !== \"\" && (\n                  <>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Longitude</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"longitude\"\n                          id=\"longitude\"\n                          value={others.longitude}\n                          onChange={handleInputChangeOthers}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                        <Label for=\"\">Latitude</Label>\n                        <Input\n                          type=\"number\"\n                          name=\"latitude\"\n                          id=\"latitude\"\n                          value={others.latitude}\n                          onChange={handleInputChangeOthers}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      </FormGroup>\n                    </div>\n                  </>\n                )}\n              <div className=\"form-group mb-3 col-md-4\">\n                <FormGroup>\n                  <Label for=\"\">Adhoc Code</Label>\n                  <Input\n                    type=\"number\"\n                    name=\"adhocCode\"\n                    id=\"adhocCode\"\n                    value={others.adhocCode}\n                    onChange={handleInputChangeOthers}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.25rem\",\n                    }}\n                  />\n                </FormGroup>\n              </div>\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* {patientAge <= 15 ? (\n                    <>\n                      <Button\n                        content=\"Back\"\n                        icon=\"left arrow\"\n                        labelPosition=\"left\"\n                        style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                        onClick={() => handleItemClick(\"basic\", \"basic\")}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <Button\n                        content=\"Back\"\n                        icon=\"left arrow\"\n                        labelPosition=\"left\"\n                        style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                        onClick={() => {\n                          handleItemClick(\n                            \"pre-test-counsel\",\n                            \"pre-test-counsel\"\n                          );\n                        }}\n                      />\n                    </>\n                  )} */}\n\n                  <Button\n                    content=\"Save & Continue\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default HivTestResult;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/RecencyTesting.js",["1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport \"react-phone-input-2/lib/style.css\";\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../api\";\nimport { getNextForm } from \"../../../../utility\";\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst Recency = (props) => {\n  const classes = useStyles();\n  const patientID =\n    props.patientObj && props.patientObj.personResponseDto\n      ? props.patientObj.personResponseDto.id\n      : \"\";\n  const clientId =\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n  const [saving, setSaving] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [hivTestDate, setHivTestDate] = useState(\"\");\n  let temp = { ...errors };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const [permissions, setPermission] = useState(\n    localStorage.getItem(\"permissions\")?.split(\",\")\n  );\n  const [objValues, setObjValues] = useState({\n    htsClientId: clientId,\n    recency: {},\n    personId: patientID,\n  });\n  const [recency, setRecency] = useState({\n    optOutRTRI:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.optOutRTRI\n        : \"\",\n    optOutRTRITestName:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.optOutRTRITestName\n        : \"\",\n    optOutRTRITestDate:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.optOutRTRITestDate\n        : \"\",\n    rencencyId:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.rencencyId\n        : \"\",\n    controlLine:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.controlLine\n        : \"\",\n    verififcationLine:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.verififcationLine\n        : \"\",\n    longTermLine:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.longTermLine\n        : \"\",\n    rencencyInterpretation:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.rencencyInterpretation\n        : \"\",\n    hasViralLoad:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.hasViralLoad\n        : \"\",\n    sampleCollectedDate:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleCollectedDate\n        : \"\",\n    sampleReferanceNumber:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleReferanceNumber\n        : \"\",\n    dateSampleSentToPCRLab:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.dateSampleSentToPCRLab\n        : \"\",\n    sampleTestDate:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleTestDate\n        : \"\",\n    sampleType:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.sampleType\n        : \"\",\n    receivingPcrLab:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.receivingPcrLab\n        : \"\",\n    viralLoadResultClassification:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.viralLoadResultClassification\n        : \"\",\n    recencyResult:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.recencyResult\n        : \"\",\n    finalRecencyResult:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.finalRecencyResult\n        : \"\",\n    viralLoadConfirmationResult:\n      props.patientObj && props.patientObj.recency !== null\n        ? props.patientObj.recency.viralLoadConfirmationResult\n        : \"\",\n  });\n\n  useEffect(() => {\n    if (props.patientObj && props.patientObj.recency !== null) {\n      setRecency(props.patientObj.recency);\n      if (recency.optOutRTRI === \"true\") {\n        setRecency({\n          optOutRTRI:\n            props.patientObj && props.patientObj.recency !== null\n              ? props.patientObj.recency.optOutRTRI\n              : \"\",\n          optOutRTRITestName: \"\",\n          optOutRTRITestDate: \"\",\n          rencencyId: \"\",\n          controlLine: \"\",\n          verififcationLine: \"\",\n          longTermLine: \"\",\n          rencencyInterpretation: \"\",\n          hasViralLoad: \"\",\n          sampleCollectedDate: \"\",\n          sampleReferanceNumber: \"\",\n          dateSampleSentToPCRLab: \"\",\n          sampleTestDate: \"\",\n          sampleType: \"\",\n          receivingPcrLab: \"\",\n          viralLoadResultClassification: \"\",\n          recencyResult: \"\",\n          finalRecencyResult: \"\",\n          viralLoadConfirmationResult: \"\",\n        });\n      }\n    }\n    if (props.patientObj) {\n      if (\n        props.patientObj.confirmatoryTest2 &&\n        props.patientObj.confirmatoryTest2.date2 !== \"\"\n      ) {\n        setHivTestDate(props.patientObj.confirmatoryTest2.date2);\n      } else if (\n        props.patientObj.confirmatoryTest &&\n        props.patientObj.confirmatoryTest.date !== \"\"\n      ) {\n        setHivTestDate(props.patientObj.confirmatoryTest.date);\n      } else {\n        setHivTestDate(\"\");\n      }\n    }\n    if (\n      recency.longTermLine === \"true\" &&\n      recency.verififcationLine === \"true\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"RTRI Long Term\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Long Term\" });\n    } else if (\n      recency.longTermLine === \"false\" &&\n      recency.verififcationLine === \"true\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"RTRI Recent\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Recent\" });\n      //setRecency ({...recency,  ['hasViralLoad']: 'true'});\n    } else if (\n      recency.longTermLine === \"false\" &&\n      recency.verififcationLine === \"false\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"Negative\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Negative\" });\n    } else if (\n      recency.longTermLine === \"true\" &&\n      recency.verififcationLine === \"true\" &&\n      recency.controlLine === \"false\"\n    ) {\n      recency.rencencyInterpretation = \"Invalid\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\n    } else if (\n      recency.longTermLine === \"true\" &&\n      recency.verififcationLine === \"false\" &&\n      recency.controlLine === \"true\"\n    ) {\n      recency.rencencyInterpretation = \"Invalid\";\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\n    } else {\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"\" });\n    }\n  }, [\n    recency.longTermLine,\n    recency.verififcationLine,\n    recency.controlLine,\n    props.patientObj,\n  ]);\n  const handleInputChangeRecency = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    if (e.target.name === \"viralLoadConfirmationResult\") {\n      \n      if (e.target.value >= 1000) {\n        recency.viralLoadResultClassification = \">=1000\";\n        recency.finalRecencyResult = \"RITA Recent\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value < 1000) {\n        recency.viralLoadResultClassification = \"<1000\";\n        recency.finalRecencyResult = \"RITA Long term\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      }\n    }\n   if(e.target.name === \"optOutRTRI\"){\n      setRecency({\n        // optOutRTRI: \"false\",\n        optOutRTRITestName: \"\",\n        optOutRTRITestDate: \"\",\n        rencencyId: \"\",\n        controlLine: \"\",\n        verififcationLine: \"\",\n        longTermLine: \"\",\n        rencencyInterpretation: \"\",\n        hasViralLoad: \"\",\n        sampleCollectedDate: \"\",\n        sampleReferanceNumber: \"\",\n        dateSampleSentToPCRLab: \"\",\n        sampleTestDate: \"\",\n        sampleType: \"\",\n        receivingPcrLab: \"\",\n        viralLoadResultClassification: \"\",\n        recencyResult: \"\",\n        finalRecencyResult: \"\",\n        viralLoadConfirmationResult: \"\",\n         [e.target.name]: e.target.value });\n\n         setErrors({ ...temp,\n          optOutRTRITestName: \"\",\n          optOutRTRITestDate: \"\",\n          rencencyId: \"\",\n          controlLine: \"\",\n          verififcationLine: \"\",\n          longTermLine: \"\",\n          rencencyInterpretation: \"\",\n          hasViralLoad: \"\",\n          sampleCollectedDate: \"\",\n          sampleReferanceNumber: \"\",\n          dateSampleSentToPCRLab: \"\",\n          sampleTestDate: \"\",\n          sampleType: \"\",\n          receivingPcrLab: \"\",\n          viralLoadResultClassification: \"\",\n          recencyResult: \"\",\n          finalRecencyResult: \"\",\n          viralLoadConfirmationResult: \"\", [e.target.name]: \"\" });\n\n    } \nif(e.target.name === \"controlLine\" || e.target.name === \"verififcationLine\" ||   e.target.name === \"longTermLine\"){\nsetErrors({...errors, hasViralLoad: \"\"})\n  // hasViralLoad\n\n}\n\n\n    if (e.target.name === \"viralLoadResultClassification\") {\n      if (e.target.value === \">=1000\") {\n        recency.finalRecencyResult = \"RITA Recent\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value === \"<1000\") {\n        recency.finalRecencyResult = \"RITA Long term\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value === \"Failed run\") {\n        recency.finalRecencyResult = \"RITA Inconclusive\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else if (e.target.value === \"Invalid viral load result\") {\n        recency.finalRecencyResult = \"RITA Inconclusive\";\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      } else {\n        setRecency({ ...recency, [e.target.name]: e.target.value });\n      }\n    } else if (e.target.name === \"rencencyId\" && e.target.value !== \"\") {\n      const recencyIdNumberValue = checkRecencyLimit(e.target.value);\n      setRecency({ ...recency, [e.target.name]: recencyIdNumberValue });\n    } else {\n      setRecency({ ...recency, [e.target.name]: e.target.value });\n    }\n  };\n  const checkRecencyLimit = (e) => {\n    const limit = 10;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n      recency.optOutRTRI === \"false\" &&\n        (temp.optOutRTRITestName = recency.optOutRTRITestName\n          ? \"\"\n          : \"This field is required.\");\n    \n    \n         recency.optOutRTRI === \"false\" &&\n          (temp.optOutRTRITestDate = recency.optOutRTRITestDate\n            ? \"\"\n            : \"This field is required.\");\n\n      \n          recency.optOutRTRI === \"false\" &&\n            (temp.rencencyId = recency.rencencyId\n              ? \"\"\n              : \"This field is required.\");\n\n             recency.optOutRTRI === \"false\" &&\n              (temp.controlLine = recency.controlLine\n                ? \"\"\n                : \"This field is required.\")\n\n                \n      \n              recency.optOutRTRI === \"false\" &&\n              (temp.verififcationLine = recency.verififcationLine\n                ? \"\"\n                : \"This field is required.\");\n\n\n                recency.optOutRTRI === \"false\" &&\n                (temp.longTermLine = recency.longTermLine\n                  ? \"\"\n                  : \"This field is required.\")\n\n\n\n                  recency.optOutRTRI === \"false\" &&\n                  (temp.rencencyInterpretation = recency.rencencyInterpretation\n                    ? \"\"\n                    : \"This field is required.\")\n      recency.hasViralLoad == \"true\" &&\n        (temp.sampleReferanceNumber = recency.sampleReferanceNumber\n          ? \"\"\n          : \"This field is required.\");\n    \n    // {  recency.sampleCollectedDate!=='' && (temp.dateSampleSentToPCRLab = recency.dateSampleSentToPCRLab ? \"\" : \"This field is required.\")}\n    \n      recency.hasViralLoad == \"true\" &&\n        (temp.sampleType = recency.sampleType ? \"\" : \"This field is required.\");\n    \n\n\n    recency.rencencyInterpretation === \"RTRI Recent\" &&\n      (temp.hasViralLoad = recency.hasViralLoad\n        ? \"\"\n        : \"This field is required.\"); \n        \n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let latestForm = getNextForm(\n      \"HIV_Recency_Testing\",\n      props.patientAge,\n      \"\",\n      props?.patientObj?.hivTestResult\n    );\n    objValues.htsClientId = clientId;\n    objValues.recency = recency;\n    objValues.personId = patientID;\n    if (validate()) {\n      setSaving(true);\n      axios\n        .put(`${baseUrl}hts/${clientId}/recency`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          props.setPatientObj(response.data);\n          //toast.success(\"Risk Assesment successful\");\n          //comment this out for release\n          // handleItemClick(\"fit\", \"recency-testing\");\n          handleItemClick(latestForm[0], latestForm[1]);\n\n          // else if (permissions.includes(\"Nigeria_PNS_Form\")) {\n          // }\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2>RECENCY FORM</h2>\n          <form>\n            <div className=\"row\">\n              <LabelRibbon\n                as=\"a\"\n                color=\"blue\"\n                style={{ width: \"106%\", height: \"35px\" }}\n                ribbon\n              >\n                <h5 style={{ color: \"#fff\" }}>RECENCY</h5>\n              </LabelRibbon>\n              <br />\n              <br />\n              <br />\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Opt Out of RTRI? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"optOutRTRI\"\n                    id=\"optOutRTRI\"\n                    value={recency.optOutRTRI}\n                    onChange={handleInputChangeRecency}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    <option value=\"true\">Yes</option>\n                    <option value=\"false\">No</option>\n                  </select>\n                </FormGroup>\n              </div>\n              <div className=\"form-group  col-md-8\"></div>\n              {recency.optOutRTRI === \"false\" && (\n                <>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Test Name <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"optOutRTRITestName\"\n                        id=\"optOutRTRITestName\"\n                        value={recency.optOutRTRITestName}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"Asante\">Asante</option>\n                        <option value=\"Others\">Others</option>\n                      </select>\n                      {errors.optOutRTRITestName !== \"\" ? (\n                      <span className={classes.error}>{errors.optOutRTRITestName}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Test Date <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        type=\"date\"                  \n                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"optOutRTRITestDate\"\n                        id=\"optOutRTRITestDate\"\n                        value={recency.optOutRTRITestDate}\n                        onChange={handleInputChangeRecency}\n                        min={\n                          hivTestDate !== \"\" && hivTestDate !== null\n                            ? hivTestDate\n                            : \"\"\n                        }\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                      {errors.optOutRTRITestDate !== \"\" ? (\n                      <span className={classes.error}>{errors.optOutRTRITestDate}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Recency ID <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        className=\"form-control\"\n                        name=\"rencencyId\"\n                        id=\"rencencyId\"\n                        type=\"text\"\n                        value={recency.rencencyId}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                      {errors.rencencyId !== \"\" ? (\n                      <span className={classes.error}>{errors.rencencyId}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Control Line <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"controlLine\"\n                        id=\"controlLine\"\n                        value={recency.controlLine}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n\n                      {errors.controlLine !== \"\" ? (\n                      <span className={classes.error}>{errors.controlLine}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Verification Line{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"verififcationLine\"\n                        id=\"verififcationLine\"\n                        value={recency.verififcationLine}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.verififcationLine !== \"\" ? (\n                      <span className={classes.error}>{errors.verififcationLine}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Long Term Line <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"longTermLine\"\n                        id=\"longTermLine\"\n                        value={recency.longTermLine}\n                        onChange={handleInputChangeRecency}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.longTermLine !== \"\" ? (\n                      <span className={classes.error}>{errors.longTermLine}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Recency Interpretation{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        className=\"form-control\"\n                        name=\"rencencyInterpretation\"\n                        id=\"rencencyInterpretation\"\n                        type=\"text\"\n                        value={recency.rencencyInterpretation}\n                        disabled\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                      {errors.rencencyInterpretation !== \"\" ? (\n                      <span className={classes.error}>{errors.rencencyInterpretation}</span>\n                    ) : (\n                      \"\"\n                    )}\n                    </FormGroup>\n                  </div>\n                  {recency.rencencyInterpretation === \"RTRI Recent\" && (\n                    <div className=\"form-group  col-md-4\">\n                      <FormGroup>\n                        <Label>\n                          Has Viral Load been ordered?{\" \"}\n                          <span style={{ color: \"red\" }}> *</span>\n                        </Label>\n                        <select\n                          className=\"form-control\"\n                          name=\"hasViralLoad\"\n                          id=\"hasViralLoad\"\n                          value={recency.hasViralLoad}\n                          onChange={handleInputChangeRecency}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                          }}\n                        >\n                          <option value={\"\"}></option>\n                          <option value=\"true\">Yes</option>\n                          <option value=\"false\">No</option>\n                        </select>\n                        {errors.hasViralLoad !== \"\" ? (\n                      <span className={classes.error}>{errors.hasViralLoad}</span>\n                    ) : (\n                      \"\"\n                    )}\n                      </FormGroup>\n                    </div>\n                  )}\n                  {recency.hasViralLoad === \"true\" && (\n                    <>\n                      <div className=\"row\">\n                        <h4>Recency Viral Load Classification :</h4>\n                        <br />\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Recency Sample Collected Date</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"sampleCollectedDate\"\n                              id=\"sampleCollectedDate\"\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                              value={recency.sampleCollectedDate}\n                              min={recency.optOutRTRITestDate}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Sample Reference Number{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"sampleReferanceNumber\"\n                              id=\"sampleReferanceNumber\"\n                              type=\"text\"\n                              value={recency.sampleReferanceNumber}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />\n                            {errors.sampleReferanceNumber !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.sampleReferanceNumber}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Sample Type{\" \"}\n                              <span style={{ color: \"red\" }}> *</span>\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"sampleType\"\n                              id=\"sampleType\"\n                              value={recency.sampleType}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            >\n                              <option value={\"\"}></option>\n                              <option value=\"DBS\">DBS</option>\n                              <option value=\"Plasma\">Plasma</option>\n                            </select>\n                            {errors.sampleType !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.sampleType}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Date Recency Sample Sent to PCR Lab</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"dateSampleSentToPCRLab\"\n                              id=\"dateSampleSentToPCRLab\"\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                              min={recency.sampleCollectedDate}\n                              value={recency.dateSampleSentToPCRLab}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />\n                            {errors.dateSampleSentToPCRLab !== \"\" ? (\n                              <span className={classes.error}>\n                                {errors.dateSampleSentToPCRLab}\n                              </span>\n                            ) : (\n                              \"\"\n                            )}\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Recency Sample Test Date</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"sampleTestDate\"\n                              id=\"sampleTestDate\"\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                              // min={recency.optOutRTRITestDate}\n                              min={recency.dateSampleSentToPCRLab}\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                              value={recency.sampleTestDate}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Receiving PCR Lab</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"receivingPcrLab\"\n                              id=\"receivingPcrLab\"\n                              type=\"text\"\n                              value={recency.receivingPcrLab}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Viral Load Confirmation Result (copies/ml)\n                            </Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"viralLoadConfirmationResult\"\n                              id=\"viralLoadConfirmationResult\"\n                              type=\"number\"\n                              value={recency.viralLoadConfirmationResult}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />\n                          </FormGroup>\n                        </div>\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>\n                              Recency Viral Load Result Classification and\n                              Result (copies/ml)\n                            </Label>\n                            <select\n                              className=\"form-control\"\n                              name=\"viralLoadResultClassification\"\n                              id=\"viralLoadResultClassification\"\n                              value={recency.viralLoadResultClassification}\n                              onChange={handleInputChangeRecency}\n                              disabled\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            >\n                              <option value={\"\"}>Select</option>\n                              <option value=\">=1000\">{\">= \"} 1000</option>\n                              <option value=\"<1000\">{\"< \"} 1000</option>\n                              <option value=\"Failed run\">Failed run</option>\n                              <option value=\"Invalid viral load result\">\n                                Invalid viral load result\n                              </option>\n                            </select>\n                          </FormGroup>\n                        </div>\n                        {/* <div className=\"form-group  col-md-4\">\n                                    <FormGroup>\n                                        <Label>Result (copies/ml)</Label>\n                                        <Input\n                                            className=\"form-control\"\n                                            name=\"recencyResult\"\n                                            id=\"recencyResult\"\n                                            type=\"text\"\n                                            value={recency.recencyResult}\n                                            onChange={handleInputChangeRecency}\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        />\n                                        \n                                    </FormGroup>\n                                </div> */}\n                        <div className=\"form-group  col-md-4\">\n                          <FormGroup>\n                            <Label>Final Recency Result</Label>\n                            <Input\n                              className=\"form-control\"\n                              name=\"finalRecencyResult\"\n                              id=\"finalRecencyResult\"\n                              type=\"text\"\n                              disabled\n                              value={recency.finalRecencyResult}\n                              onChange={handleInputChangeRecency}\n                              style={{\n                                border: \"1px solid #014D88\",\n                                borderRadius: \"0.2rem\",\n                              }}\n                            />\n                          </FormGroup>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                </>\n              )}\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  {/* <Button\n                    content=\"Back\"\n                    icon=\"left arrow\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\n                    onClick={() => handleItemClick(\"post-test\", \"post-test\")}\n                  /> */}\n                  <Button\n                    content=\"Save & Continue\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={\n                      props.patientObj?.postTestCounselingKnowledgeAssessment\n                        ?.hivTestResult === \"true\" && recency.optOutRTRI === \"\"\n                        ? true\n                        : false\n                    }\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default Recency;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/RiskStratification.js",["1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card } from \"@material-ui/core\";\n//import SaveIcon from \"@material-ui/icons/Save\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { useHistory } from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport { token, url as baseUrl } from \"../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n//import PhoneInput from 'react-phone-input-2'\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport { getNextForm } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\nimport {validateVisitDateWithDOB} from \"../../utils\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\n\n\n\nconst RiskStratification = (props) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [enrollSetting, setEnrollSetting] = useState([]);\n  const [entryPoint, setEntryPoint] = useState([]);\n  const [entryPointCommunity, setEntryPointCommunity] = useState([]);\n  let riskCountQuestion = [];\n  const [kP, setKP] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n  const [entryPointSetting, setEntryPointSetting] = useState([]);\n  const [spokeFacList, setSpokeFacList] = useState([]);\n\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [riskCount, setRiskCount] = useState(0);\n  const [showHealthFacility, setShowHealthFacility] = useState(false);\n  const [disableInput, setDisableInput] = useState(false);\n\n  const [objValues, setObjValues] = useState({\n    age: props.patientAge,\n    dob: props.patientObj.dateOfBirth\n      ? props.patientObj.dateOfBirth\n      : props?.personInfo?.personResponseDto?.dateOfBirth,\n    visitDate: \"\",\n    dateOfBirth: props.patientObj.dateOfBirth\n      ? props.patientObj.dateOfBirth\n      : props?.personInfo?.personResponseDto?.dateOfBirth,\n    dateOfRegistration: \"\", //props.patientObj.dateOfRegistration,\n    isDateOfBirthEstimated: \"\", //props.patientObj.personResponseDto.isDateOfBirthEstimated\n    targetGroup: \"\",\n    testingSetting: \"\", //\n    modality: \"\", //\n    code: \"\",\n    id: \"\",\n    personId: props.patientObj.id,\n    riskAssessment: {},\n    entryPoint: \"\",\n    careProvider: \"\",\n    communityEntryPoint: \"\",\n    spokeFacility: \"\",\n    healthFacility: \"\",\n  });\n  const [riskAssessment, setRiskAssessment] = useState({\n    // soldPaidVaginalSex:\"\",\n    //New Question\n    lastHivTestForceToHaveSex: \"\",\n    lastHivTestHadAnal: \"\",\n    lastHivTestInjectedDrugs: \"\",\n    whatWasTheResult: \"\",\n    lastHivTestDone: \"\",\n    diagnosedWithTb: \"\",\n    lastHivTestPainfulUrination: \"\",\n    lastHivTestBloodTransfusion: \"\",\n    lastHivTestVaginalOral: \"\",\n    lastHivTestBasedOnRequest: \"\",\n  });\n  const [isPMTCTModality, setIsPMTCTModality] = useState(false);\n  const [showRiskAssessment, setShowRiskAssessment] = useState(false);\n\n  const retestingInfo = () => {\n    if (props.newHTSType === \"RETESTING\") {\n      setObjValues({\n        ...objValues,\n        entryPoint: \"HTS_ENTRY_POINT_FACILITY\",\n        testingSetting: \"FACILITY_HTS_TEST_SETTING_RETESTING\",\n      });\n      setDisableInput(true);\n    }\n  };\n  useEffect(() => {\n    KP();\n    EnrollmentSetting();\n    EntryPoint();\n    HTS_ENTRY_POINT_FACILITY();\n\n    if (props?.patientObj?.riskStratificationResponseDto !== null) {\n      if (\n        props?.activePage?.activeObject?.riskStratificationResponseDto\n          ?.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\"\n      ) {\n        HTS_ENTRY_POINT_COMMUNITY();\n      } else if (\n        props?.activePage?.activeObject?.riskStratificationResponseDto\n          ?.entryPoint === \"HTS_ENTRY_POINT_FACILITY\"\n      ) {\n        HTS_ENTRY_POINT_FACILITY();\n      }\n      setObjValues(props?.patientObj?.riskStratificationResponseDto);\n      SettingModality(\n        props?.patientObj?.riskStratificationResponseDto?.testingSetting\n      );\n\n      setRiskAssessment(\n        props.patientObj.riskStratificationResponseDto &&\n          props.patientObj.riskStratificationResponseDto.riskAssessment\n      );\n    }\n  }, [props.patientObj]);\n\n  useEffect(() => {\n    retestingInfo();\n  }, [entryPointSetting, entryPoint, props.newHTSType]);\n  //Get list of HIV STATUS ENROLLMENT\n  const EnrollmentSetting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEnrollSetting(response.data);\n      })\n      .catch((error) => {});\n  };\n  const EntryPoint = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/HTS_ENTRY_POINT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setEntryPoint(response.data);\n      })\n      .catch((error) => {});\n  };\n\n  const getSpokeFaclityByHubSite = () => {\n    let facility = Cookies.get(\"facilityName\");\n    axios\n      .get(`${baseUrl}hts/spoke-site?hubSite=${facility}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSpokeFacList(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_FACILITY = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //Remove retesting from the codeset\n        //   let facilityList = []\n        // response.data.map((each, index)=>{\n        //       if(each.code !==\"FACILITY_HTS_TEST_SETTING_RETESTING\"){\n        //         facilityList.push(each);\n        //       }\n\n        // })\n        setEntryPointSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\n    axios\n      .get(\n        `${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\n `,\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      )\n      .then((response) => {\n        //console.log(response.data);\n        setEntryPointSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  //Get list of KP\n  const KP = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        if (props.patientObject.gender) {\n          let kpList = [];\n          let gender = props.patientObject.gender.toLowerCase();\n          if (gender === \"female\") {\n            response.data.map((each, index) => {\n              if (each.code !== \"TARGET_GROUP_MSM\") {\n                kpList.push(each);\n              }\n            });\n          } else if (gender === \"male\") {\n            response.data.map((each, index) => {\n              if (each.code !== \"TARGET_GROUP_FSW\") {\n                kpList.push(each);\n              }\n            });\n          }\n\n          setKP(kpList);\n        } else {\n          setKP(response.data);\n        }\n      })\n      .catch((error) => {});\n  };\n\n  const getMenuLogic = () => {\n    //secound logic\n    props.setHideOtherMenu(false);\n  };\n\n  const checkPMTCTModality = (modality) => {\n    if (\n      modality === \"FACILITY_HTS_TEST_SETTING_ANC\" ||\n      modality === \"FACILITY_HTS_TEST_SETTING_L&D\" ||\n      modality === \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\n    ) {\n      setIsPMTCTModality(true);\n\n      setErrors({\n        ...errors,\n        lastHivTestDone: \"\",\n        whatWasTheResult: \"\",\n        lastHivTestVaginalOral: \"\",\n        lastHivTestBloodTransfusion: \"\",\n        lastHivTestPainfulUrination: \"\",\n        diagnosedWithTb: \"\",\n        lastHivTestInjectedDrugs: \"\",\n        lastHivTestHadAnal: \"\",\n        lastHivTestForceToHaveSex: \"\",\n      });\n      return true;\n    } else {\n      setIsPMTCTModality(false);\n      return false;\n    }\n  };\n\n  const RESTRICTED_SETTINGS = [\n    \"FACILITY_HTS_TEST_SETTING_ANC\",\n    \"FACILITY_HTS_TEST_SETTING_L&D\",\n    \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\n  ];\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"targetGroup\") {\n      const isRestrictedSetting =\n          objValues.testingSetting &&\n          RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n      if (e.target.value === \"TARGET_GROUP_MSM\" && isRestrictedSetting) {\n        toast.error(\n            \"MSM cannot be selected when ANC, L&D, or Postnatal Ward/Breastfeeding is chosen.\",\n            {\n              position: toast.POSITION.BOTTOM_CENTER,\n            }\n        );\n        return;\n      }\n    }\n\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"testingSetting\" && e.target.value !== \"\") {\n      setErrors({ ...temp, spokeFacility: \"\", healthFacility: \"\" });\n\n      SettingModality(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\n      let ans = checkPMTCTModality(e.target.value);\n      displayRiskAssessment(\n        riskAssessment.lastHivTestBasedOnRequest,\n        objValues.age,\n        ans\n      );\n      if (\n        e.target.value ===\n          \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\"\n      ) {\n        setShowHealthFacility(true);\n      } else {\n        setShowHealthFacility(false);\n      }\n\n      //get spoke sites\n      if (\n        e.target.value === \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" ||\n        e.target.value ===\n          \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\"\n      ) {\n        getSpokeFaclityByHubSite();\n      }\n\n      //set risk count\n      if (\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_STANDALONE_HTS\" ||\n        e.target.value === \"FACILITY_HTS_TEST_SETTING_STANDALONE_HTS\"\n      ) {\n        setRiskCount(1);\n      } else if (\n        e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CT\" ||\n        e.target.value === \"FACILITY_HTS_TEST_SETTING_CT\"\n      ) {\n        setRiskCount(1);\n      } else if (e.target.value === \"FACILITY_HTS_TEST_SETTING_TB\") {\n        setRiskCount(1);\n      } else if (e.target.value === \"FACILITY_HTS_TEST_SETTING_STI\") {\n        setRiskCount(1);\n      } else if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_OUTREACH\") {\n        setRiskCount(1);\n      } else {\n        setRiskCount(0);\n      }\n    }\n\n    if (e.target.name === \"entryPoint\") {\n      if (e.target.value === \"HTS_ENTRY_POINT_COMMUNITY\") {\n        HTS_ENTRY_POINT_COMMUNITY();\n      } else if (e.target.value === \"HTS_ENTRY_POINT_FACILITY\") {\n        HTS_ENTRY_POINT_FACILITY();\n      } else {\n        setEntryPointSetting([]);\n      }\n    }\n\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n\n  const displayRiskAssessment = (lastVisit, age, isPMTCTModalityValue) => {\n    let SecAge = age !== \"\" ? age : 0;\n    let ans;\n\n    // for the section to show\n    //  Conditions are : age > 15, riskAssessment.lastHivTestBasedOnRequest === \"false\" and PMTCT Modality === true\n    if (lastVisit === \"false\") {\n      if (SecAge < 15 || isPMTCTModalityValue) {\n        setShowRiskAssessment(false);\n        ans = false;\n\n        //\n        //\n        if (age !== \"\") {\n          setRiskAssessment({\n            ...riskAssessment,\n            lastHivTestForceToHaveSex: \"\",\n            lastHivTestHadAnal: \"\",\n            lastHivTestInjectedDrugs: \"\",\n            whatWasTheResult: \"\",\n            lastHivTestDone: \"\",\n            diagnosedWithTb: \"\",\n            lastHivTestPainfulUrination: \"\",\n            lastHivTestBloodTransfusion: \"\",\n            lastHivTestVaginalOral: \"\",\n          });\n        }\n\n        //\n      } else if (SecAge > 15) {\n        setShowRiskAssessment(true);\n        ans = true;\n      } else if (lastVisit === \"false\") {\n        setShowRiskAssessment(true);\n        ans = true;\n      } else {\n        setShowRiskAssessment(false);\n        ans = false;\n      }\n    } else {\n      setShowRiskAssessment(false);\n      ans = false;\n    }\n  };\n\n  //Date of Birth and Age handle\n  //Get list of DSD Model Type\n  function SettingModality(settingId) {\n    const setting = settingId;\n    axios\n      .get(`${baseUrl}application-codesets/v2/${setting}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setSetting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n  const validate = () => {\n    //HTS FORM VALIDATION\n    temp.dateVisit = objValues.visitDate ? \"\" : \"This field is required.\";\n\n\n     const minVisitDate = getMinVisitDateForRetesting(\n       props.personInfo,\n       props.newHTSType\n     );\n\n     if (minVisitDate && objValues.visitDate) {\n       const selectedDate = new Date(objValues.visitDate);\n       const requiredMinDate = new Date(minVisitDate);\n\n       if (selectedDate < requiredMinDate) {\n         temp.dateVisit = `For retesting after ANC, visit date must be at least 28 days after the last visit (${minVisitDate})`;\n       }\n     }\n\n    temp.entryPoint = objValues.entryPoint ? \"\" : \"This field is required.\";\n    temp.testingSetting = objValues.testingSetting\n      ? \"\"\n      : \"This field is required.\";\n\n  \n    temp.lastHivTestBasedOnRequest = riskAssessment.lastHivTestBasedOnRequest\n      ? \"\"\n      : \"This field is required.\";\n\n    props.patientAge > 15 &&\n      (temp.targetGroup = objValues.targetGroup\n        ? \"\"\n        : \"This field is required.\");\n\n    objValues.testingSetting ===\n      \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" &&\n      (temp.spokeFacility = objValues.spokeFacility\n        ? \"\"\n        : \"This field is required.\");\n\n    showHealthFacility &&\n      (temp.healthFacility = objValues.healthFacility\n        ? \"\"\n        : \"This field is required.\");\n    //\n\n    //Risk Assement section\n    if (\n      objValues.age > 15 &&\n      riskAssessment.lastHivTestBasedOnRequest === \"false\" &&\n      showRiskAssessment\n    ) {\n      temp.lastHivTestDone = riskAssessment.lastHivTestDone\n        ? \"\"\n        : \"This field is required.\";\n      riskAssessment.lastHivTestDone !== \"\" &&\n        riskAssessment.lastHivTestDone !== \"Never\" &&\n        (temp.whatWasTheResult = riskAssessment.whatWasTheResult\n          ? \"\"\n          : \"This field is required.\");\n\n      temp.lastHivTestVaginalOral = riskAssessment.lastHivTestVaginalOral\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestBloodTransfusion =\n        riskAssessment.lastHivTestBloodTransfusion\n          ? \"\"\n          : \"This field is required.\";\n\n      temp.lastHivTestPainfulUrination =\n        riskAssessment.lastHivTestPainfulUrination\n          ? \"\"\n          : \"This field is required.\";\n\n      temp.diagnosedWithTb = riskAssessment.diagnosedWithTb\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestInjectedDrugs = riskAssessment.lastHivTestInjectedDrugs\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestHadAnal = riskAssessment.lastHivTestHadAnal\n        ? \"\"\n        : \"This field is required.\";\n\n      temp.lastHivTestForceToHaveSex = riskAssessment.lastHivTestForceToHaveSex\n        ? \"\"\n        : \"This field is required.\";\n    }\n    //targetGroup\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  // Getting the number count of riskAssessment True\n  const actualRiskCountTrue = Object.values(riskAssessment);\n  riskCountQuestion = actualRiskCountTrue.filter((x) => x === \"true\");\n\n  const handleInputChangeRiskAssessment = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n\n    if (e.target.name === \"lastHivTestBasedOnRequest\") {\n      displayRiskAssessment(e.target.value, objValues.age, isPMTCTModality);\n      setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\n    }\n  };\n\n  // Function to get the minimum allowable visit date (28 days after last ANC visit)\n  const getMinVisitDateForRetesting = (personInfo, newHTSType) => {\n    // Check if this is a retesting case\n    if (newHTSType !== \"RETESTING\") {\n      return null; \n    }\n\n    // Find if any previous visit was an ANC testing setting\n    const hasANCVisit = personInfo?.htsClientDtoList?.some(\n      (client) =>\n        client?.riskStratificationResponseDto?.testingSetting ===\n        \"FACILITY_HTS_TEST_SETTING_ANC\"\n    );\n\n    if (!hasANCVisit) {\n      return null; // No ANC visit found, so no special validation\n    }\n\n    // Find the most recent visit date across all records\n    let mostRecentVisitDate = null;\n\n    personInfo?.htsClientDtoList?.forEach((client) => {\n      const visitDate = client?.riskStratificationResponseDto?.visitDate;\n\n      if (visitDate) {\n        const currentDate = new Date(visitDate);\n\n        if (\n          !mostRecentVisitDate ||\n          currentDate > new Date(mostRecentVisitDate)\n        ) {\n          mostRecentVisitDate = visitDate;\n        }\n      }\n    });\n\n    if (!mostRecentVisitDate) {\n      return null;\n    }\n\n    // Calculate the date 28 days after the most recent visit\n    const nextEligibleDate = new Date(mostRecentVisitDate);\n    nextEligibleDate.setDate(nextEligibleDate.getDate() + 28);\n\n\n    return moment(nextEligibleDate).format(\"YYYY-MM-DD\");\n  };\n\n\n\n const handleSubmit = async (e) => {\n   e.preventDefault();\n\n   // Check if testingSetting is restricted\n   const isRestrictedSetting =\n       objValues.testingSetting &&\n       RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n   // Check if targetGroup is MSM\n   const isMSMSelected =\n       objValues.targetGroup === \"TARGET_GROUP_MSM\";\n   // Block submission if restricted setting + MSM\n   if (isRestrictedSetting && isMSMSelected) {\n     toast.error(\n         \"MSM cannot be selected when ANC, L&D, or Postnatal Ward/Breastfeeding is chosen.\",\n         {\n           position: toast.POSITION.BOTTOM_CENTER,\n         }\n     );\n     return;\n   }\n   const visitDateError = validateVisitDateWithDOB(props.patientObject.dateOfBirth, objValues.visitDate);\n\n   if (visitDateError) {\n     toast.error(visitDateError, {\n       position: toast.POSITION.BOTTOM_CENTER,\n     });\n     return;\n   }\n \n   const isValid = validate();\n\n   if (!isValid) {\n     toast.error(\"Please correct the errors before submitting\", {\n       position: toast.POSITION.BOTTOM_CENTER,\n     });\n     return; \n   }\n\n  \n   getMenuLogic();\n   let newModality = isPMTCTModality ? \"skip\" : \"fill\";\n\n   let latestForm = getNextForm(\n     \"Risk_Stratification\",\n     objValues.age,\n     newModality,\n     \"unknown\"\n   );\n\n   props.patientObj.targetGroup = objValues.targetGroup;\n   props.patientObj.testingSetting = objValues.testingSetting;\n   props.patientObj.dateVisit = objValues.visitDate;\n   props.patientObj.modality = objValues.modality;\n   props.patientObj.riskStratificationResponseDto = objValues;\n   objValues.riskAssessment = riskAssessment;\n\n   setSaving(true);\n\n   try {\n     let response;\n\n\n     if (\n       (props.patientObj.riskStratificationResponseDto &&\n         props.patientObj.riskStratificationResponseDto !== null &&\n         props.patientObj.personId !== \"\") ||\n       props.patientObj.riskStratificationResponseDto.code !== \"\"\n     ) {\n \n       response = await axios.put(\n         `${baseUrl}risk-stratification/${props.patientObj.riskStratificationResponseDto.id}`,\n         objValues,\n         { headers: { Authorization: `Bearer ${token}` } }\n       );\n     } else {\n  \n       response = await axios.post(`${baseUrl}risk-stratification`, objValues, {\n         headers: { Authorization: `Bearer ${token}` },\n       });\n     }\n\n\n     setSaving(false);\n     props.patientObj.riskStratificationResponseDto = response.data;\n     objValues.code = response.data.code;\n     props.setExtra(objValues);\n     props.setHideOtherMenu(false);\n     handleItemClick(latestForm[0], latestForm[1]);\n     toast.success(\"Risk stratification saved successfully!\");\n   } catch (error) {\n\n     setSaving(false);\n     if (error.response && error.response.data) {\n       let errorMessage =\n         error.response.data.apierror &&\n         error.response.data.apierror.message !== \"\"\n           ? error.response.data.apierror.message\n           : \"Something went wrong, please try again\";\n       toast.error(errorMessage, {\n         position: toast.POSITION.BOTTOM_CENTER,\n       });\n     } else {\n       toast.error(\"Something went wrong. Please try again...\", {\n         position: toast.POSITION.BOTTOM_CENTER,\n       });\n     }\n   }\n };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>RISK STRATIFICATION</h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Modality\n              </div>\n\n              <div className=\"row\">\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Entry Point <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"entryPoint\"\n                      id=\"entryPoint\"\n                      value={objValues.entryPoint}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={disableInput}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {entryPoint.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.entryPoint !== \"\" ? (\n                      <span className={classes.error}>{errors.entryPoint}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/* {objValues.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\" && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Community Entry Point{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"communityEntryPoint\"\n                        id=\"communityEntryPoint\"\n                        value={objValues.communityEntryPoint}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}>Select</option>\n                        {entryPointCommunity.map((value) => (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.communityEntryPoint !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.communityEntryPoint}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )} */}\n                <div className=\"form-group mb-3 col-md-6\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Visit Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"\n                      onKeyPress={(e) => {\n                        e.preventDefault();\n                      }}\n                      name=\"visitDate\"\n                      id=\"visitDate\"\n                      value={objValues.visitDate}\n                      onChange={handleInputChange}\n                      min={\n                        getMinVisitDateForRetesting(\n                          props.personInfo,\n                          props.newHTSType\n                        ) ||\n                        props?.personInfo?.personResponseDto?.dateOfRegistration\n                      }\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                    />\n                    {errors.dateVisit !== \"\" ? (\n                      <span className={classes.error}>{errors.dateVisit}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Setting <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"testingSetting\"\n                      id=\"testingSetting\"\n                      value={objValues.testingSetting}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled={disableInput}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {entryPointSetting &&\n                        entryPointSetting.map((value) => (\n                          <option key={value.id} value={value.code}>\n                            {value.display}\n                          </option>\n                        ))}\n                      {/* <option value=\"TEST_SETTING_CT\">CT</option>\n                                        <option value=\"TEST_SETTING_TB\">TB</option>\n                                        <option value=\"TEST_SETTING_STI\">STI</option>\n                                        <option value=\"TEST_SETTING_OPD\">OPD</option>\n                                        <option value=\"TEST_SETTING_WARD\">WARD</option>\n                                        <option value=\"TEST_SETTING_STANDALONE_HTS\">STANDALONE HTS</option>\n                                        \n                                        <option value=\"TEST_SETTING_FP\">FP</option>\n                                        <option value=\"TEST_SETTING_OUTREACH\">OUTREACH</option>\n                                        <option value=\"TEST_SETTING_OTHERS\">OTHERS</option> */}\n                    </select>\n                    {errors.testingSetting !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.testingSetting}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/* <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Modality <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"modality\"\n                      id=\"modality\"\n                      value={objValues.modality}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {setting.map((value) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.modality !== \"\" ? (\n                      <span className={classes.error}>{errors.modality}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div> */}\n\n                {objValues.testingSetting ===\n                  \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Spoke Health Facility{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n\n                      {spokeFacList.length > 0 ? (\n                        <>\n                          {\" \"}\n                          <select\n                            className=\"form-control\"\n                            name=\"spokeFacility\"\n                            id=\"spokeFacility\"\n                            value={objValues.spokeFacility}\n                            onChange={handleInputChange}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                              textTransform: \"capitalize  !important\",\n                            }}\n                          >\n                            <option value={\"\"}>Select</option>\n                            {spokeFacList.map((value) => (\n                              <option key={value.id} value={value.spokeSite}>\n                                {value.spokeSite}\n                              </option>\n                            ))}\n                          </select>\n                        </>\n                      ) : (\n                        <Input\n                          type=\"text\"\n                          name=\"spokeFacility\"\n                          id=\"spokeFacility\"\n                          value={objValues.spokeFacility}\n                          //value={Math.floor(Math.random() * 1093328)}\n                          // onBlur={checkClientCode}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      )}\n                      {errors.spokeFacility !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.spokeFacility}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n\n                {showHealthFacility && (\n                  <div className=\"form-group  col-md-6\">\n                    <FormGroup>\n                      <Label>\n                        Health Facility <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      {spokeFacList.length > 0 ? (\n                        <select\n                          className=\"form-control\"\n                          name=\"healthFacility\"\n                          id=\"healthFacility\"\n                          value={objValues.healthFacility}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.2rem\",\n                            textTransform: \"capitalize  !important\",\n                          }}\n                        >\n                          <option value={\"\"}>Select</option>\n                          {spokeFacList.map((value) => (\n                            <option key={value.id} value={value.spokeSite}>\n                              {value.spokeSite}\n                            </option>\n                          ))}\n                        </select>\n                      ) : (\n                        <Input\n                          type=\"text\"\n                          name=\"healthFacility\"\n                          id=\"healthFacility\"\n                          value={objValues.healthFacility}\n                          //value={Math.floor(Math.random() * 1093328)}\n                          // onBlur={checkClientCode}\n                          onChange={handleInputChange}\n                          style={{\n                            border: \"1px solid #014D88\",\n                            borderRadius: \"0.25rem\",\n                          }}\n                        />\n                      )}\n                      {errors.healthFacility !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.healthFacility}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                )}\n                <div className=\"form-group col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Target Group <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"targetGroup\"\n                      id=\"targetGroup\"\n                      onChange={handleInputChange}\n                      value={objValues.targetGroup}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {kP\n                        .filter((value) => {\n                          if (\n                            props.patientAge > 14 &&\n                            (value.id === 961 || value.id === 475)\n                          ) {\n                            return false;\n                          }\n                          return true;\n                          // Check if MSM should be hidden\n                          const isRestrictedSetting =\n                              objValues.testingSetting &&\n                              RESTRICTED_SETTINGS.includes(objValues.testingSetting);\n\n                          if (isRestrictedSetting && value.code === \"TARGET_GROUP_MSM\") {\n                            return false;\n                          }\n\n                          return true;\n                        })\n                        .map((value) => {\n                          return (\n                            <option key={value.id} value={value.code}>\n                              {value.display}\n                            </option>\n                          );\n                        })}\n                    </select>\n                    {errors.targetGroup !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.targetGroup}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              </div>\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group  col-md-6\">\n                  <FormGroup>\n                    <Label>\n                      Is this HIV test based on a Clinician/Doctor/Health Care\n                      Provider's request ?{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"lastHivTestBasedOnRequest\"\n                      id=\"lastHivTestBasedOnRequest\"\n                      value={riskAssessment.lastHivTestBasedOnRequest}\n                      onChange={handleInputChangeRiskAssessment}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}>Select</option>\n                      <option value=\"true\">Yes</option>\n                      <option value=\"false\">No</option>\n                    </select>\n                    {errors.lastHivTestBasedOnRequest !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.lastHivTestBasedOnRequest}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n              </div>\n              <br />\n              {showRiskAssessment && (\n                <>\n                  <div\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                    style={{\n                      backgroundColor: \"#992E62\",\n                      width: \"125%\",\n                      height: \"35px\",\n                      color: \"#fff\",\n                      fontWeight: \"bold\",\n                    }}\n                  >\n                    HIV Risk Assessment (Last 3 months)\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        When was your last HIV test done?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestDone\"\n                        id=\"lastHivTestDone\"\n                        value={riskAssessment.lastHivTestDone}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"<1\"> {\"< 1\"} month</option>\n                        <option value=\"1-3 Months\">1-3 Months</option>\n                        <option value=\"4-6 Months\">4-6 Months</option>\n                        <option value=\">6 Months\"> {\">6\"} Months</option>\n                        <option value=\"Never\"> Never</option>\n                      </select>\n                      {errors.lastHivTestDone !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestDone}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  {riskAssessment.lastHivTestDone !== \"\" &&\n                    riskAssessment.lastHivTestDone !== \"Never\" && (\n                      <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label>\n                            What was the result?{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <select\n                            className=\"form-control\"\n                            name=\"whatWasTheResult\"\n                            id=\"whatWasTheResult\"\n                            value={riskAssessment.whatWasTheResult}\n                            onChange={handleInputChangeRiskAssessment}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          >\n                            <option value={\"\"}></option>\n                            <option value=\"Positive\">Positive</option>\n                            <option value=\"Negative\">Negative</option>\n                          </select>\n                          {errors.whatWasTheResult !== \"\" ? (\n                            <span className={classes.error}>\n                              {errors.whatWasTheResult}\n                            </span>\n                          ) : (\n                            \"\"\n                          )}\n                        </FormGroup>\n                      </div>\n                    )}\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had anal or vaginal\n                        or oral sex without a condom with someone who was HIV\n                        positive or unaware of their HIV status?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestVaginalOral\"\n                        id=\"lastHivTestVaginalOral\"\n                        value={riskAssessment.lastHivTestVaginalOral}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestVaginalOral !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestVaginalOral}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had a blood or blood\n                        product transfusion?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestBloodTransfusion\"\n                        id=\"lastHivTestBloodTransfusion\"\n                        value={riskAssessment.lastHivTestBloodTransfusion}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestBloodTransfusion !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestBloodTransfusion}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you experienced painful\n                        urination, lower abdominal pain, vaginal or penile\n                        discharge, pain during sexual intercourse, thick,\n                        cloudy, or foul smelling discharge and/or small bumps or\n                        blisters near the mouth, penis, vagina, or anal areas?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestPainfulUrination\"\n                        id=\"lastHivTestPainfulUrination\"\n                        value={riskAssessment.lastHivTestPainfulUrination}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestPainfulUrination !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestPainfulUrination}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Have you been diagnosed with TB or currently have any of\n                        the following symptoms : cough, fever, weight loss,\n                        night sweats? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"diagnosedWithTb\"\n                        id=\"diagnosedWithTb\"\n                        value={riskAssessment.diagnosedWithTb}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.diagnosedWithTb !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.diagnosedWithTb}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you ever injected drugs,\n                        shared needles or other sharp objects with someone known\n                        to be HIV positive or who you didn’t know their HIV\n                        status? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestInjectedDrugs\"\n                        id=\"sexUnderInfluence\"\n                        value={riskAssessment.lastHivTestInjectedDrugs}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestInjectedDrugs !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestInjectedDrugs}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you had anal, oral or\n                        vaginal sex in exchange for money or other benefits?\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestHadAnal\"\n                        id=\"lastHivTestHadAnal\"\n                        value={riskAssessment.lastHivTestHadAnal}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestHadAnal !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestHadAnal}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Since your last HIV test, have you been forced to have\n                        sex? <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lastHivTestForceToHaveSex\"\n                        id=\"moreThanOneSexPartnerLastThreeMonths\"\n                        value={riskAssessment.lastHivTestForceToHaveSex}\n                        onChange={handleInputChangeRiskAssessment}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"true\">Yes</option>\n                        <option value=\"false\">No</option>\n                      </select>\n                      {errors.lastHivTestForceToHaveSex !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.lastHivTestForceToHaveSex}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <br />\n                </>\n              )}\n\n              <br />\n              <Message warning>\n                <h4> Risk assessment score 1</h4>\n                <b>\n                  Score :\n                  {riskCount +\n                    (props.patientAge > 14 ? riskCountQuestion.length : 0)}\n                </b>\n              </Message>\n              <hr />\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                  <Button\n                    content=\"Save \"\n                    type=\"submit\"\n                    icon=\"right arrow\"\n                    labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default RiskStratification;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/PreTest.js",["1245","1246","1247","1248","1249","1250","1251"],"import React, {useCallback, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport { checkPregnantPatient } from \"../../../../utility\";\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Card, CardContent} from \"@material-ui/core\";\n// import AddIcon from \"@material-ui/icons/Add\";\n// import CancelIcon from \"@material-ui/icons/Cancel\";\nimport {toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\nimport {token, url as baseUrl } from \"../../../../api\";\nimport 'react-phone-input-2/lib/style.css'\nimport {Label as LabelRibbon, Button, Message} from 'semantic-ui-react'\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { getNextForm } from \"../../../../utility\";\nimport { getCheckModality } from \"../../../../utility\";\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        margin: theme.spacing(20),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n    },\n    form: {\n        width: \"100%\", // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n    cardBottom: {\n        marginBottom: 20,\n    },\n    Select: {\n        height: 45,\n        width: 300,\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        },\n        \"& .card-title\":{\n            color:'#fff',\n            fontWeight:'bold'\n        },\n        \"& .form-control\":{\n            borderRadius:'0.25rem',\n            height:'41px'\n        },\n        \"& .card-header:first-child\": {\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\n        },\n        \"& .dropdown-toggle::after\": {\n            display: \" block !important\"\n        },\n        \"& select\":{\n            \"-webkit-appearance\": \"listbox !important\"\n        },\n        \"& p\":{\n            color:'red'\n        },\n        \"& label\":{\n            fontSize:'14px',\n            color:'#014d88',\n            fontWeight:'bold'\n        }\n    },\n    demo: {\n        backgroundColor: theme.palette.background.default,\n    },\n    inline: {\n        display: \"inline\",\n    },\n    error:{\n        color: '#f85032',\n        fontSize: '12.8px'\n    }\n}));\n\nconst BasicInfo = (props) => {\n    const classes = useStyles();\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\n    const sex= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.sex : \"\";\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\n    const [saving, setSaving] = useState(false);\n    const [errors, setErrors] = useState({});\n\n\n    let temp = { ...errors }\n    const [riskAssessmentPartner, setRiskAssessmentPartner]= useState(\n        {\n            sexPartnerHivPositive:\"\",\n            newDiagnosedHivlastThreeMonths:\"\",\n            currentlyArvForPmtct :\"\",\n            knowHivPositiveOnArv :\"\",\n            knowHivPositiveAfterLostToFollowUp:\"\", \n            uprotectedAnalSex  :\"\",\n        }\n    )\n    const [objValues, setObjValues]= useState(\n        {\n            htsClientId: clientId,\n            knowledgeAssessment: {},\n            personId: patientID,\n            riskAssessment: {},\n            stiScreening: {},\n            tbScreening: {},\n            sexPartnerRiskAssessment:{}\n        }\n    )\n    const [knowledgeAssessment, setKnowledgeAssessment]= useState(\n        {\n            previousTestedHIVNegative:\"\",\n            timeLastHIVNegativeTestResult:\"\",\n            clientPregnant:\"\",\n            clientInformHivTransRoutes:\"\",\n            clientInformRiskkHivTrans:\"\",\n            clientInformPreventingsHivTrans:\"\", \n            clientInformPossibleTestResult:\"\",\n            informConsentHivTest:\"\",\n        }\n    )\n    const [riskAssessment, setRiskAssessment]= useState(\n        {\n            everHadSexualIntercourse:\"\",\n            bloodtransInlastThreeMonths:\"\",\n            uprotectedSexWithCasualLastThreeMonths:\"\",\n            uprotectedSexWithRegularPartnerLastThreeMonths:\"\", \n            unprotectedVaginalSex:\"\",  \n            uprotectedAnalSex:\"\",   \n            stiLastThreeMonths:\"\",\n            sexUnderInfluence :\"\",\n            moreThanOneSexPartnerLastThreeMonths:\"\",\n            experiencePain:\"\",\n            haveSexWithoutCondom:\"\",\n            abuseDrug:\"\",\n            bloodTransfusion:\"\",\n            consistentWeightFeverNightCough:\"\",\n            soldPaidVaginalSex:\"\",\n        }\n    )\n    const [stiScreening, setStiScreening]= useState(\n        {\n            vaginalDischarge:\"\",\n            lowerAbdominalPains :\"\",\n            urethralDischarge :\"\",\n            complaintsOfScrotal:\"\", \n            complaintsGenitalSore  :\"\",\n                \n        }\n    )\n    const [tbScreening, setTbScreening]= useState(\n        {\n            currentCough :\"\",\n            weightLoss  :\"\",\n            lymphadenopathy :\"\", \n            fever :\"\",  \n            nightSweats :\"\",\n        }\n    )\n\n\n\n  \n    useEffect(() => { \n\n        if(props.patientObj){\n            let knowledgeAsses = props?.patientObj?.knowledgeAssessment\n\n          setKnowledgeAssessment(\n            props.patientObj.knowledgeAssessment &&\n              props.patientObj.knowledgeAssessment !== null\n              ? props.patientObj.knowledgeAssessment\n              : {}\n          );\n\n          if (props?.patientObj?.pregnant) {\n            checkPregnantPatient(props.patientObj.pregnant).then((res) => {\n              setKnowledgeAssessment({\n                ...knowledgeAsses,\n                clientPregnant: res ? \"true\" : \"false\",\n              });\n            });  \n         }\n\n          setRiskAssessment(\n            props.patientObj.riskAssessment &&\n              props.patientObj.riskAssessment !== null\n              ? props.patientObj.riskAssessment\n              : {}\n          );\n          setRiskAssessmentPartner(\n            props.patientObj.sexPartnerRiskAssessment &&\n              props.patientObj.sexPartnerRiskAssessment !== null\n              ? props.patientObj.sexPartnerRiskAssessment\n              : {}\n          );\n          setStiScreening(\n            props.patientObj.stiScreening &&\n              props.patientObj.stiScreening !== null\n              ? props.patientObj.stiScreening\n              : {}\n          );\n          setTbScreening(\n            props.patientObj.tbScreening &&\n              props.patientObj.tbScreening !== null\n              ? props.patientObj.tbScreening\n              : {}\n          );\n          //patientAge=calculate_age(moment(props.patientObj.personResponseDto.dateOfBirth).format(\"DD-MM-YYYY\"))\n          \n\n          if (\n            props.patientObj.riskStratificationResponseDto &&\n            Object.keys(\n              props.patientObj.riskStratificationResponseDto.riskAssessment\n            ).length !== 0 &&\n            props.patientObj.riskAssessment === null\n          ) {\n            //setRiskAssessment({...riskAssessment, ...props.patientObj.riskStratificationResponseDto.riskAssessment})\n            props.patientObj.riskStratificationResponseDto.riskAssessment\n              .whatWasTheResult !== \"\" &&\n            props.patientObj.riskStratificationResponseDto.riskAssessment\n              .whatWasTheResult === \"Positive\"\n              ? (knowledgeAssessment.previousTestedHIVNegative = \"false\")\n              : (knowledgeAssessment.previousTestedHIVNegative = \"true\");\n          } else {\n            setRiskAssessment({\n              ...riskAssessment,\n              ...props.patientObj.riskAssessment,\n            });\n          }\n       \n        }\n    }, [props.patientObj]);\n    const handleItemClick =(page, completedMenu)=>{        \n        if(props.completed.includes(completedMenu)) {\n        }else{\n            props.setCompleted([...props.completed, completedMenu])\n        }\n        props.handleItemClick(page)\n    }\n\n    const handleInputChangeKnowledgeAssessment = e => { \n        //setErrors({...temp, [e.target.name]:\"\"})\n        \n        setKnowledgeAssessment ({...knowledgeAssessment,  [e.target.name]: e.target.value}); \n          \n    }\n    \n    const handleInputChangeRiskAssessment = e => { \n        setErrors({...temp, [e.target.name]:\"\"}) \n        setRiskAssessment ({...riskAssessment,  [e.target.name]: e.target.value});                  \n    }\n    // Getting the number count of riskAssessment True\n    const actualRiskCountTrue=Object.values(riskAssessment)\n    const riskCount=actualRiskCountTrue.filter((x)=> x==='true')\n   \n    const handleInputChangeRiskAssessmentPartner = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setRiskAssessmentPartner ({...riskAssessmentPartner,  [e.target.name]: e.target.value});                       \n    }\n    // Getting the number count of sexPartRiskCount True\n    const actualSexPartRiskCountTrue=Object.values(riskAssessmentPartner)\n    const sexPartRiskCount=actualSexPartRiskCountTrue.filter((x)=> x==='true')\n\n    const handleInputChangeStiScreening = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        setStiScreening ({...stiScreening,  [e.target.name]: e.target.value});            \n    }\n    // Getting the number count of STI True\n    const actualStiTrue=Object.values(stiScreening)\n    const stiCount=actualStiTrue.filter((x)=> x==='true')\n    \n    const [tbCount, settbCount] = useState(0);\n    const handleInputChangeTbScreening = e => { \n        //setErrors({...temp, [e.target.name]:\"\"}) \n        \n        if(e.target.value==='true') {\n            const newcount = tbCount +1\n            if(newcount>=0 && newcount <=5){\n                settbCount(newcount)\n            }\n        }\n        if(e.target.value==='false') {\n            const newcount = tbCount -1\n            //settbCount(newcount)\n            if(newcount <=0 ){\n                \n                settbCount(0)\n            }else{\n                settbCount(newcount)\n            }\n        } \n        setTbScreening ({...tbScreening,  [e.target.name]: e.target.value});          \n    }\n     /*****  Validation  */\n     /*****  Validation  */\n     const validate = () => {\n        //HTS FORM VALIDATION\n           //temp.previousTestedHIVNegative = knowledgeAssessment.previousTestedHIVNegative ? \"\" : \"This field is required.\"\n        //    {knowledgeAssessment.previousTestedHIVNegative==='true' && ( temp.timeLastHIVNegativeTestResult = knowledgeAssessment.timeLastHIVNegativeTestResult ? \"\" : \"This field is required.\")}\n        //    temp.clientPregnant = knowledgeAssessment.clientPregnant ? \"\" : \"This field is required.\"\n        //    temp.clientInformHivTransRoutes = knowledgeAssessment.clientInformHivTransRoutes ? \"\" : \"This field is required.\"\n        //    temp.clientInformRiskkHivTrans = knowledgeAssessment.clientInformRiskkHivTrans ? \"\" : \"This field is required.\"\n        //    temp.clientInformPreventingsHivTrans = knowledgeAssessment.clientInformPreventingsHivTrans ? \"\" : \"This field is required.\"\n        //    temp.clientInformPossibleTestResult = knowledgeAssessment.clientInformPossibleTestResult ? \"\" : \"This field is required.\"\n        //    temp.informConsentHivTest = knowledgeAssessment.informConsentHivTest ? \"\" : \"This field is required.\"  \n\n        //     temp.currentCough = tbScreening.currentCough ? \"\" : \"This field is required.\"\n        //     temp.weightLoss = tbScreening.weightLoss ? \"\" : \"This field is required.\"\n        //     temp.lymphadenopathy = tbScreening.lymphadenopathy ? \"\" : \"This field is required.\"\n        //     temp.fever = tbScreening.fever ? \"\" : \"This field is required.\"\n        //     temp.nightSweats = tbScreening.nightSweats ? \"\" : \"This field is required.\"\n\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.vaginalDischarge = stiScreening.vaginalDischarge ? \"\" : \"This field is required.\" )\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.lowerAbdominalPains = stiScreening.lowerAbdominalPains ? \"\" : \"This field is required.\")\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.urethralDischarge = stiScreening.urethralDischarge ? \"\" : \"This field is required.\")\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsOfScrotal = stiScreening.complaintsOfScrotal ? \"\" : \"This field is required.\")\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsGenitalSore = stiScreening.complaintsGenitalSore ? \"\" : \"This field is required.\")\n \n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.everHadSexualIntercourse = riskAssessment.everHadSexualIntercourse ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.bloodtransInlastThreeMonths = riskAssessment.bloodtransInlastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithRegularPartnerLastThreeMonths = riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.unprotectedVaginalSex = riskAssessment.unprotectedVaginalSex ? \"\" : \"This field is required.\")\n\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedAnalSex = riskAssessment.uprotectedAnalSex ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.sexUnderInfluence = riskAssessment.sexUnderInfluence ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.moreThanOneSexPartnerLastThreeMonths = riskAssessment.moreThanOneSexPartnerLastThreeMonths ? \"\" : \"This field is required.\")\n            \n            \n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.experiencePain = riskAssessment.experiencePain ? \"\" : \"This field is required.\")\n\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.haveSexWithoutCondom = riskAssessment.haveSexWithoutCondom ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.abuseDrug = riskAssessment.abuseDrug ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.bloodTransfusion = riskAssessment.bloodTransfusion ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.consistentWeightFeverNightCough = riskAssessment.consistentWeightFeverNightCough ? \"\" : \"This field is required.\")\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.soldPaidVaginalSex = riskAssessment.soldPaidVaginalSex ? \"\" : \"This field is required.\")\n\n            // temp.sexPartnerHivPositive = tbScreening.sexPartnerHivPositive ? \"\" : \"This field is required.\"\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.newDiagnosedHivlastThreeMonths = tbScreening.newDiagnosedHivlastThreeMonths ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.currentlyArvForPmtct = tbScreening.currentlyArvForPmtct ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && ( temp.knowHivPositiveOnArv = tbScreening.knowHivPositiveOnArv ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.knowHivPositiveAfterLostToFollowUp = tbScreening.knowHivPositiveAfterLostToFollowUp ? \"\" : \"This field is required.\")}\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.uprotectedAnalSex = tbScreening.uprotectedAnalSex ? \"\" : \"This field is required.\")}\n            \n            setErrors({ ...temp })\n        return Object.values(temp).every(x => x === \"\")\n    }\n    const handleSubmit =(e)=>{\n        e.preventDefault();\n        let modality = getCheckModality(\n          props.patientObj?.riskStratificationResponseDto?.testingSetting\n        );\n              let latestForm = getNextForm(\n                \"Pre_Test_Counseling\",\n                props.patientAge,\n                modality,\n                \"unknown\"\n              );\n        if(validate()){\n            setSaving(true);\n            objValues.htsClientId= clientId\n            objValues.knowledgeAssessment= knowledgeAssessment\n            objValues.personId= patientID\n            objValues.riskAssessment= riskAssessment\n            objValues.stiScreening=stiScreening\n            objValues.tbScreening=tbScreening\n            objValues.sexPartnerRiskAssessment=riskAssessmentPartner\n            axios.put(`${baseUrl}hts/${clientId}/pre-test-counseling`,objValues,\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\n            \n            )\n            .then(response => {\n                setSaving(false);\n                props.setPatientObj({...props.patientObj, \n                    knowledgeAssessment: response.data.knowledgeAssessment,\n                    riskAssessment: response.data.riskAssessment,\n                    stiScreening: response.data.stiScreening,\n                    tbScreening: response.data.tbScreening,\n                    sexPartnerRiskAssessment: response.data.sexPartnerRiskAssessment,\n                  }\n                  );             \n                     //toast.success(\"Risk Assesment successful\");\n                handleItemClick(latestForm[0], latestForm[1]);\n\n            })\n            .catch(error => {\n                setSaving(false);\n                if(error.response && error.response.data){\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\n                    toast.error(errorMessage);\n                }\n                else{\n                    toast.error(\"Something went wrong. Please try again...\");\n                }\n            });\n        }else{\n            toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\n                \n        }\n    }\n\n    return (\n        <>\n            <Card className={classes.root}>\n                <CardBody>\n               \n                <h2>PRE TEST COUNSELING</h2>\n                    <form >\n                        <div className=\"row\">\n\n                        <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'rgb(0,181,173)', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Knowledge Assessment</div>\n                     \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Previously tested HIV negative <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"previousTestedHIVNegative\"\n                                        id=\"previousTestedHIVNegative\"\n                                        value={knowledgeAssessment.previousTestedHIVNegative}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.previousTestedHIVNegative !==\"\" ? (\n                                    <span className={classes.error}>{errors.previousTestedHIVNegative}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            {knowledgeAssessment.previousTestedHIVNegative==='true' && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Time of last HIV Negative test Result</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"timeLastHIVNegativeTestResult\"\n                                        id=\"timeLastHIVNegativeTestResult\"\n                                        value={knowledgeAssessment.timeLastHIVNegativeTestResult}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"<1\"> {\"< 1\"} month</option>\n                                        <option value=\"1-3 Months\">1-3 Months</option>\n                                        <option value=\"4-6 Months\">4-6 Months</option>\n                                        <option value=\">6 Months\"> {\">6\"} Months</option>\n                                        {\n                                            knowledgeAssessment.previousTestedHIVNegative !== \"true\" && <option value=\"Never\"> Never</option>\n                                        }\n                                        \n                                    </select>\n                                    {errors.timeLastHIVNegativeTestResult !==\"\" ? (\n                                    <span className={classes.error}>{errors.timeLastHIVNegativeTestResult}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            {sex ==='Female' && (\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client pregnant </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientPregnant\"\n                                        id=\"clientPregnant\"\n                                        value={knowledgeAssessment.clientPregnant}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                        disabled={true}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientPregnant !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientPregnant}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                             )}\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed about HIV transmission routes </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformHivTransRoutes\"\n                                        id=\"clientInformHivTransRoutes\"\n                                        value={knowledgeAssessment.clientInformHivTransRoutes}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformHivTransRoutes !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformHivTransRoutes}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed about risk factors for HIV transmission </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformRiskkHivTrans\"\n                                        id=\"clientInformRiskkHivTrans\"\n                                        value={knowledgeAssessment.clientInformRiskkHivTrans}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformRiskkHivTrans !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformRiskkHivTrans}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed on preventing HIV transmission methods </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformPreventingsHivTrans\"\n                                        id=\"clientInformPreventingsHivTrans\"\n                                        value={knowledgeAssessment.clientInformPreventingsHivTrans}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformPreventingsHivTrans !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformPreventingsHivTrans}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Client informed about possible test results </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"clientInformPossibleTestResult\"\n                                        id=\"clientInformPossibleTestResult\"\n                                        value={knowledgeAssessment.clientInformPossibleTestResult}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.clientInformPossibleTestResult !==\"\" ? (\n                                    <span className={classes.error}>{errors.clientInformPossibleTestResult}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Informed consent for HIV testing given </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"informConsentHivTest\"\n                                        id=\"informConsentHivTest\"\n                                        value={knowledgeAssessment.informConsentHivTest}\n                                        onChange={handleInputChangeKnowledgeAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.informConsentHivTest !==\"\" ? (\n                                    <span className={classes.error}>{errors.informConsentHivTest}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <hr/>\n                            <br/>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#000', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Clinical TB screening</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Current cough </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"currentCough\"\n                                        id=\"currentCough\"\n                                        value={tbScreening.currentCough}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.currentCough !==\"\" ? (\n                                    <span className={classes.error}>{errors.currentCough}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Weight loss </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"weightLoss\"\n                                        id=\"weightLoss\"\n                                        value={tbScreening.weightLoss}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.weightLoss !==\"\" ? (\n                                    <span className={classes.error}>{errors.weightLoss}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Lymphadenopathy (swelling of the lymph nodes) </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lymphadenopathy\"\n                                        id=\"lymphadenopathy\"\n                                        value={tbScreening.lymphadenopathy}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lymphadenopathy !==\"\" ? (\n                                    <span className={classes.error}>{errors.lymphadenopathy}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Fever </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"fever\"\n                                        id=\"fever\"\n                                        value={tbScreening.fever}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.fever !==\"\" ? (\n                                    <span className={classes.error}>{errors.fever}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Night sweats</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"nightSweats\"\n                                        id=\"nightSweats\"\n                                        value={tbScreening.nightSweats}\n                                        onChange={handleInputChangeTbScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.nightSweats !==\"\" ? (\n                                    <span className={classes.error}>{errors.nightSweats}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <Message warning>\n                                <h4>TB Screening score (calculate the sum of the TB assessment) If score {\">= 1\"}, test for Xper MTB RIF or refer to TB service </h4>\n                                <b>Score : {tbCount}</b>\n                            </Message>\n                            <hr/>\n                            <br/>\n                           {props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && ( <>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Ever had sexual intercourse <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"everHadSexualIntercourse\"\n                                        id=\"everHadSexualIntercourse\"\n                                        value={riskAssessment.everHadSexualIntercourse}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.everHadSexualIntercourse !==\"\" ? (\n                                    <span className={classes.error}>{errors.everHadSexualIntercourse}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Blood transfusion in last 3 months <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"bloodtransInlastThreeMonths\"\n                                        id=\"bloodtransInlastThreeMonths\"\n                                        value={riskAssessment.bloodtransInlastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.bloodtransInlastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.bloodtransInlastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\n                                <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with casual partner in last 3 months <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedSexWithCasualLastThreeMonths\"\n                                        id=\"uprotectedSexWithCasualLastThreeMonths\"\n                                        value={riskAssessment.uprotectedSexWithCasualLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedSexWithCasualLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedSexWithCasualLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\n                                <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected sex with regular partner in the last 3months <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                                        id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\n                                        value={riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedSexWithRegularPartnerLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\n                                <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected vaginal sex <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"unprotectedVaginalSex\"\n                                        id=\"unprotectedVaginalSex\"\n                                        value={riskAssessment.unprotectedVaginalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.unprotectedVaginalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.unprotectedVaginalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\n                                <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected Anal sex <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedAnalSex\"\n                                        id=\"uprotectedAnalSex\"\n                                        value={riskAssessment.uprotectedAnalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedAnalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedAnalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            )}\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\n                                <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>STI in last 3 months <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"stiLastThreeMonths\"\n                                        id=\"stiLastThreeMonths\"\n                                        value={riskAssessment.stiLastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.stiLastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.stiLastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\n                                <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Sex under the influence of drugs or alcohol <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sexUnderInfluence\"\n                                        id=\"sexUnderInfluence\"\n                                        value={riskAssessment.sexUnderInfluence}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.sexUnderInfluence !==\"\" ? (\n                                    <span className={classes.error}>{errors.sexUnderInfluence}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            )}\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\n                                 <div className=\"form-group  col-md-4\">\n                                 <FormGroup>\n                                     <Label>More than 1 sex partner during last 3 months <span style={{ color:\"red\"}}> *</span></Label>\n                                     <select\n                                         className=\"form-control\"\n                                         name=\"moreThanOneSexPartnerLastThreeMonths\"\n                                         id=\"moreThanOneSexPartnerLastThreeMonths\"\n                                         value={riskAssessment.moreThanOneSexPartnerLastThreeMonths}\n                                         onChange={handleInputChangeRiskAssessment}\n                                         style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                     >\n                                         <option value={\"\"}></option>\n                                         <option value=\"true\">Yes</option>\n                                         <option value=\"false\">No</option>\n                                         \n                                     </select>\n                                     {errors.moreThanOneSexPartnerLastThreeMonths !==\"\" ? (\n                                     <span className={classes.error}>{errors.moreThanOneSexPartnerLastThreeMonths}</span>\n                                     ) : \"\" }\n                                 </FormGroup>\n                             </div>\n                            )}\n                            <Message warning>\n                                <h4>  Risk assessment score (sum of all 7 answers)</h4>\n                                <b>Score : {riskCount.length}</b>\n                            </Message>\n                            <hr/>\n                            <br/>\n                            </>)}\n                            {props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && ( <>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/your partner experienced lower abdominal pain, smelly discharge, blisters and wounds around you/partner vagina, penis anus or mouth? <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"experiencePain\"\n                                        id=\"experiencePain\"\n                                        value={riskAssessment.experiencePain}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.experiencePain !==\"\" ? (\n                                    <span className={classes.error}>{errors.experiencePain}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner had sex without a condom with someone of unknown HIV status, or you/partner raped by person with unknown HIV status? <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"haveSexWithoutCondom\"\n                                        id=\"haveSexWithoutCondom\"\n                                        value={riskAssessment.haveSexWithoutCondom}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.haveSexWithoutCondom !==\"\" ? (\n                                    <span className={classes.error}>{errors.haveSexWithoutCondom}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you had a condom burst with your partner during sexual intercourse? <span style={{ color:\"red\"}}> *</span> </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"haveCondomBurst\"\n                                        id=\"haveCondomBurst\"\n                                        value={riskAssessment.haveCondomBurst}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.haveCondomBurst !==\"\" ? (\n                                    <span className={classes.error}>{errors.haveCondomBurst}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Do you/partner share needles/syringes, other sharp objects or used abuse drug substances of any kind? <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"abuseDrug\"\n                                        id=\"abuseDrug\"\n                                        value={riskAssessment.abuseDrug}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.abuseDrug !==\"\" ? (\n                                    <span className={classes.error}>{errors.abuseDrug}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner had any blood or blood product transfusion? <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"bloodTransfusion\"\n                                        id=\"bloodTransfusion\"\n                                        value={riskAssessment.bloodTransfusion}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.bloodTransfusion !==\"\" ? (\n                                    <span className={classes.error}>{errors.bloodTransfusion}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner experienced coughing, weight loss, fever, night sweats consistently? <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"consistentWeightFeverNightCough\"\n                                        id=\"consistentWeightFeverNightCough\"\n                                        value={riskAssessment.consistentWeightFeverNightCough}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.consistentWeightFeverNightCough !==\"\" ? (\n                                    <span className={classes.error}>{errors.consistentWeightFeverNightCough}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you/partner paid or sold vaginal, anal or oral sex? <span style={{ color:\"red\"}}> *</span></Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"soldPaidVaginalSex\"\n                                        id=\"soldPaidVaginalSex\"\n                                        value={riskAssessment.soldPaidVaginalSex}\n                                        onChange={handleInputChangeRiskAssessment}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.soldPaidVaginalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.soldPaidVaginalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <Message warning>\n                                <h4>  Risk assessment score (sum of all 7 answers)</h4>\n                                <b>Score :{riskCount.length}</b>\n                            </Message>\n                            <hr/>\n                            <br/>\n                            </>)}\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Sex Partner Risk Assessment (Last 3 months)</div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Have you had sex with a partner who is HIV positive? </Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"sexPartnerHivPositive\"\n                                        id=\"sexPartnerHivPositive\"\n                                        value={riskAssessmentPartner.sexPartnerHivPositive}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.sexPartnerHivPositive !==\"\" ? (\n                                    <span className={classes.error}>{errors.sexPartnerHivPositive}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            {riskAssessmentPartner.sexPartnerHivPositive==='true' && (<>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Is sex partner newly diagnosed with HIV and started treatment less than 3-6 months ago?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"newDiagnosedHivlastThreeMonths\"\n                                        id=\"newDiagnosedHivlastThreeMonths\"\n                                        value={riskAssessmentPartner.newDiagnosedHivlastThreeMonths}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.newDiagnosedHivlastThreeMonths !==\"\" ? (\n                                    <span className={classes.error}>{errors.newDiagnosedHivlastThreeMonths}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Is sex partner pregnant and currently receiving ARV for PMTCT?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"currentlyArvForPmtct\"\n                                        id=\"currentlyArvForPmtct\"\n                                        value={riskAssessmentPartner.currentlyArvForPmtct}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.currentlyArvForPmtct !==\"\" ? (\n                                    <span className={classes.error}>{errors.currentlyArvForPmtct}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Known HIV positive partner on ARV with an unsurpressed VL</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"knowHivPositiveOnArv\"\n                                        id=\"knowHivPositiveOnArv\"\n                                        value={riskAssessmentPartner.knowHivPositiveOnArv}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.knowHivPositiveOnArv !==\"\" ? (\n                                    <span className={classes.error}>{errors.knowHivPositiveOnArv}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Known HIV positive recently returned to treatment after being lost to follow up</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"knowHivPositiveAfterLostToFollowUp\"\n                                        id=\"knowHivPositiveAfterLostToFollowUp\"\n                                        value={riskAssessmentPartner.knowHivPositiveAfterLostToFollowUp}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.knowHivPositiveAfterLostToFollowUp !==\"\" ? (\n                                    <span className={classes.error}>{errors.knowHivPositiveAfterLostToFollowUp}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Unprotected Anal sex</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"uprotectedAnalSex\"\n                                        id=\"uprotectedAnalSex\"\n                                        value={riskAssessmentPartner.uprotectedAnalSex}\n                                        onChange={handleInputChangeRiskAssessmentPartner}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.uprotectedAnalSex !==\"\" ? (\n                                    <span className={classes.error}>{errors.uprotectedAnalSex}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            </>)}\n                            <Message warning>\n                                <h4>Sex Partner Risk Assessment score (sum of all 6 answers)</h4>\n                                <b>Score :{sexPartRiskCount.length}</b>\n                            </Message>        \n                            \n                            <hr/>\n                            <br/>\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#014D88', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Syndromic STI Screening</div>\n                            {props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (\n                            <>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of vaginal discharge or burning when urinating?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"vaginalDischarge\"\n                                        id=\"vaginalDischarge\"\n                                        value={stiScreening.vaginalDischarge}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.vaginalDischarge !==\"\" ? (\n                                    <span className={classes.error}>{errors.vaginalDischarge}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of lower abdominal pains with or without vaginal discharge?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"lowerAbdominalPains\"\n                                        id=\"lowerAbdominalPains\"\n                                        value={stiScreening.lowerAbdominalPains}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.lowerAbdominalPains !==\"\" ? (\n                                    <span className={classes.error}>{errors.lowerAbdominalPains}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            </>)}\n                            {props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (\n                            <>\n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of urethral discharge or burning when urinating?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"urethralDischarge\"\n                                        id=\"urethralDischarge\"\n                                        value={stiScreening.urethralDischarge}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.urethralDischarge !==\"\" ? (\n                                    <span className={classes.error}>{errors.urethralDischarge}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of scrotal swelling and pain</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"complaintsOfScrotal\"\n                                        id=\"complaintsOfScrotal\"\n                                        value={stiScreening.complaintsOfScrotal}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.complaintsOfScrotal !==\"\" ? (\n                                    <span className={classes.error}>{errors.complaintsOfScrotal}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div> \n                            <div className=\"form-group  col-md-4\">\n                                <FormGroup>\n                                    <Label>Complaints of genital sore(s) or swollen inguinal lymph nodes with or without pains?</Label>\n                                    <select\n                                        className=\"form-control\"\n                                        name=\"complaintsGenitalSore\"\n                                        id=\"complaintsGenitalSore\"\n                                        value={stiScreening.complaintsGenitalSore}\n                                        onChange={handleInputChangeStiScreening}\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\n                                    >\n                                        <option value={\"\"}></option>\n                                        <option value=\"true\">Yes</option>\n                                        <option value=\"false\">No</option>\n                                        \n                                    </select>\n                                    {errors.complaintsGenitalSore !==\"\" ? (\n                                    <span className={classes.error}>{errors.complaintsGenitalSore}</span>\n                                    ) : \"\" }\n                                </FormGroup>\n                            </div>\n                            </>)} \n                            <Message warning>\n                                <h4>Calculate the sum of the STI screening. If {\">= \"}1, should be referred for STI test </h4>\n                                <b>Score :{stiCount.length}</b>\n                            </Message>\n                           \n                            {saving ? <Spinner /> : \"\"}\n                            <br />\n                            <div className=\"row\">\n                            <div className=\"form-group mb-3 col-md-12\">\n                            {/* <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('basic','basic')}/> */}\n                            <Button content='Save & Continue' icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit} disabled={saving}/>\n                            </div>\n                            </div>\n                        </div>\n                    </form>\n                </CardBody>\n            </Card>                                 \n        </>\n    );\n};\n\nexport default BasicInfo","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/ClientReferral/ReferralUnit.js",["1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279"],"import { makeStyles } from \"@material-ui/core/styles\";\nimport * as moment from \"moment\";\nimport { Card } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\nimport PhoneInput from \"react-phone-input-2\";\nimport Select from \"react-select\";\n// import { getAcount } from \"../../../../utility\";\nimport Cookies from \"js-cookie\";\nimport {\n  getAllGenders,\n  alphabetOnly,\n  getAllProvinces,\n  getAllCountry,\n  getAllStateByCountryId,\n} from \"../../../../../utility\";\n// import {calculate_age} from \"../../utils\";\nimport { calculate_age } from \"../../.././utils\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { CardBody, FormGroup, Input, Label } from \"reactstrap\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n  success: {\n    color: \"green\",\n    fontSize: \"12.8px\",\n    fontWeight: \"bold\",\n  },\n}));\n\nconst ReferralUnit = (props) => {\n  const patientObj = props.patientObj;\n  const classes = useStyles();\n  const [errors, setErrors] = useState({});\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [saving, setSaving] = useState(false);\n  let temp = { ...errors };\n  const [open, setOpen] = React.useState(false);\n  const toggle = () => setOpen(!open);\n  const [setting, setSetting] = useState([]);\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n\n  const [states, setStates] = useState([]);\n  const [genders, setGenders] = useState([]);\n  const [hivStatus, setHivStatus] = useState([]);\n  const [serviceNeeded, setServiceNeeded] = useState([]);\n\n  const [facilityName, setFacilityName] = useState(Cookies.get(\"facilityName\"));\n  const [allFacilities, setAllFacilities] = useState([]);\n\n  const [statesOfTheReceivingFacility, setStateOfTheReceivingFacility] =\n    useState([]);\n  const [lgasOfTheReceivingFacility, setLgasOfTheReceivingFacility] = useState(\n    []\n  );\n  const [receivingFacilities, setReceivingFacilities] = useState([]);\n  const [receivingFacility, setReceivingFacility] = useState([]);\n  const [selectedReceivingState, setSelectedReceivingState] = useState({});\n  const [selectedReceivingFacility, setSelectedReceivingFacility] = useState(\n    {}\n  );\n  const [selectedReceivingLga, setSelectedReceivingLga] = useState({});\n  const history = useHistory();\n\n  const [payload, setPayload] = useState({\n    dateVisit: \"\",\n    firstName: props?.patientObj?.personResponseDto?.firstName,\n    middleName: props?.patientObj?.personResponseDto?.otherName,\n    lastName: props?.patientObj?.personResponseDto?.surname,\n    hospitalNumber:\n      props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\n    countryId: \"1\",\n    stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\n    province: Number(\n      props?.patientObj?.personResponseDto?.address?.address[0]?.district\n    ),\n    address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\n    landmark: \"\",\n    phoneNumber:\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\n        ?.value,\n    sexId: props?.patientObj?.personResponseDto?.gender?.id,\n    dob: props?.patientObj.personResponseDto?.dateOfBirth,\n    age: \"\",\n    dateOfBirth: props?.patientObj.personResponseDto?.dateOfBirth,\n    hivStatus: props?.patientObj?.hivTestResult2\n      ? props?.patientObj?.hivTestResult2\n      : props?.patientObj?.hivTestResult\n      ? props?.patientObj?.hivTestResult\n      : \"\",\n    referredFromFacility: \"\",\n    nameOfPersonReferringClient: \"\",\n    nameOfReferringFacility: Cookies.get(\"facilityName\"),\n    addressOfReferringFacility: \"\",\n    phoneNoOfReferringFacility: \"\",\n    referredTo: \"\",\n    nameOfContactPerson: \"\",\n    nameOfReceivingFacility: \"\",\n    addressOfReceivingFacility: \"\",\n    phoneNoOfReceivingFacility: \"\",\n    isDateOfBirthEstimated: false,\n    serviceNeeded: \"\",\n    comments: \"\",\n    receivingFacilityStateName: \"\",\n    receivingFacilityLgaNam: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\n    htsClientUuid: props && props.patientObj ? props.patientObj?.uuid : \"\",\n  });\n\n\n  const getProvincesWithId = (id) => {\n    getAllProvinces(id)\n      .then((res) => {\n        setProvinces(res);\n      })\n      .catch((e) => {});\n  };\n \n  const loadGenders = useCallback(async () => {\n    getAllGenders()\n      .then((response) => {\n        setGenders(response);\n      })\n      .catch(() => {});\n  }, []);\n\n  useEffect(() => {\n    loadGenders();\n    getCountry();\n    getStateByCountryId();\n    if (props?.patientObj?.personResponseDto?.address?.address[0]?.stateId) {\n      getProvincesWithId(\n        props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\n      );\n    }\n  }, []);\n \n  //Get list of State\n  const getStateByCountryId = () => {\n    getAllStateByCountryId()\n      .then((res) => {\n        setStates(res);\n      })\n      .catch(() => {});\n  };\n  const checkPhoneNumberBasic = (e, inputName) => {\n    if (e) {\n      setErrors({ ...errors, phoneNumber: \"\" });\n    }\n    const limit = 10;\n\n    if (inputName === \"phoneNumber\") {\n      setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\n    } else if (inputName === \"phoneNoOfReferringFacility\") {\n      setPayload({\n        ...payload,\n        phoneNoOfReferringFacility: e.slice(0, limit),\n      });\n    } else if (inputName === \"phoneNoOfReceivingFacility\") {\n      setPayload({ ...payload, phoneNoOfReceivingFacility: e.slice(0, limit) });\n    }\n  };\n\n  // handle Facility Name to slect drop down\n  const handleInputChangeObject = (e) => {\n   \n    setPayload({\n      ...payload,\n      nameOfReceivingFacility: e.name,\n      addressOfReceivingFacility: e.parentParentOrganisationUnitName,\n      // lgaTransferTo: e.parentOrganisationUnitName,\n    });\n    setErrors({ ...errors, nameOfReceivingFacility: \"\" });\n    // setSelectedState(e.parentParentOrganisationUnitName);\n    // setSelectedLga(e.parentOrganisationUnitName);\n  };\n\n  //fetch province\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    if (e.target.value) {\n      setErrors({ ...errors, stateId: \"\" });\n    }\n    setPayload({ ...payload, stateId: e.target.value });\n    getAllProvinces(stateId)\n      .then((res) => {\n        setProvinces(res);\n      })\n      .catch((e) => {});\n  };\n  const getCountry = () => {\n    getAllCountry()\n      .then((res) => {\n        setCountries(res);\n      })\n      .catch((e) => {\n        // console.log(e);\n      });\n\n    // console.log(response);\n  };\n\n  const checkNumberLimit = (e) => {\n    const limit = 11;\n    const acceptedNumber = e.slice(0, limit);\n    return acceptedNumber;\n  };\n  const handleInputChangePhoneNumber = (e, inputName) => {\n    const limit = 11;\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\n    setPayload({ ...payload, [inputName]: NumberValue });\n  };\n\n  // ########################################################################\n  const loadStates = () => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setStateOfTheReceivingFacility(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch states error\" + e);\n      });\n  };\n\n  const loadLGA = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setLgasOfTheReceivingFacility(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch LGA error\" + e);\n      });\n  };\n\n  const loadFacilities = (id) => {\n    axios\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setReceivingFacilities(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  const SERVICE_NEEDED = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n      .then((response) => {\n        if (response.data) {\n          setServiceNeeded(response.data);\n        }\n      })\n      .catch((e) => {\n        // console.log(\"Fetch Facilities error\" + e);\n      });\n  };\n\n  useEffect(() => {\n    loadStates();\n    SERVICE_NEEDED();\n  }, []);\n\n  // ###########################################################################\n  //Get list of HIV STATUS ENROLLMENT\n\n  const handleInputChange = (e) => {\n    setErrors({ ...temp, [e.target.name]: \"\" });\n\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfContactPerson\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (\n      e.target.name === \"nameOfPersonReferringClient\" &&\n      e.target.value !== \"\"\n    ) {\n      const name = alphabetOnly(e.target.value);\n      setPayload({ ...payload, [e.target.name]: name });\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\n      async function getHosiptalNumber() {\n        const hosiptalNumber = e.target.value;\n        const response = await axios.post(\n          `${baseUrl}patient/exist/hospital-number`,\n          hosiptalNumber,\n          {\n            headers: {\n              Authorization: `Bearer ${token}`,\n              \"Content-Type\": \"text/plain\",\n            },\n          }\n        );\n        if (response.data !== true) {\n          setHospitalNumStatus(false);\n          errors.hospitalNumber = \"\";\n        } else {\n          errors.hospitalNumber = \"\";\n          toast.error(\"Error! Hosiptal Number already exist\");\n          setHospitalNumStatus(true);\n        }\n      }\n\n      getHosiptalNumber();\n    } else {\n      setPayload({ ...payload, [e.target.name]: e.target.value });\n    }\n  };\n\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\n        age_now--;\n      }\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //   age_now--;\n      // }\n      payload.age = age_now;\n\n      //setpayload({...payload, age: age_now});\n    } else {\n      setPayload({ ...payload, age: \"\" });\n    }\n    setPayload({ ...payload, [e.target.name]: e.target.value });\n\n    setPayload({ ...payload, dob: e.target.value });\n    if (payload.age !== \"\" && payload.age <= 15) {\n      // props.setHideOtherMenu(true);\n    } else if (payload.age !== \"\" && payload.age > 15) {\n      // props.setHideOtherMenu(true);\n    } else {\n      // props.setHideOtherMenu(true);\n    }\n\n    if (payload.age !== \"\" && payload.age >= 85) {\n      toggle();\n    }\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      payload.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      payload.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      if (e.target.value !== \"\" && e.target.value >= 85) {\n        toggle();\n      }\n      if (e.target.value !== \"\" && e.target.value <= 15) {\n        props.setHideOtherMenu(false);\n      } else if (e.target.value !== \"\" && e.target.value > 15) {\n        props.setHideOtherMenu(true);\n      } else {\n        props.setHideOtherMenu(true);\n      }\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setPayload({ ...payload, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      payload.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setPayload({ ...payload, age: e.target.value });\n  };\n\n  //End of Date of Birth and Age handling\n  /*****  Validation  */\n\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const validate = () => {\n    //HTS FORM VALIDATION\n\n    temp.dateVisit = payload.dateVisit ? \"\" : \"This field is required.\";\n    temp.firstName = payload.firstName ? \"\" : \"This field is required.\";\n    temp.lastName = payload.lastName ? \"\" : \"This field is required.\";\n    temp.stateId = payload.stateId ? \"\" : \"This field is required.\";\n    temp.province = payload.province ? \"\" : \"This field is required.\";\n    // temp.address = payload.address ? \"\" : \"This field is required.\";\n    temp.phoneNumber = payload.phoneNumber ? \"\" : \"This field is required.\";\n    temp.sexId = payload.sexId ? \"\" : \"This field is required.\";\n    temp.dob = payload.dob ? \"\" : \"This field is required.\";\n    // temp.age = payload.age ? \"\" : \"This field is required.\";\n    temp.hivStatus = payload.hivStatus ? \"\" : \"This field is required.\";\n    // temp.stateTransferTo = payload.receivingStateFacility? \"\" : \"This field is required.\";\n    temp.receivingFacilityLgaName = payload.receivingFacilityLgaName\n      ? \"\"\n      : \"This field is required.\";\n    temp.receivingFacilityStateName = payload.receivingFacilityStateName\n      ? \"\"\n      : \"This field is required.\";\n    // temp.referredFromFacility = payload.referredFromFacility\n    //     ? \"\"\n    //     : \"This field is required.\";\n    temp.nameOfPersonReferringClient = payload.nameOfPersonReferringClient\n      ? \"\"\n      : \"This field is required.\";\n\n    temp.nameOfReferringFacility = payload.nameOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.addressOfReferringFacility = payload.addressOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.phoneNoOfReferringFacility = payload.phoneNoOfReferringFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.nameOfContactPerson = payload.nameOfContactPerson\n      ? \"\"\n      : \"This field is required.\";\n    temp.nameOfReceivingFacility = payload.nameOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.addressOfReceivingFacility = payload.addressOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.phoneNoOfReceivingFacility = payload.phoneNoOfReceivingFacility\n      ? \"\"\n      : \"This field is required.\";\n    temp.serviceNeeded = payload.serviceNeeded ? \"\" : \"This field is required.\";\n\n    // temp.referredTo = payload.referredTo ? \"\" : \"This field is required.\";\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (validate()) {\n      try {\n        setSaving(true);\n        await axios.post(`${baseUrl}hts-client-referral`, payload, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setSaving(false);\n        toast.success(\"Record saved successfully\", {\n          position: toast.POSITION.BOTTOM_CENTER,\n        });\n        // props.handleItemClick(\"refferal-history\");\n        history.push(\"/\");\n      } catch (error) {\n        setSaving(false);\n        const errorMessage =\n          error.response?.data?.apierror?.message ||\n          \"Something went wrong, please try again\";\n        toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>Client Referral Form </h2>\n          <br />\n          <form>\n            <div className=\"row\">\n              <div\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\n                style={{\n                  backgroundColor: \"#992E62\",\n                  width: \"125%\",\n                  height: \"35px\",\n                  color: \"#fff\",\n                  fontWeight: \"bold\",\n                }}\n              >\n                Referral Form For Referring Unit\n              </div>\n            \n              <p style={{ color: \"black\", marginBottom: \"20px\" }}>\n                <i>\n                  Note: This form is to be filed by the organization making the\n                  referal (Referring unit or organization)\n                </i>\n              </p>\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"\">\n                      Date <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                      name=\"dateVisit\"\n                      id=\"dateVisit\"\n                      value={payload.dateVisit}\n                      onChange={handleInputChange}\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.25rem\",\n                      }}\n                      // disabled\n                    />\n                    {errors.dateVisit !== \"\" ? (\n                      <span className={classes.error}>{errors.dateVisit}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      First Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"firstName\"\n                      id=\"firstName\"\n                      value={payload.firstName}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.firstName !== \"\" ? (\n                      <span className={classes.error}>{errors.firstName}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>Middle Name</Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"middleName\"\n                      id=\"middleName\"\n                      value={payload.middleName}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Last Name <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"lastName\"\n                      id=\"lastName\"\n                      value={payload.lastName}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.lastName !== \"\" ? (\n                      <span className={classes.error}>{errors.lastName}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"patientId\">\n                      Hospital Number <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"hospitalNumber\"\n                      id=\"hospitalNumber\"\n                      value={payload.hospitalNumber}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.hospitalNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.hospitalNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                    {hospitalNumStatus === true ? (\n                      <span className={classes.error}>\n                        {\"Hospital number already exist\"}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                    {/* {hospitalNumStatus2===true ? (\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\n                                                    ) :\"\"} */}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Country <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"countryId\"\n                      id=\"countryId\"\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      value={payload.countryId}\n                      disabled\n                      //onChange={getStates}\n                    >\n                      <option value={\"\"}>Select</option>\n                      {countries.map((value, index) => (\n                        <option key={index} value={value.id}>\n                          {value.name}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      State <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"stateId\"\n                      id=\"stateId\"\n                      value={payload.stateId}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      onChange={getProvinces}\n                      disabled\n                    >\n                      <option value=\"\">Select</option>\n                      {states.map((value, index) => (\n                        <option key={index} value={value.id}>\n                          {value.name}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.stateId !== \"\" ? (\n                      <span className={classes.error}>{errors.stateId}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Province/District/LGA{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"province\"\n                      id=\"province\"\n                      value={payload.province}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                      onChange={handleInputChange}\n                    >\n                      <option value=\"\">Select</option>\n                      {provinces.map((value, index) => (\n                        <option key={index} value={value.id}>\n                          {value.name}\n                        </option>\n                      ))}\n                    </select>\n                    {errors.province !== \"\" ? (\n                      <span className={classes.error}>{errors.province}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Street Address <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"address\"\n                      id=\"address\"\n                      value={payload.address}\n                      disabled\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.address !== \"\" ? (\n                      <span className={classes.error}>{errors.address}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>Landmark</Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"landmark\"\n                      id=\"landmark\"\n                      value={payload.landmark}\n                      disabled\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n\n                {/*          <div className=\"form-group  col-md-4\">*/}\n                {/*              <FormGroup>*/}\n                {/*                  <Label>*/}\n                {/*                      Phone Number <span style={{color: \"red\"}}> *</span>*/}\n                {/*                  </Label>*/}\n                {/*                  <PhoneInput*/}\n                {/*                      disabled={true}*/}\n                {/*                      containerStyle={{*/}\n                {/*                          width: \"100%\",*/}\n                {/*                          border: \"1px solid #014D88\",*/}\n                {/*                      }}*/}\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                {/*                      country={\"ng\"}*/}\n                {/*                      placeholder=\"(234)7099999999\"*/}\n                {/*                      maxLength={5}*/}\n                {/*                      name=\"phoneNumber\"*/}\n                {/*                      id=\"phoneNumber\"*/}\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                {/*                      value={payload.phoneNumber}*/}\n                {/*                      onChange={(e) => {*/}\n                {/*                          checkPhoneNumberBasic(e, \"phoneNumber\");*/}\n                {/*                      }}*/}\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                {/*                  />*/}\n\n                {/*                  {errors.phoneNumber !== \"\" ? (*/}\n                {/*                      <span className={classes.error}>*/}\n                {/*  {errors.phoneNumber}*/}\n                {/*</span>*/}\n                {/*                  ) : (*/}\n                {/*                      \"\"*/}\n                {/*                  )}*/}\n                {/*              </FormGroup>*/}\n                {/*          </div>*/}\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNumber\"\n                      id=\"phoneNumber\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(e, \"phoneNumber\");\n                      }}\n                      value={payload.phoneNumber}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                      // required\n                    />\n                    {errors.phoneNumber !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNumber}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Sex <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n\n                    <select\n                      className=\"form-control\"\n                      name=\"sexId\"\n                      id=\"sexId\"\n                      onChange={handleInputChange}\n                      value={payload.sexId}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    >\n                      <option value={\"\"}>Select</option>\n                      {genders &&\n                        genders.map((gender, index) => (\n                          <option key={gender.id} value={gender.id}>\n                            {gender.display}\n                          </option>\n                        ))}\n                    </select>\n                    {errors.sexId !== \"\" ? (\n                      <span className={classes.error}>{errors.sexId}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Date Of Birth<span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                      name=\"dob\"\n                      id=\"dob\"\n                      min=\"1929-12-31\"\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                      value={payload.dob}\n                      onChange={handleDobChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.dob !== \"\" ? (\n                      <span className={classes.error}>{errors.dob}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Age <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"number\"\n                      name=\"age\"\n                      id=\"age\"\n                      disabled={ageDisabled}\n                      onChange={payload.age}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      value={calculate_age(\n                        props?.patientObj.personResponseDto?.dateOfBirth\n                          ? props?.patientObj?.personResponseDto?.dateOfBirth\n                          : props?.patientObj?.personResponseDto?.dateOfBirth\n                      )}\n                    />\n                  </FormGroup>\n                </div>\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      HIV Status<span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"hivStatus\"\n                      id=\"hivStatus\"\n                      value={payload.hivStatus}\n                      disabled={ageDisabled}\n                      onChange={handleAgeChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {/*<select*/}\n                    {/*  className=\"form-control\"*/}\n                    {/*  name=\"hivStatus\"*/}\n                    {/*  id=\"hivStatus\"*/}\n                    {/*  onChange={handleInputChange}*/}\n                    {/*  value={payload.hivStatus}*/}\n                    {/*  style={{*/}\n                    {/*    border: \"1px solid #014D88\",*/}\n                    {/*    borderRadius: \"0.2rem\",*/}\n                    {/*  }}*/}\n                    {/*>*/}\n                    {/*<option value={\"\"}>Select</option>*/}\n                    {/*{hivStatus.map((gender, index) => (*/}\n                    {/*  <option key={gender.id} value={gender.id}>*/}\n                    {/*    {gender.display}*/}\n                    {/*  </option>*/}\n                    {/*))}*/}\n                    {/*</select>*/}\n                    {errors.hivStatus !== \"\" ? (\n                      <span className={classes.error}>{errors.hivStatus}</span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Referred from (Department):\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      name=\"referredFromFacility\"\n                      id=\"referredFromFacility\"\n                      value={payload.referredFromFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n\n                    {errors.referredFromFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.referredFromFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Name of Person Referring Client\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"nameOfPersonReferringClient\"\n                      id=\"nameOfPersonReferringClient\"\n                      value={payload.nameOfPersonReferringClient}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.nameOfPersonReferringClient !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfPersonReferringClient}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      <span style={{ color: \"red\" }}> *</span>Name of Referring\n                      Facility\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"nameOfReferringFacility\"\n                      id=\"nameOfReferringFacility\"\n                      value={payload.nameOfReferringFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      disabled\n                    />\n                    {errors.nameOfReferringFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfReferringFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Address of Referring Facility\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"addressOfReferringFacility\"\n                      id=\"addressOfReferringFacility\"\n                      value={payload.addressOfReferringFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                      // disabled\n                    />\n                    {errors.addressOfReferringFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.addressOfReferringFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                {/*          <div className=\"form-group mb-3 col-md-4\">*/}\n                {/*              <FormGroup>*/}\n                {/*                  <Label for=\"firstName\">*/}\n                {/*                      Phone Number of Referring Facility*/}\n                {/*                      /!* <span style={{ color: \"red\" }}> *</span> *!/*/}\n                {/*                  </Label>*/}\n                {/*                  <PhoneInput*/}\n                {/*                      containerStyle={{*/}\n                {/*                          width: \"100%\",*/}\n                {/*                          border: \"1px solid #014D88\",*/}\n                {/*                      }}*/}\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                {/*                      country={\"ng\"}*/}\n                {/*                      placeholder=\"(234)7099999999\"*/}\n                {/*                      maxLength={5}*/}\n                {/*                      name=\"phoneNoOfReferringFacility\"*/}\n                {/*                      id=\"phoneNoOfReferringFacility\"*/}\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                {/*                      value={payload.phoneNoOfReferringFacility}*/}\n                {/*                      onChange={(e) => {*/}\n                {/*                          checkPhoneNumberBasic(e, \"phoneNoOfReferringFacility\");*/}\n                {/*                      }}*/}\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                {/*                  />*/}\n\n                {/*                  {errors.phoneNoOfReferringFacility !== \"\" ? (*/}\n                {/*                      <span className={classes.error}>*/}\n                {/*  {errors.phoneNoOfReferringFacility}*/}\n                {/*</span>*/}\n                {/*                  ) : (*/}\n                {/*                      \"\"*/}\n                {/*                  )}*/}\n                {/*              </FormGroup>*/}\n                {/*          </div>*/}\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone Number of Referring Facility{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNoOfReferringFacility\"\n                      id=\"phoneNoOfReferringFacility\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(\n                          e,\n                          \"phoneNoOfReferringFacility\"\n                        );\n                      }}\n                      value={payload.phoneNoOfReferringFacility}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.phoneNoOfReferringFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNoOfReferringFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">Referred to (Department)</Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"referredTo\"\n                      id=\"referredTo\"\n                      value={payload.referredTo}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Name of Contact Person:\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"nameOfContactPerson\"\n                      id=\"nameOfContactPerson\"\n                      value={payload.nameOfContactPerson}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.nameOfContactPerson !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfContactPerson}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      Receiving Facility State{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"stateId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      // onChange={loadLGA1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterState =\n                            statesOfTheReceivingFacility.filter((st) => {\n                              return Number(st.id) === Number(e.target.value);\n                            });\n                          setSelectedReceivingState(filterState);\n\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            receivingFacilityStateName: filterState[0].name,\n                          }));\n                        }\n                        loadLGA(e.target.value);\n                      }}\n                    >\n                      <option>Select State</option>\n                      {states.map((state) => (\n                        <option key={state.id} value={state.id}>\n                          {state.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.receivingFacilityStateName !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.receivingFacilityStateName}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      {\" \"}\n                      Receiving Facility LGA{\" \"}\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"lgaId\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      // onChange={loadFacilities1}\n                      onChange={(e) => {\n                        if (e.target.value !== \"\") {\n                          const filterlga = lgasOfTheReceivingFacility.filter(\n                            (lg) => {\n                              return Number(lg.id) === Number(e.target.value);\n                            }\n                          );\n                          setSelectedReceivingLga(filterlga);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            receivingFacilityLgaName: filterlga[0].name,\n                          }));\n                        }\n                        loadFacilities(e.target.value);\n                      }}\n                    >\n                      <option>Select LGA</option>\n                      {lgasOfTheReceivingFacility.map((lga) => (\n                        <option key={lga.id} value={lga.id}>\n                          {lga.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.receivingFacilityLgaName !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.receivingFacilityLgaName}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label\n                      for=\"\"\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\n                    >\n                      Name of Receiving Facility\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\n                    </Label>\n                    <Input\n                      type=\"select\"\n                      name=\"nameOfReceivingFacility\"\n                      style={{\n                        height: \"40px\",\n                        border: \"solid 1px #014d88\",\n                        borderRadius: \"5px\",\n                        fontWeight: \"bolder\",\n                        appearance: \"auto\",\n                      }}\n                      required\n                      onChange={(e) => {\n                        // setPayload(prevPayload => ({ ...prevPayload, facilityTransferTo: e.target.value }));\n                        if (e.target.value !== \"\") {\n                          const filterFacility = receivingFacilities.filter(\n                            (fa) => {\n                              return Number(fa.id) === Number(e.target.value);\n                            }\n                          );\n                          setSelectedReceivingFacility(filterFacility);\n                          setPayload((prevPayload) => ({\n                            ...prevPayload,\n                            nameOfReceivingFacility: filterFacility[0].name,\n                          }));\n                        }\n                      }}\n                    >\n                      <option>Select Facility</option>\n                      {receivingFacilities.map((facility) => (\n                        <option key={facility.id} value={facility.id}>\n                          {facility.name}\n                        </option>\n                      ))}\n                    </Input>\n                    {errors.nameOfReceivingFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.nameOfReceivingFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Address of the Receiving Facility\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"text\"\n                      name=\"addressOfReceivingFacility\"\n                      id=\"addressOfReceivingFacility\"\n                      value={payload.addressOfReceivingFacility}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n                {/*          <div className=\"form-group mb-3 col-md-4\">*/}\n                {/*              <FormGroup>*/}\n                {/*                  <Label for=\"firstName\">*/}\n                {/*                      Phone No of Receiving Facility*/}\n                {/*                      <span style={{color: \"red\"}}> *</span>*/}\n                {/*                  </Label>*/}\n                {/*                  <PhoneInput*/}\n                {/*                      containerStyle={{*/}\n                {/*                          width: \"100%\",*/}\n                {/*                          border: \"1px solid #014D88\",*/}\n                {/*                      }}*/}\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\n                {/*                      country={\"ng\"}*/}\n                {/*                      placeholder=\"(234)7099999999\"*/}\n                {/*                      maxLength={5}*/}\n                {/*                      name=\"phoneNoOfReceivingFacility\"*/}\n                {/*                      id=\"phoneNoOfReceivingFacility\"*/}\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\n                {/*                      value={payload.phoneNoOfReceivingFacility}*/}\n                {/*                      onChange={(e) => {*/}\n                {/*                          checkPhoneNumberBasic(e, \"phoneNoOfReceivingFacility\");*/}\n                {/*                      }}*/}\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\n                {/*                  />*/}\n\n                {/*                  {errors.phoneNoOfReceivingFacility !== \"\" ? (*/}\n                {/*                      <span className={classes.error}>*/}\n                {/*  {errors.phoneNoOfReceivingFacility}*/}\n                {/*</span>*/}\n                {/*                  ) : (*/}\n                {/*                      \"\"*/}\n                {/*                  )}*/}\n                {/*              </FormGroup>*/}\n                {/*          </div>*/}\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Phone No of Receiving Facility\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"phoneNoOfReceivingFacility\"\n                      id=\"phoneNoOfReceivingFacility\"\n                      onChange={(e) => {\n                        handleInputChangePhoneNumber(\n                          e,\n                          \"phoneNoOfReceivingFacility\"\n                        );\n                      }}\n                      value={payload.phoneNoOfReceivingFacility}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    />\n                    {errors.phoneNoOfReceivingFacility !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.phoneNoOfReceivingFacility}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-4\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Services needed\n                      <span style={{ color: \"red\" }}> *</span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"serviceNeeded\"\n                      id=\"serviceNeeded\"\n                      onChange={handleInputChange}\n                      value={payload.serviceNeeded}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}>Select Service</option>\n                      {serviceNeeded.map((value, index) => (\n                        <option key={value.id} value={value.code}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n\n                    {errors.serviceNeeded !== \"\" ? (\n                      <span className={classes.error}>\n                        {errors.serviceNeeded}\n                      </span>\n                    ) : (\n                      \"\"\n                    )}\n                  </FormGroup>\n                </div>\n                <div className=\"form-group mb-3 col-md-12\">\n                  <FormGroup>\n                    <Label for=\"firstName\">\n                      Comments\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\n                    </Label>\n                    <Input\n                      className=\"form-control\"\n                      type=\"textarea\"\n                      rows=\"4\"\n                      cols=\"7\"\n                      name=\"comments\"\n                      id=\"comments\"\n                      value={payload.comments}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                        height: \"100px\",\n                      }}\n                    />\n                  </FormGroup>\n                </div>\n              </div>\n              <br />\n              <br />\n              {/* <hr /> */}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-12\">\n                  <Button\n                    content=\"Submit\"\n                    type=\"submit\"\n                    // icon=\"right arrow\"\n                    // labelPosition=\"right\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n        {/* <CardBody>\n          <ServicesProvided />\n        </CardBody> */}\n\n        {/* recieving facility  */}\n      </Card>\n      <Modal\n        show={open}\n        toggle={toggle}\n        className=\"fade\"\n        size=\"sm\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            Notification!\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h4>Are you Sure of the Age entered?</h4>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            onClick={toggle}\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default ReferralUnit;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Elicitation/AddIndexContact.js",["1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\nimport * as moment from \"moment\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { token, url as baseUrl } from \"../../../../../api\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\n// import {TiArrowBack} from 'react-icons/ti'\n// import {token, url as baseUrl } from \"../../../api\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { Button } from \"semantic-ui-react\";\n// import 'semantic-ui-css/semantic.min.css';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport Badge from \"@mui/material/Badge\";\nimport PersonIcon from \"@mui/icons-material/Person\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 300,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n    \"& .card-title\": {\n      color: \"#fff\",\n      fontWeight: \"bold\",\n    },\n    \"& .form-control\": {\n      borderRadius: \"0.25rem\",\n      height: \"41px\",\n    },\n    \"& .card-header:first-child\": {\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\n    },\n    \"& .dropdown-toggle::after\": {\n      display: \" block !important\",\n    },\n    \"& select\": {\n      \"-webkit-appearance\": \"listbox !important\",\n    },\n    \"& p\": {\n      color: \"red\",\n    },\n    \"& label\": {\n      fontSize: \"14px\",\n      color: \"#014d88\",\n      fontWeight: \"bold\",\n    },\n  },\n  demo: {\n    backgroundColor: theme.palette.background.default,\n  },\n  inline: {\n    display: \"inline\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"12.8px\",\n  },\n}));\n\nconst AddIndexContact = (props) => {\n  const classes = useStyles();\n\n  const [saving, setSaving] = useState(false);\n  const [sexs, setSexs] = useState([]);\n  const [notificationContact, setNotificationContact] = useState([]);\n  const [ageDisabled, setAgeDisabled] = useState(true);\n  const [indexTesting, setIndexTesting] = useState([]);\n  const [consent, setConsent] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [stateUnitOptions, setStateUnitOptions] = useState([]);\n  const [districtUnitOptions, setDistrictUnitOptions] = useState([]);\n  const [states, setStates] = useState([]);\n  const [provinces, setProvinces] = useState([]);\n  const [elicitedCount, setElicitedCount] = useState(0);\n\n  let temp = { ...errors };\n  const handleItemClick = (page, completedMenu) => {\n    props.handleItemClick(page);\n    if (props.completed.includes(completedMenu)) {\n    } else {\n      props.setCompleted([...props.completed, completedMenu]);\n    }\n  };\n  const [objValuesIndex, setObjValuesIndex] = useState({\n    htsClientId: null,\n    indexNotificationServicesElicitation: {},\n    personId: null,\n  });\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n  const [objValues, setObjValues] = useState({\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    dob: \"\",\n    phoneNumber: \"\",\n    altPhoneNumber: \"\",\n    sex: \"\",\n    htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\n    physicalHurt: \"\",\n    threatenToHurt: \"\",\n    address: \"\",\n    hangOutSpots: \"\",\n    relativeToIndexClient: \"\",\n    currentlyLiveWithPartner: \"\",\n    partnerTestedPositive: \"\",\n    sexuallyUncomfortable: \"\",\n    notificationMethod: \"\",\n    datePartnerCameForTesting: \"\",\n    offeredIns: \"\",\n    acceptedIns: \"\",\n    elicited: \"\",\n    stateId: \"\",\n    lga: \"\",\n    dateTested: \"\",\n    currentHivStatus: \"\",\n  });\n  useEffect(() => {\n    getStates();\n    Sex();\n    NotificationContact();\n    IndexTesting();\n    Consent();\n  }, []);\n\n  function getStateByCountryId(getCountryId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setStates(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  function getProvincesId(getStateId) {\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  }\n\n  const getProvinces = (e) => {\n    const stateId = e.target.value;\n    setObjValues({ ...objValues, stateId: e.target.value });\n    axios\n      .get(\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\n        { headers: { Authorization: `Bearer ${token}` } }\n      )\n      .then((response) => {\n        setProvinces(\n          response.data.sort((x, y) => {\n            return x.id - y.id;\n          })\n        );\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n\n  const getStates = () => {\n    getStateByCountryId(\"1\");\n    setObjValues({ ...objValues, countryId: 1 });\n  };\n\n  //Get list of Genders from\n  const Sex = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setSexs(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  ///CONSENT\tYes\t\ten\tCONSENT\n  const Consent = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setConsent(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  //Get list of IndexTesting\n  const IndexTesting = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexTesting(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const NotificationContact = () => {\n    axios\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        //console.log(response.data);\n        setNotificationContact(response.data);\n      })\n      .catch((error) => {\n        //console.log(error);\n      });\n  };\n  const handleInputChange = (e) => {\n    //setErrors({...temp, [e.target.name]:\"\"})\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    if (e.target.name === \"middleName\" && e.target.value !== \"\") {\n      const name = alphabetOnly(e.target.value);\n      setObjValues({ ...objValues, [e.target.name]: name });\n    }\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\n    //     setHideNumChild(true)\n    // }else{\n    //     setHideNumChild(false)\n    // }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n  };\n  //Date of Birth and Age handle\n  const handleDobChange = (e) => {\n    if (e.target.value) {\n      const today = new Date();\n      const birthDate = new Date(e.target.value);\n      let age_now = today.getFullYear() - birthDate.getFullYear();\n      const m = today.getMonth() - birthDate.getMonth();\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      //     age_now--;\n      // }\n      objValues.age = age_now;\n\n      //setBasicInfo({...basicInfo, age: age_now});\n    } else {\n      setObjValues({ ...objValues, age: \"\" });\n    }\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\n\n    setObjValues({ ...objValues, dob: e.target.value });\n  };\n  const handleDateOfBirthChange = (e) => {\n    if (e.target.value == \"Actual\") {\n      objValues.isDateOfBirthEstimated = false;\n      setAgeDisabled(true);\n    } else if (e.target.value == \"Estimated\") {\n      objValues.isDateOfBirthEstimated = true;\n      setAgeDisabled(false);\n    }\n  };\n  const handleAgeChange = (e) => {\n    if (!ageDisabled && e.target.value) {\n      const currentDate = new Date();\n      currentDate.setDate(15);\n      currentDate.setMonth(5);\n      const estDob = moment(currentDate.toISOString());\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\n    }\n    setObjValues({ ...objValues, age: e.target.value });\n  };\n  //End of Date of Birth and Age handling\n  const checkPhoneNumberBasic = (e, inputName) => {\n    const limit = 10;\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\n  };\n  const alphabetOnly = (value) => {\n    const result = value.replace(/[^a-z]/gi, \"\");\n    return result;\n  };\n  const validate = () => {\n    //HTS FORM VALIDATION\n    //temp.acceptedIns = objValues.acceptedIns ? \"\" : \"This field is required.\"\n    temp.offeredIns = objValues.offeredIns ? \"\" : \"This field is required.\";\n\n    setErrors({ ...temp });\n    return Object.values(temp).every((x) => x == \"\");\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validate()) {\n      setSaving(true);\n      objValues.isDateOfBirthEstimated =\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\n\n      //console.log(\"obj\", objValues);\n      axios\n        .post(`${baseUrl}index-elicitation`, objValues, {\n          headers: { Authorization: `Bearer ${token}` },\n        })\n        .then((response) => {\n          setSaving(false);\n          toast.success(\"Record save successfully\");\n\n          if (\n            objValues.offeredIns !== \"No\" &&\n            objValues.acceptedIns !== \"No\" &&\n            objValues.elicited !== \"No\"\n          ) {\n            setElicitedCount(elicitedCount + 1);\n            setObjValues({\n              firstName: \"\",\n              middleName: \"\",\n              lastName: \"\",\n              dob: \"\",\n              phoneNumber: \"\",\n              altPhoneNumber: \"\",\n              sex: \"\",\n              htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\n              physicalHurt: \"\",\n              threatenToHurt: \"\",\n              address: \"\",\n              hangOutSpots: \"\",\n              relativeToIndexClient: \"\",\n              currentlyLiveWithPartner: \"\",\n              partnerTestedPositive: \"\",\n              sexuallyUncomfortable: \"\",\n              notificationMethod: \"\",\n              datePartnerCameForTesting: \"\",\n              age: \"\",\n              isDateOfBirthEstimated: false,\n              //offeredIns:\"\",\n              //acceptedIns:\"\",\n              //elicited: \"\",\n              stateId: \"\",\n              lga: \"\",\n              dateTested: \"\",\n              currentHivStatus: \"\",\n            });\n          }\n\n          // handleItemClickPage('list')\n        })\n        .catch((error) => {\n          setSaving(false);\n          if (error.response && error.response.data) {\n            let errorMessage =\n              error.response.data.apierror &&\n              error.response.data.apierror.message !== \"\"\n                ? error.response.data.apierror.message\n                : \"Something went wrong, please try again\";\n            toast.error(errorMessage);\n          } else {\n            toast.error(\"Something went wrong. Please try again...\");\n          }\n        });\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardBody>\n          <h2 style={{ color: \"#000\" }}>\n            Index Notification Services - Elicitation\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className=\" float-end  mr-2 mt-2\"\n              onClick={() => handleItemClickPage(\"list\")}\n              //startIcon={<FaUserPlus size=\"10\"/>}\n            >\n              <span style={{ textTransform: \"capitalize\" }}>\n                {\" \"}\n                Back To Client Index List\n              </span>\n            </Button>\n          </h2>\n          {elicitedCount === 0 ? (\n            \"\"\n          ) : (\n            <Badge badgeContent={elicitedCount} color=\"primary\">\n              Elicited Clients\n              <PersonIcon color=\"action\" />\n            </Badge>\n          )}\n          <br />\n          <br />\n          <form>\n            <div className=\"row\">\n              <div className=\"form-group  col-md-4\">\n                <FormGroup>\n                  <Label>\n                    Offered INS ? <span style={{ color: \"red\" }}> *</span>\n                  </Label>\n                  <select\n                    className=\"form-control\"\n                    name=\"offeredIns\"\n                    id=\"offeredIns\"\n                    value={objValues.offeredIns}\n                    onChange={handleInputChange}\n                    style={{\n                      border: \"1px solid #014D88\",\n                      borderRadius: \"0.2rem\",\n                    }}\n                  >\n                    <option value={\"\"}></option>\n                    {consent.map((value) => (\n                      <option key={value.id} value={value.display}>\n                        {value.display}\n                      </option>\n                    ))}\n                  </select>\n                  {errors.offeredIns !== \"\" ? (\n                    <span className={classes.error}>{errors.offeredIns}</span>\n                  ) : (\n                    \"\"\n                  )}\n                </FormGroup>\n              </div>\n              {objValues.offeredIns !== \"\" && objValues.offeredIns !== \"No\" && (\n                <div className=\"form-group  col-md-4\">\n                  <FormGroup>\n                    <Label>\n                      Accepted INS ? <span style={{ color: \"red\" }}> </span>\n                    </Label>\n                    <select\n                      className=\"form-control\"\n                      name=\"acceptedIns\"\n                      id=\"acceptedIns\"\n                      value={objValues.acceptedIns}\n                      onChange={handleInputChange}\n                      style={{\n                        border: \"1px solid #014D88\",\n                        borderRadius: \"0.2rem\",\n                      }}\n                    >\n                      <option value={\"\"}></option>\n                      {consent.map((value) => (\n                        <option key={value.id} value={value.display}>\n                          {value.display}\n                        </option>\n                      ))}\n                    </select>\n                  </FormGroup>\n                </div>\n              )}\n              {objValues.acceptedIns !== \"\" &&\n                objValues.acceptedIns !== \"No\" && (\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Elicited ? <span style={{ color: \"red\" }}> </span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"elicited\"\n                        id=\"elicited\"\n                        value={objValues.elicited}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.display}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                )}\n            </div>\n\n            <div className=\"row\">\n              {objValues.elicited !== \"\" && objValues.elicited !== \"No\" && (\n                <>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">First Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"firstName\"\n                        id=\"firstName\"\n                        value={objValues.firstName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Middle Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"middleName\"\n                        id=\"middleName\"\n                        value={objValues.middleName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Last Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"lastName\"\n                        id=\"lastName\"\n                        value={objValues.lastName}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-2 col-md-2\">\n                    <FormGroup>\n                      <Label>Date Of Birth</Label>\n                      <div className=\"radio\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            value=\"Actual\"\n                            name=\"dateOfBirth\"\n                            defaultChecked\n                            onChange={(e) => handleDateOfBirthChange(e)}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />{\" \"}\n                          Actual\n                        </label>\n                      </div>\n                      <div className=\"radio\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            value=\"Estimated\"\n                            name=\"dateOfBirth\"\n                            onChange={(e) => handleDateOfBirthChange(e)}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.2rem\",\n                            }}\n                          />{\" \"}\n                          Estimated\n                        </label>\n                      </div>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-3\">\n                    <FormGroup>\n                      <Label>Date</Label>\n                      <input\n                        className=\"form-control\"\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"dob\"\n                        id=\"dob\"\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        value={objValues.dob}\n                        onChange={handleDobChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-3\">\n                    <FormGroup>\n                      <Label>Age</Label>\n                      <input\n                        className=\"form-control\"\n                        type=\"number\"\n                        name=\"age\"\n                        id=\"age\"\n                        value={objValues.age}\n                        disabled={ageDisabled}\n                        onChange={handleAgeChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Phone Number</Label>\n\n                      <PhoneInput\n                        containerStyle={{\n                          width: \"100%\",\n                          border: \"1px solid #014D88\",\n                        }}\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                        country={\"ng\"}\n                        placeholder=\"(234)7099999999\"\n                        minLength={10}\n                        name=\"phoneNumber\"\n                        id=\"phoneNumber\"\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                        value={objValues.phoneNumber}\n                        onChange={(e) => {\n                          checkPhoneNumberBasic(e, \"phoneNumber\");\n                        }}\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                      />\n                      {errors.phoneNumber !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.phoneNumber}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Alternative Phone Number</Label>\n                      <PhoneInput\n                        containerStyle={{\n                          width: \"100%\",\n                          border: \"1px solid #014D88\",\n                        }}\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\n                        country={\"ng\"}\n                        placeholder=\"(234)7099999999\"\n                        minLength={10}\n                        name=\"altPhoneNumber\"\n                        id=\"altPhoneNumber\"\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\n                        value={objValues.altPhoneNumber}\n                        onChange={(e) => {\n                          checkPhoneNumberBasic(e, \"altPhoneNumber\");\n                        }}\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Sex <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"sex\"\n                        id=\"sex\"\n                        value={objValues.sex}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {sexs.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        State <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"state\"\n                        id=\"state\"\n                        onChange={getProvinces}\n                        value={objValues.stateId}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {states.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.name}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.stateId !== \"\" ? (\n                        <span className={classes.error}>{errors.stateId}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        LGA <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"lga\"\n                        id=\"lga\"\n                        value={objValues.lga}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {provinces.map((value, index) => (\n                          <option key={index} value={value.id}>\n                            {value.name}\n                          </option>\n                        ))}\n                      </select>\n                      {errors.lga !== \"\" ? (\n                        <span className={classes.error}>{errors.lga}</span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">\n                        Address <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <Input\n                        type=\"text\"\n                        name=\"address\"\n                        id=\"address\"\n                        value={objValues.address}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">Hang-out spots</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"hangOutSpots\"\n                        id=\"hangOutSpots\"\n                        value={objValues.hangOutSpots}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Relationship to Index Client{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"relativeToIndexClient\"\n                        id=\"relativeToIndexClient\"\n                        value={objValues.relativeToIndexClient}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {indexTesting.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Do you currently live with this partner?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"currentlyLiveWithPartner\"\n                        id=\"currentlyLiveWithPartner\"\n                        value={objValues.currentlyLiveWithPartner}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value={\"true\"}>Yes</option>\n                        <option value={\"false\"}>No</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        As far as you know, has this partner ever tested\n                        positive for HIV{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"partnerTestedPositive\"\n                        id=\"partnerTestedPositive\"\n                        value={objValues.partnerTestedPositive}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever hit, kick, slapped or otherwise\n                        physical hurt you?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"physicalHurt\"\n                        id=\"physicalHurt\"\n                        value={objValues.physicalHurt}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever threatened to hurt you?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"threatenToHurt\"\n                        id=\"threatenToHurt\"\n                        value={objValues.threatenToHurt}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Has this partner ever threatened to force you to do\n                        something sexually that made you uncomfortable ?{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"sexuallyUncomfortable\"\n                        id=\"sexuallyUncomfortable\"\n                        value={objValues.sexuallyUncomfortable}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {consent.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        Notification Method selected{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"notificationMethod\"\n                        id=\"notificationMethod\"\n                        value={objValues.notificationMethod}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        {notificationContact.map((value) => (\n                          <option key={value.id} value={value.id}>\n                            {value.display}\n                          </option>\n                        ))}\n                      </select>\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group mb-3 col-md-4\">\n                    <FormGroup>\n                      <Label for=\"\">\n                        If contract by which date will partner come for testing?\n                      </Label>\n                      <Input\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                        name=\"datePartnerCameForTesting\"\n                        id=\"datePartnerCameForTesting\"\n                        value={objValues.datePartnerCameForTesting}\n                        onChange={handleInputChange}\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.25rem\",\n                        }}\n                      />\n                      {errors.datePartnerComeForTesting !== \"\" ? (\n                        <span className={classes.error}>\n                          {errors.datePartnerComeForTesting}\n                        </span>\n                      ) : (\n                        \"\"\n                      )}\n                    </FormGroup>\n                  </div>\n\n                  <div className=\"form-group  col-md-4\">\n                    <FormGroup>\n                      <Label>\n                        HIV Status of Index Client{\" \"}\n                        <span style={{ color: \"red\" }}> *</span>\n                      </Label>\n                      <select\n                        className=\"form-control\"\n                        name=\"currentHivStatus\"\n                        id=\"currentHivStatus\"\n                        value={objValues.currentHivStatus}\n                        onChange={handleInputChange}\n                        style={{\n                          border: \"1px solid #014D88\",\n                          borderRadius: \"0.2rem\",\n                        }}\n                      >\n                        <option value={\"\"}></option>\n                        <option value=\"negative\">Negative</option>\n                        <option value=\"positive\">Positive</option>\n                        <option value=\"unknown\">Unknown</option>\n                      </select>\n                    </FormGroup>\n                  </div>\n                  {objValues.currentHivStatus !== \"\" &&\n                    objValues.currentHivStatus === \"positive\" && (\n                      <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"\">\n                            Date Tested?{\" \"}\n                            <span style={{ color: \"red\" }}> *</span>\n                          </Label>\n                          <Input\n                            type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\n\n                            name=\"dateTested\"\n                            id=\"dateTested\"\n                            value={objValues.dateTested}\n                            onChange={handleInputChange}\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\n                            style={{\n                              border: \"1px solid #014D88\",\n                              borderRadius: \"0.25rem\",\n                            }}\n                          />\n                        </FormGroup>\n                      </div>\n                    )}\n                </>\n              )}\n\n              {saving ? <Spinner /> : \"\"}\n              <br />\n              <div className=\"row\">\n                <div className=\"form-group mb-3 col-md-6\">\n                  <Button\n                    content=\"Save\"\n                    icon=\"save\"\n                    labelPosition=\"left\"\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\n                    onClick={handleSubmit}\n                    disabled={saving}\n                  />\n                </div>\n              </div>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </>\n  );\n};\n\nexport default AddIndexContact;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/NewRegistrationEnrollement/Elicitation/IndexContactList.js",["1297","1298","1299","1300","1301","1302","1303","1304"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../../../api\";\n//import { token as token } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst PatientnHistory = (props) => {\n  const [indexClientList, setIndexClientList] = useState([]);\n  //const [patientObj, setpatientObj] = useState([])\n  const patientId =\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\n  //const [key, setKey] = useState('home');\n  //console.log(props)\n  useEffect(() => {\n    patients();\n  }, []);\n  ///GET LIST OF Patients\n  async function patients() {\n    axios\n      .get(`${baseUrl}hts/${props.patientObj.id}/index-elicitation`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexClientList(response.data);\n      })\n      .catch((error) => {});\n  }\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n  const handleIEditIndex = (page, activePage) => {\n\n    //props.setActivePage({...props.activePage, activePage:\"activePage\", activeObject:row, actionType:actionType})\n    //props.handleIClickPage(page)\n  };\n\n  const calculate_age = (dob) => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now + \" year(s)\";\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\" float-end  mr-2 mt-2\"\n        onClick={() => handleItemClickPage(\"add\")}\n        //startIcon={<FaUserPlus size=\"10\"/>}\n      >\n        <span style={{ textTransform: \"capitalize\" }}>New Index Client </span>\n      </Button>\n      <br />\n      <br />\n      <br />\n      <br />\n      <MaterialTable\n        icons={tableIcons}\n        title=\"List of  client contact\"\n        columns={[\n          { title: \"Name\", field: \"name\" },\n          { title: \"Age\", field: \"age\" },\n          { title: \"Phone Number\", field: \"phone\" },\n          { title: \"Adress\", field: \"address\" },\n          //{ title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        data={indexClientList\n          .filter((b) => b.firstName !== \"\")\n          .map((row) => ({\n            name: row.firstName + \" \" + row.lastName,\n            age: calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n            phone: row.phoneNumber,\n            address: row.address,\n            actions: (\n              <>\n                {/* <Menu.Menu position='right'  >\n                            <Menu.Item >\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\n                                <Dropdown item text='Action'>\n\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\n                                \n                                <Dropdown.Item  \n                                //onClick={()=>handleIEditIndex(row, 'update')}\n                                >\n                                    <Icon name='edit' />Edit</Dropdown.Item>\n                                <Dropdown.Item  \n                                //onClick={()=>LoadDeletePage(row, 'delete')}\n                                > <Icon name='trash' /> Delete</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                                </Button>\n                            </Menu.Item>\n                        </Menu.Menu> */}\n              </>\n            ),\n          }))}\n        options={{\n          headerStyle: {\n            //backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PatientnHistory;\n","/Users/basil/work/lamisplus/HTS/HTS-Module/src/main/webapp/jsx/components/Patient/ContinuesHTSEnrollment/Elicitation/IndexContactList.js",["1305","1306","1307","1308","1309","1310","1311","1312"],"import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport axios from \"axios\";\nimport { url as baseUrl, token } from \"./../../../../../api\";\n//import { token as token } from \"./../../../api\";\nimport { forwardRef } from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport \"@reach/menu-button/styles.css\";\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\nimport moment from \"moment\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    margin: theme.spacing(20),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  cardBottom: {\n    marginBottom: 20,\n  },\n  Select: {\n    height: 45,\n    width: 350,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  input: {\n    display: \"none\",\n  },\n  error: {\n    color: \"#f85032\",\n    fontSize: \"11px\",\n  },\n  success: {\n    color: \"#4BB543 \",\n    fontSize: \"11px\",\n  },\n}));\n\nconst PatientnHistory = (props) => {\n  const [indexClientList, setIndexClientList] = useState([]);\n  //const [patientObj, setpatientObj] = useState([])\n  const patientId =\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\n  //const [key, setKey] = useState('home');\n\n  useEffect(() => {\n    patients();\n  }, []);\n  ///GET LIST OF Patients\n  async function patients() {\n    axios\n      .get(`${baseUrl}hts/${props.patientObj.id}/index-elicitation`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n      .then((response) => {\n        setIndexClientList(response.data);\n      })\n      .catch((error) => {});\n  }\n  const handleItemClickPage = (page) => {\n    props.handleIClickPage(page);\n  };\n  const handleIEditIndex = (page, activePage) => {\n   \n    //props.setActivePage({...props.activePage, activePage:\"activePage\", activeObject:row, actionType:actionType})\n    //props.handleIClickPage(page)\n  };\n\n  const calculate_age = (dob) => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age_now--;\n    }\n    if (age_now === 0) {\n      return m + \" month(s)\";\n    }\n    return age_now + \" year(s)\";\n  };\n\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\" float-end  mr-2 mt-2\"\n        onClick={() => handleItemClickPage(\"add\")}\n        //startIcon={<FaUserPlus size=\"10\"/>}\n      >\n        <span style={{ textTransform: \"capitalize\" }}>New Index Client </span>\n      </Button>\n      <br />\n      <br />\n      <br />\n      <br />\n      <MaterialTable\n        icons={tableIcons}\n        title=\"List of  client contact\"\n        columns={[\n          { title: \"Name\", field: \"name\" },\n          { title: \"Age\", field: \"age\" },\n          { title: \"Phone Number\", field: \"phone\" },\n          { title: \"Adress\", field: \"address\" },\n          //{ title: \"Actions\", field: \"actions\", filtering: false },\n        ]}\n        data={indexClientList\n          .filter((b) => b.firstName !== \"\")\n          .map((row) => ({\n            name: row.firstName + \" \" + row.lastName,\n            age: calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n            phone: row.phoneNumber,\n            address: row.address,\n            actions: (\n              <>\n                {/* <Menu.Menu position='right'  >\n                            <Menu.Item >\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\n                                <Dropdown item text='Action'>\n\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\n                                \n                                <Dropdown.Item  \n                                //onClick={()=>handleIEditIndex(row, 'update')}\n                                >\n                                    <Icon name='edit' />Edit</Dropdown.Item>\n                                <Dropdown.Item  \n                                //onClick={()=>LoadDeletePage(row, 'delete')}\n                                > <Icon name='trash' /> Delete</Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                                </Button>\n                            </Menu.Item>\n                        </Menu.Menu> */}\n              </>\n            ),\n          }))}\n        options={{\n          headerStyle: {\n            //backgroundColor: \"#9F9FA5\",\n            color: \"#000\",\n          },\n          searchFieldStyle: {\n            width: \"200%\",\n            margingLeft: \"250px\",\n          },\n          filtering: false,\n          exportButton: false,\n          searchFieldAlignment: \"left\",\n          pageSizeOptions: [10, 20, 100],\n          pageSize: 10,\n          debounceInterval: 400,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default PatientnHistory;\n",{"ruleId":"1313","severity":1,"message":"1314","line":4,"column":10,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":23},{"ruleId":"1317","replacedBy":"1318"},{"ruleId":"1319","replacedBy":"1320"},{"ruleId":"1313","severity":1,"message":"1321","line":2,"column":26,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1322","line":10,"column":10,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1323","line":10,"column":15,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":19},{"ruleId":"1324","severity":1,"message":"1325","line":4,"column":10,"nodeType":"1326","messageId":"1327","endLine":4,"endColumn":24,"fix":"1328"},{"ruleId":"1313","severity":1,"message":"1329","line":5,"column":10,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1330","line":9,"column":8,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1331","line":14,"column":8,"nodeType":"1315","messageId":"1316","endLine":14,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1332","line":17,"column":8,"nodeType":"1315","messageId":"1316","endLine":17,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1333","line":88,"column":11,"nodeType":"1315","messageId":"1316","endLine":88,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1335","line":3,"column":8,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1336","line":6,"column":26,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1337","line":9,"column":10,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1338","line":13,"column":22,"nodeType":"1315","messageId":"1316","endLine":13,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1339","line":23,"column":8,"nodeType":"1315","messageId":"1316","endLine":23,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1340","line":38,"column":7,"nodeType":"1315","messageId":"1316","endLine":38,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1341","line":54,"column":10,"nodeType":"1315","messageId":"1316","endLine":54,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1342","line":54,"column":18,"nodeType":"1315","messageId":"1316","endLine":54,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1343","line":59,"column":10,"nodeType":"1315","messageId":"1316","endLine":59,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1344","line":62,"column":26,"nodeType":"1315","messageId":"1316","endLine":62,"endColumn":43},{"ruleId":"1313","severity":1,"message":"1345","line":63,"column":21,"nodeType":"1315","messageId":"1316","endLine":63,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1346","line":75,"column":23,"nodeType":"1315","messageId":"1316","endLine":75,"endColumn":36},{"ruleId":"1347","severity":1,"message":"1348","line":288,"column":6,"nodeType":"1349","endLine":288,"endColumn":8,"suggestions":"1350"},{"ruleId":"1351","severity":1,"message":"1352","line":612,"column":34,"nodeType":"1353","messageId":"1354","endLine":612,"endColumn":36},{"ruleId":"1351","severity":1,"message":"1352","line":633,"column":39,"nodeType":"1353","messageId":"1354","endLine":633,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1329","line":27,"column":10,"nodeType":"1315","messageId":"1316","endLine":27,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1355","line":34,"column":8,"nodeType":"1315","messageId":"1316","endLine":34,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1356","line":69,"column":10,"nodeType":"1315","messageId":"1316","endLine":69,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1357","line":69,"column":21,"nodeType":"1315","messageId":"1316","endLine":69,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1358","line":72,"column":10,"nodeType":"1315","messageId":"1316","endLine":72,"endColumn":20},{"ruleId":"1347","severity":1,"message":"1359","line":76,"column":6,"nodeType":"1349","endLine":76,"endColumn":8,"suggestions":"1360"},{"ruleId":"1351","severity":1,"message":"1352","line":111,"column":25,"nodeType":"1353","messageId":"1354","endLine":111,"endColumn":27},{"ruleId":"1351","severity":1,"message":"1352","line":118,"column":25,"nodeType":"1353","messageId":"1354","endLine":118,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1361","line":4,"column":15,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1362","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1363","line":10,"column":8,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1364","line":13,"column":9,"nodeType":"1315","messageId":"1316","endLine":13,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1337","line":16,"column":9,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1365","line":16,"column":27,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1366","line":24,"column":8,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1367","line":107,"column":11,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1368","line":114,"column":26,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1369","line":119,"column":12,"nodeType":"1315","messageId":"1316","endLine":119,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1370","line":119,"column":43,"nodeType":"1315","messageId":"1316","endLine":119,"endColumn":72},{"ruleId":"1313","severity":1,"message":"1371","line":120,"column":12,"nodeType":"1315","messageId":"1316","endLine":120,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1372","line":120,"column":32,"nodeType":"1315","messageId":"1316","endLine":120,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1373","line":121,"column":12,"nodeType":"1315","messageId":"1316","endLine":121,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1374","line":122,"column":12,"nodeType":"1315","messageId":"1316","endLine":122,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1375","line":122,"column":31,"nodeType":"1315","messageId":"1316","endLine":122,"endColumn":51},{"ruleId":"1313","severity":1,"message":"1376","line":219,"column":11,"nodeType":"1315","messageId":"1316","endLine":219,"endColumn":16},{"ruleId":"1351","severity":1,"message":"1352","line":272,"column":51,"nodeType":"1353","messageId":"1354","endLine":272,"endColumn":53},{"ruleId":"1351","severity":1,"message":"1352","line":292,"column":51,"nodeType":"1353","messageId":"1354","endLine":292,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1377","line":542,"column":11,"nodeType":"1315","messageId":"1316","endLine":542,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1378","line":551,"column":11,"nodeType":"1315","messageId":"1316","endLine":551,"endColumn":35},{"ruleId":"1313","severity":1,"message":"1379","line":595,"column":19,"nodeType":"1315","messageId":"1316","endLine":595,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1380","line":642,"column":11,"nodeType":"1315","messageId":"1316","endLine":642,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1381","line":654,"column":11,"nodeType":"1315","messageId":"1316","endLine":654,"endColumn":35},{"ruleId":"1351","severity":1,"message":"1352","line":720,"column":28,"nodeType":"1353","messageId":"1354","endLine":720,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":723,"column":35,"nodeType":"1353","messageId":"1354","endLine":723,"endColumn":37},{"ruleId":"1382","severity":1,"message":"1383","line":1902,"column":45,"nodeType":"1384","messageId":"1385","endLine":1902,"endColumn":47},{"ruleId":"1382","severity":1,"message":"1383","line":1903,"column":45,"nodeType":"1384","messageId":"1385","endLine":1903,"endColumn":47},{"ruleId":"1324","severity":1,"message":"1325","line":5,"column":10,"nodeType":"1326","messageId":"1327","endLine":5,"endColumn":24,"fix":"1386"},{"ruleId":"1313","severity":1,"message":"1329","line":26,"column":10,"nodeType":"1315","messageId":"1316","endLine":26,"endColumn":20},{"ruleId":"1324","severity":1,"message":"1325","line":5,"column":10,"nodeType":"1326","messageId":"1327","endLine":5,"endColumn":24,"fix":"1387"},{"ruleId":"1313","severity":1,"message":"1329","line":26,"column":10,"nodeType":"1315","messageId":"1316","endLine":26,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1336","line":7,"column":26,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1337","line":10,"column":10,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1338","line":15,"column":22,"nodeType":"1315","messageId":"1316","endLine":15,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1388","line":36,"column":8,"nodeType":"1315","messageId":"1316","endLine":36,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1389","line":37,"column":10,"nodeType":"1315","messageId":"1316","endLine":37,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1390","line":37,"column":24,"nodeType":"1315","messageId":"1316","endLine":37,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1391","line":54,"column":9,"nodeType":"1315","messageId":"1316","endLine":54,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1392","line":61,"column":10,"nodeType":"1315","messageId":"1316","endLine":61,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1344","line":73,"column":26,"nodeType":"1315","messageId":"1316","endLine":73,"endColumn":43},{"ruleId":"1313","severity":1,"message":"1346","line":76,"column":23,"nodeType":"1315","messageId":"1316","endLine":76,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1393","line":85,"column":10,"nodeType":"1315","messageId":"1316","endLine":85,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1394","line":85,"column":27,"nodeType":"1315","messageId":"1316","endLine":85,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1395","line":91,"column":9,"nodeType":"1315","messageId":"1316","endLine":91,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1396","line":96,"column":9,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":21},{"ruleId":"1351","severity":1,"message":"1352","line":218,"column":60,"nodeType":"1353","messageId":"1354","endLine":218,"endColumn":62},{"ruleId":"1313","severity":1,"message":"1397","line":24,"column":10,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1398","line":24,"column":16,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1399","line":30,"column":10,"nodeType":"1315","messageId":"1316","endLine":30,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1400","line":31,"column":10,"nodeType":"1315","messageId":"1316","endLine":31,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1401","line":31,"column":16,"nodeType":"1315","messageId":"1316","endLine":31,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1402","line":31,"column":26,"nodeType":"1315","messageId":"1316","endLine":31,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1403","line":31,"column":38,"nodeType":"1315","messageId":"1316","endLine":31,"endColumn":46},{"ruleId":"1313","severity":1,"message":"1404","line":33,"column":10,"nodeType":"1315","messageId":"1316","endLine":33,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1405","line":34,"column":8,"nodeType":"1315","messageId":"1316","endLine":34,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1340","line":60,"column":7,"nodeType":"1315","messageId":"1316","endLine":60,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1333","line":104,"column":9,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":20},{"ruleId":"1347","severity":1,"message":"1406","line":126,"column":6,"nodeType":"1349","endLine":126,"endColumn":8,"suggestions":"1407"},{"ruleId":"1313","severity":1,"message":"1408","line":140,"column":9,"nodeType":"1315","messageId":"1316","endLine":140,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":143,"column":25,"nodeType":"1353","messageId":"1354","endLine":143,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1409","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":38,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1388","line":2,"column":8,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1410","line":4,"column":38,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1411","line":4,"column":47,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":52},{"ruleId":"1313","severity":1,"message":"1412","line":4,"column":54,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1405","line":5,"column":13,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1363","line":8,"column":8,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1336","line":9,"column":10,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1389","line":12,"column":10,"nodeType":"1315","messageId":"1316","endLine":12,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1390","line":12,"column":24,"nodeType":"1315","messageId":"1316","endLine":12,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1413","line":15,"column":40,"nodeType":"1315","messageId":"1316","endLine":15,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1414","line":16,"column":10,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1342","line":92,"column":18,"nodeType":"1315","messageId":"1316","endLine":92,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1415","line":114,"column":7,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":15},{"ruleId":"1351","severity":1,"message":"1352","line":125,"column":45,"nodeType":"1353","messageId":"1354","endLine":125,"endColumn":47},{"ruleId":"1324","severity":1,"message":"1325","line":4,"column":10,"nodeType":"1326","messageId":"1327","endLine":4,"endColumn":24,"fix":"1416"},{"ruleId":"1313","severity":1,"message":"1417","line":28,"column":10,"nodeType":"1315","messageId":"1316","endLine":28,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1418","line":43,"column":10,"nodeType":"1315","messageId":"1316","endLine":43,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1333","line":45,"column":10,"nodeType":"1315","messageId":"1316","endLine":45,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":45,"column":23,"nodeType":"1315","messageId":"1316","endLine":45,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1419","line":48,"column":10,"nodeType":"1315","messageId":"1316","endLine":48,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1420","line":49,"column":10,"nodeType":"1315","messageId":"1316","endLine":49,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1421","line":50,"column":10,"nodeType":"1315","messageId":"1316","endLine":50,"endColumn":29},{"ruleId":"1347","severity":1,"message":"1422","line":125,"column":6,"nodeType":"1349","endLine":125,"endColumn":42,"suggestions":"1423"},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":16,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1409","line":1,"column":29,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1388","line":2,"column":8,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1424","line":4,"column":8,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1412","line":5,"column":52,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":56},{"ruleId":"1313","severity":1,"message":"1405","line":6,"column":13,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1361","line":8,"column":15,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1342","line":95,"column":20,"nodeType":"1315","messageId":"1316","endLine":95,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1425","line":96,"column":12,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1426","line":96,"column":20,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1409","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":38,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1388","line":2,"column":8,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1411","line":3,"column":47,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":52},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1405","line":4,"column":13,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1363","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1336","line":8,"column":10,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1389","line":11,"column":10,"nodeType":"1315","messageId":"1316","endLine":11,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1390","line":11,"column":24,"nodeType":"1315","messageId":"1316","endLine":11,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1427","line":19,"column":19,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1413","line":19,"column":32,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":20,"column":8,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1428","line":23,"column":8,"nodeType":"1315","messageId":"1316","endLine":23,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1429","line":102,"column":10,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":12},{"ruleId":"1313","severity":1,"message":"1430","line":102,"column":14,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1426","line":103,"column":18,"nodeType":"1315","messageId":"1316","endLine":103,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1431","line":104,"column":10,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1432","line":104,"column":23,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":37},{"ruleId":"1313","severity":1,"message":"1341","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1342","line":105,"column":18,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1433","line":106,"column":7,"nodeType":"1315","messageId":"1316","endLine":106,"endColumn":11},{"ruleId":"1313","severity":1,"message":"1434","line":109,"column":10,"nodeType":"1315","messageId":"1316","endLine":109,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1435","line":109,"column":19,"nodeType":"1315","messageId":"1316","endLine":109,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1436","line":110,"column":10,"nodeType":"1315","messageId":"1316","endLine":110,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1437","line":110,"column":29,"nodeType":"1315","messageId":"1316","endLine":110,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1438","line":111,"column":10,"nodeType":"1315","messageId":"1316","endLine":111,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1439","line":111,"column":21,"nodeType":"1315","messageId":"1316","endLine":111,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1440","line":112,"column":10,"nodeType":"1315","messageId":"1316","endLine":112,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1441","line":112,"column":18,"nodeType":"1315","messageId":"1316","endLine":112,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1442","line":113,"column":10,"nodeType":"1315","messageId":"1316","endLine":113,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1443","line":113,"column":19,"nodeType":"1315","messageId":"1316","endLine":113,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1444","line":114,"column":10,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1445","line":114,"column":28,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1446","line":117,"column":10,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1447","line":88,"column":9,"nodeType":"1315","messageId":"1316","endLine":88,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1333","line":96,"column":10,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":96,"column":23,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1448","line":99,"column":10,"nodeType":"1315","messageId":"1316","endLine":99,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1449","line":99,"column":20,"nodeType":"1315","messageId":"1316","endLine":99,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1450","line":101,"column":21,"nodeType":"1315","messageId":"1316","endLine":101,"endColumn":33},{"ruleId":"1347","severity":1,"message":"1451","line":176,"column":6,"nodeType":"1349","endLine":176,"endColumn":48,"suggestions":"1452"},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1363","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1453","line":12,"column":10,"nodeType":"1315","messageId":"1316","endLine":12,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1427","line":24,"column":19,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1454","line":103,"column":10,"nodeType":"1315","messageId":"1316","endLine":103,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1455","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1456","line":105,"column":31,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1434","line":116,"column":10,"nodeType":"1315","messageId":"1316","endLine":116,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1333","line":120,"column":10,"nodeType":"1315","messageId":"1316","endLine":120,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":120,"column":23,"nodeType":"1315","messageId":"1316","endLine":120,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1448","line":126,"column":10,"nodeType":"1315","messageId":"1316","endLine":126,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1449","line":126,"column":20,"nodeType":"1315","messageId":"1316","endLine":126,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1444","line":127,"column":10,"nodeType":"1315","messageId":"1316","endLine":127,"endColumn":26},{"ruleId":"1347","severity":1,"message":"1457","line":184,"column":6,"nodeType":"1349","endLine":184,"endColumn":21,"suggestions":"1458"},{"ruleId":"1347","severity":1,"message":"1459","line":191,"column":6,"nodeType":"1349","endLine":191,"endColumn":8,"suggestions":"1460"},{"ruleId":"1313","severity":1,"message":"1461","line":193,"column":9,"nodeType":"1315","messageId":"1316","endLine":193,"endColumn":26},{"ruleId":"1462","severity":1,"message":"1463","line":212,"column":43,"nodeType":"1464","messageId":"1465","endLine":212,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1466","line":266,"column":13,"nodeType":"1315","messageId":"1316","endLine":266,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1467","line":485,"column":7,"nodeType":"1315","messageId":"1316","endLine":485,"endColumn":10},{"ruleId":"1313","severity":1,"message":"1468","line":659,"column":7,"nodeType":"1315","messageId":"1316","endLine":659,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":826,"column":46,"nodeType":"1353","messageId":"1354","endLine":826,"endColumn":48},{"ruleId":"1469","severity":1,"message":"1470","line":1357,"column":25,"nodeType":"1471","messageId":"1472","endLine":1365,"endColumn":37},{"ruleId":"1324","severity":1,"message":"1325","line":5,"column":10,"nodeType":"1326","messageId":"1327","endLine":5,"endColumn":24,"fix":"1473"},{"ruleId":"1313","severity":1,"message":"1474","line":28,"column":10,"nodeType":"1315","messageId":"1316","endLine":28,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1340","line":57,"column":7,"nodeType":"1315","messageId":"1316","endLine":57,"endColumn":16},{"ruleId":"1347","severity":1,"message":"1475","line":191,"column":6,"nodeType":"1349","endLine":191,"endColumn":24,"suggestions":"1476"},{"ruleId":"1313","severity":1,"message":"1410","line":4,"column":38,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":4,"column":54,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1363","line":8,"column":8,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1427","line":20,"column":19,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1413","line":20,"column":32,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":21,"column":8,"nodeType":"1315","messageId":"1316","endLine":21,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1477","line":22,"column":10,"nodeType":"1315","messageId":"1316","endLine":22,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1478","line":23,"column":10,"nodeType":"1315","messageId":"1316","endLine":23,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1479","line":23,"column":16,"nodeType":"1315","messageId":"1316","endLine":23,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1480","line":23,"column":31,"nodeType":"1315","messageId":"1316","endLine":23,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1481","line":24,"column":8,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1482","line":25,"column":8,"nodeType":"1315","messageId":"1316","endLine":25,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1362","line":27,"column":8,"nodeType":"1315","messageId":"1316","endLine":27,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1483","line":39,"column":10,"nodeType":"1315","messageId":"1316","endLine":39,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1436","line":124,"column":10,"nodeType":"1315","messageId":"1316","endLine":124,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1438","line":125,"column":10,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1484","line":126,"column":10,"nodeType":"1315","messageId":"1316","endLine":126,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1485","line":127,"column":10,"nodeType":"1315","messageId":"1316","endLine":127,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1486","line":127,"column":34,"nodeType":"1315","messageId":"1316","endLine":127,"endColumn":57},{"ruleId":"1313","severity":1,"message":"1356","line":130,"column":10,"nodeType":"1315","messageId":"1316","endLine":130,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1357","line":130,"column":21,"nodeType":"1315","messageId":"1316","endLine":130,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1487","line":134,"column":10,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1488","line":134,"column":31,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1489","line":141,"column":10,"nodeType":"1315","messageId":"1316","endLine":141,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1490","line":141,"column":41,"nodeType":"1315","messageId":"1316","endLine":141,"endColumn":73},{"ruleId":"1313","severity":1,"message":"1432","line":143,"column":23,"nodeType":"1315","messageId":"1316","endLine":143,"endColumn":37},{"ruleId":"1313","severity":1,"message":"1491","line":144,"column":10,"nodeType":"1315","messageId":"1316","endLine":144,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1492","line":146,"column":21,"nodeType":"1315","messageId":"1316","endLine":146,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1333","line":151,"column":10,"nodeType":"1315","messageId":"1316","endLine":151,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":151,"column":23,"nodeType":"1315","messageId":"1316","endLine":151,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1493","line":155,"column":19,"nodeType":"1315","messageId":"1316","endLine":155,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1494","line":160,"column":10,"nodeType":"1315","messageId":"1316","endLine":160,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1495","line":160,"column":24,"nodeType":"1315","messageId":"1316","endLine":160,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1496","line":183,"column":10,"nodeType":"1315","messageId":"1316","endLine":183,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1497","line":183,"column":38,"nodeType":"1315","messageId":"1316","endLine":183,"endColumn":67},{"ruleId":"1313","severity":1,"message":"1498","line":187,"column":5,"nodeType":"1315","messageId":"1316","endLine":187,"endColumn":40},{"ruleId":"1313","severity":1,"message":"1499","line":188,"column":5,"nodeType":"1315","messageId":"1316","endLine":188,"endColumn":43},{"ruleId":"1313","severity":1,"message":"1500","line":193,"column":10,"nodeType":"1315","messageId":"1316","endLine":193,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1501","line":194,"column":10,"nodeType":"1315","messageId":"1316","endLine":194,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1502","line":298,"column":10,"nodeType":"1315","messageId":"1316","endLine":298,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1503","line":299,"column":10,"nodeType":"1315","messageId":"1316","endLine":299,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1504","line":300,"column":10,"nodeType":"1315","messageId":"1316","endLine":300,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1505","line":319,"column":9,"nodeType":"1315","messageId":"1316","endLine":319,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1506","line":401,"column":9,"nodeType":"1315","messageId":"1316","endLine":401,"endColumn":13},{"ruleId":"1462","severity":1,"message":"1463","line":401,"column":46,"nodeType":"1464","messageId":"1465","endLine":401,"endColumn":48},{"ruleId":"1313","severity":1,"message":"1507","line":433,"column":9,"nodeType":"1315","messageId":"1316","endLine":433,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1508","line":532,"column":9,"nodeType":"1315","messageId":"1316","endLine":532,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1509","line":533,"column":11,"nodeType":"1315","messageId":"1316","endLine":533,"endColumn":24},{"ruleId":"1347","severity":1,"message":"1510","line":584,"column":6,"nodeType":"1349","endLine":584,"endColumn":8,"suggestions":"1511"},{"ruleId":"1347","severity":1,"message":"1512","line":656,"column":6,"nodeType":"1349","endLine":656,"endColumn":8,"suggestions":"1513"},{"ruleId":"1313","severity":1,"message":"1514","line":666,"column":9,"nodeType":"1315","messageId":"1316","endLine":666,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1515","line":687,"column":9,"nodeType":"1315","messageId":"1316","endLine":687,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1516","line":846,"column":9,"nodeType":"1315","messageId":"1316","endLine":846,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1517","line":868,"column":9,"nodeType":"1315","messageId":"1316","endLine":868,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1518","line":914,"column":9,"nodeType":"1315","messageId":"1316","endLine":914,"endColumn":29},{"ruleId":"1462","severity":1,"message":"1519","line":917,"column":47,"nodeType":"1464","messageId":"1520","endLine":917,"endColumn":49},{"ruleId":"1462","severity":1,"message":"1519","line":926,"column":44,"nodeType":"1464","messageId":"1520","endLine":926,"endColumn":46},{"ruleId":"1462","severity":1,"message":"1519","line":935,"column":44,"nodeType":"1464","messageId":"1520","endLine":935,"endColumn":46},{"ruleId":"1351","severity":1,"message":"1352","line":1127,"column":24,"nodeType":"1353","messageId":"1354","endLine":1127,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":1130,"column":31,"nodeType":"1353","messageId":"1354","endLine":1130,"endColumn":33},{"ruleId":"1347","severity":1,"message":"1521","line":1151,"column":6,"nodeType":"1349","endLine":1151,"endColumn":8,"suggestions":"1522"},{"ruleId":"1351","severity":1,"message":"1352","line":1286,"column":47,"nodeType":"1353","messageId":"1354","endLine":1286,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1523","line":1400,"column":11,"nodeType":"1315","messageId":"1316","endLine":1400,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":6,"column":16,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1524","line":100,"column":10,"nodeType":"1315","messageId":"1316","endLine":100,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1333","line":102,"column":10,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":102,"column":23,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1448","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1449","line":105,"column":20,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1525","line":491,"column":12,"nodeType":"1315","messageId":"1316","endLine":491,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1526","line":497,"column":12,"nodeType":"1315","messageId":"1316","endLine":497,"endColumn":28},{"ruleId":"1351","severity":1,"message":"1352","line":591,"column":47,"nodeType":"1353","messageId":"1354","endLine":591,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":2,"column":54,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":5,"column":16,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1527","line":21,"column":8,"nodeType":"1315","messageId":"1316","endLine":21,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1528","line":24,"column":8,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1524","line":99,"column":10,"nodeType":"1315","messageId":"1316","endLine":99,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1529","line":99,"column":23,"nodeType":"1315","messageId":"1316","endLine":99,"endColumn":37},{"ruleId":"1313","severity":1,"message":"1530","line":103,"column":10,"nodeType":"1315","messageId":"1316","endLine":103,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1531","line":103,"column":25,"nodeType":"1315","messageId":"1316","endLine":103,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1485","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1532","line":105,"column":34,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":59},{"ruleId":"1313","severity":1,"message":"1492","line":111,"column":21,"nodeType":"1315","messageId":"1316","endLine":111,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1493","line":117,"column":19,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1533","line":122,"column":10,"nodeType":"1315","messageId":"1316","endLine":122,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1534","line":125,"column":10,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1535","line":125,"column":26,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":43},{"ruleId":"1536","severity":1,"message":"1537","line":200,"column":7,"nodeType":"1538","messageId":"1354","endLine":200,"endColumn":47},{"ruleId":"1536","severity":1,"message":"1537","line":233,"column":5,"nodeType":"1538","messageId":"1354","endLine":233,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1523","line":254,"column":11,"nodeType":"1315","messageId":"1316","endLine":254,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1539","line":278,"column":9,"nodeType":"1315","messageId":"1316","endLine":278,"endColumn":21},{"ruleId":"1347","severity":1,"message":"1540","line":354,"column":6,"nodeType":"1349","endLine":354,"endColumn":24,"suggestions":"1541"},{"ruleId":"1347","severity":1,"message":"1542","line":358,"column":6,"nodeType":"1349","endLine":358,"endColumn":8,"suggestions":"1543"},{"ruleId":"1313","severity":1,"message":"1544","line":509,"column":9,"nodeType":"1315","messageId":"1316","endLine":509,"endColumn":34},{"ruleId":"1313","severity":1,"message":"1545","line":569,"column":9,"nodeType":"1315","messageId":"1316","endLine":569,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1546","line":640,"column":9,"nodeType":"1315","messageId":"1316","endLine":640,"endColumn":32},{"ruleId":"1351","severity":1,"message":"1352","line":700,"column":47,"nodeType":"1353","messageId":"1354","endLine":700,"endColumn":49},{"ruleId":"1351","severity":1,"message":"1352","line":719,"column":42,"nodeType":"1353","messageId":"1354","endLine":719,"endColumn":44},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1363","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1427","line":19,"column":19,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1413","line":19,"column":32,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":20,"column":8,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1362","line":21,"column":8,"nodeType":"1315","messageId":"1316","endLine":21,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1547","line":107,"column":9,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1434","line":115,"column":10,"nodeType":"1315","messageId":"1316","endLine":115,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1435","line":115,"column":19,"nodeType":"1315","messageId":"1316","endLine":115,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1356","line":122,"column":10,"nodeType":"1315","messageId":"1316","endLine":122,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1357","line":122,"column":21,"nodeType":"1315","messageId":"1316","endLine":122,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1494","line":124,"column":10,"nodeType":"1315","messageId":"1316","endLine":124,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1495","line":124,"column":24,"nodeType":"1315","messageId":"1316","endLine":124,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1548","line":125,"column":10,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1549","line":125,"column":25,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1550","line":132,"column":10,"nodeType":"1315","messageId":"1316","endLine":132,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1551","line":132,"column":29,"nodeType":"1315","messageId":"1316","endLine":132,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1552","line":133,"column":10,"nodeType":"1315","messageId":"1316","endLine":133,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1553","line":134,"column":10,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":35},{"ruleId":"1313","severity":1,"message":"1554","line":137,"column":10,"nodeType":"1315","messageId":"1316","endLine":137,"endColumn":30},{"ruleId":"1347","severity":1,"message":"1555","line":223,"column":6,"nodeType":"1349","endLine":223,"endColumn":8,"suggestions":"1556"},{"ruleId":"1313","severity":1,"message":"1557","line":225,"column":9,"nodeType":"1315","messageId":"1316","endLine":225,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1514","line":244,"column":9,"nodeType":"1315","messageId":"1316","endLine":244,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1515","line":263,"column":9,"nodeType":"1315","messageId":"1316","endLine":263,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1523","line":302,"column":11,"nodeType":"1315","messageId":"1316","endLine":302,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1546","line":481,"column":9,"nodeType":"1315","messageId":"1316","endLine":481,"endColumn":32},{"ruleId":"1351","severity":1,"message":"1352","line":482,"column":24,"nodeType":"1353","messageId":"1354","endLine":482,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":485,"column":31,"nodeType":"1353","messageId":"1354","endLine":485,"endColumn":33},{"ruleId":"1351","severity":1,"message":"1352","line":581,"column":47,"nodeType":"1353","messageId":"1354","endLine":581,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":2,"column":54,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":5,"column":16,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1366","line":19,"column":8,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1527","line":21,"column":8,"nodeType":"1315","messageId":"1316","endLine":21,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1528","line":26,"column":8,"nodeType":"1315","messageId":"1316","endLine":26,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1524","line":102,"column":10,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1530","line":108,"column":10,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1531","line":108,"column":25,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1485","line":110,"column":10,"nodeType":"1315","messageId":"1316","endLine":110,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1532","line":110,"column":34,"nodeType":"1315","messageId":"1316","endLine":110,"endColumn":59},{"ruleId":"1313","severity":1,"message":"1333","line":119,"column":10,"nodeType":"1315","messageId":"1316","endLine":119,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":119,"column":23,"nodeType":"1315","messageId":"1316","endLine":119,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1492","line":124,"column":21,"nodeType":"1315","messageId":"1316","endLine":124,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1493","line":130,"column":19,"nodeType":"1315","messageId":"1316","endLine":130,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1534","line":138,"column":10,"nodeType":"1315","messageId":"1316","endLine":138,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1535","line":138,"column":26,"nodeType":"1315","messageId":"1316","endLine":138,"endColumn":43},{"ruleId":"1313","severity":1,"message":"1558","line":256,"column":9,"nodeType":"1315","messageId":"1316","endLine":256,"endColumn":19},{"ruleId":"1347","severity":1,"message":"1559","line":361,"column":6,"nodeType":"1349","endLine":361,"endColumn":24,"suggestions":"1560"},{"ruleId":"1347","severity":1,"message":"1542","line":365,"column":6,"nodeType":"1349","endLine":365,"endColumn":8,"suggestions":"1561"},{"ruleId":"1313","severity":1,"message":"1544","line":521,"column":9,"nodeType":"1315","messageId":"1316","endLine":521,"endColumn":34},{"ruleId":"1313","severity":1,"message":"1562","line":534,"column":9,"nodeType":"1315","messageId":"1316","endLine":534,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1545","line":579,"column":9,"nodeType":"1315","messageId":"1316","endLine":579,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1546","line":652,"column":9,"nodeType":"1315","messageId":"1316","endLine":652,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1514","line":675,"column":9,"nodeType":"1315","messageId":"1316","endLine":675,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1523","line":686,"column":11,"nodeType":"1315","messageId":"1316","endLine":686,"endColumn":16},{"ruleId":"1351","severity":1,"message":"1352","line":733,"column":47,"nodeType":"1353","messageId":"1354","endLine":733,"endColumn":49},{"ruleId":"1351","severity":1,"message":"1352","line":772,"column":42,"nodeType":"1353","messageId":"1354","endLine":772,"endColumn":44},{"ruleId":"1313","severity":1,"message":"1410","line":4,"column":38,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":4,"column":54,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1363","line":8,"column":8,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1427","line":20,"column":19,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1413","line":20,"column":32,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":21,"column":8,"nodeType":"1315","messageId":"1316","endLine":21,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1563","line":26,"column":8,"nodeType":"1315","messageId":"1316","endLine":26,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1564","line":28,"column":8,"nodeType":"1315","messageId":"1316","endLine":28,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1362","line":31,"column":8,"nodeType":"1315","messageId":"1316","endLine":31,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1483","line":43,"column":10,"nodeType":"1315","messageId":"1316","endLine":43,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1436","line":128,"column":10,"nodeType":"1315","messageId":"1316","endLine":128,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1438","line":129,"column":10,"nodeType":"1315","messageId":"1316","endLine":129,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1484","line":130,"column":10,"nodeType":"1315","messageId":"1316","endLine":130,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1485","line":131,"column":10,"nodeType":"1315","messageId":"1316","endLine":131,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1486","line":131,"column":34,"nodeType":"1315","messageId":"1316","endLine":131,"endColumn":57},{"ruleId":"1313","severity":1,"message":"1356","line":134,"column":10,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1357","line":134,"column":21,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1487","line":138,"column":10,"nodeType":"1315","messageId":"1316","endLine":138,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1489","line":145,"column":10,"nodeType":"1315","messageId":"1316","endLine":145,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1490","line":145,"column":41,"nodeType":"1315","messageId":"1316","endLine":145,"endColumn":73},{"ruleId":"1313","severity":1,"message":"1432","line":147,"column":23,"nodeType":"1315","messageId":"1316","endLine":147,"endColumn":37},{"ruleId":"1313","severity":1,"message":"1492","line":155,"column":21,"nodeType":"1315","messageId":"1316","endLine":155,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1346","line":160,"column":23,"nodeType":"1315","messageId":"1316","endLine":160,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1493","line":163,"column":19,"nodeType":"1315","messageId":"1316","endLine":163,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1494","line":168,"column":10,"nodeType":"1315","messageId":"1316","endLine":168,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1495","line":168,"column":24,"nodeType":"1315","messageId":"1316","endLine":168,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1565","line":172,"column":10,"nodeType":"1315","messageId":"1316","endLine":172,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1566","line":172,"column":21,"nodeType":"1315","messageId":"1316","endLine":172,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1496","line":195,"column":10,"nodeType":"1315","messageId":"1316","endLine":195,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1500","line":205,"column":10,"nodeType":"1315","messageId":"1316","endLine":205,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1501","line":206,"column":10,"nodeType":"1315","messageId":"1316","endLine":206,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1502","line":319,"column":10,"nodeType":"1315","messageId":"1316","endLine":319,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1503","line":320,"column":10,"nodeType":"1315","messageId":"1316","endLine":320,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1504","line":321,"column":10,"nodeType":"1315","messageId":"1316","endLine":321,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1491","line":322,"column":10,"nodeType":"1315","messageId":"1316","endLine":322,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1505","line":339,"column":9,"nodeType":"1315","messageId":"1316","endLine":339,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1567","line":367,"column":9,"nodeType":"1315","messageId":"1316","endLine":367,"endColumn":34},{"ruleId":"1351","severity":1,"message":"1352","line":377,"column":47,"nodeType":"1353","messageId":"1354","endLine":377,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1568","line":539,"column":9,"nodeType":"1315","messageId":"1316","endLine":539,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1507","line":680,"column":9,"nodeType":"1315","messageId":"1316","endLine":680,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1508","line":777,"column":9,"nodeType":"1315","messageId":"1316","endLine":777,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1509","line":778,"column":11,"nodeType":"1315","messageId":"1316","endLine":778,"endColumn":24},{"ruleId":"1347","severity":1,"message":"1569","line":868,"column":6,"nodeType":"1349","endLine":868,"endColumn":8,"suggestions":"1570"},{"ruleId":"1313","severity":1,"message":"1506","line":925,"column":9,"nodeType":"1315","messageId":"1316","endLine":925,"endColumn":13},{"ruleId":"1462","severity":1,"message":"1463","line":925,"column":46,"nodeType":"1464","messageId":"1465","endLine":925,"endColumn":48},{"ruleId":"1313","severity":1,"message":"1514","line":960,"column":9,"nodeType":"1315","messageId":"1316","endLine":960,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1515","line":981,"column":9,"nodeType":"1315","messageId":"1316","endLine":981,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1516","line":1129,"column":9,"nodeType":"1315","messageId":"1316","endLine":1129,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1517","line":1153,"column":9,"nodeType":"1315","messageId":"1316","endLine":1153,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1518","line":1199,"column":9,"nodeType":"1315","messageId":"1316","endLine":1199,"endColumn":29},{"ruleId":"1462","severity":1,"message":"1519","line":1202,"column":47,"nodeType":"1464","messageId":"1520","endLine":1202,"endColumn":49},{"ruleId":"1462","severity":1,"message":"1519","line":1211,"column":44,"nodeType":"1464","messageId":"1520","endLine":1211,"endColumn":46},{"ruleId":"1462","severity":1,"message":"1519","line":1220,"column":44,"nodeType":"1464","messageId":"1520","endLine":1220,"endColumn":46},{"ruleId":"1313","severity":1,"message":"1571","line":1234,"column":9,"nodeType":"1315","messageId":"1316","endLine":1234,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1572","line":1238,"column":9,"nodeType":"1315","messageId":"1316","endLine":1238,"endColumn":22},{"ruleId":"1351","severity":1,"message":"1352","line":1434,"column":24,"nodeType":"1353","messageId":"1354","endLine":1434,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":1437,"column":31,"nodeType":"1353","messageId":"1354","endLine":1437,"endColumn":33},{"ruleId":"1351","severity":1,"message":"1352","line":1514,"column":47,"nodeType":"1353","messageId":"1354","endLine":1514,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1523","line":1628,"column":11,"nodeType":"1315","messageId":"1316","endLine":1628,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1397","line":3,"column":20,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1573","line":4,"column":8,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1474","line":6,"column":10,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1337","line":7,"column":10,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1427","line":9,"column":19,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1411","line":10,"column":3,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":8},{"ruleId":"1313","severity":1,"message":"1412","line":11,"column":3,"nodeType":"1315","messageId":"1316","endLine":11,"endColumn":7},{"ruleId":"1313","severity":1,"message":"1361","line":14,"column":16,"nodeType":"1315","messageId":"1316","endLine":14,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1427","line":23,"column":19,"nodeType":"1315","messageId":"1316","endLine":23,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1333","line":143,"column":10,"nodeType":"1315","messageId":"1316","endLine":143,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":143,"column":23,"nodeType":"1315","messageId":"1316","endLine":143,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1450","line":156,"column":21,"nodeType":"1315","messageId":"1316","endLine":156,"endColumn":33},{"ruleId":"1347","severity":1,"message":"1574","line":288,"column":6,"nodeType":"1349","endLine":288,"endColumn":24,"suggestions":"1575"},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":6,"column":16,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1363","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1364","line":10,"column":10,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1366","line":20,"column":8,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1576","line":24,"column":10,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1577","line":26,"column":10,"nodeType":"1315","messageId":"1316","endLine":26,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1447","line":104,"column":9,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1578","line":108,"column":10,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1579","line":108,"column":24,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1580","line":112,"column":10,"nodeType":"1315","messageId":"1316","endLine":112,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1581","line":130,"column":10,"nodeType":"1315","messageId":"1316","endLine":130,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1582","line":131,"column":10,"nodeType":"1315","messageId":"1316","endLine":131,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1583","line":131,"column":25,"nodeType":"1315","messageId":"1316","endLine":131,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1333","line":133,"column":10,"nodeType":"1315","messageId":"1316","endLine":133,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":133,"column":23,"nodeType":"1315","messageId":"1316","endLine":133,"endColumn":36},{"ruleId":"1351","severity":1,"message":"1352","line":142,"column":25,"nodeType":"1353","messageId":"1354","endLine":142,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1584","line":175,"column":9,"nodeType":"1315","messageId":"1316","endLine":175,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1585","line":180,"column":24,"nodeType":"1315","messageId":"1316","endLine":180,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1586","line":350,"column":5,"nodeType":"1315","messageId":"1316","endLine":350,"endColumn":22},{"ruleId":"1347","severity":1,"message":"1587","line":495,"column":6,"nodeType":"1349","endLine":495,"endColumn":70,"suggestions":"1588"},{"ruleId":"1313","severity":1,"message":"1466","line":575,"column":13,"nodeType":"1315","messageId":"1316","endLine":575,"endColumn":25},{"ruleId":"1351","severity":1,"message":"1352","line":858,"column":24,"nodeType":"1353","messageId":"1354","endLine":858,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":861,"column":31,"nodeType":"1353","messageId":"1354","endLine":861,"endColumn":33},{"ruleId":"1462","severity":1,"message":"1463","line":871,"column":34,"nodeType":"1464","messageId":"1465","endLine":871,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1514","line":919,"column":9,"nodeType":"1315","messageId":"1316","endLine":919,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":976,"column":47,"nodeType":"1353","messageId":"1354","endLine":976,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1523","line":992,"column":11,"nodeType":"1315","messageId":"1316","endLine":992,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1397","line":3,"column":20,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1427","line":8,"column":18,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1589","line":3,"column":10,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1590","line":3,"column":20,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1322","line":3,"column":25,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1591","line":5,"column":8,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1337","line":6,"column":10,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1592","line":9,"column":8,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1593","line":10,"column":8,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1594","line":11,"column":9,"nodeType":"1315","messageId":"1316","endLine":11,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1595","line":13,"column":7,"nodeType":"1315","messageId":"1316","endLine":13,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1596","line":91,"column":7,"nodeType":"1315","messageId":"1316","endLine":91,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1333","line":114,"column":10,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":114,"column":23,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1450","line":117,"column":21,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":33},{"ruleId":"1597","severity":1,"message":"1598","line":241,"column":32,"nodeType":"1599","messageId":"1600","endLine":241,"endColumn":76,"fix":"1601"},{"ruleId":"1597","severity":1,"message":"1598","line":248,"column":32,"nodeType":"1599","messageId":"1600","endLine":248,"endColumn":73,"fix":"1602"},{"ruleId":"1597","severity":1,"message":"1598","line":256,"column":32,"nodeType":"1599","messageId":"1600","endLine":256,"endColumn":70,"fix":"1603"},{"ruleId":"1597","severity":1,"message":"1598","line":263,"column":32,"nodeType":"1599","messageId":"1600","endLine":263,"endColumn":69,"fix":"1604"},{"ruleId":"1597","severity":1,"message":"1598","line":270,"column":32,"nodeType":"1599","messageId":"1600","endLine":270,"endColumn":69,"fix":"1605"},{"ruleId":"1597","severity":1,"message":"1598","line":272,"column":32,"nodeType":"1599","messageId":"1600","endLine":272,"endColumn":62,"fix":"1606"},{"ruleId":"1347","severity":1,"message":"1607","line":300,"column":6,"nodeType":"1349","endLine":305,"endColumn":4,"suggestions":"1608"},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":38,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1411","line":3,"column":47,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":52},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1405","line":4,"column":13,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1363","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1336","line":8,"column":10,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1427","line":19,"column":19,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1413","line":19,"column":32,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":20,"column":8,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1609","line":22,"column":8,"nodeType":"1315","messageId":"1316","endLine":22,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1429","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":12},{"ruleId":"1313","severity":1,"message":"1430","line":105,"column":14,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1426","line":106,"column":18,"nodeType":"1315","messageId":"1316","endLine":106,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1431","line":107,"column":10,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1432","line":107,"column":23,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":37},{"ruleId":"1313","severity":1,"message":"1341","line":108,"column":10,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1342","line":108,"column":18,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1433","line":109,"column":7,"nodeType":"1315","messageId":"1316","endLine":109,"endColumn":11},{"ruleId":"1313","severity":1,"message":"1434","line":112,"column":10,"nodeType":"1315","messageId":"1316","endLine":112,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1435","line":112,"column":19,"nodeType":"1315","messageId":"1316","endLine":112,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1436","line":113,"column":10,"nodeType":"1315","messageId":"1316","endLine":113,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1437","line":113,"column":29,"nodeType":"1315","messageId":"1316","endLine":113,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1438","line":114,"column":10,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1439","line":114,"column":21,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1440","line":115,"column":10,"nodeType":"1315","messageId":"1316","endLine":115,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1441","line":115,"column":18,"nodeType":"1315","messageId":"1316","endLine":115,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1442","line":116,"column":10,"nodeType":"1315","messageId":"1316","endLine":116,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1443","line":116,"column":19,"nodeType":"1315","messageId":"1316","endLine":116,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1444","line":117,"column":10,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1445","line":117,"column":28,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1446","line":119,"column":10,"nodeType":"1315","messageId":"1316","endLine":119,"endColumn":25},{"ruleId":"1347","severity":1,"message":"1610","line":178,"column":6,"nodeType":"1349","endLine":178,"endColumn":8,"suggestions":"1611"},{"ruleId":"1313","severity":1,"message":"1612","line":3,"column":8,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":15},{"ruleId":"1613","severity":1,"message":"1614","line":148,"column":3,"nodeType":"1615","messageId":"1616","endLine":212,"endColumn":4},{"ruleId":"1469","severity":1,"message":"1470","line":156,"column":7,"nodeType":"1617","messageId":"1472","endLine":156,"endColumn":13},{"ruleId":"1469","severity":1,"message":"1470","line":164,"column":7,"nodeType":"1617","messageId":"1472","endLine":164,"endColumn":13},{"ruleId":"1469","severity":1,"message":"1470","line":172,"column":7,"nodeType":"1617","messageId":"1472","endLine":172,"endColumn":13},{"ruleId":"1469","severity":1,"message":"1470","line":180,"column":7,"nodeType":"1617","messageId":"1472","endLine":180,"endColumn":13},{"ruleId":"1469","severity":1,"message":"1470","line":188,"column":7,"nodeType":"1617","messageId":"1472","endLine":188,"endColumn":13},{"ruleId":"1469","severity":1,"message":"1470","line":196,"column":7,"nodeType":"1617","messageId":"1472","endLine":196,"endColumn":13},{"ruleId":"1469","severity":1,"message":"1470","line":204,"column":7,"nodeType":"1617","messageId":"1472","endLine":204,"endColumn":13},{"ruleId":"1462","severity":1,"message":"1463","line":281,"column":39,"nodeType":"1464","messageId":"1465","endLine":281,"endColumn":41},{"ruleId":"1462","severity":1,"message":"1463","line":402,"column":41,"nodeType":"1464","messageId":"1465","endLine":402,"endColumn":43},{"ruleId":"1313","severity":1,"message":"1618","line":452,"column":5,"nodeType":"1315","messageId":"1316","endLine":452,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1619","line":512,"column":7,"nodeType":"1315","messageId":"1316","endLine":512,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1620","line":513,"column":7,"nodeType":"1315","messageId":"1316","endLine":513,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1621","line":514,"column":7,"nodeType":"1315","messageId":"1316","endLine":514,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1622","line":521,"column":7,"nodeType":"1315","messageId":"1316","endLine":521,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":2,"column":54,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":5,"column":16,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1524","line":98,"column":10,"nodeType":"1315","messageId":"1316","endLine":98,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1534","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1535","line":105,"column":26,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":43},{"ruleId":"1347","severity":1,"message":"1623","line":152,"column":6,"nodeType":"1349","endLine":152,"endColumn":24,"suggestions":"1624"},{"ruleId":"1313","severity":1,"message":"1625","line":168,"column":12,"nodeType":"1315","messageId":"1316","endLine":168,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1626","line":260,"column":9,"nodeType":"1315","messageId":"1316","endLine":260,"endColumn":24},{"ruleId":"1351","severity":1,"message":"1352","line":347,"column":47,"nodeType":"1353","messageId":"1354","endLine":347,"endColumn":49},{"ruleId":"1351","severity":1,"message":"1352","line":354,"column":42,"nodeType":"1353","messageId":"1354","endLine":354,"endColumn":44},{"ruleId":"1313","severity":1,"message":"1474","line":27,"column":10,"nodeType":"1315","messageId":"1316","endLine":27,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1589","line":29,"column":10,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1400","line":29,"column":28,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1478","line":29,"column":34,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1340","line":56,"column":7,"nodeType":"1315","messageId":"1316","endLine":56,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1627","line":102,"column":9,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":18},{"ruleId":"1347","severity":1,"message":"1628","line":108,"column":6,"nodeType":"1349","endLine":108,"endColumn":8,"suggestions":"1629"},{"ruleId":"1313","severity":1,"message":"1630","line":124,"column":9,"nodeType":"1315","messageId":"1316","endLine":124,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":15,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1631","line":3,"column":35,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":44},{"ruleId":"1313","severity":1,"message":"1632","line":3,"column":46,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":54},{"ruleId":"1313","severity":1,"message":"1361","line":5,"column":16,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1594","line":9,"column":9,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1633","line":10,"column":9,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1634","line":13,"column":10,"nodeType":"1315","messageId":"1316","endLine":13,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1391","line":35,"column":9,"nodeType":"1315","messageId":"1316","endLine":35,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1635","line":36,"column":10,"nodeType":"1315","messageId":"1316","endLine":36,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1636","line":39,"column":9,"nodeType":"1315","messageId":"1316","endLine":39,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1626","line":42,"column":9,"nodeType":"1315","messageId":"1316","endLine":42,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1637","line":43,"column":11,"nodeType":"1315","messageId":"1316","endLine":43,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1638","line":44,"column":9,"nodeType":"1315","messageId":"1316","endLine":44,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1639","line":51,"column":9,"nodeType":"1315","messageId":"1316","endLine":51,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1640","line":53,"column":9,"nodeType":"1315","messageId":"1316","endLine":53,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1641","line":57,"column":9,"nodeType":"1315","messageId":"1316","endLine":57,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1592","line":1,"column":8,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1593","line":2,"column":8,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1340","line":49,"column":7,"nodeType":"1315","messageId":"1316","endLine":49,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1642","line":96,"column":10,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1373","line":97,"column":10,"nodeType":"1315","messageId":"1316","endLine":97,"endColumn":23},{"ruleId":"1347","severity":1,"message":"1628","line":107,"column":6,"nodeType":"1349","endLine":107,"endColumn":8,"suggestions":"1643"},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":2,"column":54,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":5,"column":16,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1524","line":98,"column":10,"nodeType":"1315","messageId":"1316","endLine":98,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1534","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1535","line":105,"column":26,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":43},{"ruleId":"1347","severity":1,"message":"1623","line":152,"column":6,"nodeType":"1349","endLine":152,"endColumn":24,"suggestions":"1644"},{"ruleId":"1313","severity":1,"message":"1625","line":168,"column":12,"nodeType":"1315","messageId":"1316","endLine":168,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1626","line":258,"column":9,"nodeType":"1315","messageId":"1316","endLine":258,"endColumn":24},{"ruleId":"1351","severity":1,"message":"1352","line":310,"column":24,"nodeType":"1353","messageId":"1354","endLine":310,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":313,"column":31,"nodeType":"1353","messageId":"1354","endLine":313,"endColumn":33},{"ruleId":"1351","severity":1,"message":"1352","line":345,"column":47,"nodeType":"1353","messageId":"1354","endLine":345,"endColumn":49},{"ruleId":"1351","severity":1,"message":"1352","line":352,"column":42,"nodeType":"1353","messageId":"1354","endLine":352,"endColumn":44},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":38,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1398","line":3,"column":28,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1397","line":6,"column":10,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1363","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1366","line":19,"column":8,"nodeType":"1315","messageId":"1316","endLine":19,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1431","line":100,"column":10,"nodeType":"1315","messageId":"1316","endLine":100,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1432","line":100,"column":23,"nodeType":"1315","messageId":"1316","endLine":100,"endColumn":37},{"ruleId":"1313","severity":1,"message":"1636","line":104,"column":9,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1442","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1447","line":126,"column":8,"nodeType":"1315","messageId":"1316","endLine":126,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1645","line":129,"column":10,"nodeType":"1315","messageId":"1316","endLine":129,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1502","line":130,"column":10,"nodeType":"1315","messageId":"1316","endLine":130,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1646","line":130,"column":25,"nodeType":"1315","messageId":"1316","endLine":130,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1503","line":131,"column":10,"nodeType":"1315","messageId":"1316","endLine":131,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1647","line":131,"column":28,"nodeType":"1315","messageId":"1316","endLine":131,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1504","line":132,"column":10,"nodeType":"1315","messageId":"1316","endLine":132,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1648","line":132,"column":23,"nodeType":"1315","messageId":"1316","endLine":132,"endColumn":37},{"ruleId":"1313","severity":1,"message":"1626","line":134,"column":11,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1523","line":148,"column":15,"nodeType":"1315","messageId":"1316","endLine":148,"endColumn":20},{"ruleId":"1347","severity":1,"message":"1649","line":196,"column":8,"nodeType":"1349","endLine":196,"endColumn":10,"suggestions":"1650"},{"ruleId":"1313","severity":1,"message":"1651","line":253,"column":9,"nodeType":"1315","messageId":"1316","endLine":253,"endColumn":34},{"ruleId":"1313","severity":1,"message":"1514","line":292,"column":9,"nodeType":"1315","messageId":"1316","endLine":292,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":361,"column":47,"nodeType":"1353","messageId":"1354","endLine":361,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1474","line":29,"column":10,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1405","line":32,"column":8,"nodeType":"1315","messageId":"1316","endLine":32,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1340","line":60,"column":7,"nodeType":"1315","messageId":"1316","endLine":60,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1627","line":112,"column":9,"nodeType":"1315","messageId":"1316","endLine":112,"endColumn":18},{"ruleId":"1347","severity":1,"message":"1628","line":118,"column":6,"nodeType":"1349","endLine":118,"endColumn":8,"suggestions":"1652"},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1363","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1427","line":20,"column":19,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1413","line":20,"column":32,"nodeType":"1315","messageId":"1316","endLine":20,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":21,"column":8,"nodeType":"1315","messageId":"1316","endLine":21,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1362","line":22,"column":8,"nodeType":"1315","messageId":"1316","endLine":22,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1547","line":110,"column":9,"nodeType":"1315","messageId":"1316","endLine":110,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1434","line":118,"column":10,"nodeType":"1315","messageId":"1316","endLine":118,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1435","line":118,"column":19,"nodeType":"1315","messageId":"1316","endLine":118,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1356","line":125,"column":10,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1357","line":125,"column":21,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1494","line":128,"column":10,"nodeType":"1315","messageId":"1316","endLine":128,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1495","line":128,"column":24,"nodeType":"1315","messageId":"1316","endLine":128,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1548","line":129,"column":10,"nodeType":"1315","messageId":"1316","endLine":129,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1549","line":129,"column":25,"nodeType":"1315","messageId":"1316","endLine":129,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1550","line":137,"column":10,"nodeType":"1315","messageId":"1316","endLine":137,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1551","line":137,"column":29,"nodeType":"1315","messageId":"1316","endLine":137,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1552","line":138,"column":10,"nodeType":"1315","messageId":"1316","endLine":138,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1553","line":139,"column":10,"nodeType":"1315","messageId":"1316","endLine":139,"endColumn":35},{"ruleId":"1313","severity":1,"message":"1653","line":139,"column":37,"nodeType":"1315","messageId":"1316","endLine":139,"endColumn":65},{"ruleId":"1313","severity":1,"message":"1554","line":142,"column":10,"nodeType":"1315","messageId":"1316","endLine":142,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1447","line":143,"column":9,"nodeType":"1315","messageId":"1316","endLine":143,"endColumn":16},{"ruleId":"1347","severity":1,"message":"1654","line":225,"column":6,"nodeType":"1349","endLine":225,"endColumn":8,"suggestions":"1655"},{"ruleId":"1313","severity":1,"message":"1514","line":244,"column":9,"nodeType":"1315","messageId":"1316","endLine":244,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1515","line":263,"column":9,"nodeType":"1315","messageId":"1316","endLine":263,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1523","line":307,"column":11,"nodeType":"1315","messageId":"1316","endLine":307,"endColumn":16},{"ruleId":"1347","severity":1,"message":"1649","line":404,"column":6,"nodeType":"1349","endLine":404,"endColumn":8,"suggestions":"1656"},{"ruleId":"1313","severity":1,"message":"1546","line":503,"column":9,"nodeType":"1315","messageId":"1316","endLine":503,"endColumn":32},{"ruleId":"1351","severity":1,"message":"1352","line":504,"column":24,"nodeType":"1353","messageId":"1354","endLine":504,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":507,"column":31,"nodeType":"1353","messageId":"1354","endLine":507,"endColumn":33},{"ruleId":"1351","severity":1,"message":"1352","line":593,"column":47,"nodeType":"1353","messageId":"1354","endLine":593,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1657","line":596,"column":9,"nodeType":"1315","messageId":"1316","endLine":596,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1409","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1411","line":5,"column":47,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":52},{"ruleId":"1313","severity":1,"message":"1412","line":5,"column":54,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1413","line":7,"column":40,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1415","line":116,"column":9,"nodeType":"1315","messageId":"1316","endLine":116,"endColumn":17},{"ruleId":"1351","severity":1,"message":"1352","line":163,"column":47,"nodeType":"1353","messageId":"1354","endLine":163,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1474","line":27,"column":10,"nodeType":"1315","messageId":"1316","endLine":27,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1340","line":55,"column":7,"nodeType":"1315","messageId":"1316","endLine":55,"endColumn":16},{"ruleId":"1347","severity":1,"message":"1658","line":105,"column":6,"nodeType":"1349","endLine":105,"endColumn":24,"suggestions":"1659"},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1409","line":1,"column":30,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1424","line":2,"column":10,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1329","line":4,"column":10,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1336","line":5,"column":26,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1337","line":8,"column":10,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1453","line":8,"column":16,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1338","line":11,"column":22,"nodeType":"1315","messageId":"1316","endLine":11,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1392","line":32,"column":12,"nodeType":"1315","messageId":"1316","endLine":32,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1336","line":6,"column":26,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":31},{"ruleId":"1313","severity":1,"message":"1337","line":9,"column":10,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1338","line":12,"column":22,"nodeType":"1315","messageId":"1316","endLine":12,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1660","line":25,"column":8,"nodeType":"1315","messageId":"1316","endLine":25,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1661","line":29,"column":10,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1340","line":34,"column":7,"nodeType":"1315","messageId":"1316","endLine":34,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1344","line":54,"column":26,"nodeType":"1315","messageId":"1316","endLine":54,"endColumn":43},{"ruleId":"1313","severity":1,"message":"1346","line":62,"column":23,"nodeType":"1315","messageId":"1316","endLine":62,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1662","line":65,"column":10,"nodeType":"1315","messageId":"1316","endLine":65,"endColumn":16},{"ruleId":"1351","severity":1,"message":"1352","line":601,"column":39,"nodeType":"1353","messageId":"1354","endLine":601,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1663","line":1,"column":28,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":36},{"ruleId":"1324","severity":1,"message":"1325","line":5,"column":10,"nodeType":"1326","messageId":"1327","endLine":5,"endColumn":24,"fix":"1664"},{"ruleId":"1313","severity":1,"message":"1474","line":28,"column":10,"nodeType":"1315","messageId":"1316","endLine":28,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1340","line":56,"column":7,"nodeType":"1315","messageId":"1316","endLine":56,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1427","line":24,"column":19,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1447","line":104,"column":9,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1454","line":107,"column":10,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1455","line":109,"column":10,"nodeType":"1315","messageId":"1316","endLine":109,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1456","line":109,"column":31,"nodeType":"1315","messageId":"1316","endLine":109,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1434","line":117,"column":10,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":17},{"ruleId":"1347","severity":1,"message":"1665","line":221,"column":6,"nodeType":"1349","endLine":221,"endColumn":24,"suggestions":"1666"},{"ruleId":"1313","severity":1,"message":"1461","line":223,"column":9,"nodeType":"1315","messageId":"1316","endLine":223,"endColumn":26},{"ruleId":"1462","severity":1,"message":"1463","line":274,"column":45,"nodeType":"1464","messageId":"1465","endLine":274,"endColumn":47},{"ruleId":"1462","severity":1,"message":"1463","line":280,"column":45,"nodeType":"1464","messageId":"1465","endLine":280,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1667","line":376,"column":9,"nodeType":"1315","messageId":"1316","endLine":376,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1467","line":512,"column":7,"nodeType":"1315","messageId":"1316","endLine":512,"endColumn":10},{"ruleId":"1351","severity":1,"message":"1352","line":616,"column":47,"nodeType":"1353","messageId":"1354","endLine":616,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":6,"column":16,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1450","line":106,"column":21,"nodeType":"1315","messageId":"1316","endLine":106,"endColumn":33},{"ruleId":"1597","severity":1,"message":"1598","line":220,"column":32,"nodeType":"1599","messageId":"1600","endLine":220,"endColumn":76,"fix":"1668"},{"ruleId":"1597","severity":1,"message":"1598","line":227,"column":32,"nodeType":"1599","messageId":"1600","endLine":227,"endColumn":73,"fix":"1669"},{"ruleId":"1597","severity":1,"message":"1598","line":235,"column":32,"nodeType":"1599","messageId":"1600","endLine":235,"endColumn":70,"fix":"1670"},{"ruleId":"1597","severity":1,"message":"1598","line":242,"column":32,"nodeType":"1599","messageId":"1600","endLine":242,"endColumn":69,"fix":"1671"},{"ruleId":"1597","severity":1,"message":"1598","line":249,"column":32,"nodeType":"1599","messageId":"1600","endLine":249,"endColumn":69,"fix":"1672"},{"ruleId":"1597","severity":1,"message":"1598","line":251,"column":32,"nodeType":"1599","messageId":"1600","endLine":251,"endColumn":62,"fix":"1673"},{"ruleId":"1347","severity":1,"message":"1607","line":281,"column":6,"nodeType":"1349","endLine":286,"endColumn":4,"suggestions":"1674"},{"ruleId":"1351","severity":1,"message":"1352","line":427,"column":28,"nodeType":"1353","messageId":"1354","endLine":427,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":434,"column":28,"nodeType":"1353","messageId":"1354","endLine":434,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":444,"column":47,"nodeType":"1353","messageId":"1354","endLine":444,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1675","line":449,"column":11,"nodeType":"1315","messageId":"1316","endLine":449,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1447","line":92,"column":9,"nodeType":"1315","messageId":"1316","endLine":92,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1450","line":103,"column":21,"nodeType":"1315","messageId":"1316","endLine":103,"endColumn":33},{"ruleId":"1347","severity":1,"message":"1451","line":205,"column":6,"nodeType":"1349","endLine":205,"endColumn":24,"suggestions":"1676"},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":16,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1409","line":1,"column":29,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1388","line":2,"column":8,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1424","line":4,"column":8,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1412","line":5,"column":52,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":56},{"ruleId":"1313","severity":1,"message":"1405","line":6,"column":13,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1361","line":8,"column":15,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1342","line":95,"column":20,"nodeType":"1315","messageId":"1316","endLine":95,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1425","line":96,"column":12,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1426","line":96,"column":20,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":6,"column":16,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1677","line":91,"column":10,"nodeType":"1315","messageId":"1316","endLine":91,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1678","line":91,"column":24,"nodeType":"1315","messageId":"1316","endLine":91,"endColumn":39},{"ruleId":"1351","severity":1,"message":"1352","line":559,"column":47,"nodeType":"1353","messageId":"1354","endLine":559,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":16,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1411","line":3,"column":46,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":51},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":52,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":56},{"ruleId":"1313","severity":1,"message":"1361","line":6,"column":15,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1679","line":12,"column":10,"nodeType":"1315","messageId":"1316","endLine":12,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1427","line":17,"column":18,"nodeType":"1315","messageId":"1316","endLine":17,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1450","line":107,"column":23,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":35},{"ruleId":"1347","severity":1,"message":"1680","line":195,"column":8,"nodeType":"1349","endLine":195,"endColumn":26,"suggestions":"1681"},{"ruleId":"1313","severity":1,"message":"1397","line":3,"column":20,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1474","line":6,"column":10,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1337","line":7,"column":10,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1427","line":9,"column":18,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1682","line":3,"column":8,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1410","line":4,"column":38,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":4,"column":54,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":7,"column":16,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1363","line":8,"column":8,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1364","line":11,"column":10,"nodeType":"1315","messageId":"1316","endLine":11,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1337","line":14,"column":10,"nodeType":"1315","messageId":"1316","endLine":14,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1365","line":14,"column":28,"nodeType":"1315","messageId":"1316","endLine":14,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":22,"column":8,"nodeType":"1315","messageId":"1316","endLine":22,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1683","line":24,"column":10,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1447","line":96,"column":9,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1580","line":105,"column":10,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":16},{"ruleId":"1347","severity":1,"message":"1684","line":182,"column":6,"nodeType":"1349","endLine":182,"endColumn":24,"suggestions":"1685"},{"ruleId":"1313","severity":1,"message":"1686","line":360,"column":9,"nodeType":"1315","messageId":"1316","endLine":360,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":411,"column":47,"nodeType":"1353","messageId":"1354","endLine":411,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1361","line":4,"column":15,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1362","line":7,"column":8,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1363","line":10,"column":8,"nodeType":"1315","messageId":"1316","endLine":10,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1364","line":13,"column":9,"nodeType":"1315","messageId":"1316","endLine":13,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1337","line":16,"column":9,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1365","line":16,"column":27,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1366","line":24,"column":8,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1687","line":30,"column":8,"nodeType":"1315","messageId":"1316","endLine":30,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1368","line":112,"column":26,"nodeType":"1315","messageId":"1316","endLine":112,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1369","line":117,"column":12,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1370","line":117,"column":43,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":72},{"ruleId":"1313","severity":1,"message":"1371","line":118,"column":12,"nodeType":"1315","messageId":"1316","endLine":118,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1372","line":118,"column":32,"nodeType":"1315","messageId":"1316","endLine":118,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1373","line":119,"column":12,"nodeType":"1315","messageId":"1316","endLine":119,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1374","line":120,"column":12,"nodeType":"1315","messageId":"1316","endLine":120,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1375","line":120,"column":31,"nodeType":"1315","messageId":"1316","endLine":120,"endColumn":51},{"ruleId":"1313","severity":1,"message":"1376","line":211,"column":11,"nodeType":"1315","messageId":"1316","endLine":211,"endColumn":16},{"ruleId":"1351","severity":1,"message":"1352","line":263,"column":51,"nodeType":"1353","messageId":"1354","endLine":263,"endColumn":53},{"ruleId":"1351","severity":1,"message":"1352","line":283,"column":55,"nodeType":"1353","messageId":"1354","endLine":283,"endColumn":57},{"ruleId":"1313","severity":1,"message":"1377","line":532,"column":11,"nodeType":"1315","messageId":"1316","endLine":532,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1378","line":541,"column":11,"nodeType":"1315","messageId":"1316","endLine":541,"endColumn":35},{"ruleId":"1313","severity":1,"message":"1379","line":592,"column":19,"nodeType":"1315","messageId":"1316","endLine":592,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1380","line":641,"column":11,"nodeType":"1315","messageId":"1316","endLine":641,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1381","line":653,"column":11,"nodeType":"1315","messageId":"1316","endLine":653,"endColumn":35},{"ruleId":"1313","severity":1,"message":"1688","line":670,"column":19,"nodeType":"1315","messageId":"1316","endLine":670,"endColumn":31},{"ruleId":"1351","severity":1,"message":"1352","line":715,"column":28,"nodeType":"1353","messageId":"1354","endLine":715,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":724,"column":35,"nodeType":"1353","messageId":"1354","endLine":724,"endColumn":37},{"ruleId":"1382","severity":1,"message":"1383","line":1852,"column":45,"nodeType":"1384","messageId":"1385","endLine":1852,"endColumn":47},{"ruleId":"1382","severity":1,"message":"1383","line":1853,"column":45,"nodeType":"1384","messageId":"1385","endLine":1853,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":16,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1409","line":1,"column":29,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1388","line":2,"column":8,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":13},{"ruleId":"1313","severity":1,"message":"1424","line":4,"column":8,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1412","line":5,"column":52,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":56},{"ruleId":"1313","severity":1,"message":"1405","line":6,"column":13,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1361","line":8,"column":15,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1342","line":95,"column":20,"nodeType":"1315","messageId":"1316","endLine":95,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1425","line":96,"column":12,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1426","line":96,"column":20,"nodeType":"1315","messageId":"1316","endLine":96,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1447","line":89,"column":9,"nodeType":"1315","messageId":"1316","endLine":89,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1450","line":99,"column":21,"nodeType":"1315","messageId":"1316","endLine":99,"endColumn":33},{"ruleId":"1347","severity":1,"message":"1451","line":178,"column":6,"nodeType":"1349","endLine":178,"endColumn":48,"suggestions":"1689"},{"ruleId":"1313","severity":1,"message":"1397","line":3,"column":20,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1474","line":6,"column":10,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1337","line":7,"column":10,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1427","line":9,"column":18,"nodeType":"1315","messageId":"1316","endLine":9,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1682","line":3,"column":8,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1410","line":4,"column":38,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":4,"column":54,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":7,"column":16,"nodeType":"1315","messageId":"1316","endLine":7,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1363","line":8,"column":8,"nodeType":"1315","messageId":"1316","endLine":8,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1364","line":11,"column":10,"nodeType":"1315","messageId":"1316","endLine":11,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1337","line":14,"column":10,"nodeType":"1315","messageId":"1316","endLine":14,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1365","line":14,"column":28,"nodeType":"1315","messageId":"1316","endLine":14,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":22,"column":8,"nodeType":"1315","messageId":"1316","endLine":22,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1683","line":24,"column":10,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1414","line":27,"column":10,"nodeType":"1315","messageId":"1316","endLine":27,"endColumn":15},{"ruleId":"1313","severity":1,"message":"1447","line":103,"column":9,"nodeType":"1315","messageId":"1316","endLine":103,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1580","line":110,"column":10,"nodeType":"1315","messageId":"1316","endLine":110,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1690","line":117,"column":10,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1691","line":118,"column":10,"nodeType":"1315","messageId":"1316","endLine":118,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1692","line":124,"column":27,"nodeType":"1315","messageId":"1316","endLine":124,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1581","line":127,"column":10,"nodeType":"1315","messageId":"1316","endLine":127,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1586","line":186,"column":9,"nodeType":"1315","messageId":"1316","endLine":186,"endColumn":26},{"ruleId":"1347","severity":1,"message":"1693","line":314,"column":6,"nodeType":"1349","endLine":314,"endColumn":38,"suggestions":"1694"},{"ruleId":"1351","severity":1,"message":"1352","line":588,"column":47,"nodeType":"1353","messageId":"1354","endLine":588,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":6,"column":16,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1524","line":99,"column":10,"nodeType":"1315","messageId":"1316","endLine":99,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1584","line":117,"column":9,"nodeType":"1315","messageId":"1316","endLine":117,"endColumn":19},{"ruleId":"1351","severity":1,"message":"1352","line":568,"column":47,"nodeType":"1353","messageId":"1354","endLine":568,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1333","line":104,"column":10,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":21},{"ruleId":"1313","severity":1,"message":"1346","line":104,"column":23,"nodeType":"1315","messageId":"1316","endLine":104,"endColumn":36},{"ruleId":"1313","severity":1,"message":"1450","line":107,"column":21,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":33},{"ruleId":"1597","severity":1,"message":"1598","line":242,"column":32,"nodeType":"1599","messageId":"1600","endLine":242,"endColumn":76,"fix":"1695"},{"ruleId":"1597","severity":1,"message":"1598","line":249,"column":32,"nodeType":"1599","messageId":"1600","endLine":249,"endColumn":73,"fix":"1696"},{"ruleId":"1597","severity":1,"message":"1598","line":257,"column":32,"nodeType":"1599","messageId":"1600","endLine":257,"endColumn":70,"fix":"1697"},{"ruleId":"1597","severity":1,"message":"1598","line":264,"column":32,"nodeType":"1599","messageId":"1600","endLine":264,"endColumn":69,"fix":"1698"},{"ruleId":"1597","severity":1,"message":"1598","line":271,"column":32,"nodeType":"1599","messageId":"1600","endLine":271,"endColumn":69,"fix":"1699"},{"ruleId":"1597","severity":1,"message":"1598","line":273,"column":32,"nodeType":"1599","messageId":"1600","endLine":273,"endColumn":62,"fix":"1700"},{"ruleId":"1347","severity":1,"message":"1607","line":275,"column":6,"nodeType":"1349","endLine":280,"endColumn":4,"suggestions":"1701"},{"ruleId":"1351","severity":1,"message":"1352","line":420,"column":28,"nodeType":"1353","messageId":"1354","endLine":420,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":427,"column":28,"nodeType":"1353","messageId":"1354","endLine":427,"endColumn":30},{"ruleId":"1351","severity":1,"message":"1352","line":438,"column":47,"nodeType":"1353","messageId":"1354","endLine":438,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1410","line":3,"column":38,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":45},{"ruleId":"1313","severity":1,"message":"1412","line":3,"column":54,"nodeType":"1315","messageId":"1316","endLine":3,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1427","line":24,"column":19,"nodeType":"1315","messageId":"1316","endLine":24,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1447","line":105,"column":9,"nodeType":"1315","messageId":"1316","endLine":105,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1454","line":106,"column":10,"nodeType":"1315","messageId":"1316","endLine":106,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1455","line":108,"column":10,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1456","line":108,"column":31,"nodeType":"1315","messageId":"1316","endLine":108,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1434","line":119,"column":10,"nodeType":"1315","messageId":"1316","endLine":119,"endColumn":17},{"ruleId":"1347","severity":1,"message":"1702","line":203,"column":6,"nodeType":"1349","endLine":203,"endColumn":24,"suggestions":"1703"},{"ruleId":"1347","severity":1,"message":"1704","line":207,"column":6,"nodeType":"1349","endLine":207,"endColumn":55,"suggestions":"1705"},{"ruleId":"1462","severity":1,"message":"1463","line":294,"column":45,"nodeType":"1464","messageId":"1465","endLine":294,"endColumn":47},{"ruleId":"1462","severity":1,"message":"1463","line":300,"column":45,"nodeType":"1464","messageId":"1465","endLine":300,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1467","line":485,"column":7,"nodeType":"1315","messageId":"1316","endLine":485,"endColumn":10},{"ruleId":"1351","severity":1,"message":"1352","line":599,"column":47,"nodeType":"1353","messageId":"1354","endLine":599,"endColumn":49},{"ruleId":"1469","severity":1,"message":"1470","line":1116,"column":27,"nodeType":"1471","messageId":"1472","endLine":1124,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":16,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1411","line":4,"column":46,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":51},{"ruleId":"1313","severity":1,"message":"1412","line":4,"column":52,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":56},{"ruleId":"1313","severity":1,"message":"1361","line":6,"column":15,"nodeType":"1315","messageId":"1316","endLine":6,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1427","line":16,"column":18,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1450","line":109,"column":23,"nodeType":"1315","messageId":"1316","endLine":109,"endColumn":35},{"ruleId":"1347","severity":1,"message":"1574","line":244,"column":8,"nodeType":"1349","endLine":244,"endColumn":26,"suggestions":"1706"},{"ruleId":"1313","severity":1,"message":"1363","line":4,"column":8,"nodeType":"1315","messageId":"1316","endLine":4,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1427","line":16,"column":19,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1413","line":16,"column":32,"nodeType":"1315","messageId":"1316","endLine":16,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1366","line":17,"column":8,"nodeType":"1315","messageId":"1316","endLine":17,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1362","line":18,"column":8,"nodeType":"1315","messageId":"1316","endLine":18,"endColumn":14},{"ruleId":"1313","severity":1,"message":"1547","line":107,"column":9,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1434","line":115,"column":10,"nodeType":"1315","messageId":"1316","endLine":115,"endColumn":17},{"ruleId":"1313","severity":1,"message":"1435","line":115,"column":19,"nodeType":"1315","messageId":"1316","endLine":115,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1356","line":122,"column":10,"nodeType":"1315","messageId":"1316","endLine":122,"endColumn":19},{"ruleId":"1313","severity":1,"message":"1357","line":122,"column":21,"nodeType":"1315","messageId":"1316","endLine":122,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1494","line":125,"column":10,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":22},{"ruleId":"1313","severity":1,"message":"1495","line":125,"column":24,"nodeType":"1315","messageId":"1316","endLine":125,"endColumn":39},{"ruleId":"1313","severity":1,"message":"1548","line":126,"column":10,"nodeType":"1315","messageId":"1316","endLine":126,"endColumn":23},{"ruleId":"1313","severity":1,"message":"1549","line":126,"column":25,"nodeType":"1315","messageId":"1316","endLine":126,"endColumn":41},{"ruleId":"1313","severity":1,"message":"1550","line":134,"column":10,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1551","line":134,"column":29,"nodeType":"1315","messageId":"1316","endLine":134,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1552","line":135,"column":10,"nodeType":"1315","messageId":"1316","endLine":135,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1553","line":136,"column":10,"nodeType":"1315","messageId":"1316","endLine":136,"endColumn":35},{"ruleId":"1313","severity":1,"message":"1554","line":139,"column":10,"nodeType":"1315","messageId":"1316","endLine":139,"endColumn":30},{"ruleId":"1347","severity":1,"message":"1707","line":213,"column":6,"nodeType":"1349","endLine":213,"endColumn":8,"suggestions":"1708"},{"ruleId":"1313","severity":1,"message":"1514","line":223,"column":9,"nodeType":"1315","messageId":"1316","endLine":223,"endColumn":30},{"ruleId":"1313","severity":1,"message":"1515","line":242,"column":9,"nodeType":"1315","messageId":"1316","endLine":242,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1523","line":286,"column":11,"nodeType":"1315","messageId":"1316","endLine":286,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1546","line":455,"column":9,"nodeType":"1315","messageId":"1316","endLine":455,"endColumn":32},{"ruleId":"1351","severity":1,"message":"1352","line":456,"column":24,"nodeType":"1353","messageId":"1354","endLine":456,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":459,"column":31,"nodeType":"1353","messageId":"1354","endLine":459,"endColumn":33},{"ruleId":"1313","severity":1,"message":"1626","line":490,"column":9,"nodeType":"1315","messageId":"1316","endLine":490,"endColumn":24},{"ruleId":"1351","severity":1,"message":"1352","line":550,"column":47,"nodeType":"1353","messageId":"1354","endLine":550,"endColumn":49},{"ruleId":"1313","severity":1,"message":"1334","line":1,"column":17,"nodeType":"1315","messageId":"1316","endLine":1,"endColumn":28},{"ruleId":"1313","severity":1,"message":"1412","line":2,"column":54,"nodeType":"1315","messageId":"1316","endLine":2,"endColumn":58},{"ruleId":"1313","severity":1,"message":"1361","line":5,"column":16,"nodeType":"1315","messageId":"1316","endLine":5,"endColumn":27},{"ruleId":"1313","severity":1,"message":"1709","line":100,"column":10,"nodeType":"1315","messageId":"1316","endLine":100,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1710","line":100,"column":28,"nodeType":"1315","messageId":"1316","endLine":100,"endColumn":47},{"ruleId":"1313","severity":1,"message":"1711","line":101,"column":10,"nodeType":"1315","messageId":"1316","endLine":101,"endColumn":29},{"ruleId":"1313","severity":1,"message":"1712","line":101,"column":31,"nodeType":"1315","messageId":"1316","endLine":101,"endColumn":53},{"ruleId":"1313","severity":1,"message":"1626","line":107,"column":9,"nodeType":"1315","messageId":"1316","endLine":107,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1534","line":114,"column":10,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":24},{"ruleId":"1313","severity":1,"message":"1535","line":114,"column":26,"nodeType":"1315","messageId":"1316","endLine":114,"endColumn":43},{"ruleId":"1347","severity":1,"message":"1623","line":155,"column":6,"nodeType":"1349","endLine":155,"endColumn":8,"suggestions":"1713"},{"ruleId":"1313","severity":1,"message":"1625","line":171,"column":12,"nodeType":"1315","messageId":"1316","endLine":171,"endColumn":26},{"ruleId":"1313","severity":1,"message":"1714","line":290,"column":13,"nodeType":"1315","messageId":"1316","endLine":290,"endColumn":14},{"ruleId":"1351","severity":1,"message":"1352","line":305,"column":24,"nodeType":"1353","messageId":"1354","endLine":305,"endColumn":26},{"ruleId":"1351","severity":1,"message":"1352","line":308,"column":31,"nodeType":"1353","messageId":"1354","endLine":308,"endColumn":33},{"ruleId":"1351","severity":1,"message":"1352","line":340,"column":47,"nodeType":"1353","messageId":"1354","endLine":340,"endColumn":49},{"ruleId":"1351","severity":1,"message":"1352","line":347,"column":42,"nodeType":"1353","messageId":"1354","endLine":347,"endColumn":44},{"ruleId":"1313","severity":1,"message":"1474","line":27,"column":10,"nodeType":"1315","messageId":"1316","endLine":27,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1589","line":29,"column":10,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1400","line":29,"column":28,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1478","line":29,"column":34,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1340","line":56,"column":7,"nodeType":"1315","messageId":"1316","endLine":56,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1627","line":102,"column":9,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":18},{"ruleId":"1347","severity":1,"message":"1628","line":108,"column":6,"nodeType":"1349","endLine":108,"endColumn":8,"suggestions":"1715"},{"ruleId":"1313","severity":1,"message":"1630","line":123,"column":9,"nodeType":"1315","messageId":"1316","endLine":123,"endColumn":25},{"ruleId":"1313","severity":1,"message":"1474","line":27,"column":10,"nodeType":"1315","messageId":"1316","endLine":27,"endColumn":20},{"ruleId":"1313","severity":1,"message":"1589","line":29,"column":10,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":18},{"ruleId":"1313","severity":1,"message":"1400","line":29,"column":28,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":32},{"ruleId":"1313","severity":1,"message":"1478","line":29,"column":34,"nodeType":"1315","messageId":"1316","endLine":29,"endColumn":38},{"ruleId":"1313","severity":1,"message":"1340","line":56,"column":7,"nodeType":"1315","messageId":"1316","endLine":56,"endColumn":16},{"ruleId":"1313","severity":1,"message":"1627","line":102,"column":9,"nodeType":"1315","messageId":"1316","endLine":102,"endColumn":18},{"ruleId":"1347","severity":1,"message":"1628","line":108,"column":6,"nodeType":"1349","endLine":108,"endColumn":8,"suggestions":"1716"},{"ruleId":"1313","severity":1,"message":"1630","line":123,"column":9,"nodeType":"1315","messageId":"1316","endLine":123,"endColumn":25},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1717"],"no-negated-in-lhs",["1718"],"'Router' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"1719","text":"1720"},"'makeStyles' is defined but never used.","'VisualisationHome' is defined but never used.","'CheckedInPatients' is defined but never used.","'HTSml' is defined but never used.","'permissions' is assigned a value but never used.","'useCallback' is defined but never used.","'ViewPNSForm' is defined but never used.","'toast' is defined but never used.","'Link' is defined but never used.","'Sticky' is defined but never used.","'ClientRefferalForm' is defined but never used.","'useStyles' is assigned a value but never used.","'saving' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'patientObjAge' is assigned a value but never used.","'setShowBackButton' is assigned a value but never used.","'setIndexInfo' is assigned a value but never used.","'setPermission' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'locationState'. Either include it or remove the dependency array.","ArrayExpression",["1721"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'momentLocalizer' is defined but never used.","'hivStatus' is assigned a value but never used.","'setHivStatus' is assigned a value but never used.","'htsResult2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'PatientCurrentObject'. Either include it or remove the dependency array.",["1722"],"'CardContent' is defined but never used.","'Select' is defined but never used.","'SaveIcon' is defined but never used.","'ToastContainer' is defined but never used.","'useLocation' is defined but never used.","'PhoneInput' is defined but never used.","'patient' is assigned a value but never used.","'setSerialNumber' is assigned a value but never used.","'otherTestKitUserInfoAvailable' is assigned a value but never used.","'setIsUserInformationAvailable' is assigned a value but never used.","'kitUserInformation' is assigned a value but never used.","'setKitUserInformation' is assigned a value but never used.","'serviceNeeded' is assigned a value but never used.","'hasConductedHIVST' is assigned a value but never used.","'setHasConductedHIVST' is assigned a value but never used.","'style' is assigned a value but never used.","'updateUserInformation' is assigned a value but never used.","'clearUserInformationList' is assigned a value but never used.","'response' is assigned a value but never used.","'setAge' is assigned a value but never used.","'handleDateOfBirthChange1' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator",{"range":"1723","text":"1720"},{"range":"1724","text":"1720"},"'axios' is defined but never used.","'token' is defined but never used.","'baseUrl' is defined but never used.","'classes' is assigned a value but never used.","'hideOtherMenu' is assigned a value but never used.","'familyIndexList' is assigned a value but never used.","'setFamilyIndexList' is assigned a value but never used.","'handleAction' is assigned a value but never used.","'LoadViewPage' is assigned a value but never used.","'Card' is defined but never used.","'CardBody' is defined but never used.","'MdDashboard' is defined but never used.","'Menu' is defined but never used.","'MenuList' is defined but never used.","'MenuButton' is defined but never used.","'MenuItem' is defined but never used.","'Label' is defined but never used.","'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'getServiceCode'. Either include it or remove the dependency array.",["1725"],"'getHospitalNumber' is assigned a value but never used.","'useEffect' is defined but never used.","'Spinner' is defined but never used.","'Input' is defined but never used.","'Form' is defined but never used.","'Message' is defined but never used.","'error' is defined but never used.","'validate' is assigned a value but never used.",{"range":"1726","text":"1720"},"'LMP' is assigned a value but never used.","'lastHts' is assigned a value but never used.","'lastVisitCount' is assigned a value but never used.","'checkModality' is assigned a value but never used.","'lastVistAndModality' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'patients' and 'patientsCurrentHts'. Either include them or remove the dependency array.",["1727"],"'Button' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'LabelRibbon' is defined but never used.","'Cookies' is defined but never used.","'kP' is assigned a value but never used.","'setKP' is assigned a value but never used.","'ageDisabled' is assigned a value but never used.","'setAgeDisabled' is assigned a value but never used.","'temp' is assigned a value but never used.","'setting' is assigned a value but never used.","'setSetting' is assigned a value but never used.","'hospitalNumStatus' is assigned a value but never used.","'setHospitalNumStatus' is assigned a value but never used.","'countries' is assigned a value but never used.","'setCountries' is assigned a value but never used.","'states' is assigned a value but never used.","'setStates' is assigned a value but never used.","'genders' is assigned a value but never used.","'setGenders' is assigned a value but never used.","'targetGroupValue' is assigned a value but never used.","'setTargetGroupValue' is assigned a value but never used.","'contentDropDown' is assigned a value but never used.","'history' is assigned a value but never used.","'nextForm' is assigned a value but never used.","'setNextForm' is assigned a value but never used.","'setObjValues' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'postTest'. Either include it or remove the dependency array. You can also do a functional update 'setPostTest(p => ...)' if you only need 'postTest' in the 'setPostTest' call.",["1728"],"'useHistory' is defined but never used.","'enrollSetting' is assigned a value but never used.","'entryPointCommunity' is assigned a value but never used.","'setEntryPointCommunity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1729"],"React Hook useEffect has missing dependencies: 'EntryPoint' and 'TargetGroupSetup'. Either include them or remove the dependency array.",["1730"],"'EnrollmentSetting' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'facilityList' is assigned a value but never used.","'ans' is assigned a value but never used.","'handleTargetGroupChange' is assigned a value but never used.","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode",{"range":"1731","text":"1720"},"'FaUserPlus' is defined but never used.","React Hook useEffect has a missing dependency: 'getListoFFamilyIndexInfo'. Either include it or remove the dependency array.",["1732"],"'Table' is defined but never used.","'Icon' is defined but never used.","'List' is defined but never used.","'LabelSui' is defined but never used.","'IconButton' is defined but never used.","'DeleteIcon' is defined but never used.","'LiveHelp' is defined but never used.","'provinces' is assigned a value but never used.","'isClientCurrentlyOnHiv' is assigned a value but never used.","'setClientCurrentlyOnHiv' is assigned a value but never used.","'selectedFamilyIndex' is assigned a value but never used.","'setSelectedFamilyIndex' is assigned a value but never used.","'isWillingToHaveChildrenTested' is assigned a value but never used.","'setIsWillingToHaveChildrenTested' is assigned a value but never used.","'retrieveFromIdToCode' is assigned a value but never used.","'setStateInfo' is assigned a value but never used.","'setLgaInfo' is assigned a value but never used.","'facilityName' is assigned a value but never used.","'setFacilityName' is assigned a value but never used.","'arrayFamilyIndexRequestDto' is assigned a value but never used.","'setArrayFamilyIndexRequestDto' is assigned a value but never used.","'arrayFamilyTestingTrackerRequestDTO' is assigned a value but never used.","'setArrayFamilyTestingTrackerRequestDTO' is assigned a value but never used.","'addIndexTracker' is assigned a value but never used.","'addIndexTracker2' is assigned a value but never used.","'selectedState' is assigned a value but never used.","'selectedFacility' is assigned a value but never used.","'selectedLga' is assigned a value but never used.","'loadOtherForm' is assigned a value but never used.","'main' is assigned a value but never used.","'loadFamilyIndexSetting' is assigned a value but never used.","'generateIndexClientId' is assigned a value but never used.","'indexClientId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchHtsClientUuid' and 'getContactId'. Either include them or remove the dependency array.",["1733"],"React Hook useEffect has missing dependencies: 'getCurrentTreatment', 'getSettings', 'getVL', 'loadGenders', 'props?.basicInfo?.personResponseDto?.address?.address', 'props.organizationInfo', and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1734"],"'checkPhoneNumberBasic' is assigned a value but never used.","'handleInputChangeObject' is assigned a value but never used.","'getProvinces' is assigned a value but never used.","'handleFamilyRelationshipChange' is assigned a value but never used.","'convertCodeToDisplay' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has missing dependencies: 'payload', 'props?.basicInfo?.personResponseDto?.dateOfBirth', and 'props?.patientObj?.personResponseDto?.dateOfBirth'. Either include them or remove the dependency array. You can also do a functional update 'setPayload(p => ...)' if you only need 'payload' in the 'setPayload' call.",["1735"],"'limit' is assigned a value but never used.","'hivTestDate' is assigned a value but never used.","'CheckTestResult' is defined but never used.","'CheckTestResult2' is defined but never used.","'Badge' is defined but never used.","'PersonIcon' is defined but never used.","'setHivTestDate' is assigned a value but never used.","'elicitedCount' is assigned a value but never used.","'setElicitedCount' is assigned a value but never used.","'setIsClientCurrentlyOnHiv' is assigned a value but never used.","'partnerId' is assigned a value but never used.","'objValuesIndex' is assigned a value but never used.","'setObjValuesIndex' is assigned a value but never used.","no-dupe-keys","Duplicate key 'numberOfPartnerIdentifiedFromClientIndex'.","ObjectExpression","'getPartnerId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStates', 'props?.basicInfo?.personResponseDto?.address?.address', 'props.organizationInfo', and 'viewPnIsnfo'. Either include them or remove the dependency array.",["1736"],"React Hook useEffect has a missing dependency: 'loadFamilyIndexSetting'. Either include it or remove the dependency array.",["1737"],"'getAllRecordByHTSClientId' is assigned a value but never used.","'handleItemClickPage' is assigned a value but never used.","'handleDateOfBirthChange' is assigned a value but never used.","'patientObj' is assigned a value but never used.","'allFacilities' is assigned a value but never used.","'setAllFacilities' is assigned a value but never used.","'receivingFacility' is assigned a value but never used.","'setReceivingFacility' is assigned a value but never used.","'selectedReceivingState' is assigned a value but never used.","'selectedReceivingFacility' is assigned a value but never used.","'selectedReceivingLga' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getProvincesWithId', 'loadGenders', and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1738"],"'getSex' is assigned a value but never used.","'getPNSInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPartnerId', 'getStates', 'htsClientInformation', 'objValues', 'props?.basicInfo?.personResponseDto?.address?.address', and 'props.organizationInfo'. Either include them or remove the dependency array. You can also do a functional update 'setObjValues(o => ...)' if you only need 'objValues' in the 'setObjValues' call.",["1739"],["1740"],"'viewPnsInfo' is assigned a value but never used.","'ModeEditIcon' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'contactId' is assigned a value but never used.","'setContactId' is assigned a value but never used.","'validateAddFamilyINdexDTO' is assigned a value but never used.","'updateFamilyIndexDTO' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFamilyIndexRequestList', 'getListOfFamilyTracker', 'getListoFFamilyIndexInfo', 'getSettings', 'loadGenders', 'props?.basicInfo?.personResponseDto?.address?.address', 'props.organizationInfo', 'props?.patientObj?.personResponseDto?.address?.address', and 'props.selectedRow'. Either include them or remove the dependency array. If 'setFamilyIndexRequestDto' needs the current value of 'props.selectedRow', you can also switch to useReducer instead of useState and read 'props.selectedRow' in the reducer.",["1741"],"'hideFamilyIndex' is assigned a value but never used.","'selectAMember' is assigned a value but never used.","'AddIndexContact' is defined but never used.","React Hook useEffect has missing dependencies: 'knowledgeAssessment' and 'riskAssessment'. Either include them or remove the dependency array. You can also do a functional update 'setRiskAssessment(r => ...)' if you only need 'riskAssessment' in the 'setRiskAssessment' call.",["1742"],"'fontWeight' is defined but never used.","'getDoubleSkipForm' is defined but never used.","'hideNumChild' is assigned a value but never used.","'setHideNumChild' is assigned a value but never used.","'gender' is assigned a value but never used.","'showPregancy' is assigned a value but never used.","'pregnancyCode' is assigned a value but never used.","'setPregnancyCode' is assigned a value but never used.","'patientAge' is assigned a value but never used.","'setPmtctSetting' is assigned a value but never used.","'facilityShortCode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CreateClientCode', 'EnrollmentSetting', 'PregnancyStatus', 'convertFromIdToDisplay', 'country', 'determinSex', 'getStates', 'objValues', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1743"],"'Dropdown' is defined but never used.","'Nav' is defined but never used.","'PerfectScrollbar' is defined but never used.","'Highcharts' is defined but never used.","'HighchartsReact' is defined but never used.","'NewlyEnrolledArtBySex' is defined but never used.","'options' is assigned a value but never used.","'options2' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"rencencyInterpretation\"] found.","Property","unnecessarilyComputedProperty",{"range":"1744","text":"1745"},{"range":"1746","text":"1745"},{"range":"1747","text":"1745"},{"range":"1748","text":"1745"},{"range":"1749","text":"1745"},{"range":"1750","text":"1745"},"React Hook useEffect has a missing dependency: 'recency'. Either include it or remove the dependency array. You can also do a functional update 'setRecency(r => ...)' if you only need 'recency' in the 'setRecency' call.",["1751"],"'RefferalForm' is defined but never used.","React Hook useEffect has a missing dependency: 'viewReferralInfo'. Either include it or remove the dependency array.",["1752"],"'PNSList' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","BreakStatement","'latestNextForm' is assigned a value but never used.","'ageCondition' is assigned a value but never used.","'pmctctModalityCondition' is assigned a value but never used.","'HivStatuscondition' is assigned a value but never used.","'lengthOfAuthForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStates'. Either include it or remove the dependency array.",["1753"],"'getProvincesId' is defined but never used.","'handleItemClick' is assigned a value but never used.","'patientId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'patients'. Either include it or remove the dependency array.",["1754"],"'handleIEditIndex' is assigned a value but never used.","'CardTitle' is defined but never used.","'CardText' is defined but never used.","'NewlyEnrolledArtByAge' is defined but never used.","'Progress' is defined but never used.","'chartValue' is assigned a value but never used.","'toggle' is assigned a value but never used.","'activeItem' is assigned a value but never used.","'chartPage' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'serviceMapping' is assigned a value but never used.",["1755"],["1756"],"'facilities1' is assigned a value but never used.","'setSelectedState' is assigned a value but never used.","'setSelectedFacility' is assigned a value but never used.","'setSelectedLga' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.row.row.id'. Either include it or remove the dependency array.",["1757"],"'handleInputChangeLocation' is assigned a value but never used.",["1758"],"'setSelectedReceivingFacility' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStateByCountryId', 'loadGenders', and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1759"],["1760"],"'postPayload' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'FetchHivstHistory'. Either include it or remove the dependency array.",["1761"],"'ReferralUnit' is defined but never used.","'set' is defined but never used.","'action' is assigned a value but never used.","'useState' is defined but never used.",{"range":"1762","text":"1720"},"React Hook useEffect has missing dependencies: 'KP' and 'props.activePage.activeObject.riskStratificationResponseDto'. Either include them or remove the dependency array. If 'setObjValues' needs the current value of 'props.activePage.activeObject.riskStratificationResponseDto', you can also switch to useReducer instead of useState and read 'props.activePage.activeObject.riskStratificationResponseDto' in the reducer.",["1763"],"'MSM_CODE' is assigned a value but never used.",{"range":"1764","text":"1745"},{"range":"1765","text":"1745"},{"range":"1766","text":"1745"},{"range":"1767","text":"1745"},{"range":"1768","text":"1745"},{"range":"1769","text":"1745"},["1770"],"'latestForm' is assigned a value but never used.",["1771"],"'resultStatus' is assigned a value but never used.","'setResultStatus' is assigned a value but never used.","'getPregnantCodeSet' is defined but never used.","React Hook useEffect has missing dependencies: 'knowledgeAssessment' and 'riskAssessment'. Either include them or remove the dependency array. You can also do a functional update 'setKnowledgeAssessment(k => ...)' if you only need 'knowledgeAssessment' in the 'setKnowledgeAssessment' call.",["1772"],"'MatButton' is defined but never used.","'Modal' is defined but never used.","React Hook useEffect has missing dependencies: 'EnrollmentSetting' and 'props.activePage.activeObject'. Either include them or remove the dependency array. If 'setObjValues' needs the current value of 'props.activePage.activeObject', you can also switch to useReducer instead of useState and read 'props.activePage.activeObject' in the reducer.",["1773"],"'handleClientCodeCheck' is assigned a value but never used.","'EditIcon' is defined but never used.","'userInfoList' is assigned a value but never used.",["1774"],"'clientCodeetail' is assigned a value but never used.","'clientCodeetail2' is assigned a value but never used.","'setDisableModality' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CreateClientCode', 'PregnancyStatus', and 'getSettingList'. Either include them or remove the dependency array.",["1775"],{"range":"1776","text":"1745"},{"range":"1777","text":"1745"},{"range":"1778","text":"1745"},{"range":"1779","text":"1745"},{"range":"1780","text":"1745"},{"range":"1781","text":"1745"},["1782"],"React Hook useEffect has missing dependencies: 'KP' and 'props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint'. Either include them or remove the dependency array.",["1783"],"React Hook useEffect has a missing dependency: 'retestingInfo'. Either include it or remove the dependency array.",["1784"],["1785"],"React Hook useEffect has missing dependencies: 'loadGenders' and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1786"],"'stateUnitOptions' is assigned a value but never used.","'setStateUnitOptions' is assigned a value but never used.","'districtUnitOptions' is assigned a value but never used.","'setDistrictUnitOptions' is assigned a value but never used.",["1787"],"'m' is assigned a value but never used.",["1788"],["1789"],"no-global-assign","no-unsafe-negation",[144,158],"token",{"desc":"1790","fix":"1791"},{"desc":"1792","fix":"1793"},[152,166],[152,166],{"desc":"1794","fix":"1795"},[147,161],{"desc":"1796","fix":"1797"},{"desc":"1798","fix":"1799"},{"desc":"1800","fix":"1801"},{"desc":"1802","fix":"1803"},[187,201],{"desc":"1804","fix":"1805"},{"desc":"1806","fix":"1807"},{"desc":"1808","fix":"1809"},{"desc":"1810","fix":"1811"},{"desc":"1812","fix":"1813"},{"desc":"1814","fix":"1815"},{"desc":"1816","fix":"1817"},{"desc":"1818","fix":"1819"},{"desc":"1814","fix":"1820"},{"desc":"1821","fix":"1822"},{"desc":"1823","fix":"1824"},{"desc":"1825","fix":"1826"},[7510,7536],"\"rencencyInterpretation\"",[7793,7819],[8133,8159],[8406,8432],[8678,8704],[8764,8790],{"desc":"1827","fix":"1828"},{"desc":"1829","fix":"1830"},{"desc":"1831","fix":"1832"},{"desc":"1833","fix":"1834"},{"desc":"1833","fix":"1835"},{"desc":"1831","fix":"1836"},{"desc":"1837","fix":"1838"},{"desc":"1833","fix":"1839"},{"desc":"1840","fix":"1841"},{"desc":"1837","fix":"1842"},{"desc":"1843","fix":"1844"},[181,195],{"desc":"1845","fix":"1846"},[6950,6976],[7233,7259],[7573,7599],[7846,7872],[8118,8144],[8204,8230],{"desc":"1827","fix":"1847"},{"desc":"1848","fix":"1849"},{"desc":"1823","fix":"1850"},{"desc":"1851","fix":"1852"},{"desc":"1798","fix":"1853"},{"desc":"1854","fix":"1855"},[7627,7653],[7910,7936],[8250,8276],[8523,8549],[8795,8821],[8881,8907],{"desc":"1827","fix":"1856"},{"desc":"1857","fix":"1858"},{"desc":"1859","fix":"1860"},{"desc":"1823","fix":"1861"},{"desc":"1862","fix":"1863"},{"desc":"1864","fix":"1865"},{"desc":"1833","fix":"1866"},{"desc":"1833","fix":"1867"},"Update the dependencies array to be: [locationState]",{"range":"1868","text":"1869"},"Update the dependencies array to be: [PatientCurrentObject]",{"range":"1870","text":"1871"},"Update the dependencies array to be: [getServiceCode]",{"range":"1872","text":"1873"},"Update the dependencies array to be: [props.patientObj, props.activePage, patients, patientsCurrentHts]",{"range":"1874","text":"1875"},"Update the dependencies array to be: [props.patientObj, postTest.hivTestResult, postTest]",{"range":"1876","text":"1877"},"Update the dependencies array to be: [objValues.age, props]",{"range":"1878","text":"1879"},"Update the dependencies array to be: [EntryPoint, TargetGroupSetup]",{"range":"1880","text":"1881"},"Update the dependencies array to be: [getListoFFamilyIndexInfo, props.patientObj]",{"range":"1882","text":"1883"},"Update the dependencies array to be: [fetchHtsClientUuid, getContactId]",{"range":"1884","text":"1885"},"Update the dependencies array to be: [getCurrentTreatment, getSettings, getVL, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1886","text":"1887"},"Update the dependencies array to be: [payload, props?.basicInfo?.personResponseDto?.dateOfBirth, props?.patientObj?.personResponseDto?.dateOfBirth]",{"range":"1888","text":"1889"},"Update the dependencies array to be: [getStates, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj, viewPnIsnfo]",{"range":"1890","text":"1891"},"Update the dependencies array to be: [loadFamilyIndexSetting]",{"range":"1892","text":"1893"},"Update the dependencies array to be: [getProvincesWithId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1894","text":"1895"},"Update the dependencies array to be: [getPartnerId, getStates, htsClientInformation, objValues, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props.patientObj]",{"range":"1896","text":"1897"},{"range":"1898","text":"1893"},"Update the dependencies array to be: [getFamilyIndexRequestList, getListOfFamilyTracker, getListoFFamilyIndexInfo, getSettings, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address, props.selectedRow]",{"range":"1899","text":"1900"},"Update the dependencies array to be: [knowledgeAssessment, props.patientObj, riskAssessment]",{"range":"1901","text":"1902"},"Update the dependencies array to be: [objValues.age, props.patientObj, props.extra.age, facilityCode, EnrollmentSetting, PregnancyStatus, getStates, determinSex, CreateClientCode, props, objValues, country, convertFromIdToDisplay]",{"range":"1903","text":"1904"},"Update the dependencies array to be: [recency.longTermLine, recency.verififcationLine, recency.controlLine, props.patientObj, recency]",{"range":"1905","text":"1906"},"Update the dependencies array to be: [viewReferralInfo]",{"range":"1907","text":"1908"},"Update the dependencies array to be: [getStates, props.patientObj]",{"range":"1909","text":"1910"},"Update the dependencies array to be: [patients]",{"range":"1911","text":"1912"},{"range":"1913","text":"1912"},{"range":"1914","text":"1910"},"Update the dependencies array to be: [props.row.row.id]",{"range":"1915","text":"1916"},{"range":"1917","text":"1912"},"Update the dependencies array to be: [getStateByCountryId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1918","text":"1919"},{"range":"1920","text":"1916"},"Update the dependencies array to be: [FetchHivstHistory, props.patientObj]",{"range":"1921","text":"1922"},"Update the dependencies array to be: [KP, props.activePage.activeObject.riskStratificationResponseDto, props.patientObj]",{"range":"1923","text":"1924"},{"range":"1925","text":"1906"},"Update the dependencies array to be: [postTest, props.patientObj]",{"range":"1926","text":"1927"},{"range":"1928","text":"1902"},"Update the dependencies array to be: [EnrollmentSetting, props.activePage.activeObject, props?.patientObj]",{"range":"1929","text":"1930"},{"range":"1931","text":"1877"},"Update the dependencies array to be: [props.patientObj, facilityCode, PregnancyStatus, CreateClientCode, getSettingList]",{"range":"1932","text":"1933"},{"range":"1934","text":"1906"},"Update the dependencies array to be: [KP, props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint, props.patientObj]",{"range":"1935","text":"1936"},"Update the dependencies array to be: [entryPointSetting, entryPoint, props.newHTSType, retestingInfo]",{"range":"1937","text":"1938"},{"range":"1939","text":"1902"},"Update the dependencies array to be: [loadGenders, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1940","text":"1941"},"Update the dependencies array to be: [getStates]",{"range":"1942","text":"1943"},{"range":"1944","text":"1912"},{"range":"1945","text":"1912"},[8576,8578],"[locationState]",[2523,2525],"[PatientCurrentObject]",[4362,4364],"[getServiceCode]",[3786,3822],"[props.patientObj, props.activePage, patients, patientsCurrentHts]",[5552,5594],"[props.patientObj, postTest.hivTestResult, postTest]",[5257,5272],"[objValues.age, props]",[5376,5378],"[EntryPoint, TargetGroupSetup]",[5877,5895],"[getListoFFamilyIndexInfo, props.patientObj]",[17741,17743],"[fetchHtsClientUuid, getContactId]",[19676,19678],"[getCurrentTreatment, getSettings, getVL, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address]",[35236,35238],"[payload, props?.basicInfo?.personResponseDto?.dateOfBirth, props?.patientObj?.personResponseDto?.dateOfBirth]",[10987,11005],"[getStates, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj, viewPnIsnfo]",[11064,11066],"[loadFamilyIndexSetting]",[6974,6976],"[getProvincesWithId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",[11117,11135],"[getPartnerId, getStates, htsClientInformation, objValues, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props.patientObj]",[11194,11196],[26237,26239],"[getFamilyIndexRequestList, getListOfFamilyTracker, getListoFFamilyIndexInfo, getSettings, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address, props.selectedRow]",[8477,8495],"[knowledgeAssessment, props.patientObj, riskAssessment]",[16602,16666],"[objValues.age, props.patientObj, props.extra.age, facilityCode, EnrollmentSetting, PregnancyStatus, getStates, determinSex, CreateClientCode, props, objValues, country, convertFromIdToDisplay]",[9598,9707],"[recency.longTermLine, recency.verififcationLine, recency.controlLine, props.patientObj, recency]",[5627,5629],"[viewReferralInfo]",[4161,4179],"[getStates, props.patientObj]",[3841,3843],"[patients]",[3808,3810],[4161,4179],[6538,6540],"[props.row.row.id]",[4142,4144],[7618,7620],"[getStateByCountryId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",[12594,12596],[3635,3653],"[FetchHivstHistory, props.patientObj]",[6740,6758],"[KP, props.activePage.activeObject.riskStratificationResponseDto, props.patientObj]",[9071,9180],[7023,7041],"[postTest, props.patientObj]",[7612,7630],[5286,5304],"[EnrollmentSetting, props.activePage.activeObject, props?.patientObj]",[5396,5438],[9741,9773],"[props.patientObj, facilityCode, PregnancyStatus, CreateClientCode, getSettingList]",[8927,9036],[6104,6122],"[KP, props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint, props.patientObj]",[6172,6221],"[entryPointSetting, entryPoint, props.newHTSType, retestingInfo]",[7990,8008],[6616,6618],"[loadGenders, props?.patientObj?.personResponseDto?.address?.address]",[4331,4333],"[getStates]",[3841,3843],[3819,3821]]