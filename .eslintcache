[{"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\index.js":"1","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\App.js":"2","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\context\\ThemeContext.js":"4","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\context\\ThemeDemo.js":"5","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Home.js":"6","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js":"7","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js":"8","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\HIVSTPatient.js":"9","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js":"10","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HTSList.js":"11","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\api.js":"12","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HTSML.js":"13","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\CheckedInPatients.js":"14","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js":"15","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\ViewEditHivst.js":"16","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientHtsEnrollment.js":"17","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RecencyTesting.js":"18","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PostTest.js":"19","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\BasicInfo.js":"20","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\Index.js":"21","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\HivTestResult.js":"22","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Others.js":"23","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\FamilyIndexhIstory.js":"24","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PreTest.js":"25","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RefferalForm.js":"26","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\FamilyIndexTestingForm.js":"27","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RiskStratification.js":"28","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\ViewPnsForm.js":"29","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RefferalUnit.js":"30","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\PnsForm.js":"31","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\PNSHistory.js":"32","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Elicitation\\Index.js":"33","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js":"34","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\ViewFamilyIndexForm.js":"35","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\ClientReferralHistory.js":"36","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\Referrall_view_update.js":"37","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\utils\\index.js":"38","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utility\\index.js":"39","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\HIVSTPatientHistory.js":"40","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\ClientRerralList.js":"41","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\RefferalUnit.js":"42","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\ServicesProvided.js":"43","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\PNSlist.js":"44","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\ExistenceClientHIVSTRegistration.js":"45","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContineousRegistrationTesting.js":"46","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Elicitation\\AddIndexContact.js":"47","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\History\\History.js":"48","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Elicitation\\IndexContactList.js":"49","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Elicitation\\AddIndexContact.js":"50","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\HIVSTPatientRegistration.js":"51","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\RiskStratification.js":"52","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Others.js":"53","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\RecencyTesting.js":"54","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\PostTest.js":"55","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Elicitation\\Index.js":"56","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\BasicInfo.js":"57","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\PreTest.js":"58","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\HivTestResult.js":"59","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\ClientReferral\\ReferralUnit.js":"60","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Elicitation\\IndexContactList.js":"61","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\FeedbackModal.js":"62","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\RecencyTesting.js":"63","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\PostTest.js":"64","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\RiskStratification.js":"65","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Others.js":"66","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\HivTestResult.js":"67","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\PreTest.js":"68","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Index.js":"69","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtBySex.js":"70","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Elicitation\\Index.js":"71","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\BasicInfo.js":"72","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Elicitation\\AddIndexContact.js":"73","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Elicitation\\IndexContactList.js":"74","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtBySex.js":"75","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtByAge.js":"76","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtByAge.js":"77","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\reuseables\\Loading.js":"78","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\hooks\\useCheckedInPatientData.js":"79","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\hooks\\usePermissions.js":"80","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\reuseables\\CustomTable.js":"81","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utils\\index.js":"82","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utils\\localstorage.js":"83","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientVisits.js":"84","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\hooks\\usePatientData.js":"85","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\PatientName.js":"86","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\PatientActions.js":"87","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\CheckinPatientsAlert.js":"88","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\useLocalStorage.js":"89","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utils\\queryClient.js":"90","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\hooks\\useGetCodesets.hook.js":"91","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\services\\getCodesets.service.js":"92"},{"size":739,"mtime":1733920417244,"results":"93","hashOfConfig":"94"},{"size":1456,"mtime":1748120753307,"results":"95","hashOfConfig":"94"},{"size":375,"mtime":1733920422099,"results":"96","hashOfConfig":"94"},{"size":9235,"mtime":1733920417404,"results":"97","hashOfConfig":"94"},{"size":3056,"mtime":1733920417407,"results":"98","hashOfConfig":"94"},{"size":2756,"mtime":1749567539857,"results":"99","hashOfConfig":"94"},{"size":36078,"mtime":1737458248955,"results":"100","hashOfConfig":"94"},{"size":4571,"mtime":1734518612186,"results":"101","hashOfConfig":"94"},{"size":9318,"mtime":1734518612147,"results":"102","hashOfConfig":"94"},{"size":5807,"mtime":1734688111542,"results":"103","hashOfConfig":"94"},{"size":6365,"mtime":1734688134004,"results":"104","hashOfConfig":"94"},{"size":608,"mtime":1749555798572,"results":"105","hashOfConfig":"94"},{"size":14654,"mtime":1733920474009,"results":"106","hashOfConfig":"94"},{"size":14258,"mtime":1749567355868,"results":"107","hashOfConfig":"94"},{"size":10478,"mtime":1734518612184,"results":"108","hashOfConfig":"94"},{"size":130339,"mtime":1733920474005,"results":"109","hashOfConfig":"94"},{"size":25071,"mtime":1749029956573,"results":"110","hashOfConfig":"94"},{"size":45097,"mtime":1737377289497,"results":"111","hashOfConfig":"94"},{"size":29157,"mtime":1737377262180,"results":"112","hashOfConfig":"94"},{"size":78184,"mtime":1737382390405,"results":"113","hashOfConfig":"94"},{"size":6796,"mtime":1733920422058,"results":"114","hashOfConfig":"94"},{"size":81831,"mtime":1737377247150,"results":"115","hashOfConfig":"94"},{"size":12827,"mtime":1733920421897,"results":"116","hashOfConfig":"94"},{"size":12586,"mtime":1736681311729,"results":"117","hashOfConfig":"94"},{"size":91967,"mtime":1737377274738,"results":"118","hashOfConfig":"94"},{"size":8919,"mtime":1736681513746,"results":"119","hashOfConfig":"94"},{"size":107605,"mtime":1749029975443,"results":"120","hashOfConfig":"94"},{"size":56005,"mtime":1737382073967,"results":"121","hashOfConfig":"94"},{"size":90297,"mtime":1749029876214,"results":"122","hashOfConfig":"94"},{"size":68036,"mtime":1749029982076,"results":"123","hashOfConfig":"94"},{"size":91167,"mtime":1749029876210,"results":"124","hashOfConfig":"94"},{"size":2234,"mtime":1737453302871,"results":"125","hashOfConfig":"94"},{"size":2129,"mtime":1736681575266,"results":"126","hashOfConfig":"94"},{"size":11198,"mtime":1749029942555,"results":"127","hashOfConfig":"94"},{"size":127609,"mtime":1749029997626,"results":"128","hashOfConfig":"94"},{"size":3236,"mtime":1737453498473,"results":"129","hashOfConfig":"94"},{"size":8665,"mtime":1736681513783,"results":"130","hashOfConfig":"94"},{"size":1243,"mtime":1734518612193,"results":"131","hashOfConfig":"94"},{"size":14885,"mtime":1749030011713,"results":"132","hashOfConfig":"94"},{"size":7769,"mtime":1736681218159,"results":"133","hashOfConfig":"94"},{"size":10892,"mtime":1736681597619,"results":"134","hashOfConfig":"94"},{"size":66918,"mtime":1733920474064,"results":"135","hashOfConfig":"94"},{"size":29063,"mtime":1733920474053,"results":"136","hashOfConfig":"94"},{"size":11441,"mtime":1736681597570,"results":"137","hashOfConfig":"94"},{"size":5070,"mtime":1733920473999,"results":"138","hashOfConfig":"94"},{"size":37255,"mtime":1749029950338,"results":"139","hashOfConfig":"94"},{"size":41610,"mtime":1737382412738,"results":"140","hashOfConfig":"94"},{"size":7625,"mtime":1736681177758,"results":"141","hashOfConfig":"94"},{"size":7982,"mtime":1736681597574,"results":"142","hashOfConfig":"94"},{"size":41579,"mtime":1737382364582,"results":"143","hashOfConfig":"94"},{"size":126801,"mtime":1736681239943,"results":"144","hashOfConfig":"94"},{"size":47703,"mtime":1749563695606,"results":"145","hashOfConfig":"94"},{"size":12703,"mtime":1737453284256,"results":"146","hashOfConfig":"94"},{"size":41021,"mtime":1737453270963,"results":"147","hashOfConfig":"94"},{"size":30063,"mtime":1737453243454,"results":"148","hashOfConfig":"94"},{"size":2098,"mtime":1737453254350,"results":"149","hashOfConfig":"94"},{"size":42107,"mtime":1749565532702,"results":"150","hashOfConfig":"94"},{"size":83136,"mtime":1737453221493,"results":"151","hashOfConfig":"94"},{"size":82144,"mtime":1749029876197,"results":"152","hashOfConfig":"94"},{"size":64007,"mtime":1736681096694,"results":"153","hashOfConfig":"94"},{"size":7893,"mtime":1733920473982,"results":"154","hashOfConfig":"94"},{"size":24680,"mtime":1736681257143,"results":"155","hashOfConfig":"94"},{"size":43787,"mtime":1737377383990,"results":"156","hashOfConfig":"94"},{"size":31875,"mtime":1737377357508,"results":"157","hashOfConfig":"94"},{"size":52320,"mtime":1749565451976,"results":"158","hashOfConfig":"94"},{"size":12444,"mtime":1749565619232,"results":"159","hashOfConfig":"94"},{"size":116791,"mtime":1749029876279,"results":"160","hashOfConfig":"94"},{"size":85547,"mtime":1737377367583,"results":"161","hashOfConfig":"94"},{"size":2624,"mtime":1733920422057,"results":"162","hashOfConfig":"94"},{"size":1185,"mtime":1733920422047,"results":"163","hashOfConfig":"94"},{"size":2237,"mtime":1733920422007,"results":"164","hashOfConfig":"94"},{"size":34040,"mtime":1749563741341,"results":"165","hashOfConfig":"94"},{"size":42067,"mtime":1737382338529,"results":"166","hashOfConfig":"94"},{"size":7892,"mtime":1736681597619,"results":"167","hashOfConfig":"94"},{"size":1221,"mtime":1733920422054,"results":"168","hashOfConfig":"94"},{"size":1209,"mtime":1733920422046,"results":"169","hashOfConfig":"94"},{"size":1600,"mtime":1733920422053,"results":"170","hashOfConfig":"94"},{"size":240,"mtime":1733036858095,"results":"171","hashOfConfig":"94"},{"size":901,"mtime":1736681114662,"results":"172","hashOfConfig":"94"},{"size":961,"mtime":1737459296616,"results":"173","hashOfConfig":"94"},{"size":3778,"mtime":1734518612195,"results":"174","hashOfConfig":"94"},{"size":3604,"mtime":1707926153985,"results":"175","hashOfConfig":"94"},{"size":2813,"mtime":1748120753332,"results":"176","hashOfConfig":"94"},{"size":31531,"mtime":1748120753332,"results":"177","hashOfConfig":"94"},{"size":917,"mtime":1733036857727,"results":"178","hashOfConfig":"94"},{"size":654,"mtime":1733036857898,"results":"179","hashOfConfig":"94"},{"size":1387,"mtime":1733036857897,"results":"180","hashOfConfig":"94"},{"size":3744,"mtime":1748120753307,"results":"181","hashOfConfig":"94"},{"size":1312,"mtime":1736716658957,"results":"182","hashOfConfig":"94"},{"size":498,"mtime":1749566676865,"results":"183","hashOfConfig":"94"},{"size":547,"mtime":1748120753332,"results":"184","hashOfConfig":"94"},{"size":490,"mtime":1748120753332,"results":"185","hashOfConfig":"94"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"189"},"1vae3sc",{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"189"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"204"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"189"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"189"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"213","usedDeprecatedRules":"189"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"216","usedDeprecatedRules":"189"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"189"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"189"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":6,"source":"233","usedDeprecatedRules":"204"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"204"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"204"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"243"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"204"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"204"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"252","usedDeprecatedRules":"189"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"204"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"204"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"204"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"189"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"204"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"189"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"189"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"189"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"189"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"189"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"189"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"189"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"189"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"189"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"204"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"316","usedDeprecatedRules":"189"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"204"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"189"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"189"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"189"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":6,"source":"333","usedDeprecatedRules":"189"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"189"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"189"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"189"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"189"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"189"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"204"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":6,"source":"358","usedDeprecatedRules":"189"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"189"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"189"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"189"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"243"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"189"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"189"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"189"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"243"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"243"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"410","usedDeprecatedRules":"189"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"243"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"189"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\index.js",["428"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./../src/main/webapp/reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./../src/main/webapp/context/ThemeContext\"; \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <Router basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </Router>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["429","430"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\App.js",["431"],"import React from \"react\";\r\nimport { MemoryRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./main/webapp/vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./../src/main/webapp/css/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Home from \"./main/webapp/jsx/components/Home\";\r\nimport PatientDetail from \"./main/webapp/jsx/components/Patient/PatientDetail\";\r\nimport HIVSTPatient from \"./main/webapp/jsx/components/Patient/HIVST/HIVSTPatient\";\r\nimport CheckedInPatientsAlert from \"./main/webapp/jsx/components/Globals/CheckinPatientsAlert\";\r\nimport { QueryClientProvider } from \"react-query\";\r\nimport { ReactQueryDevtools } from \"react-query/devtools\";\r\nimport { queryClient } from \"./main/webapp/utils/queryClient\";\r\n\r\n\r\nexport default function App() {\r\n \r\n  return (\r\n    <div>\r\n      <QueryClientProvider client={queryClient}>\r\n        <ToastContainer />\r\n        <CheckedInPatientsAlert />\r\n        <Switch>\r\n          <Route path=\"/patient-history\">\r\n            <PatientDetail />\r\n          </Route>\r\n\r\n          <Route path=\"/register-hivst-patient\">\r\n            <HIVSTPatient />\r\n          </Route>\r\n\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n        <ReactQueryDevtools initialIsOpen={false} />\r\n      </QueryClientProvider>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\context\\ThemeContext.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\context\\ThemeDemo.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Home.js",["432"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\RegisterPatient.js",["433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448"],"import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport ViewPNSForm from \"./NewRegistration/PartnerNotificationServices/ViewPnsForm\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\n//import {TiArrowBack} from 'react-icons/ti'\r\n//import {token, url as baseUrl } from \"../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Icon, Menu, Sticky } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport BasicInfo from \"./NewRegistration/BasicInfo\";\r\nimport PreTest from \"./NewRegistration/PreTest\";\r\nimport HivTestResult from \"./NewRegistration/HivTestResult\";\r\nimport IndexingContactTracing from \"./NewRegistration/Elicitation/Index\";\r\nimport Others from \"./NewRegistration/Others\";\r\nimport PostTest from \"./NewRegistration/PostTest\";\r\nimport RecencyTesting from \"./NewRegistration/RecencyTesting\";\r\nimport RiskStratification from \"./NewRegistration/RiskStratification\";\r\nimport ClientRefferalForm from \"./NewRegistration/RefferalForm\";\r\nimport { getAcount, getNextForm, getPreviousForm, getCurentForm } from \"../../../utility\";\r\nimport { getCheckModality } from \"../../../utility\";\r\nimport FamilyIndexTestingForm from \"./NewRegistration/FamilyIndexTestingForm\";\r\nimport PnsForm from \"./NewRegistration/PartnerNotificationServices/PnsForm\";\r\nimport RefferralUnit from \"./NewRegistration/RefferalUnit\";\r\nimport ClientReferralHistory from \"./NewRegistrationEnrollement/ClientReferral/ClientReferralHistory\";\r\nimport ViewClientReferral from \"./NewRegistrationEnrollement/ClientReferral/Referrall_view_update\";\r\nimport FamilyIndexHistory from \"./NewRegistration/PartnerNotificationServices/FamilyIndexhIstory\";\r\nimport ViewFamilyIndexTestingForm from \"./NewRegistration/PartnerNotificationServices/ViewFamilyIndexForm\";\r\nimport { calculate_age } from \"../utils\";\r\nimport PNSHistory from \"./NewRegistration/PartnerNotificationServices/PNSHistory\";\r\nimport { usePermissions } from \"../../../hooks/usePermissions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst UserRegistration = (props) => {\r\n  //const classes = useStyles();\r\n  const location = useLocation();\r\n  const locationState = location.state;\r\n  const history = useHistory();\r\n  const [saving, setSaving] = useState(false);\r\n  const [activeItem, setactiveItem] = useState(\"risk\");\r\n  const [completed, setCompleted] = useState([]);\r\n  const [basicInfo, setBasicInfo] = useState({});\r\n  const [organizationInfo, setOrganizationInfo] = useState({});\r\n  const [patientObjAge, setPatientObjAge] = useState(0);\r\n  const [hideOtherMenu, setHideOtherMenu] = useState(true);\r\n  const [row, setRow] = useState({});\r\n  const [showBackButton, setShowBackButton] = useState(true);\r\n  const [indexInfo, setIndexInfo] = useState(\r\n    JSON.parse(localStorage.getItem(\"index\"))\r\n  );\r\n  const handleItemClick = (activeItem) => {\r\n    setactiveItem(activeItem);\r\n\r\n    //setCompleted({...completed, ...completedMenu})\r\n  };  \r\n  \r\n  const [action, setAction] = useState(\"\");\r\n\r\n\r\n  // const [permissions, setPermission] = useState(\r\n  //   JSON.parse(localStorage.getItem(\"stringifiedPermmision\")) || []\r\n  // );\r\n\r\n  const getFacilityAccount = () => {\r\n    getAcount()\r\n      .then((response) => {\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const { hasPermission } = usePermissions();\r\n\r\n  const [selectedRow, setSelectedRow] = useState({});\r\n  const [extra, setExtra] = useState({\r\n    risk: \"\",\r\n    index: \"\",\r\n    pre: \"\",\r\n    post: \"\",\r\n    recency: \"\",\r\n    elicitation: \"\",\r\n  });\r\n  const [patientObj, setPatientObj] = useState({\r\n    breastFeeding: \"\",\r\n    capturedBy: \"\",\r\n    riskStratificationCode: \"\",\r\n    cd4: {},\r\n    clientCode: \"\",\r\n    confirmatoryTest: {},\r\n    dateVisit: \"\",\r\n    extra: {},\r\n    firstTimeVisit: \"\",\r\n    hepatitisTesting: {},\r\n    hivTestResult: \"\",\r\n    id: \"\",\r\n    indexClient: \"\",\r\n    indexClientCode: \"\",\r\n    indexElicitation: [\r\n      {\r\n        address: \"\",\r\n        altPhoneNumber: \"\",\r\n        archived: 0,\r\n        currentlyLiveWithPartner: true,\r\n        datePartnerCameForTesting: \"\",\r\n        dob: \"\",\r\n        extra: {},\r\n        facilityId: 0,\r\n        firstName: \"\",\r\n        hangOutSpots: \"\",\r\n        htsClient: {\r\n          archived: 0,\r\n          breastFeeding: 0,\r\n          capturedBy: \"\",\r\n          cd4: {},\r\n          clientCode: \"\",\r\n          confirmatoryTest: {},\r\n          dateVisit: \"\",\r\n          extra: {},\r\n          facilityId: 0,\r\n          firstTimeVisit: true,\r\n          hepatitisTesting: {},\r\n          hivTestResult: \"\",\r\n          id: 0,\r\n          indexClient: true,\r\n          indexClientCode: \"\",\r\n          indexNotificationServicesElicitation: {},\r\n          knowledgeAssessment: {},\r\n          numChildren: 0,\r\n          numWives: 0,\r\n          others: {},\r\n          person: {\r\n            active: \"\",\r\n            address: {},\r\n            archived: 0,\r\n            contact: {},\r\n            contactPoint: {},\r\n            createdDate: \"\",\r\n            dateOfBirth: \"\",\r\n            dateOfRegistration: \"\",\r\n            deceased: true,\r\n            deceasedDateTime: \"\",\r\n            education: {},\r\n            employmentStatus: {},\r\n            emrId: \"\",\r\n            facilityId: 0,\r\n            firstName: \"string\",\r\n            gender: {},\r\n            hospitalNumber: \"\",\r\n            id: \"\",\r\n            identifier: {},\r\n            isDateOfBirthEstimated: true,\r\n            lastModifiedDate: \"\",\r\n            maritalStatus: {},\r\n            new: true,\r\n            ninNumber: \"\",\r\n            organization: {},\r\n            otherName: \"\",\r\n            sex: \"\",\r\n            surname: \"\",\r\n            uuid: \"\",\r\n          },\r\n          personUuid: \"\",\r\n          postTestCounselingKnowledgeAssessment: {},\r\n          pregnant: \"\",\r\n          previouslyTested: true,\r\n          recency: {},\r\n          referredFrom: \"\",\r\n          relationWithIndexClient: \"\",\r\n          riskAssessment: {},\r\n          sexPartnerRiskAssessment: {},\r\n          stiScreening: {},\r\n          syphilisTesting: {},\r\n          targetGroup: 0,\r\n          tbScreening: {},\r\n          test1: {},\r\n          testingSetting: \"\",\r\n          tieBreakerTest: {},\r\n          typeCounseling: \"\",\r\n          uuid: \"\",\r\n        },\r\n        htsClientUuid: \"\",\r\n        id: \"\",\r\n        isDateOfBirthEstimated: true,\r\n        lastName: \"\",\r\n        middleName: \"\",\r\n        notificationMethod: \"\",\r\n        partnerTestedPositive: \"\",\r\n        phoneNumber: \"\",\r\n        physicalHurt: \"\",\r\n        relationshipToIndexClient: \"\",\r\n        sex: \"\",\r\n        sexuallyUncomfortable: \"\",\r\n        threatenToHurt: \"\",\r\n        uuid: \"\",\r\n      },\r\n    ],\r\n    indexNotificationServicesElicitation: {},\r\n    knowledgeAssessment: {},\r\n    numChildren: \"\",\r\n    numWives: \"\",\r\n    others: {},\r\n    personId: \"\",\r\n    personResponseDto: {\r\n      active: true,\r\n\r\n      address: {\r\n        address: [\r\n          {\r\n            city: \"\",\r\n            line: [\"\"],\r\n            stateId: \"\",\r\n            district: \"\",\r\n            countryId: 1,\r\n            postalCode: \"\",\r\n            organisationUnitId: 0,\r\n          },\r\n        ],\r\n      },\r\n      biometricStatus: true,\r\n      checkInDate: \"\",\r\n      contact: {},\r\n      contactPoint: {\r\n        contactPoint: [\r\n          {\r\n            type: \"phone\",\r\n            value: \"\",\r\n          },\r\n        ],\r\n      },\r\n      dateOfBirth: \"\",\r\n      dateOfRegistration: \"\",\r\n      deceased: true,\r\n      deceasedDateTime: \"\",\r\n      education: {},\r\n      employmentStatus: {},\r\n      emrId: \"\",\r\n      encounterDate: \"\",\r\n      facilityId: \"\",\r\n      firstName: \"\",\r\n      gender: {},\r\n      id: \"\",\r\n      identifier: {},\r\n      isDateOfBirthEstimated: true,\r\n      maritalStatus: {},\r\n      ninNumber: \"\",\r\n      organization: {},\r\n      otherName: \"\",\r\n      sex: \"\",\r\n      surname: \"\",\r\n      visitId: \"\",\r\n    },\r\n    postTestCounselingKnowledgeAssessment: {},\r\n    pregnant: \"\",\r\n    previouslyTested: \"\",\r\n    recency: {},\r\n    referredFrom: \"\",\r\n    relationWithIndexClient: \"\",\r\n    riskAssessment: {},\r\n    sexPartnerRiskAssessment: {},\r\n    stiScreening: {},\r\n    syphilisTesting: {},\r\n    targetGroup: \"\",\r\n    tbScreening: {},\r\n    test1: {},\r\n    testingSetting: \"\",\r\n    tieBreakerTest: {},\r\n    typeCounseling: \"\",\r\n    riskStratificationResponseDto: null,\r\n  });\r\n  const [modalityCheck, setModalityCheck] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getFacilityAccount();\r\n    if (locationState && locationState.patientObj) {\r\n      setPatientObj(locationState.patientObj);\r\n    }\r\n  }, []);\r\n  \r\n\r\n \r\n\r\nconst clearInfo=()=>{\r\n  setCompleted([])\r\n  setPatientObj({\r\n    breastFeeding: \"\",\r\n    capturedBy: \"\",\r\n    riskStratificationCode: \"\",\r\n    cd4: {},\r\n    clientCode: \"\",\r\n    confirmatoryTest: {},\r\n    dateVisit: \"\",\r\n    extra: {},\r\n    firstTimeVisit: \"\",\r\n    hepatitisTesting: {},\r\n    hivTestResult: \"\",\r\n    id: \"\",\r\n    indexClient: \"\",\r\n    indexClientCode: \"\",\r\n    indexElicitation: [\r\n      {\r\n        address: \"\",\r\n        altPhoneNumber: \"\",\r\n        archived: 0,\r\n        currentlyLiveWithPartner: true,\r\n        datePartnerCameForTesting: \"\",\r\n        dob: \"\",\r\n        extra: {},\r\n        facilityId: 0,\r\n        firstName: \"\",\r\n        hangOutSpots: \"\",\r\n        htsClient: {\r\n          archived: 0,\r\n          breastFeeding: 0,\r\n          capturedBy: \"\",\r\n          cd4: {},\r\n          clientCode: \"\",\r\n          confirmatoryTest: {},\r\n          dateVisit: \"\",\r\n          extra: {},\r\n          facilityId: 0,\r\n          firstTimeVisit: true,\r\n          hepatitisTesting: {},\r\n          hivTestResult: \"\",\r\n          id: 0,\r\n          indexClient: true,\r\n          indexClientCode: \"\",\r\n          indexNotificationServicesElicitation: {},\r\n          knowledgeAssessment: {},\r\n          numChildren: 0,\r\n          numWives: 0,\r\n          others: {},\r\n          person: {\r\n            active: \"\",\r\n            address: {},\r\n            archived: 0,\r\n            contact: {},\r\n            contactPoint: {},\r\n            createdDate: \"\",\r\n            dateOfBirth: \"\",\r\n            dateOfRegistration: \"\",\r\n            deceased: true,\r\n            deceasedDateTime: \"\",\r\n            education: {},\r\n            employmentStatus: {},\r\n            emrId: \"\",\r\n            facilityId: 0,\r\n            firstName: \"string\",\r\n            gender: {},\r\n            hospitalNumber: \"\",\r\n            id: \"\",\r\n            identifier: {},\r\n            isDateOfBirthEstimated: true,\r\n            lastModifiedDate: \"\",\r\n            maritalStatus: {},\r\n            new: true,\r\n            ninNumber: \"\",\r\n            organization: {},\r\n            otherName: \"\",\r\n            sex: \"\",\r\n            surname: \"\",\r\n            uuid: \"\",\r\n          },\r\n          personUuid: \"\",\r\n          postTestCounselingKnowledgeAssessment: {},\r\n          pregnant: \"\",\r\n          previouslyTested: true,\r\n          recency: {},\r\n          referredFrom: \"\",\r\n          relationWithIndexClient: \"\",\r\n          riskAssessment: {},\r\n          sexPartnerRiskAssessment: {},\r\n          stiScreening: {},\r\n          syphilisTesting: {},\r\n          targetGroup: 0,\r\n          tbScreening: {},\r\n          test1: {},\r\n          testingSetting: \"\",\r\n          tieBreakerTest: {},\r\n          typeCounseling: \"\",\r\n          uuid: \"\",\r\n        },\r\n        htsClientUuid: \"\",\r\n        id: \"\",\r\n        isDateOfBirthEstimated: true,\r\n        lastName: \"\",\r\n        middleName: \"\",\r\n        notificationMethod: \"\",\r\n        partnerTestedPositive: \"\",\r\n        phoneNumber: \"\",\r\n        physicalHurt: \"\",\r\n        relationshipToIndexClient: \"\",\r\n        sex: \"\",\r\n        sexuallyUncomfortable: \"\",\r\n        threatenToHurt: \"\",\r\n        uuid: \"\",\r\n      },\r\n    ],\r\n    indexNotificationServicesElicitation: {},\r\n    knowledgeAssessment: {},\r\n    numChildren: \"\",\r\n    numWives: \"\",\r\n    others: {},\r\n    personId: \"\",\r\n    personResponseDto: {\r\n      active: true,\r\n\r\n      address: {\r\n        address: [\r\n          {\r\n            city: \"\",\r\n            line: [\"\"],\r\n            stateId: \"\",\r\n            district: \"\",\r\n            countryId: 1,\r\n            postalCode: \"\",\r\n            organisationUnitId: 0,\r\n          },\r\n        ],\r\n      },\r\n      biometricStatus: true,\r\n      checkInDate: \"\",\r\n      contact: {},\r\n      contactPoint: {\r\n        contactPoint: [\r\n          {\r\n            type: \"phone\",\r\n            value: \"\",\r\n          },\r\n        ],\r\n      },\r\n      dateOfBirth: \"\",\r\n      dateOfRegistration: \"\",\r\n      deceased: true,\r\n      deceasedDateTime: \"\",\r\n      education: {},\r\n      employmentStatus: {},\r\n      emrId: \"\",\r\n      encounterDate: \"\",\r\n      facilityId: \"\",\r\n      firstName: \"\",\r\n      gender: {},\r\n      id: \"\",\r\n      identifier: {},\r\n      isDateOfBirthEstimated: true,\r\n      maritalStatus: {},\r\n      ninNumber: \"\",\r\n      organization: {},\r\n      otherName: \"\",\r\n      sex: \"\",\r\n      surname: \"\",\r\n      visitId: \"\",\r\n    },\r\n    postTestCounselingKnowledgeAssessment: {},\r\n    pregnant: \"\",\r\n    previouslyTested: \"\",\r\n    recency: {},\r\n    referredFrom: \"\",\r\n    relationWithIndexClient: \"\",\r\n    riskAssessment: {},\r\n    sexPartnerRiskAssessment: {},\r\n    stiScreening: {},\r\n    syphilisTesting: {},\r\n    targetGroup: \"\",\r\n    tbScreening: {},\r\n    test1: {},\r\n    testingSetting: \"\",\r\n    tieBreakerTest: {},\r\n    typeCounseling: \"\",\r\n    riskStratificationResponseDto: null,\r\n  })\r\n  setPatientObjAge(0)\r\n  setHideOtherMenu(true)\r\n  setExtra({\r\n    risk: \"\",\r\n    index: \"\",\r\n    pre: \"\",\r\n    post: \"\",\r\n    recency: \"\",\r\n    elicitation: \"\",\r\n  })\r\n  setOrganizationInfo({})\r\n}\r\n\r\n\r\nconst fetchPrevForm=(e)=>{\r\n  if( activeItem === \"risk\"){\r\n    history.push(\"/\");\r\n\r\n  }else{\r\n    e.preventDefault()\r\n  let currentForm =   getCurentForm(activeItem)\r\n\r\n    let age = calculate_age(\r\n      basicInfo?.personResponseDto?.dateOfBirth\r\n        ? basicInfo?.personResponseDto?.dateOfBirth\r\n        : patientObj?.personResponseDto?.dateOfBirth\r\n    );\r\n\r\n    let hivStatus = patientObj?.hivTestResult;\r\n\r\n    let checkModality = patientObj?.riskStratificationResponseDto?.testingSetting? patientObj.riskStratificationResponseDto.testingSetting: \"\";\r\n    let isPMTCTModality =getCheckModality(checkModality)\r\n\r\n\r\n  let answer =  getPreviousForm(currentForm, age, isPMTCTModality, hivStatus);\r\n  if (answer[0]  && answer[1]) {\r\n    if(answer[0] === \"fit\"){\r\n      handleItemClick(\"fit-history\");\r\n\r\n    }else if(answer[0] === \"pns\"){\r\n\r\n      handleItemClick(\"pns-history\");\r\n\r\n    }else{\r\n      handleItemClick(answer[0]);\r\n\r\n    }\r\n  }else{\r\n  history.push(\"/\");\r\n\r\n  }\r\n}\r\n}\r\n\r\n  useEffect(() => {\r\n  \r\n    setModalityCheck(\r\n      getCheckModality(patientObj?.riskStratificationResponseDto?.testingSetting)\r\n    );\r\n  }, [patientObj]);\r\n\r\n  const permissions = useMemo(\r\n    () => ({\r\n      canSeeRequestAndResultForm: hasPermission(\"request_and_result_form\"),\r\n      canSeeNigeriaPnsForm: hasPermission(\"nigeria_pns_form\"),\r\n      canSeeRefferalForm: hasPermission(\"referral_form\")\r\n    }),\r\n    [hasPermission]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>\r\n              HTS /{\" \"}\r\n              <span\r\n                style={{\r\n                  color: \"#014D88\",\r\n                  fontSize: \"1.1rem\",\r\n                  fontWeight: \"bolder\",\r\n                }}\r\n              >\r\n                NEW HTS CLIENT\r\n              </span>\r\n            </h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <Card>\r\n        <CardBody>\r\n          <form>\r\n            <div className=\"row\">\r\n              <h3>\r\n                HIV COUNSELLING AND TESTING\r\n               {showBackButton &&  <div>\r\n                    {/* <Link to={\"/\"}> */}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className=\" float-end\"\r\n                      //startIcon={<FaUserPlus size=\"10\"/>}\r\n                      onClick={fetchPrevForm}\r\n                      style={{ backgroundColor: \"#014d88\" }}\r\n                    >\r\n                      <span style={{ textTransform: \"capitalize\" }}>Back</span>\r\n                    </Button>\r\n                    {/* </Link> */}\r\n                  </div>}\r\n              </h3>\r\n              <br />\r\n              <br />\r\n\r\n              <div className=\"col-md-3 col-sm-3 col-lg-3\">\r\n                <Menu\r\n                  size=\"large\"\r\n                  vertical\r\n                  style={{ backgroundColor: \"#014D88\" }}\r\n                >\r\n                  <Menu.Item\r\n                    name=\"inbox\"\r\n                    active={activeItem === \"risk\"}\r\n                    onClick={() => handleItemClick(\"risk\")}\r\n                    style={{\r\n                      backgroundColor: activeItem === \"risk\" ? \"#000\" : \"\",\r\n                    }}\r\n                    disabled={activeItem !== \"risk\" ? true : false}\r\n                  >\r\n                    <span style={{ color: \"#fff\" }}>\r\n                      {\" \"}\r\n                      Risk Stratification\r\n                      {completed.includes(\"risk\") && (\r\n                        <Icon name=\"check\" color=\"green\" />\r\n                      )}\r\n                    </span>\r\n                  </Menu.Item>\r\n\r\n                  {hideOtherMenu == false && (\r\n                    <>\r\n                      <Menu.Item\r\n                        name=\"inbox\"\r\n                        active={activeItem === \"basic\"}\r\n                        onClick={() => handleItemClick(\"basic\")}\r\n                        style={{\r\n                          backgroundColor: activeItem === \"basic\" ? \"#000\" : \"\",\r\n                        }}\r\n                        disabled={activeItem !== \"basic\" ? true : false}\r\n                      >\r\n                        <span style={{ color: \"#fff\" }}>\r\n                          {\" \"}\r\n                          Basic Information\r\n                          {completed.includes(\"basic\") && (\r\n                            <Icon name=\"check\" color=\"green\" />\r\n                          )}\r\n                        </span>\r\n                      </Menu.Item>\r\n\r\n                      {patientObj?.riskStratificationResponseDto?.age >= 15 &&\r\n                        modalityCheck == \"fill\" && (\r\n                          <Menu.Item\r\n                            name=\"spam\"\r\n                            active={activeItem === \"pre-test-counsel\"}\r\n                            onClick={() => handleItemClick(\"pre-test-counsel\")}\r\n                            style={{\r\n                              backgroundColor:\r\n                                activeItem === \"pre-test-counsel\" ? \"#000\" : \"\",\r\n                            }}\r\n                            disabled={\r\n                              activeItem !== \"pre-test-counsel\" ? true : false\r\n                            }\r\n                          >\r\n                            {/* <Label>2</Label> */}\r\n                            <span style={{ color: \"#fff\" }}>\r\n                              Pre Test Counseling\r\n                              {completed.includes(\"pre-test-counsel\") && (\r\n                                <Icon name=\"check\" color=\"green\" />\r\n                              )}\r\n                            </span>\r\n                          </Menu.Item>\r\n                        )}\r\n                      \r\n                      {permissions.canSeeRequestAndResultForm && (\r\n                        <Menu.Item\r\n                          name=\"inbox\"\r\n                          active={activeItem === \"hiv-test\"}\r\n                          onClick={() => handleItemClick(\"hiv-test\")}\r\n                          style={{\r\n                            backgroundColor:\r\n                              activeItem === \"hiv-test\" ? \"#000\" : \"\",\r\n                          }}\r\n                          disabled={activeItem !== \"hiv-test\" ? true : false}\r\n                        >\r\n                          <span style={{ color: \"#fff\" }}>\r\n                            Request {\"&\"} Result Form\r\n                            {completed.includes(\"hiv-test\") && (\r\n                              <Icon name=\"check\" color=\"green\" />\r\n                            )}\r\n                          </span>\r\n                        </Menu.Item>\r\n                      )}\r\n                      <Menu.Item\r\n                        name=\"spam\"\r\n                        active={activeItem === \"post-test\"}\r\n                        onClick={() => handleItemClick(\"post-test\")}\r\n                        style={{\r\n                          backgroundColor:\r\n                            activeItem === \"post-test\" ? \"#000\" : \"\",\r\n                        }}\r\n                        disabled={activeItem !== \"post-test\" ? true : false}\r\n                      >\r\n                        {/* <Label>4</Label> */}\r\n                        <span style={{ color: \"#fff\" }}>\r\n                          Post Test Counseling\r\n                          {completed.includes(\"post-test\") && (\r\n                            <Icon name=\"check\" color=\"green\" />\r\n                          )}\r\n                        </span>\r\n                      </Menu.Item>\r\n                      {patientObj.hivTestResult &&\r\n                        patientObj.hivTestResult.toLowerCase() === \"positive\" &&\r\n                        patientObj?.riskStratificationResponseDto?.age >=\r\n                          15 && (\r\n                          <Menu.Item\r\n                            name=\"spam\"\r\n                            active={activeItem === \"recency-testing\"}\r\n                            onClick={() => handleItemClick(\"recency-testing\")}\r\n                            style={{\r\n                              backgroundColor:\r\n                                activeItem === \"recency-testing\" ? \"#000\" : \"\",\r\n                            }}\r\n                            disabled={\r\n                              activeItem !== \"recency-testing\" ? true : false\r\n                            }\r\n                          >\r\n                            {/* <Label>4</Label> */}\r\n                            <span style={{ color: \"#fff\" }}>\r\n                              HIV Recency Testing\r\n                              {completed.includes(\"recency-testing\") && (\r\n                                <Icon name=\"check\" color=\"green\" />\r\n                              )}\r\n                            </span>\r\n                          </Menu.Item>\r\n                        )}\r\n\r\n                      {patientObj.hivTestResult &&\r\n                        patientObj.hivTestResult.toLowerCase() ===\r\n                          \"positive\" && (\r\n                          <Menu.Item\r\n                            name=\"inbox\"\r\n                            active={activeItem === \"fit\"}\r\n                            onClick={() => handleItemClick(\"fit\")}\r\n                            style={{\r\n                              backgroundColor:\r\n                                activeItem === \"fit\" ? \"#000\" : \"\",\r\n                            }}\r\n                            disabled={completed.includes(\"fit\") ? true : false}\r\n                          >\r\n                            <span style={{ color: \"#fff\" }}>\r\n                              Family Index Testing form\r\n                              {completed.includes(\"fit\") && (\r\n                                <Icon name=\"check\" color=\"green\" />\r\n                              )}\r\n                            </span>\r\n                          </Menu.Item>\r\n                        )}\r\n\r\n                      {permissions.canSeeNigeriaPnsForm &&\r\n                        patientObj.hivTestResult &&\r\n                        patientObj.hivTestResult.toLowerCase() ===\r\n                          \"positive\" && (\r\n                          <Menu.Item\r\n                            name=\"inbox\"\r\n                            active={activeItem === \"pns\"}\r\n                            onClick={() => handleItemClick(\"pns\")}\r\n                            style={{\r\n                              backgroundColor:\r\n                                activeItem === \"pns\" ? \"#000\" : \"\",\r\n                            }}\r\n                          >\r\n                            <span style={{ color: \"#fff\" }}>\r\n                              {\" \"}\r\n                              Partner Notification Services\r\n                              {completed.includes(\"pns\") && (\r\n                                <Icon name=\"check\" color=\"green\" />\r\n                              )}\r\n                            </span>\r\n                          </Menu.Item>\r\n                        )}\r\n\r\n                      {permissions.canSeeRefferalForm && (\r\n                        <Menu.Item\r\n                          name=\"inbox\"\r\n                          active={activeItem === \"refferal-history\"}\r\n                          onClick={() => handleItemClick(\"refferal-history\")}\r\n                          style={{\r\n                            backgroundColor:\r\n                              activeItem === \"refferal-history\" ? \"#000\" : \"\",\r\n                          }}\r\n                        >\r\n                          <span style={{ color: \"#fff\" }}>\r\n                            {\" \"}\r\n                            Client Referral Service\r\n                            {completed.includes(\"refferal\") && (\r\n                              <Icon name=\"check\" color=\"green\" />\r\n                            )}\r\n                          </span>\r\n                        </Menu.Item>\r\n                      )}\r\n                    </>\r\n                  )}\r\n                </Menu>\r\n              </div>\r\n\r\n              <div\r\n                className=\"col-md-9 col-sm-9 col-lg-9 \"\r\n                style={{\r\n                  backgroundColor: \"#fff\",\r\n                  margingLeft: \"-50px\",\r\n                  paddingLeft: \"-20px\",\r\n                }}\r\n              >\r\n                {activeItem === \"risk\" && (\r\n                  <RiskStratification\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setPatientObjAge={setPatientObjAge}\r\n                    setHideOtherMenu={setHideOtherMenu}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    setOrganizationInfo={setOrganizationInfo}\r\n                  />\r\n                )}\r\n                {activeItem === \"basic\" && (\r\n                  <BasicInfo\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setPatientObjAge={setPatientObjAge}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    setBasicInfo={setBasicInfo}\r\n                    indexInfo={indexInfo}\r\n                  />\r\n                )}\r\n                {activeItem === \"pre-test-counsel\" && (\r\n                  <PreTest\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                  />\r\n                )}\r\n                {activeItem === \"hiv-test\" && (\r\n                  <HivTestResult\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                  />\r\n                )}\r\n                {activeItem === \"post-test\" && (\r\n                  <PostTest\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                  />\r\n                )}\r\n                {activeItem === \"indexing\" && (\r\n                  <IndexingContactTracing\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                  />\r\n                )}\r\n                {activeItem === \"recency-testing\" && (\r\n                  <RecencyTesting\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                  />\r\n                )}\r\n                {activeItem === \"others\" && (\r\n                  <Others\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                  />\r\n                )}\r\n                {activeItem === \"fit\" && (\r\n                  <FamilyIndexTestingForm\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    basicInfo={basicInfo}\r\n                    organizationInfo={organizationInfo}\r\n                    history={false}\r\n                  />\r\n                )}\r\n\r\n                {activeItem === \"fit-history\" && (\r\n                  <FamilyIndexHistory\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    basicInfo={basicInfo}\r\n                    organizationInfo={organizationInfo}\r\n                    addNewForm={true}\r\n                    nextButton={true}\r\n                    selectedRow={selectedRow}\r\n                    setSelectedRow={setSelectedRow}\r\n                    clearInfo={clearInfo}\r\n                    // row={row}\r\n                    setAction={setAction}\r\n                  />\r\n                )}\r\n\r\n                {activeItem === \"view-fit\" && (\r\n                  <ViewFamilyIndexTestingForm\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    basicInfo={basicInfo}\r\n                    action={action}\r\n                    organizationInfo={organizationInfo}\r\n                    addNewForm={false}\r\n                    row={row}\r\n                    selectedRow={selectedRow}\r\n                  />\r\n                )}\r\n\r\n\r\n              {activeItem === \"pns-history\" && (\r\n                                <PNSHistory\r\n                                  handleItemClick={handleItemClick}\r\n                                  setCompleted={setCompleted}\r\n                                  completed={completed}\r\n                                  setPatientObj={setPatientObj}\r\n                                  patientObj={patientObj}\r\n                                  setExtra={setExtra}\r\n                                  extra={extra}\r\n                                  basicInfo={basicInfo}\r\n                                  organizationInfo={organizationInfo}\r\n                                  activePage={props.activePage}\r\n                                  setActivePage={props.setActivePage}\r\n                                  setRow={setRow}\r\n                                />\r\n                              )}\r\n                {activeItem === \"pns\" && (\r\n                  <PnsForm\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    basicInfo={basicInfo}\r\n                    organizationInfo={organizationInfo}\r\n                  />\r\n                )}\r\n\r\n                {activeItem === \"client-referral\" && (\r\n                  <RefferralUnit\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    basicInfo={basicInfo}\r\n                    organizationInfo={organizationInfo}\r\n                    addNewForm={false}\r\n                  />\r\n                )}\r\n                {activeItem === \"refferal-history\" && (\r\n                  <ClientReferralHistory\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    basicInfo={basicInfo}\r\n                    organizationInfo={organizationInfo}\r\n                    activePage={props.activePage}\r\n                    setActivePage={props.setActivePage}\r\n                    setRow={setRow}\r\n                    status={\"newUser\"}\r\n                  />\r\n                )}\r\n                {activeItem === \"view-referral\" && (\r\n                  <ViewClientReferral\r\n                    handleItemClick={handleItemClick}\r\n                    setCompleted={setCompleted}\r\n                    completed={completed}\r\n                    setPatientObj={setPatientObj}\r\n                    patientObj={patientObj}\r\n                    setExtra={setExtra}\r\n                    extra={extra}\r\n                    basicInfo={basicInfo}\r\n                    organizationInfo={organizationInfo}\r\n                    addNewForm={false}\r\n                    row={row}\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserRegistration;\r\n",["449","450"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientDetail.js",["451","452"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport PatientCardDetail from \"./PatientCard\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Tab, Tabs } from \"react-bootstrap\";\r\nimport PatientHistory from \"./../History/PatientHistory\";\r\nimport PatientHtsEnrollment from \"./PatientHtsEnrollment\";\r\nimport ViewEditHivst from \"../Patient/HIVST/ViewEditHivst\";\r\nimport { calculate_age } from \"../utils\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  const { classes } = props;\r\n  let history = useHistory();\r\n\r\n\r\n  const patientObject =\r\n    history.location && history.location.state\r\n      ? history.location.state.patientObject\r\n      : {};\r\n  const patientObj =\r\n    history.location && history.location.state\r\n      ? history.location.state.patientObj\r\n      : {};\r\n\r\n   \r\n  const clientCode =\r\n    history.location && history.location.state\r\n      ? history.location.state.clientCode\r\n      : \"\";\r\n\r\n\r\n  const [personInfo, setPersonInfo]=useState({})\r\n  const [activePage, setActivePage] = useState({\r\n    activePage: \"home\",\r\n    activeObject: {},\r\n    actionType: \"\",\r\n  });\r\n  useEffect(() => {}, [activePage]);\r\n  const patientAge = calculate_age(\r\n    moment(patientObj.dateOfBirth).format(\"YYYY-MM-DD\")\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div\r\n        className=\"row page-titles mx-0\"\r\n        style={{ marginTop: \"0px\", marginBottom: \"-10px\" }}\r\n      >\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item active\">\r\n            <h4>\r\n              {\" \"}\r\n              <Link to={\"/\"}>HTS /</Link> Patient Dashboard\r\n            </h4>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n      <Card>\r\n        <CardContent>\r\n          <PatientCardDetail\r\n            patientObj={patientObj}\r\n            clientCode={clientCode}\r\n            patientObject={patientObject}\r\n            setPersonInfo={setPersonInfo}\r\n          />\r\n          {activePage.activePage === \"home\" && (\r\n            <PatientHistory\r\n              patientObj={patientObj}\r\n              activePage={\r\n                history?.location?.state?.activepage\r\n                  ? history?.location?.state?.activepage\r\n                  : \"home\"\r\n              }\r\n              checkedInPatient={\r\n                history?.location?.state?.checkedInPatient\r\n                  ? history?.location?.state?.checkedInPatient\r\n                  : \"\"\r\n              }\r\n              setActivePage={setActivePage}\r\n              clientCode={clientCode}\r\n              patientAge={patientObj.age}\r\n              patientObject={patientObject}\r\n              personInfo={personInfo}\r\n            />\r\n          )}\r\n          {activePage.activePage === \"view\" && (\r\n            <PatientHtsEnrollment\r\n              patientObj={patientObj}\r\n              activePage={activePage}\r\n              setActivePage={setActivePage}\r\n              clientCode={clientCode}\r\n              patientAge={patientObj.age}\r\n              patientObject={patientObject}\r\n            />\r\n          )}\r\n\r\n          {activePage.activePage === \"hivst_view\" && (\r\n            <ViewEditHivst\r\n              patientObj={patientObj}\r\n              activePage={activePage}\r\n              setActivePage={setActivePage}\r\n              clientCode={clientCode}\r\n              patientAge={patientAge}\r\n              patientObject={patientObject}\r\n            />\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\HIVSTPatient.js",["453","454","455","456"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport CustomTable from \"../../../../reuseables/CustomTable\";\r\n\r\n\r\n\r\n\r\n//Date Picker package\r\nMoment.locale(\"en\");\r\nconst HIVSTPatient = () => {\r\n    const [showPPI, setShowPPI] = useState(true);\r\n\r\n    const handleCheckBox = (e) => {\r\n        if (e.target.checked) {\r\n            setShowPPI(false);\r\n        } else {\r\n            setShowPPI(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <CustomTable\r\n                title=\"Find HIVST Patient \"\r\n                columns={[\r\n                    {\r\n                        title: \"Patient Name\",\r\n                        field: \"name\",\r\n                        hidden: showPPI,\r\n                    },\r\n                    // { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n                    { title: \"Client Code\", field: \"clientCode\", filtering: false },\r\n                    // { title: \"Sex\", field: \"gender\", filtering: false },\r\n                    { title: \"Age\", field: \"age\", filtering: false },\r\n\r\n                    //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n                    { title: \"HIVST Count\", field: \"count\", filtering: false },\r\n                    { title: \"Actions\", field: \"actions\", filtering: false },\r\n                ]}\r\n                data={(query) =>\r\n                    new Promise((resolve, reject) =>\r\n                        axios\r\n                            .get(\r\n                                `${baseUrl}hivst/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\r\n                                { headers: { Authorization: `Bearer ${token}` } }\r\n                            )\r\n                            .then((response) => response)\r\n                            .then((result) => {\r\n                                //setLoading(false)\r\n                                resolve({\r\n                                    data:\r\n                                        result?.data?.records &&\r\n                                        result?.data?.records\r\n                                            .filter((client) => {\r\n                                                return client.clientCode !== null;\r\n                                            })\r\n                                            .map((row) => ({\r\n                                                //name:   row.hivPositive && row.hivPositive===true ? ( <><sup><b style={{color:\"red\"}}><Icon name='circle' size=\"small\"/></b></sup> { \" \" + row.personResponseDto.firstName + \" \" + row.personResponseDto.surname} </>) :row.personResponseDto.firstName + \" \" + row.personResponseDto.surname,\r\n                                                name: row.firstName + \" \" + row.surname,\r\n                                                // hospital_number: row.hospitalNumber,\r\n                                                clientCode: row.clientCode,\r\n                                                gender: row.gender,\r\n                                                age: row.age,\r\n                                                count: (\r\n                                                    <Label color=\"blue\" size=\"mini\">\r\n                                                        {row.hivstCount}\r\n                                                    </Label>\r\n                                                ),\r\n                                                actions: (\r\n                                                    <div>\r\n                                                        {row.hivstCount >= 0 && (\r\n                                                            <>\r\n                                                                <Link\r\n                                                                    to={{\r\n                                                                        pathname: \"/patient-history\",\r\n                                                                        state: {\r\n                                                                            patientObject: row,\r\n                                                                            patientObj: row,\r\n                                                                            clientCode: row.clientCode,\r\n                                                                        },\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <ButtonGroup\r\n                                                                        variant=\"contained\"\r\n                                                                        aria-label=\"split button\"\r\n                                                                        style={{\r\n                                                                            backgroundColor: \"rgb(153, 46, 98)\",\r\n                                                                            height: \"30px\",\r\n                                                                            width: \"215px\",\r\n                                                                        }}\r\n                                                                        size=\"large\"\r\n                                                                    >\r\n                                                                        <Button\r\n                                                                            color=\"primary\"\r\n                                                                            size=\"small\"\r\n                                                                            aria-label=\"select merge strategy\"\r\n                                                                            aria-haspopup=\"menu\"\r\n                                                                            style={{\r\n                                                                                backgroundColor: \"rgb(153, 46, 98)\",\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <MdDashboard />\r\n                                                                        </Button>\r\n                                                                        <Button\r\n                                                                            style={{\r\n                                                                                backgroundColor: \"rgb(153, 46, 98)\",\r\n                                                                            }}\r\n                                                                        >\r\n                                                                            <span\r\n                                                                                style={{\r\n                                                                                    fontSize: \"12px\",\r\n                                                                                    color: \"#fff\",\r\n                                                                                    fontWeight: \"bolder\",\r\n                                                                                }}\r\n                                                                            >\r\n                                                                                Patient Dashboard\r\n                                                                            </span>\r\n                                                                        </Button>\r\n                                                                    </ButtonGroup>\r\n                                                                </Link>\r\n                                                            </>\r\n                                                        )}\r\n                                                    </div>\r\n                                                ),\r\n                                            })),\r\n                                    page: query.page,\r\n                                    totalCount: result.data.totalRecords,\r\n                                });\r\n                                //setLoading(false)\r\n                            })\r\n                    )\r\n                }\r\n                showPPI={showPPI}\r\n                onPPIChange={handleCheckBox}\r\n            />\r\n        </div>\r\n    );\r\n};\r\nexport default HIVSTPatient","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientList.js",["457"],"import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport CustomTable from \"../../../reuseables/CustomTable\";\r\n\r\n//Date Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\n\r\nconst Patients = (props) => {\r\n  const [showPPI, setShowPPI] = useState(true);\r\n \r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <CustomTable\r\n        title=\"Find Patient \"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n\r\n          },\r\n          // { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n          { title: \"Patient ID\", field: \"clientCode\", filtering: false },\r\n          { title: \"\", field: \"\", filtering: false },\r\n\r\n          { title: \"Sex\", field: \"gender\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          { title: \"HTS Count\", field: \"count\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}hts/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n                resolve({\r\n                  data: result?.data?.records\r\n                    ?.filter((a) => {\r\n                      return a.personId !== null;\r\n                    })\r\n                    ?.map?.((row) => ({\r\n                      name: row.firstName + \" \" + row.surname,\r\n                      clientCode: row?.hospitalNumber || \"\",\r\n                      gender: row?.gender ||row?.sex,\r\n                      age: row.age,\r\n                      count: (\r\n                        <Label color=\"blue\" size=\"mini\">\r\n                          {0}\r\n                        </Label>\r\n                      ),\r\n                      actions: (\r\n                        <div>\r\n                          {row.htsCount >= 0 && (\r\n                            <>\r\n                              <Link\r\n                                to={{\r\n                                  pathname: \"/patient-history\",\r\n                                  state: {\r\n                                    patientObject: row,\r\n                                    patientObj: row,\r\n                                    clientCode: row.clientCode,\r\n                                  },\r\n                                }}\r\n                              >\r\n                                <ButtonGroup\r\n                                  variant=\"contained\"\r\n                                  aria-label=\"split button\"\r\n                                  style={{\r\n                                    backgroundColor: \"rgb(153, 46, 98)\",\r\n                                    height: \"30px\",\r\n                                    width: \"215px\",\r\n                                  }}\r\n                                  size=\"large\"\r\n                                >\r\n                                  <Button\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    aria-label=\"select merge strategy\"\r\n                                    aria-haspopup=\"menu\"\r\n                                    style={{\r\n                                      backgroundColor: \"rgb(153, 46, 98)\",\r\n                                    }}\r\n                                  >\r\n                                    <MdDashboard />\r\n                                  </Button>\r\n                                  <Button\r\n                                    style={{\r\n                                      backgroundColor: \"rgb(153, 46, 98)\",\r\n                                    }}\r\n                                  >\r\n                                    <span\r\n                                      style={{\r\n                                        fontSize: \"12px\",\r\n                                        color: \"#fff\",\r\n                                        fontWeight: \"bolder\",\r\n                                      }}\r\n                                    >\r\n                                      Patient Dashboard\r\n                                    </span>\r\n                                  </Button>\r\n                                </ButtonGroup>\r\n                              </Link>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      ),\r\n                    })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n              })\r\n          )\r\n        }\r\n        showPPI={showPPI}\r\n        onPPIChange={handleCheckBox}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HTSList.js",["458","459"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport CustomTable from \"../../../reuseables/CustomTable\";\r\n\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\n\r\n\r\nconst HTSList = (props) => {\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  const handleCheckBox = (e) => {\r\n    if (e.target.checked) {\r\n      setShowPPI(false);\r\n    } else {\r\n      setShowPPI(true);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <CustomTable\r\n        title=\"Find HTS Patient \"\r\n        columns={[\r\n          // { title: \" ID\", field: \"Id\" },\r\n          {\r\n            title: \"Patient Name\",\r\n            field: \"name\",\r\n            hidden: showPPI,\r\n          },\r\n          // { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n          { title: \"Client Code\", field: \"clientCode\", filtering: false },\r\n          { title: \"Sex\", field: \"gender\", filtering: false },\r\n          { title: \"Age\", field: \"age\", filtering: false },\r\n\r\n          //{ title: \"ART Number\", field: \"v_status\", filtering: false },\r\n          { title: \"HTS Count\", field: \"count\", filtering: false },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={(query) =>\r\n          new Promise((resolve, reject) =>\r\n            axios\r\n              .get(\r\n                `${baseUrl}hts/only/persons?pageSize=${query.pageSize}&pageNo=${query.page}&searchValue=${query.search}`,\r\n                { headers: { Authorization: `Bearer ${token}` } }\r\n              )\r\n              .then((response) => response)\r\n              .then((result) => {\r\n\r\n                resolve({\r\n                  data:\r\n                    result?.data?.records &&\r\n                    result?.data?.records\r\n                      .filter((client) => {\r\n                        return client.clientCode !== null;\r\n                      })\r\n                      ?.map?.((row) => ({\r\n                        //name:   row.hivPositive && row.hivPositive===true ? ( <><sup><b style={{color:\"red\"}}><Icon name='circle' size=\"small\"/></b></sup> { \" \" + row.personResponseDto.firstName + \" \" + row.personResponseDto.surname} </>) :row.personResponseDto.firstName + \" \" + row.personResponseDto.surname,\r\n                        name: row.firstName + \" \" + row.surname,\r\n                        // hospital_number: row.hospitalNumber,\r\n                        clientCode: row.clientCode,\r\n                        gender: row.gender,\r\n                        age: row.age,\r\n                        count: (\r\n                          <Label color=\"blue\" size=\"mini\">\r\n                            {row.htsCount}\r\n                          </Label>\r\n                        ),\r\n                        actions: (\r\n                          <div>\r\n                            {row.htsCount >= 0 && (\r\n                              <>\r\n                                <Link\r\n                                  to={{\r\n                                    pathname: \"/patient-history\",\r\n                                    state: {\r\n                                      patientObject: row,\r\n                                      patientObj: row,\r\n                                      clientCode: row.clientCode,\r\n                                    },\r\n                                  }}\r\n                                >\r\n                                  <ButtonGroup\r\n                                    variant=\"contained\"\r\n                                    aria-label=\"split button\"\r\n                                    style={{\r\n                                      backgroundColor: \"rgb(153, 46, 98)\",\r\n                                      height: \"30px\",\r\n                                      width: \"215px\",\r\n                                    }}\r\n                                    size=\"large\"\r\n                                  >\r\n                                    <Button\r\n                                      color=\"primary\"\r\n                                      size=\"small\"\r\n                                      aria-label=\"select merge strategy\"\r\n                                      aria-haspopup=\"menu\"\r\n                                      style={{\r\n                                        backgroundColor: \"rgb(153, 46, 98)\",\r\n                                      }}\r\n                                    >\r\n                                      <MdDashboard />\r\n                                    </Button>\r\n                                    <Button\r\n                                      style={{\r\n                                        backgroundColor: \"rgb(153, 46, 98)\",\r\n                                      }}\r\n                                    >\r\n                                      <span\r\n                                        style={{\r\n                                          fontSize: \"12px\",\r\n                                          color: \"#fff\",\r\n                                          fontWeight: \"bolder\",\r\n                                        }}\r\n                                      >\r\n                                        Patient Dashboard\r\n                                      </span>\r\n                                    </Button>\r\n                                  </ButtonGroup>\r\n                                </Link>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        ),\r\n                      })),\r\n                  page: query.page,\r\n                  totalCount: result.data.totalRecords,\r\n                });\r\n                //setLoading(false)\r\n              })\r\n          )\r\n        }\r\n        showPPI={showPPI}\r\n        onPPIChange={handleCheckBox}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HTSList;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\api.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HTSML.js",["460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\CheckedInPatients.js",["476","477","478","479"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientCard.js",["480","481","482","483","484","485"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n//import classNames from 'classnames';\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\n//import ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\n// import ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n//import Chip from '@material-ui/core/Chip';\r\n//import Divider from '@material-ui/core/Divider';\r\nimport { Link } from \"react-router-dom\";\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../api\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Label, Sticky } from \"semantic-ui-react\";\r\nimport { calculate_age } from \"../utils\";\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"20.33%\",\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  const { classes } = props;\r\n  const patientObjs = props.patientObj ? props.patientObj : {};\r\n  const [patientObj, setPatientObj] = useState(null);\r\n  const [hivStatus, setHivStatus] = useState(\"false\");\r\n  const [htscount, setHtscount] = useState(0);\r\n  const [htsResult, setHtsResult] = useState(\"\");\r\n  const [htsResult2, setHtsResult2] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    PatientCurrentObject();\r\n  }, []);\r\n\r\n  ///GET LIST OF Patients\r\n  async function PatientCurrentObject() {\r\n    axios\r\n      .get(\r\n        `${baseUrl}hts/persons/${\r\n          patientObjs.personId ? patientObjs.personId : patientObjs.id\r\n        }`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPatientObj(response.data);\r\n\r\n        props.setPersonInfo(response.data)\r\n        setHtscount(response.data.htsCount);\r\n        setHtsResult(\r\n          response.data.htsClientDtoList[\r\n            response.data.htsClientDtoList.length - 1\r\n          ].hivTestResult\r\n        );\r\n        setHtsResult2(\r\n          response.data.htsClientDtoList[\r\n            response.data.htsClientDtoList.length - 1\r\n          ].hivTestResult2\r\n        );\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n\r\n  const getHospitalNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const hospitalNumber = identifiers?.identifier?.find(\r\n      (obj) => obj.type == \"HospitalNumber\"\r\n    );\r\n    return hospitalNumber ? hospitalNumber.value : \"\";\r\n  };\r\n  const getPhoneNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const phoneNumber = identifiers?.contactPoint?.find(\r\n      (obj) => obj.type == \"phone\"\r\n    );\r\n    return phoneNumber ? phoneNumber.value : \"\";\r\n  };\r\n  const getAddress = (identifier) => {\r\n    const identifiers = identifier;\r\n    const address = identifiers?.address?.find((obj) => obj.city);\r\n    const houseAddress =\r\n      address && address.line[0] !== null ? address.line[0] : \"\";\r\n    const landMark =\r\n      address && address.city && address.city !== null ? address.city : \"\";\r\n    return address ? houseAddress + \" \" + landMark : \"\";\r\n  };\r\n\r\n  return (\r\n    <Sticky>\r\n      <div className={classes.root}>\r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary>\r\n            <Row>\r\n              <Col md={12}>\r\n                <Row className={\"mt-1\"}>\r\n                  {patientObj && patientObj !== null ? (\r\n                    <>\r\n                      <Col md={12} className={classes.root2}>\r\n                        <b\r\n                          style={{\r\n                            fontSize: \"25px\",\r\n                            color: \"rgb(153, 46, 98)\",\r\n                          }}\r\n                        >\r\n                          {patientObj.personResponseDto.firstName +\r\n                            \" \" +\r\n                            patientObj.personResponseDto.surname}\r\n                        </b>\r\n                        <Link to={\"/\"}>\r\n                          <ButtonMui\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className=\"float-end ms-2 mr-2 mt-2\"\r\n                            //startIcon={<FaUserPlus size=\"10\"/>}\r\n                            style={{\r\n                              backgroundColor: \"rgb(153, 46, 98)\",\r\n                              color: \"#fff\",\r\n                              height: \"35px\",\r\n                            }}\r\n                          >\r\n                            <span style={{ textTransform: \"capitalize\" }}>\r\n                              Back\r\n                            </span>\r\n                          </ButtonMui>\r\n                        </Link>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Patient ID :\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {getHospitalNumber(\r\n                              patientObj.personResponseDto.identifier\r\n                            )}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          Date Of Birth :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {patientObj.personResponseDto.dateOfBirth}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Age :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {calculate_age(\r\n                              moment(\r\n                                patientObj.personResponseDto.dateOfBirth\r\n                              ).format(\"YYYY-MM-DD\")\r\n                            )}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Gender :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {patientObj.personResponseDto &&\r\n                            patientObj.personResponseDto.sex !== null\r\n                              ? patientObj.personResponseDto.sex\r\n                              : \"\"}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Phone Number :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {getPhoneNumber(\r\n                              patientObj.personResponseDto.contactPoint\r\n                            )}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Address :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {getAddress(patientObj.personResponseDto.address)}{\" \"}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={4} className={classes.root2}>\r\n                        <span>\r\n                          {\" \"}\r\n                          Client Code :{\" \"}\r\n                          <b style={{ color: \"#0B72AA\" }}>\r\n                            {patientObj && patientObj?.clientCode\r\n                              ? patientObj?.clientCode\r\n                              : \"\"}{\" \"}\r\n                          </b>\r\n                        </span>\r\n                      </Col>\r\n                      <Col md={12}>\r\n                        <div>\r\n                          <Typography variant=\"caption\">\r\n                            {htscount < 1 ? (\r\n                              <Label color=\"blue\" size={\"mini\"}>\r\n                                STATUS : Not Tested\r\n                              </Label>\r\n                            ) : patientObj &&\r\n                              (htsResult === \"Positive\" ||\r\n                                htsResult === \"Positive\") ? (\r\n                              <Label color={\"red\"} size={\"mini\"}>\r\n                                STATUS : Positive\r\n                              </Label>\r\n                            ) : (\r\n                              <Label color=\"teal\" size={\"mini\"}>\r\n                                STATUS : Negative\r\n                              </Label>\r\n                            )}\r\n                          </Typography>\r\n                        </div>\r\n                      </Col>\r\n                    </>\r\n                  ) : (\r\n                    <p>Loading Please wait...</p>\r\n                  )}\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n          </ExpansionPanelSummary>\r\n        </ExpansionPanel>\r\n      </div>\r\n    </Sticky>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\ViewEditHivst.js",["486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513"],"import React, {useEffect, useState} from \"react\";\r\nimport {CardBody, FormGroup, Input, Label} from \"reactstrap\";\r\nimport * as moment from \"moment/moment\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Select from 'react-select';\r\n\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl} from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport {Button, Icon, Label as LabelSui, List} from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport {Modal, Table} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport {calculate_age} from \"../../utils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n        \"& .card-title\": {\r\n            color: \"#fff\",\r\n            fontWeight: \"bold\",\r\n        },\r\n        \"& .form-control\": {\r\n            borderRadius: \"0.25rem\",\r\n            height: \"41px\",\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\",\r\n        },\r\n        \"& select\": {\r\n            \"-webkit-appearance\": \"listbox !important\",\r\n        },\r\n        \"& p\": {\r\n            color: \"red\",\r\n        },\r\n        \"& label\": {\r\n            fontSize: \"14px\",\r\n            color: \"#014d88\",\r\n            fontWeight: \"bold\",\r\n        },\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },\r\n    success: {\r\n        color: \"green\",\r\n        fontSize: \"12.8px\",\r\n        fontWeight: \"bold\",\r\n    },\r\n}));\r\n\r\nconst ViewEditHivst = (props) => {\r\n\r\n    const patient = props.patientObject;\r\n    const hivstObj = props.activePage.activeObject\r\n    const [saving, setSaving] = useState(false)\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors };\r\n    const [serialNumber, setSerialNumber] = useState(null);\r\n    const [createdCode, setCreatedCode] = useState(\"\");\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [showUserInfo, setShowUserInfo] = useState(false);\r\n    const [otherText, setOtherText] = useState('');\r\n    const [otherTestKitUserInfoAvailable, setIsUserInformationAvailable] = useState(false);\r\n    const [kitUserInformation, setKitUserInformation] = useState([]);\r\n    const [serviceNeeded, setServiceNeeded] = useState([]);\r\n    const [hasConductedHIVST, setHasConductedHIVST] = useState(false);\r\n    const [maritalStatus, setMaritalStatus] = useState([]);\r\n    const [sexs, setSexs] = useState([]);\r\n    const [userInformationList, setUserInformationList] = useState([])\r\n    const [userInformationErrors, setUserInformationErrors] = useState({});\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const isView = props.activePage.actionType === 'view' ? true : false;\r\n    const toggle = () => setOpen(!open);\r\n\r\n    const [objValues, setObjValues] = useState(hivstObj);\r\n\r\n    const [testKitUserDetails, setUserInformation] = useState(hivstObj.testKitUserDetails[0]);\r\n\r\n    // const [objValues, setObjValues] = useState({\r\n    //     patientId: patient?.personId ? patient.personId : \"\",\r\n    //     // patientObject: {\r\n    //     //     surname: patient?.surname ? patient.surname : \"\",\r\n    //     //     firstName: patient?.firstName ? patient.firstName : \"\",\r\n    //     //     otherName: patient?.otherName ? patient.otherName : \"\",\r\n    //     //     dateOfBirth: patient?.dateOfBirth ? patient.dateOfBirth : \"\",\r\n    //     //     maritalStatusId: \"1\",\r\n    //     //     genderId: patient.gender ? patient.gender : \"\",\r\n    //     //     sexId: patient.personResponseDto && patient.personResponseDto.sex !== null\r\n    //     //         ? patient.personResponseDto.sex\r\n    //     //         : \"\",\r\n    //     //     address: \"\",\r\n    //     //     dateOfRegistration: \"\",\r\n    //     //     hospitalNumber: patient?.hospitalNumber ? patient?.hospitalNumber : \"\",\r\n    //     // },\r\n    //     dateOfVisit: \"\",\r\n    //     serviceDeliveryPoint: \"\",\r\n    //     userType: \"\",\r\n    //     serialNumber: \"\",\r\n    //     clientCode: \"\",\r\n    //     previouslyTestedWithin12Months: \"\",\r\n    //     resultOfPreviouslyTestedWithin12Months: \"\",\r\n    //     consentForFollowUpCalls: \"\",\r\n    //     typeOfHivstKitReceived: \"\",\r\n    //     numberOfHivstKitsReceived: \"\",\r\n    //     nameOfTestKit: \"\",\r\n    //     lotNumber: \"\",\r\n    //     expiryDate: \"\",\r\n    //     testKitUsers: null,\r\n    //     testKitUserDetails: [],\r\n    //     otherTestKitUserInfoAvailable: \"\",\r\n    //     hasConductedHIVST: \"\",\r\n    // });\r\n\r\n    // const [testKitUserDetails, setUserInformation] = useState(\r\n    //     {\r\n    //         basicUserInfo: {\r\n    //             id: \"\",\r\n    //             firstName:\"\",\r\n    //             surname:\"\",\r\n    //             otherName:\"\",\r\n    //             dateOfRegistration:\"\",\r\n    //             otherCategory: \"\",\r\n    //             clientCode: \"\",\r\n    //             dateOfBirth: \"\",\r\n    //             age: \"\",\r\n    //             sex: \"\",\r\n    //             maritalStatusId: \"\",\r\n    //             typeOfHivst: \"\",\r\n    //             userCategory: \"\",\r\n    //             isDateOfBirthEstimated: \"\"\r\n    //         },\r\n    //         postTestAssessment: {\r\n    //             everUsedHivstKit: \"\",\r\n    //             everUsedHivstKitForSelfOrOthers: \"\",\r\n    //             otherHivstKitUserCategory: \"\",\r\n    //             otherHivstKitUserCategoryText: \"\",\r\n    //             resultOfHivstTest: \"\",\r\n    //             accessConfirmatoryHts: \"\",\r\n    //             referPreventionServices: \"\",\r\n    //             referralInformation: {\r\n    //                 referredForConfirmatoryHts: \"\",\r\n    //                 dateReferredForConfirmatoryHts: \"\",\r\n    //                 referredForPreventionServices: \"\",\r\n    //                 dateReferredForPreventionServices: \"\"\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // );\r\n\r\n\r\n    const options = [\r\n        {value: 'myself', label: 'For myself'},\r\n        {value: 'spouse', label: 'Spouse'},\r\n        {value: 'children', label: 'Children'},\r\n        {value: 'sexual partner', label: 'Sexual Partner'},\r\n        {value: 'social network', label: 'Social Network'},\r\n        {value: 'others', label: 'Others (Please specify)'},\r\n    ];\r\n\r\n    const matches = useMediaQuery('(max-width:600px)');\r\n    const style = {fontSize: matches ? '12px' : '16px',};\r\n\r\n\r\n    const SERVICE_NEEDED = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    // create array of objects from the response\r\n                    const serviceNeeded = response.data.map((service) => {\r\n                        return {\r\n                            value: service.display,\r\n                            label: service.display\r\n                        }\r\n                    });\r\n                    setServiceNeeded(serviceNeeded);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                // handle error\r\n            });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        SERVICE_NEEDED();\r\n    }, []);\r\n\r\n    const validateObjValues = () => {\r\n        temp.dateOfVisit = objValues.dateOfVisit ? \"\" : \"This field is required.\";\r\n        temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\r\n        temp.serviceDeliveryPoint = objValues.serviceDeliveryPoint ? \"\" : \"This field is required.\";\r\n        temp.userType = objValues.userType ? \"\" : \"This field is required.\";\r\n        // temp.serialNumber = objValues.serialNumber ? \"\" : \"This field is required.\";\r\n        temp.previouslyTestedWithin12Months = objValues.previouslyTestedWithin12Months ? \"\" : \"This field is required.\";\r\n        temp.consentForFollowUpCalls = objValues.consentForFollowUpCalls ? \"\" : \"This field is required.\";\r\n        if (objValues.previouslyTestedWithin12Months !== \"\" && objValues.previouslyTestedWithin12Months !== \"No\") {\r\n            temp.resultOfPreviouslyTestedWithin12Months = objValues.resultOfPreviouslyTestedWithin12Months ? \"\" : \"This field is required.\";\r\n        }\r\n        temp.nameOfTestKit = objValues.nameOfTestKit ? \"\" : \"This field is required.\";\r\n        temp.typeOfHivstKitReceived = objValues.typeOfHivstKitReceived ? \"\" : \"This field is required.\";\r\n        temp.numberOfHivstKitsReceived = objValues.numberOfHivstKitsReceived ? \"\" : \"This field is required.\";\r\n        // temp.expiryDate = objValues.expiryDate ? \"\" : \"This field is required.\";\r\n        temp.lotNumber = objValues.lotNumber ? \"\" : \"This field is required.\";\r\n        if(selectedUsers.length === 0) {\r\n            temp.selectedUsers =   objValues.testKitUsers ? \"\" : \"Please select at least one user\"\r\n        }\r\n      \r\n        setErrors({ ...temp });\r\n        return Object.values(temp).every((x) => x == \"\");\r\n    }\r\n\r\n    // validate testKitUserDetails\r\n    const validateUserInformation = () => {\r\n        // if (objValues.otherTestKitUserInfoAvailable === \"Yes\") {\r\n        let temp = {};\r\n        temp.firstName = testKitUserDetails.basicUserInfo.firstName ?  \"\" : \"This field is required.\";\r\n        // temp.surname = testKitUserDetails.basicUserInfo.surname ?  \"\" : \"This field is required.\";\r\n        // temp.userCategory = testKitUserDetails.basicUserInfo.userCategory ? \"\" : \"This field is required.\";\r\n        // temp.otherCategory = testKitUserDetails.basicUserInfo.userCategory === \"Others\" ? testKitUserDetails.basicUserInfo.otherCategory ? \"\" : \"This field is required.\" : \"\";\r\n        temp.clientCode = testKitUserDetails.basicUserInfo.clientCode ? \"\" : \"This field is required.\";\r\n        // temp.dateOfBirth = testKitUserDetails.basicUserInfo.dateOfBirth ? \"\" : \"This field is required.\";\r\n        temp.typeOfHivst = testKitUserDetails.basicUserInfo.typeOfHivst ? \"\" : \"This field is required.\";\r\n        // Check if the selected user category is in the selectedUsers array\r\n        // if (!selectedUsers.includes(testKitUserDetails.basicUserInfo.userCategory) && testKitUserDetails.basicUserInfo.userCategory !== \"\" ) {\r\n        //     temp.userCategory = \"The selected user category does not match the selected kit users.\";\r\n        // }\r\n        // the number of kit is empty\r\n        setUserInformationErrors({...temp});\r\n        return Object.values(temp).every((x) => x == \"\");\r\n        // }\r\n    }\r\n    const handleInputChange = (e) => {\r\n        const {name, value} = e.target;\r\n        let newObjectValues = {...objValues};\r\n        if (name in objValues) {\r\n            newObjectValues[name] = value;\r\n        } else if (name in objValues.postTestAssessment) {\r\n            newObjectValues.postTestAssessment[name] = value;\r\n        } else if (name in objValues.postTestAssessment.referralInformation) {\r\n            newObjectValues.postTestAssessment.referralInformation[name] = value;\r\n        }\r\n\r\n        // Check if the name is \"previouslyTestedWithin12Months\"\r\n        if (name === \"previouslyTestedWithin12Months\") {\r\n            newObjectValues.resultOfPreviouslyTestedWithin12Months = \"\";\r\n        }\r\n        if (name === \"typeOfHivstKitReceived\") {\r\n            newObjectValues.numberOfHivstKitsReceived = \"\";\r\n            newObjectValues.nameOfTestKit = \"\";\r\n            newObjectValues.lotNumber = \"\";\r\n            newObjectValues.expiryDate = \"\";\r\n        }\r\n        // Check if the name is \"hasConductedHIVST\" and objValues.hasConductedHIVST is \"No\"\r\n        if (name === \"hasConductedHIVST\") {\r\n            testKitUserDetails.postTestAssessment = {\r\n                ...testKitUserDetails.postTestAssessment,\r\n                everUsedHivstKitForSelfOrOthers: \"\",\r\n                otherHivstKitUserCategory: \"\",\r\n                otherHivstKitUserCategoryText: \"\",\r\n                resultOfHivstTest: \"\",\r\n                accessConfirmatoryHts: \"\",\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n        }\r\n// Validate the field and remove the error message if the field is filled\r\n        if (value) {\r\n            let tempErrors = {...errors};\r\n            tempErrors[name] = \"\";\r\n            setErrors(tempErrors);\r\n        }\r\n\r\n        setObjValues(newObjectValues);\r\n    }\r\n\r\n\r\n    const handleUserInformationInputChange = (e, section) => {\r\n        const {name, value} = e.target;\r\n        let newUserInformation = {...testKitUserDetails};\r\n\r\n        if (section === 'postTestAssessment' && name in newUserInformation[section].referralInformation) {\r\n            newUserInformation[section].referralInformation[name] = value;\r\n        } else {\r\n            newUserInformation[section][name] = value;\r\n        }\r\n\r\n        // if everUsedHivstKitForSelfOrOthers  clear otherHivstKitUserCategory\r\n        if (name === \"everUsedHivstKitForSelfOrOthers\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                otherHivstKitUserCategory: \"\",\r\n                otherHivstKitUserCategoryText: \"\"\r\n            };\r\n        }\r\n\r\n        // if  resultOfHivstTestchnages clear all the feilds below\r\n        if (name === \"resultOfHivstTest\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                accessConfirmatoryHts: \"\",\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n\r\n        }\r\n        // if  accessConfirmatoryHtschnages clear all the feilds below\r\n        if (name === \"accessConfirmatoryHts\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n\r\n        }\r\n        // if  referPreventionServiceschnages clear all the feilds below\r\n        if (name === \"referPreventionServices\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n        }\r\n\r\n        // any change in referredForPreventionServices clear dateReferredForPreventionServices\r\n        if (name === \"referredForPreventionServices\") {\r\n            newUserInformation.postTestAssessment.referralInformation = {\r\n                ...newUserInformation.postTestAssessment.referralInformation,\r\n                dateReferredForPreventionServices: \"\"\r\n            };\r\n        }\r\n\r\n        if (name === \"hasConductedHIVST\" && value === \"No\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                everUsedHivstKitForSelfOrOthers: \"\",\r\n                otherHivstKitUserCategory: \"\",\r\n                otherHivstKitUserCategoryText: \"\",\r\n                resultOfHivstTest: \"\",\r\n                accessConfirmatoryHts: \"\",\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                }\r\n            };\r\n        }\r\n        // if userCategory changes clear all other fields in basicUserInfo\r\n        if (name === \"userCategory\") {\r\n            newUserInformation.basicUserInfo = {\r\n                ...newUserInformation.basicUserInfo,\r\n                otherCategory: \"\",\r\n                clientCode: \"\",\r\n                dateOfBirth: \"\",\r\n                age: \"\",\r\n            }\r\n        }\r\n        // validate and remove error message if the field is filled\r\n        if (value) {\r\n            let tempErrors = {...userInformationErrors};\r\n            tempErrors[name] = \"\";\r\n            setUserInformationErrors(tempErrors);\r\n        }\r\n\r\n        setUserInformation(newUserInformation);\r\n    };\r\n\r\n\r\n// Function to add a testKitUserDetails object to the list\r\n\r\n    const addUserInformation = () => {\r\n        if(validateUserInformation()) {\r\n            if(userInformationList.length <= objValues.numberOfHivstKitsReceived) {\r\n                let newUserInformation = {\r\n                    basicUserInfo: {\r\n                        id: \"\",\r\n                        firstName:testKitUserDetails.basicUserInfo.firstName,\r\n                        surname:testKitUserDetails.basicUserInfo.surname,\r\n                        otherName:testKitUserDetails.basicUserInfo.otherName,\r\n                        dateOfRegistration:testKitUserDetails.basicUserInfo.dateOfRegistration,\r\n                        otherCategory: testKitUserDetails.basicUserInfo.otherCategory,\r\n                        clientCode: testKitUserDetails.basicUserInfo.clientCode,\r\n                        dateOfBirth: testKitUserDetails.basicUserInfo.dateOfBirth,\r\n                        age: testKitUserDetails.basicUserInfo.age,\r\n                        sex: testKitUserDetails.basicUserInfo.sex,\r\n                        maritalStatusId: testKitUserDetails.basicUserInfo.maritalStatusId,\r\n                        typeOfHivst: testKitUserDetails.basicUserInfo.typeOfHivst,\r\n                        userCategory: testKitUserDetails.basicUserInfo.userCategory\r\n                    },\r\n                    postTestAssessment: {\r\n                        everUsedHivstKit: testKitUserDetails.postTestAssessment.everUsedHivstKit,\r\n                        everUsedHivstKitForSelfOrOthers: testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers,\r\n                        otherHivstKitUserCategory: testKitUserDetails.postTestAssessment.otherHivstKitUserCategory,\r\n                        otherHivstKitUserCategoryText: testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText,\r\n                        resultOfHivstTest: testKitUserDetails.postTestAssessment.resultOfHivstTest,\r\n                        accessConfirmatoryHts: testKitUserDetails.postTestAssessment.accessConfirmatoryHts,\r\n                        referPreventionServices: testKitUserDetails.postTestAssessment.referPreventionServices,\r\n                        referralInformation: {\r\n                            referredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts,\r\n                            dateReferredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts,\r\n                            referredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices,\r\n                            dateReferredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices\r\n                        }\r\n                    }\r\n                }\r\n                setUserInformationList([...userInformationList, newUserInformation]);\r\n                setObjValues({...objValues, testKitUserDetails: [...userInformationList, newUserInformation]});\r\n\r\n                // clear testKitUserDetails after adding to the list and also set the hasConductedHIVST to No\r\n                setUserInformation({\r\n                    basicUserInfo: {\r\n                        firstName:\"\",\r\n                        surname:\"\",\r\n                        otherName:\"\",\r\n                        dateOfRegistration:\"\",\r\n                        otherCategory: \"\",\r\n                        clientCode: \"\",\r\n                        dateOfBirth: \"\",\r\n                        age: \"\",\r\n                        sex: \"\",\r\n                        maritalStatusId: \"\",\r\n                        typeOfHivst: \"\",\r\n                        userCategory: \"\",\r\n                        isDateOfBirthEstimated: \"\"\r\n                    },\r\n                    postTestAssessment: {\r\n                        everUsedHivstKit: \"\",\r\n                        everUsedHivstKitForSelfOrOthers: \"\",\r\n                        otherHivstKitUserCategory: \"\",\r\n                        otherHivstKitUserCategoryText: \"\",\r\n                        resultOfHivstTest: \"\",\r\n                        accessConfirmatoryHts: \"\",\r\n                        referPreventionServices: \"\",\r\n                        referralInformation: {\r\n                            referredForConfirmatoryHts: \"\",\r\n                            dateReferredForConfirmatoryHts: \"\",\r\n                            referredForPreventionServices: \"\",\r\n                            dateReferredForPreventionServices: \"\"\r\n                        }\r\n                    }\r\n                });\r\n                setObjValues({...objValues, hasConductedHIVST: \"No\"});\r\n            } else {\r\n                // console.log(\"Cannot add more user information as it exceeds the number of HIVST kits received.\");\r\n            }\r\n\r\n        } else{\r\n            toast.error(\"Please fill all the required fields\");\r\n        }\r\n\r\n    }\r\n// Function to remove a testKitUserDetails object from the list based on index\r\n    const removeUserInformation = (index) => {\r\n        const updatedUserInformationList = userInformationList.filter((_, i) => i !== index);\r\n        setUserInformationList(updatedUserInformationList);\r\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\r\n    };\r\n\r\n// Function to update a testKitUserDetails object in the list based on index\r\n    const updateUserInformation = (index, updatedUserInformation) => {\r\n        const updatedUserInformationList = userInformationList.map((testKitUserDetails, i) =>\r\n            i === index ? updatedUserInformation : testKitUserDetails\r\n        );\r\n        setUserInformationList(updatedUserInformationList);\r\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\r\n    };\r\n\r\n// Function to clear the testKitUserDetails list\r\n    const clearUserInformationList = () => {\r\n        setUserInformationList([]);\r\n        setObjValues({...objValues, testKitUserDetails: []});\r\n    };\r\n\r\n\r\n    const handleKitSelectUserChange = selectedUsers => {\r\n        setSelectedUsers(selectedUsers);\r\n        let newValues = {...objValues, testKitUsers: selectedUsers};\r\n        if (!selectedUsers || selectedUsers.length === 0) {\r\n            setShowUserInfo(false);\r\n            newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\r\n        } else if (selectedUsers.length === 1 && selectedUsers[0] === 'myself') {\r\n            setShowUserInfo(false);\r\n            newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\r\n        } else {\r\n            setShowUserInfo(true);\r\n        }\r\n        if (!showUserInfo) {\r\n            testKitUserDetails.userCategory = \"\";\r\n            testKitUserDetails.otherCategory = \"\";\r\n            testKitUserDetails.clientCode = \"\";\r\n            testKitUserDetails.dateOfBirth = \"\";\r\n            testKitUserDetails.age = \"\";\r\n            testKitUserDetails.sex = \"\";\r\n            testKitUserDetails.maritalStatus = \"\";\r\n            testKitUserDetails.clientCode = \"\";\r\n            testKitUserDetails.typeOfHivSelfTest = \"\";\r\n        }\r\n        // always clear the userInformationList when the user selects a new user\r\n        // setUserInformationList([]);\r\n        setObjValues(newValues);\r\n        // }\r\n    };\r\n    const checkClientCode = (e) => {\r\n        let code = \"\";\r\n        if (e.target.name === \"serialNumber\") {\r\n            code = createdCode + e.target.value;\r\n            setCreatedCode(code);\r\n            setObjValues({...objValues, clientCode: code});\r\n        }\r\n\r\n        async function getIndexClientCode() {\r\n            const indexClientCode = objValues.clientCode;\r\n            const response = await axios.get(\r\n                `${baseUrl}hts/client/${indexClientCode}`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"text/plain\",\r\n                    },\r\n                }\r\n            );\r\n        }\r\n\r\n        getIndexClientCode();\r\n    };\r\n\r\n\r\n    const Sex = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n                headers: {Authorization: `Bearer ${token}`},\r\n            })\r\n            .then((response) => {\r\n                setSexs(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //// console.log(error);\r\n            });\r\n    };\r\n\r\n    const MARITALSTATUS = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\r\n                headers: {Authorization: `Bearer ${token}`},\r\n            })\r\n            .then((response) => {\r\n                setMaritalStatus(response.data);\r\n            })\r\n            .catch((error) => {\r\n                //// console.log(error);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        Sex();\r\n        MARITALSTATUS();\r\n    }, []);\r\n\r\n\r\n    const setAge = () => {\r\n        const age = calculate_age(testKitUserDetails.basicUserInfo?.dateOfBirth);\r\n        setUserInformation(prevState => ({\r\n            ...prevState,\r\n            basicUserInfo: {\r\n                ...prevState.basicUserInfo,\r\n                age: age\r\n            }\r\n        }));\r\n        return age;\r\n    }\r\n\r\n    const handleDateOfBirthChange1 = (e) => {\r\n        let newUserInformation = {...testKitUserDetails};\r\n        newUserInformation.basicUserInfo[e.target.name] = e.target.value;\r\n        if (e.target.value && new Date(e.target.value) <= new Date()) {\r\n            const age_now = calculate_age(e.target.value);\r\n            newUserInformation.basicUserInfo.age = age_now;\r\n        } else {\r\n            newUserInformation.basicUserInfo.age = \"\";\r\n        }\r\n        setUserInformation(newUserInformation);\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (validateObjValues()) {\r\n            // const userInfoList = userInformationList;\r\n            objValues.testKitUserDetails = [testKitUserDetails] ;\r\n            setSaving(true)\r\n            axios\r\n                .put(`${baseUrl}hivst/${props.activePage.activeObject.id}`, objValues, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        setSaving(false)\r\n                        toast.success(\"HIVST Updated Successful\");\r\n                        history.push(\"/patient/hivst\");\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    toast.error(\"An error occurred. Please try again.\");\r\n                });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const handleDobChange = (e) => {\r\n        if (e.target.value) {\r\n            const today = new Date();\r\n            const birthDate = new Date(e.target.value);\r\n            let age_now = today.getFullYear() - birthDate.getFullYear();\r\n            const m = today.getMonth() - birthDate.getMonth();\r\n            if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n                age_now--;\r\n            }\r\n            // objValues.age = age_now;\r\n            testKitUserDetails.basicUserInfo.age = age_now;\r\n        } else {\r\n            setUserInformation({ ...testKitUserDetails, age: \"\" });\r\n            // setObjValues({ ...objValues, age: \"\" });\r\n        }\r\n        // setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n        setUserInformation({ ...testKitUserDetails, [e.target.name]: e.target.value });\r\n        setUserInformation({ ...testKitUserDetails, dateOfBirth: e.target.value });\r\n        // setObjValues({ ...objValues, dob: e.target.value });\r\n        if (testKitUserDetails.basicUserInfo.age !== \"\" && testKitUserDetails.basicUserInfo.age >= 85) {\r\n            toggle();\r\n        }\r\n    };\r\n    const handleDateOfBirthChange = (e) => {\r\n        if (e.target.value == \"Actual\") {\r\n            testKitUserDetails.basicUserInfo.isDateOfBirthEstimated = false;\r\n            setAgeDisabled(true);\r\n        } else if (e.target.value == \"Estimated\") {\r\n            // objValues.isDateOfBirthEstimated = true;\r\n            testKitUserDetails.basicUserInfo.isDateOfBirthEstimated = true;\r\n            setAgeDisabled(false);\r\n        }\r\n    };\r\n    const handleAgeChange = (e) => {\r\n        if (!ageDisabled && e.target.value) {\r\n            if (e.target.value !== \"\" && e.target.value >= 85) {\r\n                toggle();\r\n            }\r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n            setUserInformation({ ...testKitUserDetails, dateOfBirth: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n            // setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n            // objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\")\r\n            testKitUserDetails.basicUserInfo.dateOfBirth = moment(dobNew).format(\"YYYY-MM-DD\");\r\n        }\r\n        // setObjValues({ ...objValues, age: e.target.value });\r\n        setUserInformation({ ...testKitUserDetails, age: e.target.value });\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                    <h2 style={{color: \"#000\"}}>\r\n                        HIV SELF - TEST AND RESPONSE CARD {isView ? \" - View\" : \" - Update\"} </h2>\r\n                    <br/>\r\n                    <form>\r\n                        <div className=\"row mb-7\">\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Visit Date <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                        name=\"dateOfVisit\"\r\n                                        id=\"dateOfVisit\"\r\n                                        // value={objValues.dateOfVisit}\r\n                                        value={hivstObj.dateOfVisit}\r\n                                        onChange={handleInputChange}\r\n                                        min=\"1929-12-31\"\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    />\r\n                                    {errors.dateOfVisit !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.dateOfVisit}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label >\r\n                                        Service Delivery Point\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"serviceDeliveryPoint\"\r\n                                        id=\"serviceDeliveryPoint\"\r\n                                        value={objValues.serviceDeliveryPoint}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Health Facility\">Health Facility</option>\r\n                                        <option value=\"Comunity Pharmacy\">Community Pharmacy</option>\r\n                                        <option value=\"PPMV\">PPMV</option>\r\n                                        <option value=\"Mobile Distribution\">Mobile Distribution</option>\r\n                                        <option value=\"Workplace\">WorkPlace</option>\r\n                                        <option value=\"Others\">Others</option>\r\n                                        <option value=\"Home based\">Home based</option>\r\n                                        <option value=\"Door to Door\">Door to Door</option>\r\n                                    </select>\r\n                                    {errors.serviceDeliveryPoint !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.serviceDeliveryPoint}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                        User Type\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"userType\"\r\n                                        id=\"userType\"\r\n                                        value={objValues.userType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Primary User\">Primary User (collector)</option>\r\n                                        <option value=\"Secondary User\">secondary user\r\n                                        </option>\r\n                                    </select>\r\n                                    {errors.userType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.userType}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Serial Number\r\n                                        {/*<span style={{color: \"red\"}}> *</span> */}\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"serialNumber\"\r\n                                        id=\"serialNumber\"\r\n                                        value={serialNumber}\r\n                                        //value={Math.floor(Math.random() * 1093328)}\r\n                                        onBlur={checkClientCode}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    />\r\n                                    {/*{errors.serialNumber !== \"\" ? (*/}\r\n                                    {/*    <span className={classes.error}>{errors.serialNumber}</span>*/}\r\n                                    {/*) : (*/}\r\n                                    {/*    \"\"*/}\r\n                                    {/*)}*/}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Client Code <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"clientCode\"\r\n                                        id=\"clientCode\"\r\n                                        value={objValues.clientCode}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    />\r\n                                    {errors.clientCode !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.clientCode}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                        Have you previously tested for HIV in the last 12 months?\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"previouslyTestedWithin12Months\"\r\n                                        id=\"previouslyTestedWithin12Months\"\r\n                                        value={objValues.previouslyTestedWithin12Months}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">YES</option>\r\n                                        <option value=\"No\">NO</option>\r\n                                    </select>\r\n                                    {errors.previouslyTestedWithin12Months !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.previouslyTestedWithin12Months}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            {objValues?.previouslyTestedWithin12Months === \"Yes\" ? (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label >\r\n                                            What was the test result?\r\n                                            <span style={{color: \"red\"}}> *</span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"resultOfPreviouslyTestedWithin12Months\"\r\n                                            id=\"resultOfPreviouslyTestedWithin12Months\"\r\n                                            value={objValues.resultOfPreviouslyTestedWithin12Months}\r\n                                            onChange={handleInputChange}\r\n                                            style={{\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0.2rem\",\r\n                                            }}\r\n                                            disabled={isView}\r\n                                        >\r\n                                            <option value={\"\"}></option>\r\n                                            <option value=\"Positive\">Positive</option>\r\n                                            <option value=\"Negative\">Negative</option>\r\n                                            <option value=\"Unknown\">Unknown</option>\r\n                                        </select>\r\n                                        {errors.resultOfPreviouslyTestedWithin12Months !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.resultOfPreviouslyTestedWithin12Months}</span>\r\n                                        ) : (\r\n                                            \"\"\r\n                                        )}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            ) : \"\"}\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label >\r\n                                        Do you consent to be followed-up via phone calls?\r\n                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"consentForFollowUpCalls\"\r\n                                        id=\"consentForFollowUpCalls\"\r\n                                        value={objValues.consentForFollowUpCalls}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">YES</option>\r\n                                        <option value=\"No\">NO</option>\r\n                                    </select>\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label >\r\n                                        What type of HIVST kit did you receive/purchase today?\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"typeOfHivstKitReceived\"\r\n                                        id=\"typeOfHivstKitReceived\"\r\n                                        value={objValues.typeOfHivstKitReceived}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Oral fluid\">Oral fluid</option>\r\n                                        <option value=\"Blood\">Blood</option>\r\n                                    </select>\r\n                                    {errors.typeOfHivstKitReceived !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.typeOfHivstKitReceived}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Number of individual HIV self-test kits received? {\" \"}\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"numberOfHivstKitsReceived\"\r\n                                        id=\"numberOfHivstKitsReceived\"\r\n                                        value={objValues.numberOfHivstKitsReceived}\r\n                                        min=\"1\"\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    />\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"providerNameCompletingForm\">\r\n                                        Name of Test Kit ?\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        name=\"nameOfTestKit\"\r\n                                        id=\"nameOfTestKit\"\r\n                                        value={objValues.nameOfTestKit}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    />\r\n                                    {errors.nameOfTestKit !== \"\" ? (\r\n                                        <span className={classes.error}>\r\n                                            {errors.nameOfTestKit}\r\n                                        </span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"providerNameCompletingForm\">\r\n                                        Lot No\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        name=\"lotNumber\"\r\n                                        id=\"\" lotNumber\r\n                                        value={objValues.lotNumber}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    />\r\n                                    {errors.lotNumber !== \"\" ? (\r\n                                        <span className={classes.error}>\r\n                                            {errors.lotNumber}\r\n                                        </span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Expiry Date\r\n                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                        name=\"expiryDate\"\r\n                                        id=\"expirtyDate\"\r\n                                        value={objValues.expiryDate}\r\n                                        onChange={handleInputChange}\r\n                                        min={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        max={moment(new Date()).add(5, 'years').format(\"YYYY-MM-DD\")}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                        disabled={isView}\r\n                                    />\r\n                                    {/*{errors.expiryDate !== \"\" ? (*/}\r\n                                    {/*    <span className={classes.error}>{errors.expiryDate}</span>*/}\r\n                                    {/*) : (*/}\r\n                                    {/*    \"\"*/}\r\n                                    {/*)}*/}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-12\">\r\n                                <FormGroup>\r\n                                    <Label for=\"dualListBox\">\r\n                                        Who do you want to use the kit for?\r\n                                    </Label>\r\n                                    <DualListBox\r\n                                        options={options}\r\n                                        // selected={selectedUsers}\r\n                                        selected = {objValues.testKitUsers}\r\n                                        onChange={handleKitSelectUserChange}\r\n                                        disabled={isView}\r\n                                        // disabled={objValues.userType === \"Secondary User\" ? true : false}\r\n                                    />\r\n                                    {errors.testKitUsers !== \"\" ? (\r\n                                        <span className={classes.error}>\r\n                                            {errors.testKitUsers}\r\n                                        </span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {/*<div className=\"form-group mb-7 col-md-4\">*/}\r\n                            {/*    <FormGroup>*/}\r\n                            {/*        <Label for=\"testKitUsers\">*/}\r\n                            {/*            Who do you want to use the kit for?*/}\r\n                            {/*        </Label>*/}\r\n                            {/*        <Select*/}\r\n                            {/*            isMulti*/}\r\n                            {/*            name=\"whoDoYouWantToUseTheKitFor\"*/}\r\n                            {/*            options={options}*/}\r\n                            {/*            className=\"basic-multi-select\"*/}\r\n                            {/*            classNamePrefix=\"select\"*/}\r\n                            {/*            onChange={handleKitSelectUserChange}*/}\r\n                            {/*            styles={{*/}\r\n                            {/*                control: (provided) => ({*/}\r\n                            {/*                    ...provided,*/}\r\n                            {/*                    border: \"1px solid #014D88\",*/}\r\n                            {/*                    borderRadius: \"0.25rem\",*/}\r\n                            {/*                }),*/}\r\n                            {/*            }}*/}\r\n                            {/*        />*/}\r\n                            {/*    </FormGroup>*/}\r\n                            {/*</div>*/}\r\n\r\n                            {selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === 'others' &&\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"testKitUsers\">\r\n                                            Please Specify\r\n                                        </Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"otherText\"\r\n                                            id=\"otherText\"\r\n                                            value={otherText}\r\n                                            onChange={e => setOtherText(e.target.value)}\r\n                                            placeholder=\"Please specify\"\r\n                                            style={{\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0.25rem\",\r\n                                            }}\r\n                                            disabled={isView}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </div>\r\n                            }\r\n                            {showUserInfo &&\r\n                                <div className=\"form-group  col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label >\r\n                                            Is user information available?\r\n                                            <span style={{color: \"red\"}}> *</span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"otherTestKitUserInfoAvailable\"\r\n                                            id=\"otherTestKitUserInfoAvailable\"\r\n                                            value={objValues.otherTestKitUserInfoAvailable}\r\n                                            onChange={handleInputChange}\r\n                                            style={{\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0.2rem\",\r\n                                            }}\r\n                                            disabled={isView}\r\n                                            // disabled={objValues.userType === \"Secondary User\" ? true : false}\r\n                                        >\r\n                                            <option value={\"\"}></option>\r\n                                            <option value=\"Yes\">YES</option>\r\n                                            <option value=\"No\">NO</option>\r\n                                        </select>\r\n                                        {/*                {errors.firstTimeVisit !== \"\" ? (*/}\r\n                                        {/*                    <span className={classes.error}>*/}\r\n                                        {/*  {errors.firstTimeVisit}*/}\r\n                                        {/*</span>*/}\r\n                                        {/*                ) : (*/}\r\n                                        {/*                    \"\"*/}\r\n                                        {/*                )}*/}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            }\r\n                            {/*{objValues?.otherTestKitUserInfoAvailable === \"Yes\" &&*/}\r\n                            {/*{selectedUsers.length === 0 ? (\"\") :*/}\r\n                                {objValues && objValues.testKitUserDetails &&\r\n                                (\r\n                                  <>\r\n                                    <div className=\"row center\">\r\n                                        <div\r\n                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\r\n                                            style={{\r\n                                                backgroundColor: \"#992E62\",\r\n                                                width: \"125%\",\r\n                                                height: \"35px\",\r\n                                                color: \"#fff\",\r\n                                                fontWeight: \"bold\",\r\n                                            }}\r\n                                        >\r\n                                            Intended Kit User Information\r\n                                        </div>\r\n                                    </div>\r\n                                      <div className=\"row\">\r\n                                          <div className=\"form-group mb-3 col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label for=\"\">\r\n                                                      Registration Date\r\n                                                      {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                  </Label>\r\n                                                  <Input\r\n                                                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                      name=\"dateOfRegistration\"\r\n                                                      id=\"dateOfRegistration\"\r\n                                                      min=\"1929-12-31\"\r\n                                                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                      value={testKitUserDetails.basicUserInfo.dateOfRegistration}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n\r\n                                                  />\r\n                                                  {/*{errors.dateOfVisit !== \"\" ? (*/}\r\n                                                  {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\r\n                                                  {/*) : (*/}\r\n                                                  {/*    \"\"*/}\r\n                                                  {/*)}*/}\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          <div className=\"form-group col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      First Name\r\n                                                      <span style={{color: \"red\"}}> *</span>\r\n                                                  </Label>\r\n                                                  <input\r\n                                                      type=\"text\"\r\n                                                      className=\"form-control\"\r\n                                                      name=\"firstName\"\r\n                                                      id=\"firstName\"\r\n                                                      value={testKitUserDetails.basicUserInfo.firstName}\r\n                                                      // onChange={handleInputChange1}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n                                                  />\r\n                                                  {userInformationErrors.firstName !== \"\" ? (\r\n                                                      <span\r\n                                                          className={classes.error}>{userInformationErrors.firstName}</span>\r\n                                                  ) : (\r\n                                                      \"\"\r\n                                                  )}\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          <div className=\"form-group col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      Surname\r\n                                                      <span style={{color: \"red\"}}> *</span>\r\n                                                  </Label>\r\n                                                  <input\r\n                                                      type=\"text\"\r\n                                                      className=\"form-control\"\r\n                                                      name=\"surname\"\r\n                                                      id=\"surname\"\r\n                                                      value={testKitUserDetails.basicUserInfo.surname}\r\n                                                      // onChange={handleInputChange1}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n                                                  />\r\n                                                  {userInformationErrors.surname !== \"\" ? (\r\n                                                      <span\r\n                                                          className={classes.error}>{userInformationErrors.surname}</span>\r\n                                                  ) : (\r\n                                                      \"\"\r\n                                                  )}\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          <div className=\"form-group col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      Other name\r\n                                                  </Label>\r\n                                                  <input\r\n                                                      type=\"text\"\r\n                                                      className=\"form-control\"\r\n                                                      name=\"otherName\"\r\n                                                      id=\"otherName\"\r\n                                                      value={testKitUserDetails.basicUserInfo.otherName}\r\n                                                      // onChange={handleInputChange1}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n                                                  />\r\n                                              </FormGroup>\r\n                                          </div>\r\n\r\n                                          <div className=\"form-group  col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      user Category\r\n                                                      <span style={{color: \"red\"}}> *</span>\r\n                                                  </Label>\r\n                                                  <select\r\n                                                      className=\"form-control\"\r\n                                                      name=\"userCategory\"\r\n                                                      id=\"userCategory\"\r\n                                                      value={testKitUserDetails.basicUserInfo.userCategory}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n                                                  >\r\n                                                      <option value={\"\"}></option>\r\n                                                      {/*{options.map(option => (*/}\r\n                                                      {/*    <option key={option.value} value={option.value}>*/}\r\n                                                      {/*        {option.label}*/}\r\n                                                      {/*    </option>*/}\r\n                                                      {/*))}*/}\r\n                                                      {selectedUsers.map((user, index) => (\r\n                                                          <option key={index} value={user}>{user}</option>\r\n                                                      ))}\r\n                                                      ))\r\n                                                  </select>\r\n                                                  {userInformationErrors.userCategory !== \"\" ? (\r\n                                                      <span\r\n                                                          className={classes.error}>{userInformationErrors.userCategory}</span>\r\n                                                  ) : (\r\n                                                      \"\"\r\n                                                  )}\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          {testKitUserDetails.basicUserInfo.userCategory === \"others\" ? (\r\n                                              <div className=\"form-group col-md-4\">\r\n                                                  <FormGroup>\r\n                                                      <Label>\r\n                                                          Specify Other Category\r\n                                                          {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                      </Label>\r\n                                                      <input\r\n                                                          type=\"text\"\r\n                                                          className=\"form-control\"\r\n                                                          name=\"otherCategory\"\r\n                                                          id=\"otherCategory\"\r\n                                                          value={testKitUserDetails.basicUserInfo.otherCategory}\r\n                                                          // onChange={handleInputChange1}\r\n                                                          onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                          style={{\r\n                                                              border: \"1px solid #014D88\",\r\n                                                              borderRadius: \"0.2rem\",\r\n                                                          }}\r\n                                                          disabled={isView}\r\n                                                      />\r\n                                                  </FormGroup>\r\n                                              </div>\r\n                                          ) : \"\"}\r\n                                          <div className=\"form-group col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      Client Code\r\n                                                      <span style={{color: \"red\"}}> *</span>\r\n                                                  </Label>\r\n                                                  <input\r\n                                                      type=\"text\"\r\n                                                      className=\"form-control\"\r\n                                                      name=\"clientCode\"\r\n                                                      id=\"clientCode\"\r\n                                                      value={testKitUserDetails.basicUserInfo.clientCode}\r\n                                                      // onChange={handleInputChange1}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n                                                  />\r\n                                                  {userInformationErrors.clientCode !== \"\" ? (\r\n                                                      <span\r\n                                                          className={classes.error}>{userInformationErrors.clientCode}</span>\r\n                                                  ) : (\r\n                                                      \"\"\r\n                                                  )}\r\n                                              </FormGroup>\r\n                                          </div>\r\n\r\n                                          <div className=\"form-group mb-2 col-md-2\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      Date Of Birth <span style={{color: \"red\"}}> *</span>\r\n                                                  </Label>\r\n                                                  <div className=\"radio\">\r\n                                                      <label>\r\n                                                          <input\r\n                                                              type=\"radio\"\r\n                                                              value=\"Actual\"\r\n                                                              name=\"dateOfBirth\"\r\n                                                              defaultChecked\r\n                                                              onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                              style={{\r\n                                                                  border: \"1px solid #014D88\",\r\n                                                                  borderRadius: \"0.2rem\",\r\n                                                              }}\r\n                                                          />{\" \"}\r\n                                                          Actual\r\n                                                      </label>\r\n                                                  </div>\r\n                                                  <div className=\"radio\">\r\n                                                      <label>\r\n                                                          <input\r\n                                                              type=\"radio\"\r\n                                                              value=\"Estimated\"\r\n                                                              name=\"dateOfBirth\"\r\n                                                              onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                              style={{\r\n                                                                  border: \"1px solid #014D88\",\r\n                                                                  borderRadius: \"0.2rem\",\r\n                                                              }}\r\n                                                          />{\" \"}\r\n                                                          Estimated\r\n                                                      </label>\r\n                                                  </div>\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          <div className=\"form-group mb-3 col-md-3\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      Date <span style={{color: \"red\"}}> *</span>\r\n                                                  </Label>\r\n                                                  <input\r\n                                                      className=\"form-control\"\r\n                                                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                      name=\"dob\"\r\n                                                      id=\"dob\"\r\n                                                      min=\"1929-12-31\"\r\n                                                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                      value={testKitUserDetails.basicUserInfo.dateOfBirth}\r\n                                                      onChange={handleDobChange}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                  />\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          <div className=\"form-group mb-3 col-md-3\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      Age <span style={{color: \"red\"}}> *</span>\r\n                                                  </Label>\r\n                                                  <input\r\n                                                      className=\"form-control\"\r\n                                                      type=\"number\"\r\n                                                      name=\"age\"\r\n                                                      id=\"age\"\r\n                                                      value={testKitUserDetails.basicUserInfo.age}\r\n                                                      disabled={ageDisabled}\r\n                                                      onChange={handleAgeChange}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                  />\r\n                                              </FormGroup>\r\n                                          </div>\r\n\r\n                                          <div className=\"form-group  col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label>\r\n                                                      Sex\r\n                                                      {/*<span style={{color: \"red\"}}> *</span> */}\r\n                                                  </Label>\r\n                                                  <select\r\n                                                      className=\"form-control\"\r\n                                                      name=\"sex\"\r\n                                                      id=\"sex\"\r\n                                                      value={testKitUserDetails.basicUserInfo.sex}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n                                                  >\r\n                                                      <option value={\"\"}></option>\r\n                                                      {sexs.map((value) => (\r\n                                                          <option key={value.id} value={value.display}>\r\n                                                              {value.display}\r\n                                                          </option>\r\n                                                      ))}\r\n                                                  </select>\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          {testKitUserDetails.basicUserInfo.age > 9 && (\r\n                                              <div className=\"form-group  col-md-4\">\r\n                                                  <FormGroup>\r\n                                                      <Label>Marital Status</Label>\r\n                                                      <select\r\n                                                          className=\"form-control\"\r\n                                                          name=\"maritalStatusId\"\r\n                                                          id=\"maritalStatusId\"\r\n                                                          value={testKitUserDetails.basicUserInfo.maritalStatusId}\r\n                                                          // onChange={handleInputChange1}\r\n                                                          onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                          style={{\r\n                                                              border: \"1px solid #014D88\",\r\n                                                              borderRadius: \"0.2rem\",\r\n                                                          }}\r\n                                                          disabled={isView}\r\n                                                      >\r\n                                                          <option value={\"\"}></option>\r\n                                                          {maritalStatus.map((value) => (\r\n                                                              <option key={value.id} value={value.id}>\r\n                                                                  {value.display}\r\n                                                              </option>\r\n                                                          ))}\r\n                                                      </select>\r\n                                                  </FormGroup>\r\n                                              </div>\r\n                                          )}\r\n                                          <div className=\"form-group  col-md-4\">\r\n                                              <FormGroup>\r\n                                                  <Label> Type of HIV Self-Test </Label>\r\n                                                  <select\r\n                                                      className=\"form-control\"\r\n                                                      name=\"typeOfHivst\"\r\n                                                      id=\"typeOfHivst\"\r\n                                                      value={testKitUserDetails.basicUserInfo.typeOfHivst}\r\n                                                      onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                      style={{\r\n                                                          border: \"1px solid #014D88\",\r\n                                                          borderRadius: \"0.2rem\",\r\n                                                      }}\r\n                                                      disabled={isView}\r\n                                                  >\r\n                                                      <option value={\"\"}></option>\r\n                                                      <option value=\"Assisted\">\r\n                                                          Assisted\r\n                                                      </option>\r\n                                                      <option value=\"Unassisted\">\r\n                                                          Unassisted\r\n                                                      </option>\r\n                                                  </select>\r\n                                                  {\r\n                                                      userInformationErrors.typeOfHivst !== \"\" ? (\r\n                                                          <span\r\n                                                              className={classes.error}>{userInformationErrors.typeOfHivst}</span>\r\n                                                      ) : (\"\")\r\n\r\n                                                  }\r\n                                              </FormGroup>\r\n                                          </div>\r\n                                          {/*<div className=\"form-group mb-3 col-md-6\">*/}\r\n                                          {/*    <LabelSui*/}\r\n                                          {/*        as=\"a\"*/}\r\n                                          {/*        color=\"black\"*/}\r\n                                          {/*        // onClick={handleSubmitfamilyIndexRequestDto}*/}\r\n                                          {/*        size=\"small\"*/}\r\n                                          {/*        style={{marginTop: 35}}*/}\r\n                                          {/*    >*/}\r\n                                          {/*        <Icon name=\"plus\"/> Add*/}\r\n                                          {/*    </LabelSui>*/}\r\n                                          {/*</div>*/}\r\n                                      </div>\r\n\r\n\r\n                                  </>\r\n                                )\r\n                                }\r\n\r\n                            {/*Checkbox to select if the User has conducted the HIVST – if checked, display the*/}\r\n                            {/*following questions, else the user should be able to save the form.*/}\r\n                            {/*<div className=\"row mb-7\">*/}\r\n                            {/*    <div className=\"form-group mb-3 col-md-4\">*/}\r\n                            {/*        <FormGroup>*/}\r\n                            {/*            <label>*/}\r\n                            {/*                <input*/}\r\n                            {/*                    type=\"checkbox\"*/}\r\n                            {/*                    checked={objValues.hasConductedHIVST}*/}\r\n                            {/*                    onChange={() => {*/}\r\n                            {/*                        setObjValues(prevState => ({*/}\r\n                            {/*                            ...prevState,*/}\r\n                            {/*                            hasConductedHIVST: !prevState.hasConductedHIVST*/}\r\n                            {/*                        }));*/}\r\n                            {/*                        // // console.log(\"Has Conducted HIVST\", !objValues.hasConductedHIVST);*/}\r\n                            {/*                    }}*/}\r\n                            {/*                    style={{marginRight: \"10px\"}}*/}\r\n                            {/*                />*/}\r\n                            {/*                Have you conducted the HIVST ?*/}\r\n                            {/*            </label>*/}\r\n                            {/*        </FormGroup>*/}\r\n                            {/*    </div>*/}\r\n                            {/*</div>*/}\r\n                            {objValues?.otherTestKitUserInfoAvailable === \"No\" &&\r\n                                <div className=\"row mb-7\">\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <Button\r\n                                            content=\"Save wihout user Info\"\r\n                                            icon=\"save\"\r\n                                            labelPosition=\"right\"\r\n                                            style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\r\n                                            onClick={handleSubmit}\r\n                                            disabled={saving}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                            {objValues && objValues.otherTestKitUserInfoAvailable === \"Yes\" &&\r\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                                    <hr style={{width: '100%'}}/>\r\n                                </div>\r\n                            }\r\n                            {/*{objValues && selectedUsers.length > 0 &&*/}\r\n                            {objValues && objValues.testKitUserDetails &&\r\n                                <div className=\"row mb-7\">\r\n                                    <div className=\"form-group  col-md-4\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                Have you conducted the HIVST ?\r\n                                                {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"hasConductedHIVST\"\r\n                                                id=\"hasConductedHIVST\"\r\n                                                value={objValues.hasConductedHIVST}\r\n                                                onChange={handleInputChange}\r\n                                                style={{\r\n                                                    border: \"1px solid #014D88\",\r\n                                                    borderRadius: \"0.2rem\",\r\n                                                }}\r\n                                                disabled={isView}\r\n                                            >\r\n                                                <option value={\"\"}></option>\r\n                                                <option value=\"Yes\">YES</option>\r\n                                                <option value=\"No\">NO</option>\r\n                                            </select>\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"row mb-7\">\r\n                                {/*{objValues.hasConductedHIVST === \"Yes\" ? (*/}\r\n                                {objValues && objValues.testKitUserDetails.postTestAssessment !== null ? (\r\n                                    // Display the following questions if the checkbox is checked\r\n                                    <>\r\n                                        <div className=\"row center\">\r\n                                            <div\r\n                                                className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\r\n                                                style={{\r\n                                                    backgroundColor: \"green\",\r\n                                                    width: \"125%\",\r\n                                                    height: \"35px\",\r\n                                                    color: \"#fff\",\r\n                                                    fontWeight: \"bold\",\r\n                                                }}\r\n                                            >\r\n\r\n                                                Section B : HIVST Post Test Assessment\r\n                                            </div>\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label >\r\n                                                        Have you ever used HIVST kit?\r\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                    </Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"everUsedHivstKit\"\r\n                                                        id=\"everUsedHivstKitl\"\r\n                                                        // value={objValues.hasConductedHIVST ? \"Yes\" : \"No\"}\r\n                                                        value={testKitUserDetails?.postTestAssessment?.everUsedHivstKit}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                        disabled={isView}\r\n                                                    >\r\n                                                        <option value={\"\"}></option>\r\n                                                        <option value=\"Yes\">YES</option>\r\n                                                        <option value=\"No\">NO</option>\r\n                                                    </select>\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label >\r\n                                                        Did you use the HIVST kit for yourself or someone else?\r\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                    </Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"everUsedHivstKitForSelfOrOthers\"\r\n                                                        id=\"everUsedHivstKitForSelfOrOthers\"\r\n                                                        value={testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                        disabled={isView}\r\n                                                    >\r\n                                                        <option value={\"\"}></option>\r\n                                                        <option value=\"Self\">Self</option>\r\n                                                        <option value=\"Someone else\">Someone else</option>\r\n                                                    </select>\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            {testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers === \"Someone else\" &&\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label >\r\n                                                            Who did you give it to?\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"otherHivstKitUserCategory\"\r\n                                                            id=\"otherHivstKitUserCategory\"\r\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategory}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                            disabled={isView}\r\n                                                        >\r\n                                                            <option value={\"\"}></option>\r\n                                                            {options.map(option => (\r\n                                                                <option key={option.value} value={option.value}>\r\n                                                                    {option.label}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            }\r\n                                            {testKitUserDetails.postTestAssessment?.otherHivstKitUserCategory === \"others\" ? (\r\n                                                <div className=\"form-group col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label>\r\n                                                            Please Specify Other Category\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            className=\"form-control\"\r\n                                                            name=\"otherHivstKitUserCategoryText\"\r\n                                                            id=\"otherHivstKitUserCategoryText\"\r\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                            disabled={isView}\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            ) : \"\"}\r\n\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label >\r\n                                                        What was the result of the HIVST?\r\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                    </Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"resultOfHivstTest\"\r\n                                                        id=\"resultOfHivstTest\"\r\n                                                        value={testKitUserDetails.postTestAssessment.resultOfHivstTest}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                        disabled={isView}\r\n                                                    >\r\n                                                        <option value={\"\"}></option>\r\n                                                        <option value=\"Reactive\">Reactive</option>\r\n                                                        <option value=\"Non-Reactive\">Non Reactive</option>\r\n                                                        <option value=\"Indeterminate\">Indeterminate</option>\r\n                                                    </select>\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Reactive\" &&\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label >\r\n                                                            Would you like to access HIV testing to confirm my HIVST\r\n                                                            result?\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"accessConfirmatoryHts\"\r\n                                                            id=\"accessConfirmatoryHts\"\r\n                                                            value={testKitUserDetails.postTestAssessment.accessConfirmatoryHts}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                            disabled={isView}\r\n                                                        >\r\n                                                            <option value={\"\"}></option>\r\n                                                            <option value=\"Yes\">YES</option>\r\n                                                            <option value=\"No\">NO</option>\r\n                                                        </select>\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            }\r\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Non-Reactive\" &&\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label >\r\n                                                            Would you like to be referred for prevention services\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"referPreventionServices\"\r\n                                                            id=\"referPreventionServices\"\r\n                                                            value={testKitUserDetails.postTestAssessment.referPreventionServices}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                            disabled={isView}\r\n                                                        >\r\n                                                            <option value={\"\"}></option>\r\n                                                            <option value=\"Yes\">YES</option>\r\n                                                            <option value=\"No\">NO</option>\r\n                                                        </select>\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            }\r\n\r\n                                        </div>\r\n                                        {\r\n                                            testKitUserDetails.postTestAssessment\r\n                                            && testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\"\r\n                                            || testKitUserDetails.postTestAssessment.referPreventionServices === \"Yes\" ?\r\n                                                (\r\n                                                    <div className=\"row center\">\r\n                                                        <div\r\n                                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\r\n                                                            style={{\r\n                                                                backgroundColor: \"rgba(25, 96, 176, 0.8)\",\r\n                                                                width: \"125%\",\r\n                                                                height: \"35px\",\r\n                                                                color: \"#fff\",\r\n                                                                fontWeight: \"bold\",\r\n                                                            }}\r\n                                                        >\r\n                                                            Section C : Referral Information\r\n                                                        </div>\r\n                                                        {testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\" && <div className=\"form-group  col-md-4\">\r\n                                                            <FormGroup>\r\n                                                                <Label >\r\n                                                                    Referred for Confirmatory HTS Testing\r\n                                                                    {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                </Label>\r\n                                                                <select\r\n                                                                    className=\"form-control\"\r\n                                                                    name=\"referredForConfirmatoryHts\"\r\n                                                                    id=\"referredForConfirmatoryHts\"\r\n                                                                    value={testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts}\r\n                                                                    onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                                    style={{\r\n                                                                        border: \"1px solid #014D88\",\r\n                                                                        borderRadius: \"0.2rem\",\r\n                                                                    }}\r\n                                                                    disabled={isView}\r\n                                                                >\r\n                                                                    <option value={\"\"}></option>\r\n                                                                    <option value=\"Yes\">YES</option>\r\n                                                                    <option value=\"No\">NO</option>\r\n                                                                </select>\r\n                                                            </FormGroup>\r\n                                                        </div>}\r\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts === \"Yes\" &&\r\n                                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                                <FormGroup>\r\n                                                                    <Label for=\"\">\r\n                                                                        Date referred for confirmatory HTS testing\r\n                                                                        field\r\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                    </Label>\r\n                                                                    <Input\r\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                                        name=\"dateReferredForConfirmatoryHts\"\r\n                                                                        id=\"dateReferredForConfirmatoryHts\"\r\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts}\r\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n\r\n                                                                        min={objValues.dateOfVisit}\r\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                                        style={{\r\n                                                                            border: \"1px solid #014D88\",\r\n                                                                            borderRadius: \"0.25rem\",\r\n                                                                        }}\r\n                                                                        disabled={isView}\r\n                                                                    />\r\n                                                                </FormGroup>\r\n                                                            </div>}\r\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails?.postTestAssessment?.referPreventionServices === \"Yes\" &&\r\n                                                            <div className=\"form-group  col-md-4\">\r\n                                                                <FormGroup>\r\n                                                                    <Label >\r\n                                                                        Referred for Prevention Services\r\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                    </Label>\r\n                                                                    <select\r\n                                                                        className=\"form-control\"\r\n                                                                        name=\"referredForPreventionServices\"\r\n                                                                        id=\"referredForPreventionServices\"\r\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices}\r\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n\r\n                                                                        style={{\r\n                                                                            border: \"1px solid #014D88\",\r\n                                                                            borderRadius: \"0.2rem\",\r\n                                                                        }}\r\n                                                                        disabled={isView}\r\n                                                                    >\r\n                                                                        <option value={\"\"}></option>\r\n                                                                        <option value=\"Yes\">YES</option>\r\n                                                                        <option value=\"No\">NO</option>\r\n                                                                    </select>\r\n                                                                </FormGroup>\r\n                                                            </div>\r\n                                                        }\r\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices === \"Yes\" &&\r\n                                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                                <FormGroup>\r\n                                                                    <Label for=\"\">\r\n                                                                        Date referred for prevention services\r\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                    </Label>\r\n                                                                    <Input\r\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                                        name=\"dateReferredForPreventionServices\"\r\n                                                                        id=\"dateReferredForPreventionServices\"\r\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices}\r\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                                        min={objValues.dateOfVisit}\r\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                                        style={{\r\n                                                                            border: \"1px solid #014D88\",\r\n                                                                            borderRadius: \"0.25rem\",\r\n                                                                        }}\r\n                                                                        disabled={isView}\r\n                                                                    />\r\n                                                                    {/*{errors.dateOfVisit !== \"\" ? (*/}\r\n                                                                    {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\r\n                                                                    {/*) : (*/}\r\n                                                                    {/*    \"\"*/}\r\n                                                                    {/*)}*/}\r\n                                                                </FormGroup>\r\n                                                            </div>\r\n                                                        }\r\n\r\n                                                    </div>) : \"\"}\r\n                                    </>\r\n                                ) : ( \"\"\r\n                                    // Display the save form button if the checkbox is not checked\r\n                                    // <div className=\"row\">\r\n                                    //     {// if selected user  is myself only show save button and save secondary user information\r\n                                    //         selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === \"myself\" &&\r\n                                    //         <div className=\"form-group mb-3 col-md-6\">\r\n                                    //             <Button\r\n                                    //                 content=\"save myself information\"\r\n                                    //                 icon=\"save\"\r\n                                    //                 labelPosition=\"right\"\r\n                                    //                 style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\r\n                                    //                 onClick={handleSubmit}\r\n                                    //                 disabled={saving}\r\n                                    //             />\r\n                                    //         </div>\r\n                                    //     }\r\n                                    //\r\n                                    // </div>\r\n                                )}\r\n                            </div>\r\n                            {selectedUsers.length > 0 && <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <LabelSui\r\n                                        as=\"a\"\r\n                                        color=\"black\"\r\n                                        onClick={addUserInformation}\r\n                                        size=\"small\"\r\n                                        style={{marginTop: 35}}\r\n                                    >\r\n                                        <Icon name=\"plus\"/> Add\r\n                                    </LabelSui>\r\n                                </div>\r\n                            </div>\r\n                            }\r\n                            {/*added kit user */}\r\n                            {userInformationList.length > 0 ? (\r\n                                <div class=\"row\">\r\n                                    <List className=\"mb-5\">\r\n                                        <Table striped responsive>\r\n                                            <thead style={{\r\n                                                backgroundColor: \"#014D88\",\r\n                                                color: \"white\",\r\n                                                fontSize: \"10px\"\r\n                                            }}>\r\n                                            <tr>\r\n                                                <th>Client Code</th>\r\n                                                <th>HIV Self Test Type</th>\r\n                                                {/*<th>Ever used HIVST Kit</th>*/}\r\n                                                <th>User Category</th>\r\n                                                <th>Action</th>\r\n                                            </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                            {userInformationList.map((item, index) => (\r\n                                                <tr key={index}>\r\n                                                    <td>{item.basicUserInfo.clientCode}</td>\r\n                                                    <td>{item.basicUserInfo.typeOfHivst}</td>\r\n                                                    {/*<th>{item.postTestAssessment.everUsedHivstKit}</th>*/}\r\n                                                    <td>{item.basicUserInfo.userCategory}</td>\r\n                                                    <td>\r\n                                                        <IconButton\r\n                                                            aria-label=\"delete\"\r\n                                                            size=\"small\"\r\n                                                            color=\"error\"\r\n                                                            onClick={() => removeUserInformation(index)}\r\n                                                        >\r\n                                                            <DeleteIcon fontSize=\"inherit\"/>\r\n                                                        </IconButton>\r\n                                                        <IconButton>\r\n                                                            <EditIcon fontSize=\"inherit\"/>\r\n                                                        </IconButton>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </List>\r\n                                </div>\r\n                            ) : \" \"}\r\n                            {/*{selectedUsers.length > 0 &&*/}\r\n                            { !isView &&\r\n                                <div className=\"row\">\r\n                                    <div className=\"form-group mb-3 col-md-6\">\r\n                                        <Button\r\n                                            content=\"update\"\r\n                                            icon=\"save\"\r\n                                            labelPosition=\"right\"\r\n                                            style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\r\n                                            onClick={handleSubmit}\r\n                                            // disabled={saving}\r\n                                            disabled={userInformationList.length === 0}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    </form>\r\n                </CardBody>\r\n            </Card>\r\n\r\n            <Modal\r\n                show={open}\r\n                toggle={toggle}\r\n                className=\"fade\"\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Notification!\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure of the Age entered?</h4>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        onClick={toggle}\r\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\nexport default ViewEditHivst;","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientHtsEnrollment.js",["514","515","516","517","518"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RecencyTesting.js",["519","520","521","522","523","524","525","526","527","528","529","530","531","532"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nimport { calculate_age } from \"../../utils\";\r\nimport { Modal } from \"react-bootstrap\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst Recency = (props) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n\r\n  const history = useHistory();\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [hivTestDate, setHivTestDate] = useState(\"\");\r\n  const [nextForm, setNextForm] = useState([]);\r\n  const [showSaveButton, setShowSaveButton] = useState(true);\r\n\r\n  let temp = { ...errors };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  const [permissions, setPermission] = useState(\r\n    localStorage.getItem(\"permissions\")?.split(\",\")\r\n  );\r\n  const [objValues, setObjValues] = useState({\r\n    htsClientId: clientId,\r\n    recency: {},\r\n    personId: patientID,\r\n  });\r\n  const [recency, setRecency] = useState({\r\n    optOutRTRI:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRI\r\n        : \"\",\r\n    optOutRTRITestName:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRITestName\r\n        : \"\",\r\n    optOutRTRITestDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRITestDate\r\n        : \"\",\r\n    rencencyId:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.rencencyId\r\n        : \"\",\r\n    controlLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.controlLine\r\n        : \"\",\r\n    verififcationLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.verififcationLine\r\n        : \"\",\r\n    longTermLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.longTermLine\r\n        : \"\",\r\n    rencencyInterpretation:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.rencencyInterpretation\r\n        : \"\",\r\n    hasViralLoad:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.hasViralLoad\r\n        : \"\",\r\n    sampleCollectedDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleCollectedDate\r\n        : \"\",\r\n    sampleReferanceNumber:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleReferanceNumber\r\n        : \"\",\r\n    dateSampleSentToPCRLab:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.dateSampleSentToPCRLab\r\n        : \"\",\r\n    sampleTestDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleTestDate\r\n        : \"\",\r\n    sampleType:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleType\r\n        : \"\",\r\n    receivingPcrLab:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.receivingPcrLab\r\n        : \"\",\r\n    viralLoadResultClassification:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.viralLoadResultClassification\r\n        : \"\",\r\n    recencyResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.recencyResult\r\n        : \"\",\r\n    finalRecencyResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.finalRecencyResult\r\n        : \"\",\r\n    viralLoadConfirmationResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.viralLoadConfirmationResult\r\n        : \"\",\r\n  });\r\n\r\n  const handleDone = () => {\r\n    toggle();\r\n    //commenting this out for release\r\n    // handleItemClick(\"pns\", \"recency-testing\");\r\n    handleItemClick(nextForm[0], nextForm[1]);\r\n  };\r\n  const loadOtherForm = (row) => {\r\n    toggle();\r\n  };\r\n\r\n  const loadNextForm = (row) => {\r\n    // setSaving(true);\r\n    handleItemClick(nextForm[0], nextForm[1]);\r\n\r\n   \r\n\r\n    toggle();\r\n  };\r\n  useEffect(() => {\r\n\r\n    if (props.patientObj && props.patientObj.recency !== null) {\r\n     \r\n      setRecency(props.patientObj.recency);\r\n    }\r\n    if (props.patientObj) {\r\n      if (\r\n        props.patientObj.confirmatoryTest2 &&\r\n        props.patientObj.confirmatoryTest2.date2 !== \"\"\r\n      ) {\r\n        setHivTestDate(props.patientObj.confirmatoryTest2.date2);\r\n      } else if (\r\n        props.patientObj.confirmatoryTest &&\r\n        props.patientObj.confirmatoryTest.date !== \"\"\r\n      ) {\r\n        setHivTestDate(props.patientObj.confirmatoryTest.date);\r\n      } else {\r\n        setHivTestDate(\"\");\r\n      }\r\n    }\r\n    if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"RTRI Long Term\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Long Term\" });\r\n    } else if (\r\n      recency.longTermLine === \"false\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"RTRI Recent\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Recent\" });\r\n      //setRecency ({...recency,  ['hasViralLoad']: 'true'});\r\n    } else if (\r\n      recency.longTermLine === \"false\" &&\r\n      recency.verififcationLine === \"false\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Negative\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Negative\" });\r\n    } else if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"false\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Invalid\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\r\n    } else if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"false\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Invalid\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\r\n    } else {\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"\" });\r\n    }\r\n    if (recency.optOutRTRI === \"true\") {\r\n      setRecency({\r\n        optOutRTRI:\r\n          props.patientObj && props.patientObj.recency !== null\r\n            ? props.patientObj.recency.optOutRTRI\r\n            : \"\",\r\n        optOutRTRITestName: \"\",\r\n        optOutRTRITestDate: \"\",\r\n        rencencyId: \"\",\r\n        controlLine: \"\",\r\n        verififcationLine: \"\",\r\n        longTermLine: \"\",\r\n        rencencyInterpretation: \"\",\r\n        hasViralLoad: \"\",\r\n        sampleCollectedDate: \"\",\r\n        sampleReferanceNumber: \"\",\r\n        dateSampleSentToPCRLab: \"\",\r\n        sampleTestDate: \"\",\r\n        sampleType: \"\",\r\n        receivingPcrLab: \"\",\r\n        viralLoadResultClassification: \"\",\r\n        recencyResult: \"\",\r\n        finalRecencyResult: \"\",\r\n        viralLoadConfirmationResult: \"\",\r\n      });\r\n    }\r\n  }, [\r\n    recency.longTermLine,\r\n    recency.verififcationLine,\r\n    recency.controlLine,\r\n    props.patientObj,\r\n  ]);\r\n  \r\n  const handleInputChangeRecency = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"viralLoadConfirmationResult\") {\r\n      if (e.target.value >= 1000) {\r\n        recency.viralLoadResultClassification = \">=1000\";\r\n        recency.finalRecencyResult = \"RITA Recent\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value < 1000) {\r\n        recency.viralLoadResultClassification = \"<1000\";\r\n        recency.finalRecencyResult = \"RITA Long term\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      }\r\n    }\r\n\r\n    if(e.target.name === \"controlLine\" || e.target.name === \"verififcationLine\" ||   e.target.name === \"longTermLine\"){\r\n      setErrors({...errors, hasViralLoad: \"\"})\r\n        // hasViralLoad\r\n      \r\n      }\r\n      \r\n    if (e.target.name === \"viralLoadResultClassification\") {\r\n      if (e.target.value === \">=1000\") {\r\n        recency.finalRecencyResult = \"RITA Recent\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"<1000\") {\r\n        recency.finalRecencyResult = \"RITA Long term\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"Failed run\") {\r\n        recency.finalRecencyResult = \"RITA Inconclusive\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"Invalid viral load result\") {\r\n        recency.finalRecencyResult = \"RITA Inconclusive\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else {\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      }\r\n    }else if(e.target.name === \"optOutRTRI\"){\r\n      setRecency({\r\n        // optOutRTRI: \"false\",\r\n        optOutRTRITestName: \"\",\r\n        optOutRTRITestDate: \"\",\r\n        rencencyId: \"\",\r\n        controlLine: \"\",\r\n        verififcationLine: \"\",\r\n        longTermLine: \"\",\r\n        rencencyInterpretation: \"\",\r\n        hasViralLoad: \"\",\r\n        sampleCollectedDate: \"\",\r\n        sampleReferanceNumber: \"\",\r\n        dateSampleSentToPCRLab: \"\",\r\n        sampleTestDate: \"\",\r\n        sampleType: \"\",\r\n        receivingPcrLab: \"\",\r\n        viralLoadResultClassification: \"\",\r\n        recencyResult: \"\",\r\n        finalRecencyResult: \"\",\r\n        viralLoadConfirmationResult: \"\",\r\n         [e.target.name]: e.target.value });\r\n\r\n         \r\n         setErrors({ ...temp,\r\n          optOutRTRITestName: \"\",\r\n          optOutRTRITestDate: \"\",\r\n          rencencyId: \"\",\r\n          controlLine: \"\",\r\n          verififcationLine: \"\",\r\n          longTermLine: \"\",\r\n          rencencyInterpretation: \"\",\r\n          hasViralLoad: \"\",\r\n          sampleCollectedDate: \"\",\r\n          sampleReferanceNumber: \"\",\r\n          dateSampleSentToPCRLab: \"\",\r\n          sampleTestDate: \"\",\r\n          sampleType: \"\",\r\n          receivingPcrLab: \"\",\r\n          viralLoadResultClassification: \"\",\r\n          recencyResult: \"\",\r\n          finalRecencyResult: \"\",\r\n          viralLoadConfirmationResult: \"\", [e.target.name]: \"\" });\r\n\r\n\r\n    }  else if (e.target.name === \"rencencyId\" && e.target.value !== \"\") {\r\n      const recencyIdNumberValue = checkRecencyLimit(e.target.value);\r\n      setRecency({ ...recency, [e.target.name]: recencyIdNumberValue });\r\n    } else {\r\n      setRecency({ ...recency, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n  const checkRecencyLimit = (e) => {\r\n    const limit = 10;\r\n    const acceptedNumber = e.slice(0, limit);\r\n    return acceptedNumber;\r\n  };\r\n\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n    \r\n\r\n    recency.optOutRTRI === \"false\" &&\r\n    (temp.optOutRTRITestName = recency.optOutRTRITestName\r\n      ? \"\"\r\n      : \"This field is required.\");\r\n\r\n\r\n     recency.optOutRTRI === \"false\" &&\r\n      (temp.optOutRTRITestDate = recency.optOutRTRITestDate\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n  \r\n      recency.optOutRTRI === \"false\" &&\r\n        (temp.rencencyId = recency.rencencyId\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n         recency.optOutRTRI === \"false\" &&\r\n          (temp.controlLine = recency.controlLine\r\n            ? \"\"\r\n            : \"This field is required.\")\r\n\r\n            \r\n  \r\n          recency.optOutRTRI === \"false\" &&\r\n          (temp.verififcationLine = recency.verififcationLine\r\n            ? \"\"\r\n            : \"This field is required.\");\r\n\r\n\r\n            recency.optOutRTRI === \"false\" &&\r\n            (temp.longTermLine = recency.longTermLine\r\n              ? \"\"\r\n              : \"This field is required.\")\r\n\r\n\r\n\r\n              recency.optOutRTRI === \"false\" &&\r\n              (temp.rencencyInterpretation = recency.rencencyInterpretation\r\n                ? \"\"\r\n                : \"This field is required.\")\r\n\r\n\r\n      recency.hasViralLoad == \"true\" &&\r\n        (temp.sampleReferanceNumber = recency.sampleReferanceNumber\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n  \r\n    // {  recency.sampleCollectedDate!=='' && (temp.dateSampleSentToPCRLab = recency.dateSampleSentToPCRLab ? \"\" : \"This field is required.\")}\r\n \r\n            recency.hasViralLoad == \"true\" &&\r\n        (temp.sampleType = recency.sampleType ? \"\" : \"This field is required.\");\r\n\r\n          recency.rencencyInterpretation === \"RTRI Recent\" &&\r\n            (temp.hasViralLoad = recency.hasViralLoad\r\n              ? \"\"\r\n              : \"This field is required.\");\r\n   \r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    let  age = calculate_age(props?.patientObj?.personResponseDto?.dateOfBirth)\r\n           let latestForm = getNextForm(\r\n             \"hiv_recency_testing\",\r\n             age,\r\n             \"\",\r\n             props?.patientObj?.hivTestResult\r\n           );\r\n           setNextForm(latestForm);\r\n    objValues.htsClientId = clientId;\r\n    objValues.recency = recency;\r\n    objValues.personId = patientID;\r\n    \r\n    if (validate()) {\r\n      setSaving(true);\r\n      axios\r\n        .put(`${baseUrl}hts/${clientId}/recency`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          props.setPatientObj(response.data);\r\n          if (\r\n            latestForm[0] === \"recency-testing\" &&\r\n            latestForm[1] === \"recency-testing\"\r\n          ) {\r\n            // loadNextForm();\r\n\r\n            // if there are no other form then we should hide the save button\r\n\r\n            setShowSaveButton(false)\r\n          } else {\r\n            loadOtherForm();\r\n          }\r\n          //toast.success(\"Risk Assesment successful\");\r\n          // history.push('/')\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2>RECENCY FORM</h2>\r\n          <form>\r\n            <div className=\"row\">\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h5 style={{ color: \"#fff\" }}>RECENCY</h5>\r\n              </LabelRibbon>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Opt Out of RTRI? <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"optOutRTRI\"\r\n                    id=\"optOutRTRI\"\r\n                    value={recency.optOutRTRI}\r\n                    onChange={handleInputChangeRecency}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-8\"></div>\r\n              {recency.optOutRTRI === \"false\" && (\r\n                <>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Test Name <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"optOutRTRITestName\"\r\n                        id=\"optOutRTRITestName\"\r\n                        value={recency.optOutRTRITestName}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"Asante\">Asante</option>\r\n                        <option value=\"Others\">Others</option>\r\n                      </select>\r\n                      {errors.optOutRTRITestName !== \"\" ? (\r\n                      <span className={classes.error}>{errors.optOutRTRITestName}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Test Date <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"date\"                 \r\n                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"optOutRTRITestDate\"\r\n                        id=\"optOutRTRITestDate\"\r\n                        value={recency.optOutRTRITestDate}\r\n                        onChange={handleInputChangeRecency}\r\n                        min={\r\n                          hivTestDate !== \"\" && hivTestDate !== null\r\n                            ? hivTestDate\r\n                            : \"\"\r\n                        }\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                       {errors.optOutRTRITestDate !== \"\" ? (\r\n                      <span className={classes.error}>{errors.optOutRTRITestDate}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Recency ID <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        className=\"form-control\"\r\n                        name=\"rencencyId\"\r\n                        id=\"rencencyId\"\r\n                        type=\"text\"\r\n                        value={recency.rencencyId}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                           {errors.rencencyId !== \"\" ? (\r\n                      <span className={classes.error}>{errors.rencencyId}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Control Line <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"controlLine\"\r\n                        id=\"controlLine\"\r\n                        value={recency.controlLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.controlLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.controlLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Verification Line{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"verififcationLine\"\r\n                        id=\"verififcationLine\"\r\n                        value={recency.verififcationLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.verififcationLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.verififcationLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Long Term Line <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"longTermLine\"\r\n                        id=\"longTermLine\"\r\n                        value={recency.longTermLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.longTermLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.longTermLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Recency Interpretation{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        className=\"form-control\"\r\n                        name=\"rencencyInterpretation\"\r\n                        id=\"rencencyInterpretation\"\r\n                        type=\"text\"\r\n                        value={recency.rencencyInterpretation}\r\n                        disabled\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                       {errors.rencencyInterpretation !== \"\" ? (\r\n                      <span className={classes.error}>{errors.rencencyInterpretation}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {recency.rencencyInterpretation === \"RTRI Recent\" && (\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Has Viral Load been ordered?                    <span style={{ color: \"red\" }}> *</span>\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"hasViralLoad\"\r\n                          id=\"hasViralLoad\"\r\n                          value={recency.hasViralLoad}\r\n                          onChange={handleInputChangeRecency}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.hasViralLoad !== \"\" ? (\r\n                      <span className={classes.error}>{errors.hasViralLoad}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                  {recency.hasViralLoad === \"true\" && (\r\n                    <>\r\n                      <div className=\"row\">\r\n                        <h4>Recency Viral Load Classification :</h4>\r\n                        <br />\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Recency Sample Collected Date</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleCollectedDate\"\r\n                              id=\"sampleCollectedDate\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              value={recency.sampleCollectedDate}\r\n                              min={recency.optOutRTRITestDate}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Sample Reference Number{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleReferanceNumber\"\r\n                              id=\"sampleReferanceNumber\"\r\n                              type=\"text\"\r\n                              value={recency.sampleReferanceNumber}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                            {errors.sampleReferanceNumber !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.sampleReferanceNumber}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Sample Type{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"sampleType\"\r\n                              id=\"sampleType\"\r\n                              value={recency.sampleType}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"DBS\">DBS</option>\r\n                              <option value=\"Plasma\">Plasma</option>\r\n                            </select>\r\n                            {errors.sampleType !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.sampleType}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Date Recency Sample Sent to PCR Lab</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"dateSampleSentToPCRLab\"\r\n                              id=\"dateSampleSentToPCRLab\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              min={recency.sampleCollectedDate}\r\n                              value={recency.dateSampleSentToPCRLab}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                            {errors.dateSampleSentToPCRLab !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.dateSampleSentToPCRLab}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Recency Sample Test Date</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleTestDate\"\r\n                              id=\"sampleTestDate\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              // min={recency.optOutRTRITestDate}\r\n                              min={recency.dateSampleSentToPCRLab}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              value={recency.sampleTestDate}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Receiving PCR Lab</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"receivingPcrLab\"\r\n                              id=\"receivingPcrLab\"\r\n                              type=\"text\"\r\n                              value={recency.receivingPcrLab}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Confirmation Result (copies/ml)\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"viralLoadConfirmationResult\"\r\n                              id=\"viralLoadConfirmationResult\"\r\n                              type=\"number\"\r\n                              value={recency.viralLoadConfirmationResult}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Result Received Date\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"receivedResultDate\"\r\n                              id=\"receivedResultDate\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              // min={recency.optOutRTRITestDate}\r\n                              min={recency.sampleTestDate}\r\n                              value={recency?.receivedResultDate}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Result Classification and\r\n                              Result (copies/ml)\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"viralLoadResultClassification\"\r\n                              id=\"viralLoadResultClassification\"\r\n                              disabled\r\n                              value={recency.viralLoadResultClassification}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            >\r\n                              <option value={\"\"}>Select</option>\r\n                              <option value=\">=1000\">{\">= \"} 1000</option>\r\n                              <option value=\"<1000\">{\"< \"} 1000</option>\r\n                              <option value=\"Failed run\">Failed run</option>\r\n                              <option value=\"Invalid viral load result\">\r\n                                Invalid Recency viral load result\r\n                              </option>\r\n                            </select>\r\n                          </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Final Recency Result</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"finalRecencyResult\"\r\n                              id=\"finalRecencyResult\"\r\n                              type=\"text\"\r\n                              disabled\r\n                              value={recency.finalRecencyResult}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div\r\n                  className=\"form-group mb-3 \"\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-between\",\r\n                    alignItems: \"center\",\r\n                    width: \"100%\",\r\n                  }}\r\n                >\r\n                  <div className=\"\">\r\n                    {/* // <Button\r\n                    //   content=\"Back\"\r\n                    //   icon=\"left arrow\"\r\n                    //   labelPosition=\"left\"\r\n                    //   style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    //   onClick={() => handleItemClick(\"post-test\", \"post-test\")}\r\n                    // /> */}\r\n                    {showSaveButton && (\r\n                      <Button\r\n                        content=\"Done\"\r\n                        icon=\"right arrowrr\"\r\n                        labelPosition=\"right\"\r\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                        onClick={() => {\r\n                          history.push(\"/\");\r\n                        }}\r\n                        disabled={\r\n                          props.patientObj\r\n                            ?.postTestCounselingKnowledgeAssessment\r\n                            ?.hivTestResult === \"true\" &&\r\n                          recency.optOutRTRI === \"\"\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                    )}\r\n                  </div>\r\n\r\n                  {showSaveButton ? (\r\n                    <div>\r\n                      {\" \"}\r\n                      <Button\r\n                        content=\"Save & Continue\"\r\n                        icon=\"right arrow\"\r\n                        labelPosition=\"right\"\r\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                        onClick={handleSubmit}\r\n                        disabled={\r\n                          props.patientObj\r\n                            ?.postTestCounselingKnowledgeAssessment\r\n                            ?.hivTestResult === \"true\" &&\r\n                          recency.optOutRTRI === \"\"\r\n                            ? true\r\n                            : false\r\n                        }\r\n                      />\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      {\" \"}\r\n                      <Button\r\n                        content=\"Done\"\r\n                        icon=\"right arrow\"\r\n                        labelPosition=\"right\"\r\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                        onClick={() => {\r\n                          history.push(\"/\");\r\n                        }}\r\n                       \r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>\r\n            Would you like to fill the Family Index form ?\r\n            {/* <b>{row && record.activityName}</b> */}\r\n          </h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => loadNextForm()}\r\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            Yes\r\n            {/* {saving === false ? \"Yes\" : \"Deleting...\"} */}\r\n          </Button>\r\n          <Button\r\n            onClick={handleDone}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            Skip\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Recency;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PostTest.js",["533","534","535","536","537","538","539","540","541"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { getNextForm } from \"../../../../utility\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst PostTest = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [saving, setSaving] = useState(false);\r\n  const [permissions, setPermission] = useState(\r\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\r\n  );\r\n  const [nextForm, setNextForm] = useState([]);\r\n  ///const [errors, setErrors] = useState({});\r\n  const [objValues, setObjValues] = useState({\r\n    htsClientId: clientId,\r\n    postTestCounselingKnowledgeAssessment: {},\r\n    personId: patientID,\r\n  });\r\n  const [postTest, setPostTest] = useState({\r\n    hivTestResult: \"\",\r\n    hivTestBefore:\r\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\r\n        ?.lastHivTestDone !== \"Never\" &&\r\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\r\n        ?.whatWasTheResult === \"Positive\"\r\n        ? \"Previously tested positive in HIV care\"\r\n        : \"\",\r\n    hivRequestResult: \"\",\r\n    hivRequestResultCt: \"\",\r\n    clientReceivedHivTestResult: \"\",\r\n    postTestCounseling: \"\",\r\n    riskReduction: \"\",\r\n    postTestDisclosure: \"\",\r\n    bringPartnerHivtesting: \"\",\r\n    childrenHivtesting: \"\",\r\n    informationFp: \"\",\r\n    partnerFpThanCondom: \"\",\r\n    partnerFpUseCondom: \"\",\r\n    correctCondomUse: \"\",\r\n    condomProvidedToClient: \"\",\r\n    unprotectedSexRegularPartnerLastThreeMonth: \"\",\r\n    referredToServices: \"\",\r\n    condomProvidedToClientCount: \"\",\r\n    lubricantProvidedToClientCount: \"\",\r\n  });\r\n  useEffect(() => {\r\n    if (\r\n      props.patientObj &&\r\n      props.patientObj.postTestCounselingKnowledgeAssessment\r\n    ) {\r\n      setPostTest(props.patientObj.postTestCounselingKnowledgeAssessment);\r\n    } else {\r\n      ///setPostTest(props.patientObj && props.patientObj.postTestCounselingKnowledgeAssessment!==null ? props.patientObj.postTestCounselingKnowledgeAssessment : {})\r\n      if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult2 !== \"\" &&\r\n        props.patientObj.hivTestResult2 !== null &&\r\n        props.patientObj.hivTestResult2 === \"Positive\"\r\n      ) {\r\n        postTest.hivTestResult = \"true\";\r\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\r\n      } else if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult2 !== \"\" &&\r\n        props.patientObj.hivTestResult2 !== null &&\r\n        props.patientObj.hivTestResult2 === \"Negative\"\r\n      ) {\r\n        postTest.hivTestResult = \"false\";\r\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\r\n      } else if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult !== \"\" &&\r\n        props.patientObj.hivTestResult !== null &&\r\n        props.patientObj.hivTestResult === \"Positive\"\r\n      ) {\r\n        postTest.hivTestResult = \"true\";\r\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\r\n      } else if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult !== \"\" &&\r\n        props.patientObj.hivTestResult !== null &&\r\n        props.patientObj.hivTestResult === \"Negative\"\r\n      ) {\r\n        postTest.hivTestResult = \"false\";\r\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\r\n      }\r\n    }\r\n  }, [props.patientObj, postTest.hivTestResult]);\r\n  const handleInputChangePostTest = (e) => {\r\n    if (e.target.name === \"lubricantProvidedToClientCount\") {\r\n      if (e.target.value >= 0) {\r\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n      }\r\n    } else if (e.target.name === \"condomProvidedToClientCount\") {\r\n      if (e.target.value >= 0) {\r\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n      } else {\r\n        setPostTest({ ...postTest, [e.target.name]: 0 });\r\n      }\r\n    } else {\r\n      setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSaving(true);\r\n     let latestForm = getNextForm(\r\n       \"post_test_counseling\",\r\n       props?.patientObj?.riskStratificationResponseDto?.age,\r\n       '',\r\n       props?.patientObj?.hivTestResult\r\n     );\r\n\r\n    objValues.htsClientId = props.patientObj.id;\r\n    objValues.postTestCounselingKnowledgeAssessment = postTest;\r\n    objValues.personId = props.patientObj.personResponseDto.id;\r\n    axios\r\n      .put(\r\n        `${baseUrl}hts/${props.patientObj.id}/post-test-counseling`,\r\n        objValues,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setSaving(false);\r\n        props.setPatientObj(response.data);\r\n        toast.success(\"Post test  successful\");\r\n        \r\n      handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n\r\n      })\r\n      .catch((error) => {\r\n        setSaving(false);\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n    // }else{\r\n    //     toast.error(\"All post test fields are required\")\r\n\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2>POST TEST COUNSELING</h2>\r\n          <form>\r\n            <div className=\"row\">\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\r\n              </LabelRibbon>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>HIV test result </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivTestResult\"\r\n                    id=\"hivTestResult\"\r\n                    value={postTest.hivTestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={true}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Positive</option>\r\n                    <option value=\"false\">Negative</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Have you been tested for HIV before within this year?{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivTestBefore\"\r\n                    id=\"hivTestBefore\"\r\n                    value={postTest.hivTestBefore}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"Not previously tested\">\r\n                      Not previously tested\r\n                    </option>\r\n                    <option value=\"Previously tested negative\">\r\n                      Previously tested negative\r\n                    </option>\r\n                    <option value=\"Previously tested positive in HIV care\">\r\n                      Previously tested positive in HIV care\r\n                    </option>\r\n                    <option value=\"Previously tested positive not in HIV care\">\r\n                      Previously tested positive not in HIV care\r\n                    </option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>HIV Request and Result form signed by tester </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivRequestResult\"\r\n                    id=\"hivRequestResult\"\r\n                    value={postTest.hivRequestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    HIV Request and Result form filled with CT Intake Form{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivRequestResultCt\"\r\n                    id=\"hivRequestResultCt\"\r\n                    value={postTest.hivRequestResultCt}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client received HIV test result </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"clientReceivedHivTestResult\"\r\n                    id=\"clientReceivedHivTestResult\"\r\n                    value={postTest.clientReceivedHivTestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Post test counseling done </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"postTestCounseling\"\r\n                    id=\"postTestCounseling\"\r\n                    value={postTest.postTestCounseling}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Risk reduction plan developed </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"riskReduction\"\r\n                    id=\"riskReduction\"\r\n                    value={postTest.riskReduction}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Post test disclosure plan developed </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"postTestDisclosure\"\r\n                    id=\"postTestDisclosure\"\r\n                    value={postTest.postTestDisclosure}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Will bring partner(s) for HIV testing </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"bringPartnerHivtesting\"\r\n                    id=\"bringPartnerHivtesting\"\r\n                    value={postTest.bringPartnerHivtesting}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Will bring own children {\"<5\"} years for HIV testing{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"childrenHivtesting\"\r\n                    id=\"childrenHivtesting\"\r\n                    value={postTest.childrenHivtesting}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Provided with information on FP and dual contraception{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"informationFp\"\r\n                    id=\"informationFp\"\r\n                    value={postTest.informationFp}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Client/Partner use FP methods (other than condom)\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"partnerFpThanCondom\"\r\n                    id=\"partnerFpThanCondom\"\r\n                    value={postTest.partnerFpThanCondom}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client/Partner use condoms as (one) FP method </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"partnerFpUseCondom\"\r\n                    id=\"partnerFpUseCondom\"\r\n                    value={postTest.partnerFpUseCondom}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Correct condom use demonstrated </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"correctCondomUse\"\r\n                    id=\"correctCondomUse\"\r\n                    value={postTest.correctCondomUse}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Condoms provided to client </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"condomProvidedToClient\"\r\n                    id=\"condomProvidedToClient\"\r\n                    value={postTest.condomProvidedToClient}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              {postTest.condomProvidedToClient !== null &&\r\n                postTest.condomProvidedToClient === \"true\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>How many condoms were provided to client </Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"condomProvidedToClientCount\"\r\n                        id=\"condomProvidedToClientCount\"\r\n                        value={postTest.condomProvidedToClientCount}\r\n                        onChange={handleInputChangePostTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Lubricant were provided to client </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"lubricantProvidedToClient\"\r\n                    id=\"lubricantProvidedToClient\"\r\n                    value={postTest.lubricantProvidedToClient}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              {postTest.lubricantProvidedToClient !== null &&\r\n                postTest.lubricantProvidedToClient === \"true\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>How many lubricant provided to client </Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"lubricantProvidedToClientCount\"\r\n                        id=\"lubricantProvidedToClientCount\"\r\n                        value={postTest.lubricantProvidedToClientCount}\r\n                        onChange={handleInputChangePostTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n              {/* <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedSexRegularPartnerLastThreeMonth\"\r\n                                        id=\"unprotectedSexRegularPartnerLastThreeMonth\"\r\n                                        value={postTest.unprotectedSexRegularPartnerLastThreeMonth}\r\n                                        onChange={handleInputChangePostTest}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div> */}\r\n              {/* <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with regular particular in the last 3 months</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sex\"\r\n                                        id=\"sex\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div> */}\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client referred to other services </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"referredToServices\"\r\n                    id=\"referredToServices\"\r\n                    value={postTest.referredToServices}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <Message success>\r\n                <h4>\r\n                  If client tests HIV negative, and HIV Risk Assessment Score{\" \"}\r\n                  {\">0\"} or there is evidence for a STI syndrome, recommend\r\n                  re-testing after 3 months\r\n                </h4>\r\n              </Message>\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  {/* <Button\r\n                    content=\"Back\"\r\n                    icon=\"left arrow\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    onClick={() => handleItemClick(\"hiv-test\", \"hiv-test\")}\r\n                  /> */}\r\n\r\n                  <Button\r\n                    content=\"Save & Continue\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostTest;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\BasicInfo.js",["542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { fontWeight } from \"@mui/system\";\r\nimport { alphabetOnly, getCheckModality } from \"../../../../utility\";\r\nimport { getDoubleSkipForm } from \"../../../../utility\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst BasicInfo = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [errors, setErrors] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n  const [modalityCheck, setModalityCheck] = useState(\"\");\r\n  const [hideNumChild, setHideNumChild] = useState(false);\r\n  const [kP, setKP] = useState([]);\r\n  const [enrollSetting, setEnrollSetting] = useState([]);\r\n  const [sourceReferral, setSourceReferral] = useState([]);\r\n  const [gender, setGender] = useState([]);\r\n  const [sexs, setSexs] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [maritalStatus, setMaritalStatus] = useState([]);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [counselingType, setCounselingType] = useState([]);\r\n  const [pregnancyStatus, setPregnancyStatus] = useState([]);\r\n  let temp = { ...errors };\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [indexTesting, setIndexTesting] = useState([]);\r\n  const [clientCodeetail, setclientCodeetail] = useState(\"\");\r\n  const [clientCodeetail2, setclientCodeetail2] = useState(\"\");\r\n  const [clientCodeCheck, setClientCodeCheck] = useState(\"\");\r\n  const [createdCode, setCreatedCode] = useState(\"\");\r\n  const [facilityCode, setFacilityCode] = useState(\"\");\r\n  const [serialNumber, setSerialNumber] = useState(\"\");\r\n  const [showPregancy, setShowPregnancy] = useState(false);\r\n  const [pregnancyCode, setPregnancyCode] = useState(\"\");\r\n\r\n  const [permissions, setPermission] = useState(\r\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\r\n  );\r\n  const [disableIndexInfo, setDisableIndexInfo] = useState(false);\r\n  const [disableSex, setdisableSex] = useState(false);\r\n\r\n  const getPhoneNumber = (identifier) => {\r\n    const identifiers = identifier;\r\n    const phoneNumber = identifiers.contactPoint.find(\r\n      (obj) => obj.type == \"phone\"\r\n    );\r\n    return phoneNumber ? phoneNumber.value : \"\";\r\n  };\r\n  const getAddress = (identifier) => {\r\n    const identifiers = identifier;\r\n    const address = identifiers.address.find((obj) => obj.city);\r\n    return address ? address.city : \"\";\r\n  };\r\n  //Calculate Date of birth\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n      age_now--;\r\n    }\r\n    // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n    //   age_now--;\r\n    // }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now;\r\n  };\r\n  const address = props.patientObj.personResponseDto.address;\r\n  const country =\r\n    address && address.address && address.address.length > 0\r\n      ? address.address[0]\r\n      : null;\r\n  const patientAge = calculate_age(\r\n    //moment(props.patientObj.personResponseDto.dateOfBirth).format(\"DD-MM-YYYY\")\r\n    props.patientObj.personResponseDto.dateOfBirth\r\n  );\r\n\r\n  const [pmtctSetting , setPmtctSetting] = useState([\"FACILITY_HTS_TEST_SETTING_ANC\", \"FACILITY_HTS_TEST_SETTING_L&D\", \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"]);\r\n\r\n  const [disableVitals, setDisableVitals] = useState(false)\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    active: true,\r\n    clientCode:\r\n      props.patientObj && props.patientObj.clientCode\r\n        ? props.patientObj.clientCode\r\n        : \"\",\r\n    age:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.dateOfBirth\r\n        ? props.patientObj?.riskStratificationResponseDto?.age\r\n        : \"\",\r\n    dob:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.dateOfBirth\r\n        ? props.patientObj.personResponseDto.dateOfBirth\r\n        : \"\",\r\n    breastFeeding:\r\n      props.patientObj && props.patientObj.breastFeeding\r\n        ? props.patientObj.breastFeeding\r\n        : \"\",\r\n    dateVisit:\r\n      props.patientObj && props.patientObj.dateVisit\r\n        ? props.patientObj.dateVisit\r\n        : \"\",\r\n    firstTimeVisit:\r\n    props?.patientObj?.firstTimeVisit,\r\n    indexClient:\r\n    props?.patientObj?.indexClient,\r\n    numChildren:\r\n      props.patientObj && props.patientObj.numChildren\r\n        ? props.patientObj.numChildren\r\n        : \"\",\r\n    numWives:\r\n      props.patientObj && props.patientObj.numWives\r\n        ? props.patientObj.numWives\r\n        : \"\",\r\n    pregnant:\r\n      props.patientObj && props.patientObj.pregnant\r\n        ? props.patientObj.pregnant\r\n        : \"\"  ,\r\n    dateOfBirth:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.dateOfBirth\r\n        ? props.patientObj.personResponseDto.dateOfBirth\r\n        : \"\",\r\n    dateOfRegistration:\r\n      props.patientObj && props.patientObj.dateOfRegistration\r\n        ? props.patientObj.dateOfRegistration\r\n        : \"\",\r\n    deceased: \"\",\r\n    deceasedDateTime: \"\",\r\n    educationId:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.educationId\r\n        ? props.patientObj.personResponseDto.educationId\r\n        : \"\",\r\n    employmentStatusId:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.employmentStatusId\r\n        ? props.patientObj.personResponseDto.employmentStatusId\r\n        : \"\",\r\n    facilityId: \"\",\r\n    firstName:\r\n      props.patientObj && props.patientObj.personResponseDto\r\n        ? props.patientObj.personResponseDto.firstName\r\n        : \"\",\r\n    genderId:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.genderId\r\n        ? props.patientObj.personResponseDto.genderId\r\n        : \"\",\r\n    address:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.address\r\n        ? getAddress(props.patientObj.personResponseDto.address)\r\n        : \"\",\r\n    phoneNumber:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.contactPoint\r\n        ? getPhoneNumber(props.patientObj.personResponseDto.contactPoint)\r\n        : \"\",\r\n    isDateOfBirthEstimated:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.isDateOfBirthEstimated\r\n        ? props.patientObj.personResponseDto.isDateOfBirthEstimated\r\n        : \"\",\r\n    maritalStatusId:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.maritalStatus\r\n        ? props.patientObj.personResponseDto.maritalStatus.id\r\n        : \"\",\r\n    organizationId:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.genderId\r\n        ? props.patientObj.personResponseDto.genderId\r\n        : \"\",\r\n    otherName:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.otherName\r\n        ? props.patientObj.personResponseDto.otherName\r\n        : \"\",\r\n    sex:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.sex\r\n        ? props.patientObj.personResponseDto.sex\r\n        : pmtctSetting.includes(props.patientObj.riskStratificationResponseDto.testingSetting)? \"Female\": props.patientObj.targetGroup === \"TARGET_GROUP_FSW\"? \"Female\":props.patientObj.targetGroup === \"TARGET_GROUP_MSM\"? \"Male\": \"\",\r\n    stateId: country && country.stateId ? country.stateId : \"\",\r\n    riskAssessment:\r\n      props.extra && props.extra.riskAssessment\r\n        ? props.extra.riskAssessment\r\n        : {},\r\n    riskStratificationCode:\r\n      props.extra && props.extra.code !== \"\" ? props.extra.code : \"\",\r\n    lga: country && country.district ? country.district : \"\",\r\n    surname:\r\n      props.patientObj.personResponseDto &&\r\n      props.patientObj.personResponseDto.surname\r\n        ? props.patientObj.personResponseDto.surname\r\n        : \"\",\r\n    previouslyTested: props.patientObj ? props.patientObj.previouslyTested : \"\",\r\n    referredFrom: props.patientObj ? props.patientObj.referredFrom : \"\",\r\n    targetGroup:\r\n      props.patientObj && props.patientObj.targetGroup\r\n        ? props.patientObj.targetGroup\r\n        : \"\",\r\n    testingSetting: props.patientObj ? props.patientObj.testingSetting : \"\",\r\n    typeCounseling: props.patientObj ? props.patientObj.typeCounseling : \"\",\r\n    relationWithIndexClient: props.patientObj\r\n      ? props.patientObj.relationWithIndexClient\r\n      : \"\",\r\n    indexClientCode: \"\",\r\n    comment: props?.patientObj?.comment,\r\n    partnerNotificationService: \"\",\r\n    familyIndex: \"\",\r\n  });\r\n\r\n\r\n  const convertFromIdToDisplay = (code) => {\r\n    let ans = indexTesting.filter((each, index) => {\r\n      return each.code === code;\r\n    });\r\n    \r\n    if(ans[0]?.id){\r\n      return ans[0].id;\r\n    }\r\n    \r\n  };\r\n\r\n  const CreateClientCode = async() => {\r\n    let facilityShortCode = \"\";\r\n   let response = await  axios\r\n      .get(`${baseUrl}hts/get-facility-code`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n\r\n      setFacilityCode(response.data);\r\n      facilityShortCode= response.data\r\n    let visitDate = new Date(props.patientObj.dateVisit);\r\n\r\n    let setting = props.patientObj.testingSetting;\r\n    let settingCode = \"\";\r\n    if (setting?.includes(\"SETTING_STI\")) {\r\n      settingCode = \"STI\";\r\n    } else if (setting?.includes(\"EMERGENCY\")) {\r\n      settingCode = \"EME\";\r\n    } else if (setting?.includes(\"SETTING_INDEX\")) {\r\n      settingCode = \"IND\";\r\n    } else if (setting?.includes(\"INPATIENT\")) {\r\n      settingCode = \"INP\";\r\n    } else if (setting?.includes(\"PMTCT\")) {\r\n      settingCode = \"PMTCT\";\r\n    } else if (setting?.includes(\"TB\")) {\r\n      settingCode = \"TB\";\r\n    } else if (setting?.includes(\"VCT\")) {\r\n      settingCode = \"VCT\";\r\n    } else if (setting?.includes(\"MOBILE\")) {\r\n      settingCode = \"MOB\";\r\n    } else if (setting?.includes(\"SETTING_SNS\")) {\r\n      settingCode = \"SNS\";\r\n    } else if (setting?.includes(\"OTHER\")) {\r\n      settingCode = \"OTH\";\r\n    }else if (setting?.includes(\"SETTING_ANC\")) {\r\n      settingCode = \"ANC\";\r\n    }else if (setting?.includes(\"RETESTING\")) {\r\n      settingCode = \"RET\";\r\n    }else if (setting?.includes(\"SETTING_L&D\")) {\r\n      settingCode = \"L&D\";\r\n    }else if (setting?.includes(\"POST_NATAL_WARD_BREASTFEEDING\")) {\r\n      settingCode = \"PNWB\";\r\n    }else if (setting?.includes(\"NPATIENT\")) {\r\n      settingCode = \"INP\";\r\n    }else if (setting?.includes(\"SETTING_CT\")) {\r\n      settingCode = \"CT\";\r\n    }else if (setting?.includes(\"SETTING_FP\")) {\r\n      settingCode = \"FP\";\r\n    }else if (setting?.includes(\"BLOOD_BANK\")) {\r\n      settingCode = \"BB\";\r\n    }else if (setting?.includes(\"PEDIATRIC\")) {\r\n      settingCode = \"PED\";\r\n    }else if (setting?.includes(\"MALNUTRITION\")) {\r\n      settingCode = \"Mal\";\r\n    }else if (setting?.includes(\"PREP_TESTING\")) {\r\n      settingCode = \"PrEPT\";\r\n    }else if (setting?.includes(\"SPOKE_HEALTH_FACILITY\")) {\r\n      settingCode = \"SPHF\";\r\n    }else if (setting?.includes(\"STANDALONE\")) {\r\n      settingCode = \"STAN\";\r\n    }else if (setting?.includes(\"CONGREGATIONAL\")) {\r\n      settingCode = \"CON\";\r\n    }else if (setting?.includes(\"DELIVERY_HOMES\")) {\r\n      settingCode = \"DEL\";\r\n    }    else if (setting?.includes(\"TBA_ORTHODOX\")) {\r\n      settingCode = \"TBAO\";\r\n    }    else if (setting?.includes(\"TBA_RT-HCW\")) {\r\n      settingCode = \"TBAH\";\r\n    }    else if (setting?.includes(\"SETTING_OVC\")) {\r\n      settingCode = \"OVC\";\r\n    }    else if (setting?.includes(\"OUTREACH\")) {\r\n      settingCode = \"OUT\";\r\n    }  \r\n\r\n\r\n    let month = visitDate.getMonth();\r\n    let year = visitDate.getFullYear();\r\n    let codeCreated =\r\n      \"C\" + facilityCode + \"/\" + settingCode + \"/\" + month + \"/\" + year + \"/\";\r\n    setCreatedCode(codeCreated);\r\n\r\n\r\n    if(!props.patientObj.id){\r\n      setObjValues({ ...objValues, clientCode: codeCreated });\r\n    }else{\r\n          setSerialNumber(Cookies.get(\"serial-number\"))\r\n          setDisableVitals(true)\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    KP();\r\n    EnrollmentSetting();\r\n    SourceReferral();\r\n    Genders();\r\n    getStates();\r\n    MaterialStatus();\r\n    determinSex();\r\n    CounselingType();\r\n   \r\n    Sex();\r\n    PregnancyStatus();\r\n    IndexTesting();\r\n    CreateClientCode();\r\n\r\n    //ellicited patient\r\n\r\n\r\n    let checkEnrollIndex =  JSON.parse(localStorage.getItem(\"index\"))\r\n    if (checkEnrollIndex&& checkEnrollIndex?.type === \"family\" && checkEnrollIndex?.clientCode) {\r\n      setObjValues({\r\n        ...objValues,\r\n        familyIndex: checkEnrollIndex.uuid,\r\n        indexClient: \"true\",\r\n        relationWithIndexClient: convertFromIdToDisplay(\r\n          \"INDEX_TESTING_BIOLOGICAL\"\r\n        ),\r\n        indexClientCode: checkEnrollIndex.clientCode,\r\n      });\r\n      setDisableIndexInfo(true);\r\n    }\r\n    if (checkEnrollIndex?.type === \"partner\" && checkEnrollIndex?.clientCode) {\r\n      setObjValues({\r\n        ...objValues,\r\n        partnerNotificationService: checkEnrollIndex.uuid,\r\n        indexClient: \"true\",\r\n        relationWithIndexClient: convertFromIdToDisplay(\r\n         \"INDEX_TESTING_SEXUAL\"\r\n        ),\r\n        indexClientCode: checkEnrollIndex.clientCode,\r\n      });\r\n      setDisableIndexInfo(true);\r\n    }\r\n\r\n    if(props.patientObj.id && props.completed.includes(\"basic\") ){\r\n      setDisableVitals(true)\r\n      setSerialNumber(Cookies.get((\"serial-number\")))\r\n\r\n\r\n    }\r\n    setModalityCheck(\r\n      getCheckModality(\r\n        props?.patientObj?.riskStratificationResponseDto?.testingSetting\r\n      )\r\n    );\r\n    if (objValues.age !== \"\") {\r\n      props.setPatientObjAge(objValues.age);\r\n    }\r\n    if (props.extra && props.extra.age !== \"\") {\r\n      props.setPatientObjAge(props.extra.age);\r\n    }\r\n    if (country && country.stateId !== \"\") {\r\n      getProvincesId(country.stateId);\r\n    }\r\n \r\n\r\n      // Cleanup logic here\r\n\r\n  }, [objValues.age, props.patientObj, props.extra.age, facilityCode]);\r\n  //Get list of KP\r\n  const KP = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setKP(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of IndexTesting\r\n  const IndexTesting = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setIndexTesting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of KP\r\n  const PregnancyStatus = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/PREGNANCY_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setPregnancyStatus(response.data);\r\n        determinPregnancy(response.data)\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of KP\r\n  const CounselingType = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/COUNSELING_TYPE`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setCounselingType(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n\r\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\r\n `, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        \r\n        setEnrollSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n  const HTS_ENTRY_POINT_FACILITY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //Remove retesting from the codeset\r\n          let facilityList = []\r\n        // response.data.map((each, index)=>{\r\n        //       if(each.code !==\"FACILITY_HTS_TEST_SETTING_RETESTING\"){\r\n        //         facilityList.push(each);\r\n        //       }\r\n\r\n        // })\r\n\r\n        setEnrollSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n\r\n\r\n\r\n  //Get list of HIV STATUS ENROLLMENT\r\n  const EnrollmentSetting = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n\r\n        if(props.patientObj.riskStratificationResponseDto.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\"){\r\n                HTS_ENTRY_POINT_COMMUNITY()\r\n              }else if(props.patientObj.riskStratificationResponseDto.entryPoint === \"HTS_ENTRY_POINT_FACILITY\"){\r\n    \r\n                HTS_ENTRY_POINT_FACILITY()\r\n              }else{\r\n                setEnrollSetting([]);\r\n    \r\n              }\r\n\r\n        \r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n\r\n\r\n  //Get list of HIV STATUS ENROLLMENT\r\n  const MaterialStatus = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setMaritalStatus(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of Source of Referral\r\n  const SourceReferral = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SOURCE_REFERRAL`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSourceReferral(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of Genders from\r\n  const Genders = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/GENDER`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        \r\n        setGender(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of Genders from\r\n  const Sex = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        \r\n        setSexs(response.data);\r\n        // determinSex()\r\n\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n  //Get States from selected country\r\n  const getStates = () => {\r\n    setStateByCountryId(\"1\");\r\n    setObjValues({ ...objValues, countryId: 1 });\r\n  };\r\n  //Get list of State\r\n  function setStateByCountryId(getCountryId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setStates(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n  function getProvincesId(getStateId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n  //fetch province\r\n  const getProvinces = (e) => {\r\n    const stateId = e.target.value;\r\n    setObjValues({ ...objValues, stateId: e.target.value });\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(\r\n          response.data.sort((x, y) => {\r\n            return x.id - y.id;\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }else if(e.target.name === \"serialNumber\" ){\r\n      setSerialNumber(e.target.value)\r\n      checkClientCode(e)\r\n\r\n    }else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    } else if (e.target.name === \"numChildren\") {\r\n      if (e.target.value >= 0) {\r\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n      } else {\r\n        setObjValues({\r\n          ...objValues,\r\n          [e.target.name]: 0,\r\n        });\r\n      }\r\n    } else if (e.target.name === \"numWives\") {\r\n      if (e.target.value >= 0) {\r\n        setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n      } else {\r\n        setObjValues({\r\n          ...objValues,\r\n          [e.target.name]: 0,\r\n        });\r\n      }\r\n    } else if (e.target.name === \"indexClientCode\" && e.target.value !== \"\") {\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n      async function getIndexClientCode() {\r\n        const indexClientCode = e.target.value;\r\n        const response = await axios.get(\r\n          `${baseUrl}hts/client?code=${indexClientCode}`,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data !== \"Record Not Found\") {\r\n          setclientCodeetail2(\"\");\r\n          setclientCodeetail(response.data);\r\n          //setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n        } else {\r\n          setclientCodeetail(\"\");\r\n          setclientCodeetail2(response.data);\r\n        }\r\n      }\r\n      getIndexClientCode();\r\n    } else if (e.target.name === \"indexClient\") {\r\n      setObjValues({\r\n        ...objValues,\r\n        [e.target.name]: e.target.value,\r\n        relationWithIndexClient: \"\",\r\n        indexClientCode: \"\",\r\n      });\r\n      setErrors({\r\n        ...errors,\r\n        relationWithIndexClient: \"\",\r\n        indexClientCode: \"\",\r\n      });\r\n    } else if(e.target.name === \"sex\"){\r\n      setObjValues({ ...objValues, pregnant: \"\", [e.target.name]: e.target.value});\r\n\r\n    }else {\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    if (e.target.name === \"sex\" && e.target.value.toLowerCase() === \"female\") {\r\n      setShowPregnancy(true);\r\n  \r\n\r\n      setErrors({ ...errors, pregnant: \"\" });\r\n    }\r\n  };\r\n\r\n\r\n  //checkClientCode\r\n  const checkClientCode = (e) => {\r\n    let code = \"\";\r\n\r\n    if (e.target.name === \"serialNumber\") {\r\n      code = createdCode + e.target.value;\r\n\r\n      setObjValues({ ...objValues, clientCode: code });\r\n    }\r\n    async function getIndexClientCode() {\r\n      const response = await axios.get(\r\n        `${baseUrl}hts/get-client-code?code=${code}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"text/plain\",\r\n          },\r\n        }\r\n      );\r\n      if(response.data ==='Client code already exist'){\r\n        // setErrors({...errors,clientCode: \"Client code already exist\" })\r\n         setClientCodeCheck(\"Client code already exist\")\r\n     \r\n      }else {\r\n          setClientCodeCheck(\"\")\r\n      }\r\n    }\r\n    getIndexClientCode();\r\n  };\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n        age_now--;\r\n      }\r\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      //   age_now--;\r\n      // }\r\n      objValues.age = age_now;\r\n\r\n      //setBasicInfo({...basicInfo, age: age_now});\r\n    } else {\r\n      setObjValues({ ...objValues, age: \"\" });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n\r\n    setObjValues({ ...objValues, dob: e.target.value });\r\n    if (objValues.age !== \"\" && objValues.age >= 85) {\r\n      toggle();\r\n    }\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      objValues.isDateOfBirthEstimated = false;\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      objValues.isDateOfBirthEstimated = true;\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n\r\n\r\n  const determinPregnancy =(pregList)=>{\r\n   // get  the value of pregnancy being used   \r\n   let pregnancyUsed  =\"\"\r\n   if(pregList.length > 0){\r\n    pregList.map((each, index)=>{\r\n\r\n       if(each.code === \"PREGANACY_STATUS_PREGNANT\"){\r\n        pregnancyUsed =each.id \r\n       }\r\n     })\r\n   }\r\n\r\n   if(props.patientObj.riskStratificationResponseDto.testingSetting ===\r\n    \"FACILITY_HTS_TEST_SETTING_ANC\" \r\n  ){\r\n    setObjValues({...objValues, pregnant: pregnancyUsed})\r\n\r\n  }\r\n  }\r\n\r\n  const determinSex= ()=>{  \r\n      if(props.patientObj.riskStratificationResponseDto.testingSetting ===\r\n    \"FACILITY_HTS_TEST_SETTING_ANC\" || props.patientObj.riskStratificationResponseDto.testingSetting ===\r\n    \"FACILITY_HTS_TEST_SETTING_L&D\" || props.patientObj.riskStratificationResponseDto.testingSetting ===\r\n    \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\r\n  ){\r\n    setShowPregnancy(true)\r\n      setdisableSex(true)\r\n  }else{\r\n    setShowPregnancy(false)\r\n    setdisableSex(false)\r\n\r\n  }}\r\n\r\n\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      if (e.target.value !== \"\" && e.target.value >= 85) {\r\n        toggle();\r\n      }\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setObjValues({ ...objValues, age: e.target.value });\r\n  };\r\n  //End of Date of Birth and Age handling\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    const limit = 10;\r\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\r\n  };\r\n \r\n\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n\r\n    temp.typeCounseling = objValues.typeCounseling\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.testingSetting = objValues.testingSetting\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.targetGroup = objValues.targetGroup ? \"\" : \"This field is required.\";\r\n    temp.referredFrom = objValues.referredFrom ? \"\" : \"This field is required.\";\r\n    temp.previouslyTested = objValues.previouslyTested !== \"\"\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.surname = objValues.surname ? \"\" : \"This field is required.\";\r\n    temp.sex = objValues.sex ? \"\" : \"This field is required.\";\r\n    temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\r\n    temp.phoneNumber = objValues.phoneNumber ? \"\" : \"This field is required.\";\r\n    // temp.isDateOfBirthEstimated = objValues.isDateOfBirthEstimated ? \"\" : \"This field is required.\"\r\n    temp.firstName = objValues.firstName ? \"\" : \"This field is required.\";\r\n    //temp.dateOfRegistration = objValues.dateOfRegistration ? \"\" : \"This field is required.\"\r\n    //temp.numChildren = objValues.numChildren ? \"\" : \"This field is required.\"\r\n    temp.address = objValues.address ? \"\" : \"This field is required.\";\r\n    temp.indexClient = objValues.indexClient !== \"\" ? \"\" : \"This field is required.\";\r\n    temp.firstTimeVisit = objValues.firstTimeVisit !== \"\"\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.dateVisit = objValues.dateVisit ? \"\" : \"This field is required.\";\r\n    temp.dob = objValues.dob ? \"\" : \"This field is required.\";\r\n    temp.age = objValues.age ? \"\" : \"This field is required.\";\r\n    temp.lga = objValues.lga ? \"\" : \"This field is required.\";\r\n    temp.stateId = objValues.stateId ? \"\" : \"This field is required.\";\r\n\r\n    objValues.sex === \"Female\" &&\r\n      (temp.pregnant =\r\n        objValues.pregnant !== \"\" ? \"\" : \"This field is required.\");\r\n\r\n    objValues.indexClient === \"true\" &&\r\n      (temp.relationWithIndexClient =\r\n        objValues.relationWithIndexClient !== \"\"\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n    objValues.indexClient === \"true\" &&\r\n      (temp.indexClientCode =\r\n        objValues.indexClientCode !== \"\" ? \"\" : \"This field is required.\");\r\n\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n\r\n  const checkNumberLimit = (e) => {\r\n    const limit = 11;\r\n    const acceptedNumber = e.slice(0, limit);\r\n    return acceptedNumber;\r\n  };\r\n  const handleInputChangePhoneNumber = (e, inputName) => {\r\n    const limit = 11;\r\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\r\n    setObjValues({ ...objValues, [inputName]: NumberValue });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    Cookies.set(\"serial-number\", serialNumber)\r\n    // check next form\r\n    let latestForm = getNextForm(\r\n      \"client_intake_form\",\r\n      objValues.age,\r\n      modalityCheck,\r\n      \"unknown\"\r\n    );\r\n\r\n    if (validate() && clientCodeCheck === \"\") {\r\n      setSaving(true);\r\n\r\n\r\n      const getSexId = sexs.find((x) => x.display === objValues.sex); //get patient sex ID by filtering the request\r\n      //basicInfo.sexId=getSexId.id\r\n      const patientForm = {\r\n        clientCode: objValues.clientCode,\r\n        dateVisit: objValues.dateVisit,\r\n        extra: {},\r\n        firstTimeVisit: objValues.firstTimeVisit,\r\n        indexClient: objValues.indexClient,\r\n        numChildren: objValues.numChildren,\r\n        numWives: objValues.numWives,\r\n        personDto: {\r\n          active: true,\r\n          address: [\r\n            {\r\n              city: objValues.address,\r\n              countryId: 1,\r\n              district: objValues.lga,\r\n              line: [\"\"],\r\n              organisationUnitId: \"\",\r\n              postalCode: \"\",\r\n              stateId: objValues.stateId,\r\n            },\r\n          ],\r\n          contact: [],\r\n          contactPoint: [\r\n            {\r\n              type: \"phone\",\r\n              value: objValues.phoneNumber,\r\n            },\r\n          ],\r\n          dateOfBirth: objValues.dob,\r\n          dateOfRegistration: objValues.dateVisit,\r\n          deceased: true,\r\n          deceasedDateTime: null,\r\n          educationId: \"\",\r\n          employmentStatusId: \"\",\r\n          facilityId: \"\",\r\n          firstName: objValues.firstName,\r\n          genderId: getSexId.id, //objValues.genderId,\r\n          id: \"\",\r\n          identifier: [\r\n            {\r\n              assignerId: 1,\r\n              type: \"HospitalNumber\",\r\n              value: objValues.clientCode,\r\n            },\r\n          ],\r\n          isDateOfBirthEstimated: objValues.isDateOfBirthEstimated,\r\n          maritalStatusId: objValues.maritalStatusId,\r\n          organizationId: \"\",\r\n          otherName: objValues.otherName,\r\n          sexId: getSexId.id,\r\n          surname: objValues.surname,\r\n          \r\n        },\r\n        personId: \"\",\r\n        hospitalNumber: objValues.clientCode,\r\n        previouslyTested: objValues.previouslyTested,\r\n        referredFrom: objValues.referredFrom,\r\n        targetGroup: objValues.targetGroup,\r\n        testingSetting: objValues.testingSetting,\r\n        typeCounseling: objValues.typeCounseling,\r\n        breastFeeding: objValues.breastFeeding,\r\n        indexClientCode: objValues.indexClientCode,\r\n        pregnant: objValues.pregnant,\r\n        relationWithIndexClient: objValues.relationWithIndexClient,\r\n        riskStratificationCode:\r\n          props.extra && props.extra.code !== \"\" ? props.extra.code : \"\",\r\n        comment: objValues.comment,\r\n        partnerNotificationService: objValues.partnerNotificationService,\r\n        familyIndex: objValues.familyIndex,\r\n      };\r\n\r\n      props.setPatientObj({ ...props.patientObj, ...objValues });\r\n\r\n\r\n\r\n      if(props.patientObj.id && props.completed.includes(\"basic\") ){\r\n        patientForm.id= props?.patientObj?.id\r\n        patientForm.personId= props?.patientObj?.personId\r\n\r\n        axios\r\n        .put(`${baseUrl}hts/${props.patientObj.id}`, patientForm, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          let obj = {\r\n            uuid: \"\",\r\n            type: \"\",\r\n            clientCode: \"\",\r\n          };\r\n          localStorage.setItem(\"index\", JSON.stringify(obj));\r\n\r\n          props.setPatientObj(response.data);\r\n          props.setBasicInfo(response.data);\r\n          toast.success(\"Form submitted successfully\");\r\n\r\n          handleItemClick(latestForm[0], latestForm[1]);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          console.log(error);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage, {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        });\r\n      \r\n      }else{\r\n        axios\r\n        .post(`${baseUrl}hts`, patientForm, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          let obj = {\r\n            uuid: \"\",\r\n            type: \"\",\r\n            clientCode: \"\",\r\n          };\r\n          localStorage.setItem(\"index\", JSON.stringify(obj));\r\n\r\n          props.setPatientObj(response.data);\r\n          props.setBasicInfo(response.data);\r\n          toast.success(\"Form submitted successfully\");\r\n\r\n          handleItemClick(latestForm[0], latestForm[1]);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          console.log(error);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage, {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        });\r\n\r\n      }\r\n  \r\n\r\n\r\n\r\n    } else {\r\n      toast.error(\"All fields are required\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>CLIENT INTAKE FORM </h2>\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"\">\r\n                      Serial Number <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"serialNumber\"\r\n                      id=\"serialNumber\"\r\n                      value={serialNumber}\r\n                      //value={Math.floor(Math.random() * 1093328)}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                      disabled={disableVitals}\r\n                    />\r\n                  </FormGroup>\r\n                  {errors.serialNumber !== \"\" ? (\r\n                      <span className={classes.error}>{errors.serialNumber}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"\">\r\n                      Client Code <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"clientCode\"\r\n                      id=\"clientCode\"\r\n                      value={objValues.clientCode}\r\n                      disabled={true}\r\n                      //value={Math.floor(Math.random() * 1093328)}\r\n                      // onBlur={checkClientCode}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                    />\r\n               \r\n                  </FormGroup>\r\n                  {/* {errors.clientCode !== \"\" ? (\r\n                      <span className={classes.error}>{errors.clientCode}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )} */}\r\n                  {clientCodeCheck !== \"\" ? (\r\n                    <span className={classes.error}>{clientCodeCheck}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </div>\r\n                {/* <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\"> Date Of Registration </Label>\r\n                                <Input\r\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                    name=\"dateOfRegistration\"\r\n                                    id=\"dateOfRegistration\"\r\n                                    value={objValues.dateOfRegistration}\r\n                                    onChange={handleInputChange}\r\n                                    max= {moment(new Date()).format(\"YYYY-MM-DD\") }\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                    \r\n                                />\r\n                                {errors.dateOfRegistration !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.dateOfRegistration}</span>\r\n                                ) : \"\" }\r\n                                </FormGroup>\r\n                            </div> */}\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Referred From <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"referredFrom\"\r\n                    id=\"referredFrom\"\r\n                    value={objValues.referredFrom}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {sourceReferral.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.referredFrom !== \"\" ? (\r\n                    <span className={classes.error}>{errors.referredFrom}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Setting <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"testingSetting\"\r\n                    id=\"testingSetting\"\r\n                    value={objValues.testingSetting}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}>Select</option>\r\n                    {enrollSetting.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.testingSetting !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.testingSetting}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label for=\"\">\r\n                    Visit Date <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                  </Label>\r\n                  <Input\r\n                    type=\"date\"\r\n                    onKeyPress={(e) => {\r\n                      e.preventDefault();\r\n                    }}\r\n                    name=\"dateVisit\"\r\n                    id=\"dateVisit\"\r\n                    value={objValues.dateVisit}\r\n                    onChange={handleInputChange}\r\n                    min=\"1929-12-31\"\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                  />\r\n                  {errors.dateVisit !== \"\" ? (\r\n                    <span className={classes.error}>{errors.dateVisit}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label for=\"\">\r\n                    First Name <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    id=\"firstName\"\r\n                    value={objValues.firstName}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disableVitals}\r\n                  />\r\n                  {errors.firstName !== \"\" ? (\r\n                    <span className={classes.error}>{errors.firstName}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label for=\"\">Middle Name</Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"otherName\"\r\n                    id=\"otherName\"\r\n                    value={objValues.otherName}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disableVitals}\r\n                  />\r\n                  {errors.otherName !== \"\" ? (\r\n                    <span className={classes.error}>{errors.otherName}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label for=\"\">\r\n                    Last Name <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"surname\"\r\n                    id=\"surname\"\r\n                    value={objValues.surname}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    disabled={disableVitals}\r\n                  />\r\n                  {errors.surname !== \"\" ? (\r\n                    <span className={classes.error}>{errors.surname}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-2 col-md-2\">\r\n                <FormGroup>\r\n                  <Label>Date Of Birth</Label>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Actual\"\r\n                        name=\"dateOfBirth\"\r\n                        defaultChecked\r\n                        onChange={(e) => handleDateOfBirthChange(e)}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />{\" \"}\r\n                      Actual\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Estimated\"\r\n                        name=\"dateOfBirth\"\r\n                        onChange={(e) => handleDateOfBirthChange(e)}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />{\" \"}\r\n                      Estimated\r\n                    </label>\r\n                  </div>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <Label>Date</Label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"date\"\r\n                    onKeyPress={(e) => {\r\n                      e.preventDefault();\r\n                    }}\r\n                    name=\"dob\"\r\n                    id=\"dob\"\r\n                    min={objValues.dateVisit}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    value={objValues.dob}\r\n                    onChange={handleDobChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  />\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <Label>Age</Label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    name=\"age\"\r\n                    id=\"age\"\r\n                    value={objValues.age}\r\n                    disabled={ageDisabled}\r\n                    onChange={handleAgeChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  />\r\n                </FormGroup>\r\n              </div>\r\n              {/*<div className=\"form-group mb-3 col-md-4\">*/}\r\n              {/*  <FormGroup>*/}\r\n              {/*    <Label for=\"\">*/}\r\n              {/*      Phone Number <span style={{ color: \"red\" }}> *</span>*/}\r\n              {/*    </Label>*/}\r\n\r\n              {/*    <PhoneInput*/}\r\n              {/*      containerStyle={{*/}\r\n              {/*        width: \"100%\",*/}\r\n              {/*        border: \"1px solid #014D88\",*/}\r\n              {/*      }}*/}\r\n              {/*      inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}*/}\r\n              {/*      country={\"ng\"}*/}\r\n              {/*      placeholder=\"(234)7099999999\"*/}\r\n              {/*      minLength={10}*/}\r\n              {/*      name=\"phoneNumber\"*/}\r\n              {/*      id=\"phoneNumber\"*/}\r\n              {/*      masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}*/}\r\n              {/*      value={objValues.phoneNumber}*/}\r\n              {/*      onChange={(e) => {*/}\r\n              {/*        checkPhoneNumberBasic(e, \"phoneNumber\");*/}\r\n              {/*      }}*/}\r\n              {/*      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\r\n              {/*    />*/}\r\n              {/*    {errors.phoneNumber !== \"\" ? (*/}\r\n              {/*      <span className={classes.error}>{errors.phoneNumber}</span>*/}\r\n              {/*    ) : (*/}\r\n              {/*      \"\"*/}\r\n              {/*    )}*/}\r\n              {/*  </FormGroup>*/}\r\n              {/*</div>*/}\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Phone Number\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"phoneNumber\"\r\n                    id=\"phoneNumber\"\r\n                    onChange={(e) => {\r\n                      handleInputChangePhoneNumber(e, \"phoneNumber\");\r\n                    }}\r\n                    value={objValues.phoneNumber}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    // disabled\r\n                  />\r\n                  {errors.phoneNumber !== \"\" ? (\r\n                    <span className={classes.error}>{errors.phoneNumber}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    State <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"stateId\"\r\n                    id=\"state\"\r\n                    onChange={getProvinces}\r\n                    value={objValues.stateId}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {states.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.stateId !== \"\" ? (\r\n                    <span className={classes.error}>{errors.stateId}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    LGA <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"lga\"\r\n                    id=\"lga\"\r\n                    value={objValues.lga}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {provinces.map((value, index) => (\r\n                      <option key={index} value={value.id}>\r\n                        {value.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.lga !== \"\" ? (\r\n                    <span className={classes.error}>{errors.lga}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Address <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <Input\r\n                    type=\"textarea\"\r\n                    name=\"address\"\r\n                    id=\"address\"\r\n                    value={objValues.address}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                  />\r\n                  {errors.address !== \"\" ? (\r\n                    <span className={classes.error}>{errors.address}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Sex <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"sex\"\r\n                    id=\"sex\"\r\n                    value={objValues.sex}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={\r\n                      disableSex\r\n                    }\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                   \r\n                    {sexs.map((value) => (\r\n                      <option key={value.id} value={value.display}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.sex !== \"\" ? (\r\n                    <span className={classes.error}>{errors.sex}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {/* {(objValues.targetGroup!=='457' && objValues.targetGroup!==\"\") && (\r\n                            <div className=\"form-group  col-md-4\">\r\n                            <FormGroup>\r\n                                <Label>Gender</Label>\r\n                                <select\r\n                                    className=\"form-control\"\r\n                                    name=\"genderId\"\r\n                                    id=\"genderId\"\r\n                                    value={objValues.genderId}\r\n                                    onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                >\r\n                                    <option value={\"\"}></option>\r\n                                    {gender.map((value) => (\r\n                                        <option key={value.id} value={value.id}>\r\n                                            {value.display}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                               \r\n                            </FormGroup>\r\n                        </div>\r\n                             )} */}\r\n              {objValues.age > 9 && (\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Marital Status</Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"maritalStatusId\"\r\n                      id=\"maritalStatusId\"\r\n                      value={objValues.maritalStatusId}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      {maritalStatus.map((value) => (\r\n                        <option key={value.id} value={value.id}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {objValues.age > 9 &&\r\n                objValues.sex === \"Male\" &&\r\n                objValues.maritalStatusId !== 5 && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Number of wives/co-wives</Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"numWives\"\r\n                        min={0}\r\n                        id=\"numWives\"\r\n                        value={objValues.numWives}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n              {/* && objValues.maritalStatusId==='6' */}\r\n              {objValues.age > 9 && (\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Number of Children {\"<5\"} years</Label>\r\n                    <Input\r\n                      type=\"number\"\r\n                      name=\"numChildren\"\r\n                      id=\"numChildren\"\r\n                      min={0}\r\n                      value={objValues.numChildren}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {/* objValues.maritalStatusId==='6' && */}\r\n          \r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Target Group <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"targetGroup\"\r\n                    id=\"targetGroup\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.targetGroup}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    //disabled\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {kP.map((value) => (\r\n                                           <option key={value.id} value={value.code}>\r\n                                               {value.display}\r\n                                           </option>\r\n                                       ))}\r\n                    {/* {objValues?.sex.toLowerCase() === \"female\" && (\r\n                      <>\r\n                        {\" \"}\r\n                        {kP\r\n                          .filter((x) => x.display !== \"MSM\")\r\n                          .map((value) => (\r\n                            <option key={value.id} value={value.code}>\r\n                              {value.display}\r\n                            </option>\r\n                          ))}\r\n                      </>\r\n                    )} */}\r\n{/* \r\n                    {(objValues.sex === \"Male\" || objValues.sex === \"male\") && (\r\n                      <>\r\n                        {\" \"}\r\n                        {kP\r\n                          .filter((x) => x.display !== \"FSW\")\r\n                          .map((value) => (\r\n                            <option key={value.id} value={value.code}>\r\n                              {value.display}\r\n                            </option>\r\n                          ))}{\" \"}\r\n                      </>\r\n                    )} */}\r\n                  </select>\r\n                  {errors.targetGroup !== \"\" ? (\r\n                    <span className={classes.error}>{errors.targetGroup}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Index Testing <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"indexClient\"\r\n                    id=\"indexClient\"\r\n                    value={objValues.indexClient}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={disableIndexInfo}\r\n                  >\r\n                    <option value={\"\"}>Select</option>\r\n                    <option value=\"true\">YES</option>\r\n                    <option value=\"false\">NO</option>\r\n                  </select>\r\n                  {errors.indexClient !== \"\" ? (\r\n                    <span className={classes.error}>{errors.indexClient}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.indexClient === \"true\" && (\r\n                <>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Relationship of the index client{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"relationWithIndexClient\"\r\n                        id=\"relationWithIndexClient\"\r\n                        value={objValues.relationWithIndexClient}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={disableIndexInfo}\r\n\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {indexTesting.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.relationWithIndexClient !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.relationWithIndexClient}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Index Client Code/ID\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"indexClientCode\"\r\n                        id=\"indexClientCode\"\r\n                        value={objValues.indexClientCode}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={disableIndexInfo}\r\n\r\n                      />\r\n                      {errors.indexClientCode !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.indexClientCode}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                    {clientCodeetail2 !== \"\" ? (\r\n                      <span className={classes.error}>{clientCodeetail2}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {clientCodeetail !== \"\" ? (\r\n                      <span className={classes.success}>{clientCodeetail}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n              {objValues.sex  === \"Female\"  && (\r\n                <>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Pregnant Status <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"pregnant\"\r\n                        id=\"pregnant\"\r\n                        value={objValues.pregnant}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={\r\n                          props.patientObj.riskStratificationResponseDto.testingSetting ===\r\n                            \"FACILITY_HTS_TEST_SETTING_ANC\" \r\n                            ? true\r\n                            : false\r\n                        }\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {pregnancyStatus.map((value) =>\r\n                        \r\n                            <option key={value.id} value={value.id}>\r\n                              {value.display}\r\n                            </option>\r\n                        \r\n                        )}\r\n                      </select>\r\n                      {errors.pregnant !== \"\" ? (\r\n                        <span className={classes.error}>{errors.pregnant}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {/*objValues.pregnant === \"\" &&\r\n                      (objValues.pregnant !== 73 ||\r\n                        objValues.pregnant !== \"73\") && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Breast Feeding</Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"breastFeeding\"\r\n                              id=\"breastFeeding\"\r\n                              value={objValues.breastFeeding}\r\n                              onChange={handleInputChange}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            >\r\n                              <option value={\"\"}>Select</option>\r\n                              <option value=\"true\">YES</option>\r\n                              <option value=\"false\">NO</option>\r\n                            </select>\r\n                          </FormGroup>\r\n                        </div>\r\n                            )*/}\r\n                </>\r\n              )}\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    First time visit <span style={{ color: \"red\" }}>*</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"firstTimeVisit\"\r\n                    id=\"firstTimeVisit\"\r\n                    value={objValues.firstTimeVisit}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}>Select</option>\r\n                    <option value=\"true\">YES</option>\r\n                    <option value=\"false\">NO</option>\r\n                  </select>\r\n                  {errors.firstTimeVisit !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.firstTimeVisit}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Previously tested within the last 3 months{\" \"}\r\n                    <span style={{ color: \"red\" }}>*</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"previouslyTested\"\r\n                    id=\"previouslyTested\"\r\n                    value={objValues.previouslyTested}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}>Select</option>\r\n                    <option value=\"true\">YES</option>\r\n                    <option value=\"false\">NO</option>\r\n                  </select>\r\n                  {errors.previouslyTested !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.previouslyTested}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Type of Counseling <span style={{ color: \"red\" }}>*</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"typeCounseling\"\r\n                    id=\"typeCounseling\"\r\n                    value={objValues.typeCounseling}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}>Select</option>\r\n                    {counselingType.map((value) => (\r\n                      <option key={value.id} value={value.id}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.typeCounseling !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.typeCounseling}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-12\">\r\n                <FormGroup>\r\n                  <Label for=\"firstName\">\r\n                    Comments\r\n                    {/* <span style={{ color: \"red\" }}> *</span> */}\r\n                  </Label>\r\n                  <Input\r\n                    className=\"form-control\"\r\n                    type=\"textarea\"\r\n                    rows=\"4\"\r\n                    cols=\"7\"\r\n                    name=\"comment\"\r\n                    id=\"comment\"\r\n                    value={objValues.comment}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                      height: \"100px\",\r\n                    }}\r\n                  />\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  {/* <Button\r\n                    content=\"Back\"\r\n                    icon=\"left arrow\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    onClick={() => handleItemClick(\"risk\", \"risk\")}\r\n                  /> */}\r\n                  <Button\r\n                    content=\"Save & Continue\"\r\n                    type=\"submit\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasicInfo;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\Index.js",["571","572","573","574","575","576","577","578","579","580"],"import React, { Fragment } from \"react\";\r\n// BS\r\nimport { Dropdown, Nav, Tab } from \"react-bootstrap\";\r\n/// Scroll\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\nimport { Link } from \"react-router-dom\";\r\n// images\r\nimport SummaryView from './DashboardAnalytics/SummaryView/Index';\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport {NewlyEnrolledArtBySex} from './DashboardAnalytics/SummaryView/Highcharts/NewlyEnrolledArtBySex';\r\n\r\nconst options = {\r\n  chart: {\r\n    type: 'column'\r\n},\r\n\r\ntitle: {\r\n    text: 'Viral Load Cascade among new patients eligible after 6 months'\r\n},\r\n\r\nsubtitle: {\r\n    text: ''\r\n},\r\n\r\nlegend: {\r\n    align: 'right',\r\n    verticalAlign: 'middle',\r\n    layout: 'vertical'\r\n},\r\n\r\nxAxis: {\r\n    categories: ['Number Eligble', 'Number of Sample Collected', 'Number Tested', 'Number Suppressed'],\r\n    labels: {\r\n        x: -10\r\n    }\r\n},\r\n\r\nyAxis: {\r\n    allowDecimals: false,\r\n    title: {\r\n        text: 'Amount'\r\n    }\r\n},\r\n\r\nseries: [{\r\n    name: 'Number Eligble',\r\n    data: [20, 40, 30, 3]\r\n}, {\r\n    name: 'Number of Sample Collected',\r\n    data: [62, 41, 22, 22]\r\n}, {\r\n    name: 'Number Tested',\r\n    data: [200, 45, 30,20]\r\n}, {\r\n  name: 'Number Suppressed',\r\n  data: [40, 40, 10, 90]\r\n}],\r\n\r\nresponsive: {\r\n    rules: [{\r\n        condition: {\r\n            maxWidth: 500\r\n        },\r\n        chartOptions: {\r\n            legend: {\r\n                align: 'center',\r\n                verticalAlign: 'bottom',\r\n                layout: 'horizontal'\r\n            },\r\n            yAxis: {\r\n                labels: {\r\n                    align: 'left',\r\n                    x: 0,\r\n                    y: -5\r\n                },\r\n                title: {\r\n                    text: null\r\n                }\r\n            },\r\n            subtitle: {\r\n                text: null\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            }\r\n        }\r\n    }]\r\n}\r\n}\r\nconst options2 = {\r\n  chart: {\r\n    type: 'column'\r\n},\r\n\r\ntitle: {\r\n    text: 'Viral Load Cascade among patients currently on ART eligible after 12 months of last VL result'\r\n},\r\n\r\nsubtitle: {\r\n    text: ''\r\n},\r\n\r\nlegend: {\r\n    align: 'right',\r\n    verticalAlign: 'middle',\r\n    layout: 'vertical'\r\n},\r\n\r\nxAxis: {\r\n    categories: ['Number Eligble', 'Number of Sample Collected', 'Number Tested', 'Number Suppressed'],\r\n    labels: {\r\n        x: -10\r\n    }\r\n},\r\n\r\nyAxis: {\r\n    allowDecimals: false,\r\n    title: {\r\n        text: 'Amount'\r\n    }\r\n},\r\n\r\nseries: [{\r\n    name: 'Number Eligble',\r\n    data: [200, 40, 30, 3]\r\n}, {\r\n    name: 'Number of Sample Collected',\r\n    data: [62, 41, 22, 22]\r\n}, {\r\n    name: 'Number Tested',\r\n    data: [2000, 450, 300,200]\r\n}, {\r\n  name: 'Number Suppressed',\r\n  data: [40, 40, 100, 90]\r\n}],\r\n\r\nresponsive: {\r\n    rules: [{\r\n        condition: {\r\n            maxWidth: 500\r\n        },\r\n        chartOptions: {\r\n            legend: {\r\n                align: 'center',\r\n                verticalAlign: 'bottom',\r\n                layout: 'horizontal'\r\n            },\r\n            yAxis: {\r\n                labels: {\r\n                    align: 'left',\r\n                    x: 0,\r\n                    y: -5\r\n                },\r\n                title: {\r\n                    text: null\r\n                }\r\n            },\r\n            subtitle: {\r\n                text: null\r\n            },\r\n            credits: {\r\n                enabled: false\r\n            }\r\n        }\r\n    }]\r\n}\r\n}\r\nconst Widget = () => {\r\n  return (\r\n    <Fragment>     \r\n      <div className=\"row\">\r\n       <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-primary text-danger\">\r\n                <i class=\"fa fa-user-plus\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">NEWLY TESTED</p>\r\n                  <h4 className=\"mb-0\">3280</h4>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-warning text-warning\">\r\n                <i class=\"fa fa-heartbeat\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">CURRENT ON ART</p>\r\n                  <h4 className=\"mb-0\">2570</h4>\r\n                  {/* <span className=\"badge badge-warning\">+3.5%</span> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body  p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-danger text-danger\">\r\n                <i class=\"fa fa-compress\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">NEWLY POSITIVE</p>\r\n                  <h4 className=\"mb-0\">50</h4>\r\n                  {/* <span className=\"badge badge-danger\">-3.5%</span> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-xl-3 col-md-3 col-lg-3 col-sm-3 col-xs-3\">\r\n          <div className=\"widget-stat card\">\r\n            <div className=\"card-body p-4\">\r\n              <div className=\"media ai-icon\">\r\n                <span className=\"me-3 bgl-success text-success\">\r\n                <i class=\"fa fa-users\" aria-hidden=\"true\"></i>\r\n                </span>\r\n                <div className=\"media-body\">\r\n                  <p className=\"mb-1\">CURRENTLY ACTIVE</p>\r\n                  <h4 className=\"mb-0\">2340</h4>\r\n                  {/* <span className=\"badge badge-success\">-3.5%</span> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <SummaryView />\r\n        {/* <div className=\"col-xl-6 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n          />\r\n        </div> */}\r\n        {/* <div className=\"col-xl-6 col-xxl-4 col-lg-6 col-sm-6\">\r\n          <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options2}\r\n          />\r\n        </div> */}\r\n        \r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Widget;\r\n",["581","582"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\HivTestResult.js",["583","584","585","586","587","588","589","590","591","592","593","594"],"import React, { useCallback, useEffect, useState } from \"react\";\r\n\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { toast } from \"react-toastify\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst HivTestResult = (props) => {\r\n  const classes = useStyles();\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  let temp = { ...errors };\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [hivTestDate, setHivTestDate] = useState(\"\");\r\n  const [showCD4Count, setShowCD4Count] = useState(true);\r\n  const [permissions, setPermission] = useState(\r\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\r\n  );\r\n  const [nextForm, setNextForm] = useState([]);\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now;\r\n  };\r\n  const patientAge = calculate_age(\r\n    moment(\r\n      props.patientObj.personResponseDto &&\r\n        props.patientObj.personResponseDto.dateOfBirth\r\n        ? props.patientObj.personResponseDto.dateOfBirth\r\n        : 0\r\n    ).format(\"DD-MM-YYYY\")\r\n  );\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    confirmatoryTest: {},\r\n    confirmatoryTest2: {},\r\n    hivTestResult: \"\",\r\n    hivTestResult2: \"\",\r\n    htsClientId: \"\",\r\n    personId: props.patientObj ? props.patientObj.id : \"\",\r\n    test1: {},\r\n    test2: {},\r\n    tieBreakerTest: {},\r\n    tieBreakerTest2: {},\r\n    syphilisTesting: {},\r\n    hepatitisTesting: {},\r\n    others: {},\r\n    cd4: {},\r\n    prepOffered: \"\",\r\n    prepAccepted: \"\",\r\n  });\r\n  const handleInputChange = (e) => {\r\n    // setErrors({...temp, [e.target.name]:\"\"})\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  const [initialTest1, setInitailTest] = useState({\r\n    date: \"\",\r\n    result: \"\",\r\n  });\r\n  const [initialTest12, setInitailTest2] = useState({\r\n    date2: \"\",\r\n    result2: \"\",\r\n  });\r\n  const handleInputChangeCd4Count = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setCd4Count({ ...cd4Count, [e.target.name]: e.target.value });\r\n  };\r\n  const [cd4Count, setCd4Count] = useState({\r\n    cd4Count: \"\",\r\n    cd4SemiQuantitative: \"\",\r\n    cd4FlowCyteometry: \"\",\r\n  });\r\n\r\n  const [finalResult, setFinalResult] = useState(\"\");\r\n\r\n  const handleInputChangeInitial = (e) => {\r\n    setErrors({...temp, [e.target.id]:\"\"})\r\n    if(e.target.name === \"result\"){\r\n //  clear the all other fields if there changes in initialTest1 result is changes\r\n        setConfirmatoryTest({\r\n            date: \"\",\r\n            result: \"\",\r\n        })\r\n        setTieBreakerTest({\r\n            date: \"\",\r\n            result: \"\",\r\n        })\r\n        setInitailTest2({\r\n            date2: \"\",\r\n            result2: \"\",\r\n        });\r\n        setConfirmatoryTest2({\r\n            date2: \"\",\r\n            result2: \"\",\r\n        });\r\n        setTieBreakerTest2({\r\n            date2: \"\",\r\n            result2: \"\",\r\n        });\r\n    setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\r\n\r\n    setErrors({...temp, [e.target.id]:\"\", \r\n        confirmatoryTestdate: \"\",\r\n        confirmatoryTestresult: \"\",\r\n        retestingDate: \"\",\r\n        retestingResult: \"\",\r\n        tieBreakerDate: \"\",\r\n        tieBreakerResult: \"\",\r\n        confirmatoryTest2Date2: \"\",\r\n        confirmatoryTestResult2: \"\",\r\n        prepOffered: \"\", \r\n        prepAccepted: \"\"\r\n        \r\n      })\r\n        setInitailTest({...initialTest1, [e.target.name]: e.target.value});\r\n\r\n    if (e.target.value === \"No\") {\r\n   \r\n        //This is to show cd4 count section\r\n        setShowCD4Count(false);\r\n    }\r\n    }else {\r\n        setInitailTest({...initialTest1, [e.target.name]: e.target.value});\r\n        setErrors({date: \"\", prepOffered: \"\", prepAccepted: \"\"})\r\n        //This is to show cd4 count section\r\n        setShowCD4Count(true);\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\n  \r\nconst handleInputChangeInitial2 = (e) => {\r\n  setErrors({...temp, [e.target.id]:\"\"})\r\n\r\n  if(e.target.name === \"result2\"){\r\n   //clear the all other the input fields that follows the initialTest2, if there changes in initialTest12 result is changes\r\n   setInitailTest2({...initialTest12, [e.target.name]: e.target.value});\r\n \r\n  //  setTieBreakerTest({\r\n  //     date: \"\",\r\n  //     result: \"\",\r\n  // })\r\n      setConfirmatoryTest2({\r\n          date2: \"\",\r\n          result2: \"\",\r\n      });\r\n      setTieBreakerTest2({\r\n          date2: \"\",\r\n          result2: \"\",\r\n      });\r\n\r\n\r\n      setErrors({...temp, [e.target.id]:\"\", \r\n          \r\n          tieBreakerDate: \"\",\r\n          tieBreakerResult: \"\",\r\n          confirmatoryTest2Date: \"\",\r\n          confirmatoryTest2Result: \"\",\r\n      \r\n          \r\n        })\r\n\r\n      setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\r\n      if (e.target.value === \"No\") {\r\n\r\n          setConfirmatoryTest2({\r\n              date: \"\",\r\n              result: \"\",\r\n          });\r\n          setTieBreakerTest2({\r\n              date: \"\",\r\n              result: \"\",\r\n          });\r\n\r\n\r\n          //This is to show cd4 count section\r\n          setShowCD4Count(false);\r\n      }\r\n  } else {\r\n      setInitailTest2({...initialTest12, [e.target.name]: e.target.value});\r\n      //This is to show cd4 count section\r\n      setShowCD4Count(true);\r\n  }\r\n};\r\n  const [confirmatoryTest, setConfirmatoryTest] = useState({\r\n    date: \"\",\r\n    result: \"\",\r\n  });\r\n  const [confirmatoryTest2, setConfirmatoryTest2] = useState({\r\n    date2: \"\",\r\n    result2: \"\",\r\n  });\r\n  const handleInputChangeConfirmatory = (e) => {\r\n    setErrors({...temp, [e.target.id]:\"\"})\r\n    setConfirmatoryTest({\r\n        ...confirmatoryTest,\r\n        [e.target.name]: e.target.value,\r\n    });\r\n\r\n // clear all the input fields that follows the confirmatoryTest, if there changes in confirmatoryTest result is changes.\r\n        if(e.target.name === 'result'){\r\n            setInitailTest2({\r\n                date2: \"\",\r\n                result2: \"\",\r\n            });\r\n            setConfirmatoryTest2({\r\n                date2: \"\",\r\n                result2: \"\",\r\n            });\r\n            setTieBreakerTest({\r\n                date: \"\",\r\n                result: \"\",\r\n            })\r\n            setTieBreakerTest2({\r\n                date2: \"\",\r\n                result2: \"\",\r\n            });\r\n            setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\r\n\r\n            setErrors({...temp, [e.target.id]:\"\", \r\n                retestingDate: \"\",\r\n                retestingResult: \"\",\r\n                tieBreakerDate: \"\",\r\n                tieBreakerResult: \"\",\r\n                confirmatoryTest2Date2: \"\",\r\n                confirmatoryTestResult2: \"\",\r\n          \r\n          \r\n              })\r\n    \r\n        }\r\n\r\n    //This is to show cd4 count section\r\n    if (initialTest1.result === \"Yes\" && e.target.value === \"Yes\") {\r\n        setShowCD4Count(true);\r\n    } else {\r\n        setShowCD4Count(true);\r\n    }\r\n};\r\nconst handleInputChangeConfirmatory2 = (e) => {\r\n  setErrors({...temp, [e.target.id]:\"\"})\r\n\r\n  if(e.target.name === 'result2'){\r\n      setTieBreakerTest2({\r\n          date2: \"\",\r\n          result2: \"\",\r\n      });\r\n      setObjValues({...objValues, prepOffered: \"\", prepAccepted: \"\"})\r\n\r\n\r\n  }\r\n  setConfirmatoryTest2({\r\n      ...confirmatoryTest2,\r\n      [e.target.name]: e.target.value,\r\n  });\r\n  //This is to show cd4 count section\r\n  if (initialTest12.result2 === \"Yes\" && e.target.value === \"Yes\") {\r\n      setShowCD4Count(true);\r\n  } else {\r\n      setShowCD4Count(true);\r\n  }\r\n};\r\n  const [tieBreakerTest, setTieBreakerTest] = useState({\r\n    date: \"\",\r\n    result: \"\",\r\n  });\r\n  const [tieBreakerTest2, setTieBreakerTest2] = useState({\r\n    date2: \"\",\r\n    result2: \"\",\r\n  });\r\n  const handleInputChangeTie = (e) => {\r\n    setErrors({...temp, [e.target.id]:\"\"})\r\n    setTieBreakerTest({...tieBreakerTest, [e.target.name]: e.target.value});\r\n  \r\n  \r\n  \r\n  if(e.target.name === \"result\"){\r\n    setConfirmatoryTest2({\r\n        date2: \"\",\r\n        result2: \"\",\r\n    });\r\n    setTieBreakerTest2({\r\n        date2: \"\",\r\n        result2: \"\",\r\n    });\r\n    // added\r\n    setInitailTest2({\r\n      date2: \"\",\r\n      result2: \"\",\r\n    });\r\n\r\n    \r\n    setErrors({...temp, [e.target.id]:\"\", \r\n        \r\n        confirmatoryTest2Date2: \"\",\r\n        confirmatoryTestResult2: \"\",\r\n     \r\n        \r\n      })\r\n  }\r\n    //This is to show cd4 count section\r\n    if (confirmatoryTest.result === \"No\" && e.target.value === \"Yes\") {\r\n        setShowCD4Count(true);\r\n    } else if (confirmatoryTest.result === \"No\" && e.target.value === \"No\") {\r\n        setShowCD4Count(false);\r\n    } else {\r\n        setShowCD4Count(true);\r\n    }\r\n};\r\nconst handleInputChangeTie2 = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setTieBreakerTest2({...tieBreakerTest2, [e.target.name]: e.target.value});\r\n    //This is to show cd4 count section\r\n    if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"Yes\") {\r\n        setShowCD4Count(true);\r\n    } else if (confirmatoryTest2.result2 === \"No\" && e.target.value === \"No\") {\r\n        setShowCD4Count(false);\r\n    } else {\r\n        setShowCD4Count(true);\r\n    }\r\n};\r\n  const [syphills, setSyphills] = useState({\r\n    syphilisTestResult: \"\",\r\n    // result  :\"\",\r\n  });\r\n  const handleInputChangeSyphills = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setSyphills({ ...syphills, [e.target.name]: e.target.value });\r\n  };\r\n  const [hepatitis, setHepatitis] = useState({\r\n    hepatitisCTestResult: \"\",\r\n    hepatitisBTestResult: \"\",\r\n    longitude: \"\",\r\n    latitude: \"\",\r\n    adhocCode: \"\",\r\n  });\r\n  const handleInputChangeHepatitis = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setHepatitis({ ...hepatitis, [e.target.name]: e.target.value });\r\n  };\r\n  const [others, setOthers] = useState({\r\n    longitude: \"\",\r\n    latitude: \"\",\r\n    adhocCode: \"\",\r\n  });\r\n  useEffect(() => {\r\n\r\n    if (props.patientObj) {\r\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\r\n        setHivTestDate(props.patientObj.dateVisit);\r\n      } else {\r\n        setHivTestDate(\"\");\r\n      }\r\n      setCd4Count(\r\n        props.patientObj && props.patientObj.cd4 !== null\r\n          ? props.patientObj.cd4\r\n          : {}\r\n      );\r\n      setInitailTest(\r\n        props.patientObj && props.patientObj.test1 !== null\r\n          ? props.patientObj.test1\r\n          : {}\r\n      );\r\n      setConfirmatoryTest(\r\n        props.patientObj && props.patientObj.confirmatoryTest !== null\r\n          ? props.patientObj.confirmatoryTest\r\n          : {}\r\n      );\r\n      setTieBreakerTest(\r\n        props.patientObj && props.patientObj.tieBreakerTest !== null\r\n          ? props.patientObj.tieBreakerTest\r\n          : {}\r\n      );\r\n      setSyphills(\r\n        props.patientObj && props.patientObj.syphilisTesting !== null\r\n          ? props.patientObj.syphilisTesting\r\n          : {}\r\n      );\r\n      setHepatitis(\r\n        props.patientObj && props.patientObj.hepatitisTesting !== null\r\n          ? props.patientObj.hepatitisTesting\r\n          : {}\r\n      );\r\n      setOthers(\r\n        props.patientObj && props.patientObj.others !== null\r\n          ? props.patientObj.others\r\n          : {}\r\n      );\r\n\r\n      setInitailTest2(\r\n        props.patientObj && props.patientObj.test2 !== null\r\n          ? props.patientObj.test2\r\n          : {}\r\n      );\r\n      setConfirmatoryTest2(\r\n        props.patientObj && props.patientObj.confirmatoryTest2 !== null\r\n          ? props.patientObj.confirmatoryTest2\r\n          : {}\r\n      );\r\n      setTieBreakerTest2(\r\n        props.patientObj && props.patientObj.tieBreakerTest2 !== null\r\n          ? props.patientObj.tieBreakerTest2\r\n          : {}\r\n      );\r\n    }\r\n  }, [props.patientObj]); //initialTest12, tieBreakerTest2, confirmatoryTest2,\r\n\r\n  const handleInputChangeOthers = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setOthers({ ...others, [e.target.name]: e.target.value });\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  function CheckTestResult() {\r\n    //Logic to show CD4 Count\r\n    // else if(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result===''){\r\n    //     objValues.hivTestResult=\"Negative\"\r\n    // }\r\n  }\r\n  function CheckTestResult2() {\r\n    //Logic to show CD4 Count\r\n    if (initialTest12.result2 === \"No\") {\r\n      setShowCD4Count(false);\r\n    } else if (\r\n      initialTest12.result2 === \"Yes\" &&\r\n      confirmatoryTest2.result2 === \"Yes\"\r\n    ) {\r\n      setShowCD4Count(true);\r\n    }\r\n    // else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2===''){\r\n    //     objValues.hivTestResult2=\"Negative\"\r\n    // }\r\n    else if (\r\n      confirmatoryTest2.result2 === \"No\" &&\r\n      tieBreakerTest2.result2 === \"Yes\"\r\n    ) {\r\n      setShowCD4Count(true);\r\n    } else if (\r\n      confirmatoryTest2.result2 === \"No\" &&\r\n      tieBreakerTest2.result2 === \"No\"\r\n    ) {\r\n      setShowCD4Count(false);\r\n    } else {\r\n      setShowCD4Count(true);\r\n    }\r\n  }\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n\r\n    initialTest1.date !== \"\" &&\r\n      initialTest1.result === \"No\" &&\r\n      (temp.prepOffered = objValues.prepOffered\r\n        ? \"\"\r\n        : \"The Prep Offered field is required.\");\r\n    initialTest1.date !== \"\" &&\r\n      initialTest1.result === \"No\" &&\r\n      objValues.prepOffered === \"true\" &&\r\n      (temp.prepAccepted = objValues.prepAccepted\r\n        ? \"\"\r\n        : \"The Prep Accepted field is required.\");\r\n\r\n    //if the initial test date is filled then the initial test result should be compulsory and vice versa\r\n    initialTest1.date !== \"\" &&\r\n      (temp.initialResult = initialTest1.result\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n    initialTest1.result !== \"\" &&\r\n      (temp.initialDate = initialTest1.date ? \"\" : \"This field is required.\");\r\n    //if the initial test result === reactive/yes then confirmatory test should be compulsory\r\n    initialTest1.result === \"Yes\" &&\r\n      (temp.confirmatoryTestdate = confirmatoryTest.date\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n    //if comfirmatory date is filled then the result is compulsory\r\n    confirmatoryTest.date !== \"\" &&\r\n      (temp.confirmatoryTestresult = confirmatoryTest.result\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n    //if confirmatory test =reactive the  Retesting is compulsory\r\n    confirmatoryTest.result === \"Yes\" &&\r\n      (temp.retestingDate = initialTest12.date2\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n    initialTest12.date2 !== \"\" &&\r\n      (temp.retestingResult = initialTest12.result2\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n    //if confirmatory test = non-reactive the  Retesting is compulsory\r\n  confirmatoryTest.result === \"No\" &&\r\n    (temp.tieBreakerDate = tieBreakerTest.date\r\n      ? \"\"\r\n      : \"This field is required.\");\r\n\r\n\r\n   tieBreakerTest.date !== \"\" &&\r\n     (temp.tieBreakerResult = tieBreakerTest.result\r\n       ? \"\"\r\n       : \"This field is required.\"); \r\n       \r\n  //if retesting = reactive then confirmatory 2 should be compulsory  \r\n  initialTest12.result2 === \"Yes\" &&\r\n    (temp.confirmatoryTest2Date = confirmatoryTest2.date2\r\n      ? \"\"\r\n      : \"This field is required.\");\r\n\r\n   confirmatoryTest2.date2 !== \"\" &&\r\n     (temp.confirmatoryTest2Result = confirmatoryTest2.result2\r\n       ? \"\"\r\n       : \"This field is required.\"); \r\n  \r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n\r\n\r\n\r\n  // track and set final result\r\n  useEffect(() => {\r\n    let result = \"\";\r\n\r\n    if (initialTest1.result === \"No\") {\r\n      result = \"Negative\";\r\n    } else if (\r\n      confirmatoryTest.result === \"No\" &&\r\n      tieBreakerTest.result === \"No\" &&\r\n      (initialTest1.result === \"Yes\" || initialTest1.result !== \"\")\r\n    ) {\r\n      result = \"Negative\";\r\n    } else if (\r\n      initialTest1.result === \"Yes\" &&\r\n      confirmatoryTest.result === \"No\" &&\r\n      tieBreakerTest.result === \"Yes\" &&\r\n      initialTest12.result2 === \"Yes\" &&\r\n      confirmatoryTest2.result2 === \"Yes\"\r\n    ) {\r\n      result = \"Negative\";\r\n    } else if (\r\n      initialTest1.result === \"Yes\" &&\r\n      confirmatoryTest.result === \"Yes\" &&\r\n      initialTest12.result2 === \"Yes\" &&\r\n      confirmatoryTest2.result2 === \"Yes\"\r\n    ) {\r\n      result = \"Positive\";\r\n    } else if (\r\n      initialTest1.result === \"Yes\" &&\r\n      confirmatoryTest.result === \"No\" &&\r\n      tieBreakerTest.result === \"Yes\" &&\r\n      initialTest12.result2 === \"Yes\" &&\r\n      confirmatoryTest2.result2 === \"Yes\"\r\n    ) {\r\n      result = \"Positive\";\r\n    } else if (\r\n      initialTest1.result === \"Yes\" &&\r\n      confirmatoryTest.result === \"Yes\" &&\r\n      initialTest12.result2 === \"Yes\" &&\r\n      confirmatoryTest2.result2 === \"No\" &&\r\n      tieBreakerTest2.result2 === \"No\"\r\n    ) {\r\n      result = \"Negative\";\r\n    } else if (\r\n      initialTest1.result === \"Yes\" &&\r\n      confirmatoryTest.result === \"No\" &&\r\n      tieBreakerTest.result === \"Yes\" &&\r\n      initialTest12.result2 === \"Yes\" &&\r\n      confirmatoryTest2.result2 === \"No\" &&\r\n      tieBreakerTest2.result2 === \"No\"\r\n    ) {\r\n      result = \"Negative\";\r\n    } else if (\r\n      initialTest1.result === \"Yes\" &&\r\n      confirmatoryTest.result === \"Yes\" &&\r\n      initialTest12.result2 === \"Yes\" &&\r\n      confirmatoryTest2.result2 === \"No\" &&\r\n      tieBreakerTest2.result2 === \"Yes\"\r\n    ) {\r\n      result = \"Positive\";\r\n    }\r\n    setFinalResult(result);\r\n  }, [\r\n    initialTest1.result,\r\n    confirmatoryTest.result,\r\n    tieBreakerTest.result,\r\n    initialTest12.result2,\r\n    confirmatoryTest2.result2,\r\n    tieBreakerTest2.result2,\r\n  ]);\r\n  // clear the all other fields if there changes in initialTest1 result is changes\r\n  // useEffect(() => {\r\n  //   setConfirmatoryTest({\r\n  //     date: \"\",\r\n  //     result: \"\",\r\n  //   });\r\n  //   setTieBreakerTest({\r\n  //     date: \"\",\r\n  //     result: \"\",\r\n  //   });\r\n  //   setInitailTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setConfirmatoryTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setTieBreakerTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   // clear the prepOffered and prepAccepted fields\r\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\r\n  // }, [initialTest1.result]);\r\n\r\n  // clear the all other the input fields that follows the initialTest2, if there changes in initialTest12 result is changes\r\n\r\n  // useEffect(() => {\r\n  //   setTieBreakerTest({\r\n  //     date: \"\",\r\n  //     result: \"\",\r\n  //   });\r\n  //   setInitailTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setConfirmatoryTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setTieBreakerTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\r\n  // }, [confirmatoryTest.result]);\r\n\r\n  // clear all the input fields that follows the confirmatoryTest, if there changes in confirmatoryTest result is changes.\r\n  // useEffect(() => {\r\n  //   setInitailTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n\r\n  //   setConfirmatoryTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n\r\n  //   setTieBreakerTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\r\n  // }, [tieBreakerTest.result]);\r\n\r\n  // useEffect(() => {\r\n  //   setConfirmatoryTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setTieBreakerTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\r\n  // }, [initialTest12.result2]);\r\n\r\n  // useEffect(() => {\r\n  //   setTieBreakerTest2({\r\n  //     date2: \"\",\r\n  //     result2: \"\",\r\n  //   });\r\n  //   setObjValues({ ...objValues, prepOffered: \"\", prepAccepted: \"\" });\r\n  // }, [confirmatoryTest2.result2]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n\r\n    //GET NEXT FORM\r\n    let latestForm = getNextForm(\r\n      \"request_and_result_form\",\r\n      objValues.age,\r\n      \"\",\r\n      \"unknown\"\r\n    );\r\n        //SUBMIT FORM\r\n\r\n    if (validate()) {\r\n\r\n    if (finalResult === \"\") {\r\n      toast.error(\"Final result is required for submission.\");\r\n      return;\r\n    }\r\n\r\n      //logic to get Hiv result test\r\n      if (initialTest12.result2 === \"No\") {\r\n        objValues.hivTestResult2 = \"Negative\";\r\n      } else if (\r\n        initialTest12.result2 === \"Yes\" &&\r\n        confirmatoryTest2.result2 === \"Yes\"\r\n      ) {\r\n        objValues.hivTestResult2 = \"Positive\";\r\n      }\r\n      // else if(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2===''){\r\n      //     objValues.hivTestResult2=\"Negative\"\r\n      // }\r\n      else if (\r\n        confirmatoryTest2.result2 === \"No\" &&\r\n        tieBreakerTest2.result2 === \"Yes\"\r\n      ) {\r\n        objValues.hivTestResult2 = \"Positive\";\r\n      } else if (\r\n        confirmatoryTest2.result2 === \"No\" &&\r\n        tieBreakerTest2.result2 === \"No\"\r\n      ) {\r\n        objValues.hivTestResult2 = \"Negative\";\r\n      } else {\r\n        objValues.hivTestResult2 = \"\";\r\n      }\r\n\r\n      if (initialTest1.result === \"No\") {\r\n        objValues.hivTestResult = \"Negative\";\r\n      } else if (\r\n        initialTest1.result === \"Yes\" &&\r\n        confirmatoryTest.result === \"Yes\"\r\n      ) {\r\n        objValues.hivTestResult = \"Positive\";\r\n      }\r\n      // else if(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result===''){\r\n      //     objValues.hivTestResult=\"Negative\"\r\n      // }\r\n      else if (\r\n        confirmatoryTest.result === \"No\" &&\r\n        tieBreakerTest.result === \"Yes\"\r\n      ) {\r\n        objValues.hivTestResult = \"Positive\";\r\n      } else if (\r\n        confirmatoryTest.result === \"No\" &&\r\n        tieBreakerTest.result === \"No\"\r\n      ) {\r\n        objValues.hivTestResult = \"Negative\";\r\n      } else {\r\n        objValues.hivTestResult = \"\";\r\n      }\r\n      objValues.htsClientId = clientId;\r\n      objValues.confirmatoryTest = confirmatoryTest;\r\n      objValues.confirmatoryTest2 = confirmatoryTest2;\r\n      objValues.personId = patientID;\r\n      objValues.test1 = initialTest1;\r\n      objValues.test2 = initialTest12;\r\n      objValues.tieBreakerTest = tieBreakerTest;\r\n      objValues.tieBreakerTest2 = tieBreakerTest2;\r\n      objValues.syphilisTesting = syphills;\r\n      objValues.hepatitisTesting = hepatitis;\r\n\r\n      objValues.cd4 = cd4Count;\r\n      objValues.others = others;\r\n      setSaving(true);\r\n      axios\r\n        .put(`${baseUrl}hts/${clientId}/request-result`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          props.setPatientObj(response.data);\r\n      \r\n          handleItemClick(latestForm[0], latestForm[1]);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>REQUEST AND RESULT FORM</h2>\r\n          <form>\r\n            <div className=\"row\">\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h4 style={{ color: \"#fff\" }}>HIV TEST RESULT</h4>\r\n              </LabelRibbon>\r\n              <br />\r\n              <div className=\"form-group  col-md-2\"></div>\r\n              <h4>Initial Test : </h4>\r\n              <div className=\"form-group mb-3 col-md-5\">\r\n                <FormGroup>\r\n                  <Label for=\"\"> Date </Label>\r\n                  <Input\r\n                    type=\"date\"                  \r\n                    onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                    name=\"date\"\r\n                    id=\"initialDate\"\r\n                    value={initialTest1.date}\r\n                    onChange={handleInputChangeInitial}\r\n                    min={props?.patientObj?.dateVisit}\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                    required\r\n                  />\r\n                  {errors.initialDate !== \"\" ? (\r\n                    <span className={classes.error}>{errors.initialDate}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {initialTest1.date && (\r\n                <div className=\"form-group  col-md-5\">\r\n                  <FormGroup>\r\n                    <Label>Result </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"result\"\r\n                      id=\"initialResult\"\r\n                      value={initialTest1.result}\r\n                      onChange={handleInputChangeInitial}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={initialTest1.date === \"\" ? true : false}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"Yes\">Reactive</option>\r\n                      <option value=\"No\">Non Reactive</option>\r\n                    </select>\r\n                    {errors.initialResult !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.initialResult}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              <div className=\"form-group  col-md-2\"></div>\r\n              {initialTest1.result === \"Yes\" && (\r\n                <>\r\n                  <h4>Confirmatory Test:</h4>\r\n                  <div className=\"form-group mb-3 col-md-5\">\r\n                    <FormGroup>\r\n                      <Label for=\"\"> Date </Label>\r\n                      <Input\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"date\"\r\n                        id=\"confirmatoryTestdate\"\r\n                        value={confirmatoryTest.date}\r\n                        onChange={handleInputChangeConfirmatory}\r\n                        min={initialTest1.date}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        required\r\n                      />\r\n                      {errors.confirmatoryTestdate !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.confirmatoryTestdate}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {confirmatoryTest.date && (\r\n                    <div className=\"form-group  col-md-5\">\r\n                      <FormGroup>\r\n                        <Label>Result </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"result\"\r\n                          id=\"confirmatoryTestresult\"\r\n                          value={confirmatoryTest.result}\r\n                          onChange={handleInputChangeConfirmatory}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={confirmatoryTest.date === \"\" ? true : false}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"Yes\">Reactive</option>\r\n                          <option value=\"No\">Non Reactive</option>\r\n                        </select>\r\n                        {errors.confirmatoryTestresult !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.confirmatoryTestresult}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                  <div className=\"form-group  col-md-2\"></div>\r\n                </>\r\n              )}\r\n              {confirmatoryTest.result === \"No\" && (\r\n                <>\r\n                  <h4>Tie Breaker Test:</h4>\r\n                  <div className=\"form-group mb-3 col-md-5\">\r\n                    <FormGroup>\r\n                      <Label for=\"\"> Date </Label>\r\n                      <Input\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"date\"\r\n                        id=\"tieBreakerDate\"\r\n                        value={tieBreakerTest.date}\r\n                        onChange={handleInputChangeTie}\r\n                        min={confirmatoryTest.date}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        required\r\n                      />\r\n                      {errors.tieBreakerDate !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.tieBreakerDate}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {tieBreakerTest.date && (\r\n                    <div className=\"form-group  col-md-5\">\r\n                      <FormGroup>\r\n                        <Label>Result </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"result\"\r\n                          id=\"tieBreakerResult\"\r\n                          value={tieBreakerTest.result}\r\n                          onChange={handleInputChangeTie}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={tieBreakerTest.date === \"\" ? true : false}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"Yes\">Reactive</option>\r\n                          <option value=\"No\">Non Reactive</option>\r\n                        </select>\r\n                        {errors.tieBreakerResult !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.tieBreakerResult}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                  <div className=\"form-group  col-md-2\"></div>\r\n                </>\r\n              )}\r\n              <div className=\"row\">\r\n                <div className=\"form-group  col-md-12\">\r\n                  {initialTest1.result === \"No\" && (\r\n                    <>\r\n                      <b> Result : </b>\r\n                      <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\r\n                      <b> Final Result : </b>\r\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\r\n                      <br />\r\n                    </>\r\n                  )}\r\n                  {initialTest1.result === \"No\" &&\r\n                    confirmatoryTest.result === \"No\" && (\r\n                      <>\r\n                        <b> Result : </b>\r\n                        <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\r\n                      </>\r\n                    )}\r\n\r\n                  {initialTest1.result === \"Yes\" &&\r\n                    confirmatoryTest.result === \"Yes\" && (\r\n                      <>\r\n                        <b> Result : </b>\r\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\r\n                        <br />\r\n                        <hr />\r\n                        <div className=\"row\">\r\n                          <h4>RETESTING:</h4>\r\n                          <div className=\"form-group mb-3 col-md-5\">\r\n                            <FormGroup>\r\n                              <Label for=\"\"> Date </Label>\r\n                              <Input\r\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                name=\"date2\"\r\n                                id=\"retestingDate\"\r\n                                value={initialTest12.date2}\r\n                                onChange={handleInputChangeInitial2}\r\n                                min={confirmatoryTest.date}\r\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.25rem\",\r\n                                }}\r\n                                required\r\n                              />\r\n                              {errors.retestingDate !== \"\" ? (\r\n                                <span className={classes.error}>\r\n                                  {errors.retestingDate}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </div>\r\n\r\n                          <div className=\"form-group  col-md-5\">\r\n                            <FormGroup>\r\n                              <Label>Result </Label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                name=\"result2\"\r\n                                id=\"retestingResult\"\r\n                                value={initialTest12.result2}\r\n                                onChange={handleInputChangeInitial2}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                                disabled={\r\n                                  initialTest12.date2 === \"\" ? true : false\r\n                                }\r\n                              >\r\n                                <option value={\"\"}></option>\r\n                                <option value=\"Yes\">Reactive</option>\r\n                                <option value=\"No\">Non Reactive</option>\r\n                              </select>\r\n                              {errors.retestingResult !== \"\" ? (\r\n                                <span className={classes.error}>\r\n                                  {errors.retestingResult}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </div>\r\n\r\n                          <div className=\"form-group  col-md-2\"></div>\r\n                          {initialTest12.result2 === \"Yes\" && (\r\n                            <>\r\n                              <h4>Confirmatory Test 2:</h4>\r\n                              <div className=\"form-group mb-3 col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label for=\"\"> Date </Label>\r\n                                  <Input\r\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                    name=\"date2\"\r\n                                    id=\"confirmatoryTest2Date\"\r\n                                    value={confirmatoryTest2.date2}\r\n                                    onChange={handleInputChangeConfirmatory2}\r\n                                    min={initialTest12.date2}\r\n                                    max={moment(new Date()).format(\r\n                                      \"YYYY-MM-DD\"\r\n                                    )}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.25rem\",\r\n                                    }}\r\n                                    required\r\n                                  />\r\n                                  {errors.confirmatoryTest2Date !== \"\" ? (\r\n                                    <span className={classes.error}>\r\n                                      {errors.confirmatoryTest2Date}\r\n                                    </span>\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n                              <div className=\"form-group  col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label>Result </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"result2\"\r\n                                    id=\"confirmatoryTest2Result\"\r\n                                    value={confirmatoryTest2.result2}\r\n                                    onChange={handleInputChangeConfirmatory2}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    disabled={\r\n                                      confirmatoryTest2.date2 === \"\"\r\n                                        ? true\r\n                                        : false\r\n                                    }\r\n                                  >\r\n                                    <option value={\"\"}></option>\r\n                                    <option value=\"Yes\">Reactive</option>\r\n                                    <option value=\"No\">Non Reactive</option>\r\n                                  </select>\r\n                                </FormGroup>\r\n                                {errors.confirmatoryTest2Result !== \"\" ? (\r\n                                  <span className={classes.error}>\r\n                                    {errors.confirmatoryTest2Result}\r\n                                  </span>\r\n                                ) : (\r\n                                  \"\"\r\n                                )}\r\n                              </div>\r\n                              <div className=\"form-group  col-md-2\"></div>\r\n                            </>\r\n                          )}\r\n                          {confirmatoryTest2.result2 === \"No\" && (\r\n                            <>\r\n                              <h4>Tie Breaker Test 2:</h4>\r\n                              <div className=\"form-group mb-3 col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label for=\"\"> Date </Label>\r\n                                  <Input\r\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                    name=\"date2\"\r\n                                    id=\"tieBreaker2Date\"\r\n                                    value={tieBreakerTest2.date2}\r\n                                    onChange={handleInputChangeTie2}\r\n                                    min={confirmatoryTest2.date2}\r\n                                    max={moment(new Date()).format(\r\n                                      \"YYYY-MM-DD\"\r\n                                    )}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.25rem\",\r\n                                    }}\r\n                                    required\r\n                                  />\r\n                                        {errors.tieBreaker2Date !== \"\" ? (\r\n                                    <span className={classes.error}>\r\n                                      {errors.tieBreaker2Date}\r\n                                    </span>\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n                              <div className=\"form-group  col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label>Result </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"result2\"\r\n                                    id=\"result2\"\r\n                                    value={tieBreakerTest2.result2}\r\n                                    onChange={handleInputChangeTie2}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    disabled={\r\n                                      tieBreakerTest2.date2 === \"\"\r\n                                        ? true\r\n                                        : false\r\n                                    }\r\n                                  >\r\n                                    <option value={\"\"}></option>\r\n                                    <option value=\"Yes\">Reactive</option>\r\n                                    <option value=\"No\">Non Reactive</option>\r\n                                  </select>\r\n                                  {errors.tieBreaker2Result !== \"\" ? (\r\n                                    <span className={classes.error}>\r\n                                      {errors.tieBreaker2Result}\r\n                                    </span>\r\n                                  ) : (\r\n                                    \"\"\r\n                                  )}\r\n                                </FormGroup>\r\n                              </div>\r\n                              <div className=\"form-group  col-md-2\"></div>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  {/* This is result for Test 1 */}\r\n                  {/* {(initialTest1.result==='Yes' && confirmatoryTest.result==='No' && tieBreakerTest.result==='' ) && (\r\n                                    <LabelRibbon color=\"green\" >\r\n                                        Negative\r\n                                    </LabelRibbon>\r\n                                )} */}\r\n                  {confirmatoryTest.result === \"No\" &&\r\n                    tieBreakerTest.result === \"Yes\" && (\r\n                      <>\r\n                        <b> Result : </b>\r\n                        <LabelRibbon color=\"red\">Reactive</LabelRibbon>\r\n                        <br />\r\n                        <hr />\r\n\r\n                        <div className=\"row\">\r\n                          <h4>Retesting:</h4>\r\n                          <div className=\"form-group mb-3 col-md-5\">\r\n                            <FormGroup>\r\n                              <Label for=\"\"> Date </Label>\r\n                              <Input\r\n                                type=\"date\"                     \r\n                                \r\n                                onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                name=\"date2\"\r\n                                id=\"retestingDate\"\r\n                                value={initialTest12.date2}\r\n                                onChange={handleInputChangeInitial2}\r\n                                min={tieBreakerTest.date}\r\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.25rem\",\r\n                                }}\r\n                                required\r\n                              />\r\n                              {errors.retestingDate !== \"\" ? (\r\n                                <span className={classes.error}>\r\n                                  {errors.retestingDate}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </div>\r\n                          <div className=\"form-group  col-md-5\">\r\n                            <FormGroup>\r\n                              <Label>Result </Label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                name=\"result2\"\r\n                                id=\"retestingResult\"\r\n                                value={initialTest12.result2}\r\n                                onChange={handleInputChangeInitial2}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                                disabled={\r\n                                  initialTest12.date2 === \"\" ? true : false\r\n                                }\r\n                              >\r\n                                <option value={\"\"}></option>\r\n                                <option value=\"Yes\">Reactive</option>\r\n                                <option value=\"No\">Non Reactive</option>\r\n                              </select>\r\n                              {errors.result2 !== \"\" ? (\r\n                                <span className={classes.error}>\r\n                                  {errors.result2}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </div>\r\n                          <div className=\"form-group  col-md-2\"></div>\r\n                          {initialTest12.result2 === \"Yes\" && (\r\n                            <>\r\n                              <h4>Confirmatory Test 2:</h4>\r\n                              <div className=\"form-group mb-3 col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label for=\"\"> Date </Label>\r\n                                  <Input\r\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                    name=\"date2\"\r\n                                    id=\"date2\"\r\n                                    value={confirmatoryTest2.date2}\r\n                                    onChange={handleInputChangeConfirmatory2}\r\n                                    min={initialTest12.date2}\r\n                                    max={moment(new Date()).format(\r\n                                      \"YYYY-MM-DD\"\r\n                                    )}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.25rem\",\r\n                                    }}\r\n                                    required\r\n                                  />\r\n                                </FormGroup>\r\n                              </div>\r\n                              <div className=\"form-group  col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label>Result </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"result2\"\r\n                                    id=\"result2\"\r\n                                    value={confirmatoryTest2.result2}\r\n                                    onChange={handleInputChangeConfirmatory2}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    disabled={\r\n                                      confirmatoryTest2.date2 === \"\"\r\n                                        ? true\r\n                                        : false\r\n                                    }\r\n                                  >\r\n                                    <option value={\"\"}></option>\r\n                                    <option value=\"Yes\">Reactive</option>\r\n                                    <option value=\"No\">Non Reactive</option>\r\n                                  </select>\r\n                                </FormGroup>\r\n                              </div>\r\n                              <div className=\"form-group  col-md-2\"></div>\r\n                            </>\r\n                          )}\r\n                          {confirmatoryTest2.result2 === \"No\" && (\r\n                            <>\r\n                              <h4>Tie Breaker Test 2:</h4>\r\n                              <div className=\"form-group mb-3 col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label for=\"\"> Date </Label>\r\n                                  <Input\r\n                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                    name=\"date2\"\r\n                                    id=\"date2\"\r\n                                    value={tieBreakerTest2.date2}\r\n                                    onChange={handleInputChangeTie2}\r\n                                    min={confirmatoryTest2.date2}\r\n                                    max={moment(new Date()).format(\r\n                                      \"YYYY-MM-DD\"\r\n                                    )}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.25rem\",\r\n                                    }}\r\n                                    required\r\n                                  />\r\n                                </FormGroup>\r\n                              </div>\r\n                              <div className=\"form-group  col-md-5\">\r\n                                <FormGroup>\r\n                                  <Label>Result </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"result2\"\r\n                                    id=\"result2\"\r\n                                    value={tieBreakerTest2.result2}\r\n                                    onChange={handleInputChangeTie2}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                    disabled={\r\n                                      tieBreakerTest2.date2 === \"\"\r\n                                        ? true\r\n                                        : false\r\n                                    }\r\n                                  >\r\n                                    <option value={\"\"}></option>\r\n                                    <option value=\"Yes\">Reactive</option>\r\n                                    <option value=\"No\">Non Reactive</option>\r\n                                  </select>\r\n                                </FormGroup>\r\n                              </div>\r\n                              <div className=\"form-group  col-md-2\"></div>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  {errors.prepOffered !== \"\" ? (\r\n                    <span className={classes.error}>{errors.prepOffered}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                  {errors.prepAccepted !== \"\" ? (\r\n                    <span className={classes.error}>{errors.prepAccepted}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n\r\n                  {confirmatoryTest.result === \"No\" &&\r\n                    tieBreakerTest.result === \"No\" &&\r\n                    (initialTest1.result === \"Yes\" ||\r\n                      initialTest1.result !== \"\") && (\r\n                      <>\r\n                        <>\r\n                          <b> Result : </b>\r\n                          <LabelRibbon color=\"green\">Non Reactive</LabelRibbon>\r\n                          <b> Final Result : </b>\r\n                          <LabelRibbon color=\"green\"> Negative</LabelRibbon>\r\n                        </>\r\n                        <br />\r\n                        <div className=\"row\">\r\n                          <div className=\"form-group  col-md-6\">\r\n                            <FormGroup>\r\n                              <Label>\r\n                                Prep Offered{\" \"}\r\n                                <span style={{ color: \"red\" }}> *</span>\r\n                              </Label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                name=\"prepOffered\"\r\n                                id=\"prepOffered\"\r\n                                value={objValues.prepOffered}\r\n                                onChange={handleInputChange}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                              >\r\n                                <option value={\"\"}></option>\r\n                                <option value=\"true\">Yes</option>\r\n                                <option value=\"false\">No</option>\r\n                              </select>\r\n                            </FormGroup>\r\n                          </div>\r\n                          {objValues.prepOffered !== \"\" &&\r\n                            objValues.prepOffered === \"true\" && (\r\n                              <div className=\"form-group  col-md-6\">\r\n                                <FormGroup>\r\n                                  <Label>\r\n                                    Prep Accepted{\" \"}\r\n                                    <span style={{ color: \"red\" }}> *</span>\r\n                                  </Label>\r\n                                  <select\r\n                                    className=\"form-control\"\r\n                                    name=\"prepAccepted\"\r\n                                    id=\"prepAccepted\"\r\n                                    value={objValues.prepAccepted}\r\n                                    onChange={handleInputChange}\r\n                                    style={{\r\n                                      border: \"1px solid #014D88\",\r\n                                      borderRadius: \"0.2rem\",\r\n                                    }}\r\n                                  >\r\n                                    <option value={\"\"}></option>\r\n                                    <option value=\"true\">Yes</option>\r\n                                    <option value=\"false\">No</option>\r\n                                  </select>\r\n                                </FormGroup>\r\n                              </div>\r\n                            )}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  {/* END of  result for Test 1 */}\r\n                  {/* This is result for Test 2 */}\r\n                  {initialTest12.result2 === \"No\" && (\r\n                    <>\r\n                      <b> Final Result : </b>\r\n                      <LabelRibbon color=\"green\">Negative</LabelRibbon>\r\n                      <br />\r\n                      <br />\r\n                      <div className=\"row\">\r\n                        <div className=\"form-group  col-md-5\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Prep Offered{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"prepOffered\"\r\n                              id=\"prepOffered\"\r\n                              value={objValues.prepOffered}\r\n                              onChange={handleInputChange}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                          </FormGroup>\r\n                        </div>\r\n                        {objValues.prepOffered !== \"\" &&\r\n                          objValues.prepOffered === \"true\" && (\r\n                            <div className=\"form-group  col-md-5\">\r\n                              <FormGroup>\r\n                                <Label>\r\n                                  Prep Accepted{\" \"}\r\n                                  <span style={{ color: \"red\" }}> *</span>\r\n                                </Label>\r\n                                <select\r\n                                  className=\"form-control\"\r\n                                  name=\"prepAccepted\"\r\n                                  id=\"prepAccepted\"\r\n                                  value={objValues.prepAccepted}\r\n                                  onChange={handleInputChange}\r\n                                  style={{\r\n                                    border: \"1px solid #014D88\",\r\n                                    borderRadius: \"0.2rem\",\r\n                                  }}\r\n                                >\r\n                                  <option value={\"\"}></option>\r\n                                  <option value=\"true\">Yes</option>\r\n                                  <option value=\"false\">No</option>\r\n                                </select>\r\n                              </FormGroup>\r\n                            </div>\r\n                          )}\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                  {initialTest12.result2 === \"No\" &&\r\n                    confirmatoryTest2.result2 === \"No\" && (\r\n                      <>\r\n                        <b> FinalnResult : </b>\r\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\r\n                      </>\r\n                    )}\r\n\r\n                  {initialTest12.result2 === \"Yes\" &&\r\n                    confirmatoryTest2.result2 === \"Yes\" && (\r\n                      <>\r\n                        <b> Final Result : </b>\r\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\r\n                        <br />\r\n                      </>\r\n                    )}\r\n                  {/* {(initialTest12.result2==='Yes' && confirmatoryTest2.result2==='No' && tieBreakerTest2.result2==='' ) && (\r\n                                    <LabelRibbon color=\"green\" >\r\n                                        Negative\r\n                                    </LabelRibbon>\r\n                                )} */}\r\n                  {confirmatoryTest2.result2 === \"No\" &&\r\n                    tieBreakerTest2.result2 === \"Yes\" && (\r\n                      <>\r\n                        <b>Final Result : </b>\r\n                        <LabelRibbon color=\"red\">Positive</LabelRibbon>\r\n                      </>\r\n                    )}\r\n                  {confirmatoryTest2.result2 === \"No\" &&\r\n                    tieBreakerTest2.result2 === \"No\" &&\r\n                    (initialTest12.result2 === \"Yes\" ||\r\n                      initialTest12.result2 === \"Yes\" ||\r\n                      initialTest12.result2 === \"\") && (\r\n                      <>\r\n                        <b>Final Result : </b>\r\n                        <LabelRibbon color=\"green\">Negative</LabelRibbon>\r\n                      </>\r\n                    )}\r\n\r\n                  {/* END of  result for Test 2*/}\r\n                </div>\r\n              </div>\r\n              {initialTest1.result === \"No\" && (\r\n                <>\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Prep Offered <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"prepOffered\"\r\n                          id=\"prepOffered\"\r\n                          value={objValues.prepOffered}\r\n                          onChange={handleInputChange}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </div>\r\n                    {objValues.prepOffered !== \"\" &&\r\n                      objValues.prepOffered === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Prep Accepted{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"prepAccepted\"\r\n                              id=\"prepAccepted\"\r\n                              value={objValues.prepAccepted}\r\n                              onChange={handleInputChange}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                  </div>\r\n                </>\r\n              )}\r\n              {confirmatoryTest2.result2 === \"No\" &&\r\n                tieBreakerTest2.result2 === \"No\" && (\r\n                  <>\r\n                    <div className=\"row\">\r\n                      <div className=\"form-group  col-md-6\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Prep Offered{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"prepOffered\"\r\n                            id=\"prepOffered\"\r\n                            value={objValues.prepOffered}\r\n                            onChange={handleInputChange}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                        </FormGroup>\r\n                      </div>\r\n                      {objValues.prepOffered !== \"\" &&\r\n                        objValues.prepOffered === \"true\" && (\r\n                          <div className=\"form-group  col-md-6\">\r\n                            <FormGroup>\r\n                              <Label>\r\n                                Prep Accepted{\" \"}\r\n                                <span style={{ color: \"red\" }}> *</span>\r\n                              </Label>\r\n                              <select\r\n                                className=\"form-control\"\r\n                                name=\"prepAccepted\"\r\n                                id=\"prepAccepted\"\r\n                                value={objValues.prepAccepted}\r\n                                onChange={handleInputChange}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                              >\r\n                                <option value={\"\"}></option>\r\n                                <option value=\"true\">Yes</option>\r\n                                <option value=\"false\">No</option>\r\n                              </select>\r\n                            </FormGroup>\r\n                          </div>\r\n                        )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              {showCD4Count && (\r\n                <>\r\n                  <LabelRibbon\r\n                    as=\"a\"\r\n                    color=\"blue\"\r\n                    style={{ width: \"106%\", height: \"35px\" }}\r\n                    ribbon\r\n                  >\r\n                    <h5 style={{ color: \"#fff\" }}>CD4 Count</h5>\r\n                  </LabelRibbon>\r\n                  <br /> <br />\r\n                  <div className=\"form-group  col-md-5\">\r\n                    <FormGroup>\r\n                      <Label>CD4 Count </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"cd4Count\"\r\n                        id=\"cd4Count\"\r\n                        value={cd4Count.cd4Count}\r\n                        onChange={handleInputChangeCd4Count}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"Semi-Quantitative\">\r\n                          Semi-Quantitative\r\n                        </option>\r\n                        <option value=\"Flow Cyteometry\">Flow cytometry</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  {cd4Count.cd4Count === \"Semi-Quantitative\" && (\r\n                    <div className=\"form-group  col-md-5\">\r\n                      <FormGroup>\r\n                        <Label>CD4 Count Value</Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"cd4SemiQuantitative\"\r\n                          id=\"cd4SemiQuantitative\"\r\n                          value={cd4Count.cd4SemiQuantitative}\r\n                          onChange={handleInputChangeCd4Count}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"<200\">{\"<200\"}</option>\r\n                          <option value=\">=200\">{\">=200\"}</option>\r\n                        </select>\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                  {cd4Count.cd4Count === \"Flow Cyteometry\" && (\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                        <Label for=\"\">CD4 Count Value</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"cd4FlowCyteometry\"\r\n                          id=\"cd4FlowCyteometry\"\r\n                          value={cd4Count.cd4FlowCyteometry}\r\n                          onChange={handleInputChangeCd4Count}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.25rem\",\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                  <div className=\"form-group  col-md-7\"></div>\r\n                </>\r\n              )}\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h5 style={{ color: \"#fff\" }}>Syphilis Testing</h5>\r\n              </LabelRibbon>\r\n              <br /> <br />\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Syphilis test result <span style={{ color: \"red\" }}> </span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"syphilisTestResult\"\r\n                    id=\"syphilisTestResult\"\r\n                    value={syphills.syphilisTestResult}\r\n                    onChange={handleInputChangeSyphills}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"Yes\">Reactive</option>\r\n                    <option value=\"No\">Non-Reactive</option>\r\n                  </select>\r\n                  {errors.syphilisTestResult !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.syphilisTestResult}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h5 style={{ color: \"#fff\" }}>Hepatitis Testing</h5>\r\n              </LabelRibbon>\r\n              <br /> <br />\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Hepatitis B virus test result{\" \"}\r\n                    <span style={{ color: \"red\" }}> </span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hepatitisBTestResult\"\r\n                    id=\"hepatitisBTestResult\"\r\n                    value={hepatitis.hepatitisBTestResult}\r\n                    onChange={handleInputChangeHepatitis}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"Yes\">Positive</option>\r\n                    <option value=\"No\">Negative</option>\r\n                  </select>\r\n                  {errors.hepatitisBTestResult !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.hepatitisBTestResult}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Hepatitis C virus test result{\" \"}\r\n                    <span style={{ color: \"red\" }}> </span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hepatitisCTestResult\"\r\n                    id=\"hepatitisCTestResult\"\r\n                    value={hepatitis.hepatitisCTestResult}\r\n                    onChange={handleInputChangeHepatitis}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"Yes\">Positive</option>\r\n                    <option value=\"No\">Negative</option>\r\n                  </select>\r\n                  {errors.hepatitisCTestResult !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.hepatitisCTestResult}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h5 style={{ color: \"#fff\" }}>Others</h5>\r\n              </LabelRibbon>\r\n              <br /> <br />\r\n              {props.patientObj.riskStratificationResponseDto !== null &&\r\n                props.patientObj.riskStratificationResponseDto\r\n                  .communityEntryPoint !== \"\" && (\r\n                  <>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                        <Label for=\"\">Longitude</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"longitude\"\r\n                          id=\"longitude\"\r\n                          value={others.longitude}\r\n                          onChange={handleInputChangeOthers}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.25rem\",\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                        <Label for=\"\">Latitude</Label>\r\n                        <Input\r\n                          type=\"number\"\r\n                          name=\"latitude\"\r\n                          id=\"latitude\"\r\n                          value={others.latitude}\r\n                          onChange={handleInputChangeOthers}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.25rem\",\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              <div className=\"form-group mb-3 col-md-4\">\r\n                <FormGroup>\r\n                  <Label for=\"\">Adhoc Code</Label>\r\n                  <Input\r\n                    type=\"number\"\r\n                    name=\"adhocCode\"\r\n                    id=\"adhocCode\"\r\n                    value={others.adhocCode}\r\n                    onChange={handleInputChangeOthers}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                  />\r\n                </FormGroup>\r\n              </div>\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  {/* {patientAge <= 15 ? (\r\n                    <>\r\n                      <Button\r\n                        content=\"Back\"\r\n                        icon=\"left arrow\"\r\n                        labelPosition=\"left\"\r\n                        style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                        onClick={() => handleItemClick(\"basic\", \"basic\")}\r\n                      />\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Button\r\n                        content=\"Back\"\r\n                        icon=\"left arrow\"\r\n                        labelPosition=\"left\"\r\n                        style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                        onClick={() =>\r\n                          handleItemClick(\r\n                            \"pre-test-counsel\",\r\n                            \"pre-test-counsel\"\r\n                          )\r\n                        }\r\n                      />\r\n                    </>\r\n                  )} */}\r\n\r\n                  <Button\r\n                    content=\"Save & Continue\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HivTestResult;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Others.js",["595","596","597","598","599","600","601","602","603","604"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\n// import {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\n// import {token, url as baseUrl } from \"../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport {Label as LabelRibbon} from 'semantic-ui-react'\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n               \r\n                <h3 >OTHERS - (Resquest {\"& \"} Result Form)</h3>\r\n               <hr/>\r\n                <br/>\r\n                    <form >\r\n                        <div className=\"row\">\r\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h5 style={{color:'#fff'}}>Syphilis Testing</h5>\r\n                        </LabelRibbon>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Syphilis test result *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"syphilisTestResult\"\r\n                                        id=\"syphilisTestResult\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Reactive</option>\r\n                                        <option value=\"No\">Non-Reactive</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <hr/>\r\n                            <br/>\r\n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h5 style={{color:'#fff'}}>Hepatitis B Testing</h5>\r\n                            </LabelRibbon>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Hepatitis B virus test result *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"hepatitisBTestResult\"\r\n                                        id=\"hepatitisBTestResult\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Positive</option>\r\n                                        <option value=\"No\">Negative</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Hepatitis C virus test result *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"hepatitisCTestResult\"\r\n                                        id=\"hepatitisCTestResult\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                       <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Positive</option>\r\n                                        <option value=\"No\">Negative</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>HIV Request and Result form filled with CT Intake Form *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"hivRequestResultCT\"\r\n                                        id=\"hivRequestResultCT\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Completed By</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"completedBy\"\r\n                                    id=\"completedBy\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Longitude</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"longitude\"\r\n                                    id=\"longitude\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Latitude</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"latitude\"\r\n                                    id=\"latitude\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Adhoc Code</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"adhocCode\"\r\n                                    id=\"adhocCode\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                                                      \r\n                            {saving ? <Spinner /> : \"\"}\r\n                            <br />\r\n                            <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <MatButton\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            startIcon={<SaveIcon />}\r\n                            onClick={()=>handleItemClick('basic','others')}\r\n                            style={{backgroundColor:\"#014d88\"}}\r\n                            //disabled={objValues.dateOfEac1===\"\" ? true : false}\r\n                            >\r\n                            {!saving ? (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                            ) : (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                            )}\r\n                            </MatButton>\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                                 \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\FamilyIndexhIstory.js",["605","606","607","608"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../../../api\";\r\nimport { token as token } from \"./../../../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst FamilyIndexHistory = (props) => {\r\n  let history = useHistory();\r\n  const [familyIndexList, setFamilyIndexList] = useState([]);\r\n  const toggle = () => setOpen(!open);\r\n  const [recordSelected, setRecordSelected] = useState({});\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const getListoFFamilyIndexInfo = () => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}hts-family-index-testing/${props.patientObj.id}/hts-client`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setFamilyIndexList([response.data]);\r\n          getListOfFamliyIndices(response.data.uuid);\r\n          props.handleItemClick(\"fit-history\");\r\n        } else {\r\n          setFamilyIndexList([]);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        // console.log(\"Fetch Facilities error\" + e);\r\n      });\r\n  };\r\n\r\n  const convertRelationship = (relationship) => {\r\n    if (relationship === \"FAMILY_RELATIONSHIP_FATHER\") {\r\n      return \"Father\";\r\n    } else if (relationship === \"FAMILY_RELATIONSHIP_MOTHER\") {\r\n      return \"Mother\";\r\n    } else if (relationship === \"FAMILY_RELATIONSHIP_BIOLOGICAL_CHILD\") {\r\n      return \"Child\";\r\n    } else {\r\n      return relationship;\r\n    }\r\n  };\r\n\r\n  const getListOfFamliyIndices = (uuid) => {\r\n    axios\r\n      .get(\r\n        `${baseUrl}hts-family-index-testing/family-index?familyIndexTestingUuid=${uuid}`,\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setFamilyIndexList(response.data);\r\n          props.handleItemClick(\"fit-history\");\r\n        } else {\r\n          setFamilyIndexList([]);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        // console.log(\"Fetch Facilities error\" + e);\r\n      });\r\n  };\r\n  const enrollEllicitedPatient = (row, actionType) => {\r\n    \r\n    let obj = {\r\n      uuid: row.uuid,\r\n      type: \"family\",\r\n      clientCode: props?.patientObj?.clientCode,\r\n    };\r\n    localStorage.setItem(\"index\", JSON.stringify(obj));\r\n\r\n\r\n\r\n    if(history.location.pathname === \"/register-patient\"){\r\n\r\n      props.clearInfo()\r\n \r\n      props.handleItemClick(\"risk\")\r\n \r\n    }else{\r\n      history.push(\"/register-patient\");\r\n    }\r\n\r\n\r\n\r\n  };\r\n  useEffect(() => {\r\n    getListoFFamilyIndexInfo();\r\n  }, [props.patientObj]);\r\n\r\n  const LoadViewPage = (row, actionType) => {\r\n  \r\n\r\n    props.handleItemClick(\"view-fit\");\r\n    props.setSelectedRow(row);\r\n    props.setAction(actionType);\r\n  };\r\n\r\n\r\n\r\n\r\n  const LoadModal = (row) => {\r\n    toggle();\r\n    setRecordSelected(row);\r\n  };\r\n  const LoadDeletePage = (row) => {\r\n    // setSaving(true);\r\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n    axios\r\n      .delete(\r\n        `${baseUrl}hts-family-index-testing/family-index/${recordSelected.id}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        toast.success(\"Record Deleted Successfully\");\r\n        getListoFFamilyIndexInfo();\r\n\r\n        toggle();\r\n      })\r\n      .catch((error) => {\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"form-group mb-3 col-md-12\">\r\n          {console.log(familyIndexList)}\r\n          {\r\n            <Button\r\n              content=\"Add New form\"\r\n              icon=\"left add\"\r\n              labelPosition=\"left\"\r\n              style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n              onClick={() => props.handleItemClick(\"fit\")}\r\n            />\r\n          }\r\n          {/* <Button\r\n            content=\"Done\"\r\n            icon=\"list\"\r\n            labelPosition=\"left\"\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            onClick={() => handleDone()}\r\n          /> */}\r\n        </div>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          // title=''\r\n          columns={[\r\n            { title: \"ID\", field: \"id\" },\r\n            { title: \"Date Of Birth\", field: \"date\" },\r\n            { title: \"family Relationship\", field: \"familyRelationship\" },\r\n            // { title: \"Index Notification\", field: \"indexNotifiation\", filtering: false },\r\n\r\n            { title: \"Actions\", field: \"actions\", filtering: false },\r\n          ]}\r\n          isLoading={props.loading}\r\n          data={familyIndexList.map((row) => ({\r\n            id: row.id,\r\n            date: row.dateOfBirth,\r\n            familyRelationship: convertRelationship(row.familyRelationship),\r\n\r\n            //indexNotifiation:row.indexNotificationServicesElicitation ? \"Filled\":\"Not Filled \",\r\n\r\n            actions: (\r\n              <div>\r\n                <Menu.Menu position=\"right\">\r\n                  <Menu.Item>\r\n                    <div\r\n                      style={{\r\n                        backgroundColor: \"rgb(153,46,98)\",\r\n                        color: \"white\",\r\n                        borderRadius: \"5px\",\r\n                        width: \"100px\",\r\n                      }}\r\n                      primary\r\n                      className=\"px-3 py-2\"\r\n                    >\r\n                      <Dropdown item text=\"Action\">\r\n                        <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                        {row?.isHtsClient === \"No\"&&  \r\n                        <>\r\n                        <Dropdown.Item onClick={() =>\r\n                              enrollEllicitedPatient(row, \"enroll\")\r\n                            }>       \r\n                               <Icon name=\"save\" />\r\n  \r\n                              Enroll\r\n                          </Dropdown.Item>\r\n                          \r\n                          </>}\r\n                          <Dropdown.Item\r\n                            onClick={() => LoadViewPage(row, \"view\")}\r\n                          >\r\n                            {\" \"}\r\n                            <Icon name=\"eye\" />\r\n                            View\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            onClick={() => LoadViewPage(row, \"update\")}\r\n                          >\r\n                            <Icon name=\"edit\" />\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item onClick={() => LoadModal(row)}>\r\n                            <Icon name=\"delete\" />\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                    </div>\r\n                  </Menu.Item>\r\n                </Menu.Menu>\r\n              </div>\r\n            ),\r\n          }))}\r\n          options={{\r\n            toolbar: false,\r\n            search: false,\r\n            headerStyle: {\r\n              //backgroundColor: \"#9F9FA5\",\r\n              color: \"#000\",\r\n            },\r\n            searchFieldStyle: {\r\n              width: \"200%\",\r\n              margingLeft: \"250px\",\r\n            },\r\n            filtering: false,\r\n            exportButton: false,\r\n            searchFieldAlignment: \"left\",\r\n            pageSizeOptions: [10, 20, 100],\r\n            pageSize: 10,\r\n            debounceInterval: 400,\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>\r\n            Are you Sure you want to delete ?\r\n            {/* <b>{row && record.activityName}</b> */}\r\n          </h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => LoadDeletePage(recordSelected)}\r\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            Yes\r\n            {/* {saving === false ? \"Yes\" : \"Deleting...\"} */}\r\n          </Button>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FamilyIndexHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PreTest.js",["609","610","611","612","613","614","615","616","617","618","619"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { checkPregnantPatient } from \"../../../../utility\";\r\nimport {\r\n  FormGroup,\r\n  Label,\r\n  CardBody,\r\n  Spinner,\r\n  Badge,\r\n  Input,\r\n  Form,\r\n} from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport FeedbackModal from \"./FeedbackModal\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PanToolIcon from \"@mui/icons-material/PanTool\";\r\nimport { getCheckModality } from \"../../../../utility\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst BasicInfo = (props) => {\r\n  const [predictionValue, setPredictionValue] = useState(0);\r\n  const [openModal, setOpenModal] = React.useState(false);\r\n  const toggleModal = (event) => {\r\n    event.preventDefault();\r\n    setOpenModal(!openModal);\r\n  };\r\n\r\n  const predictionRanges = (prediction) => {\r\n    if (parseFloat(prediction) < 0.005575358) {\r\n      return <Badge color=\"success\">Low Risk</Badge>;\r\n    } else if (\r\n      parseFloat(prediction) > 0.005575358 &&\r\n      parseFloat(prediction) < 0.02719647\r\n    ) {\r\n      return <Badge color=\"info\">Medium Risk</Badge>;\r\n    } else if (\r\n      parseFloat(prediction) > 0.02719647 &&\r\n      parseFloat(prediction) < 0.08083864\r\n    ) {\r\n      return <Badge color=\"warning\">High Risk</Badge>;\r\n    } else if (parseFloat(prediction) > 0.08083864) {\r\n      return <Badge color=\"danger\">Highest Risk</Badge>;\r\n    } else {\r\n      return <Badge color=\"dark\">No Prediction Result</Badge>;\r\n    }\r\n  };\r\n\r\n  const classes = useStyles();\r\n  //let patientAge=\"\"\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [saving, setSaving] = useState(false);\r\n  const [mlresult, setMlresult] = useState(false);\r\n  const [savingPrediction, setSavingPrediction] = useState(false);\r\n  const [savingResult, setSavingRsult] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  let temp = { ...errors };\r\n  const [modalityCheck, setModalityCheck] = useState(\"\");\r\n\r\n  let dataObj = props.patientObj;\r\n \r\n  const [permissions, setPermission] = useState(\r\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\r\n  );\r\n  const [knowledgeAssessment, setKnowledgeAssessment] = useState({\r\n    previousTestedHIVNegative: \"\",\r\n    timeLastHIVNegativeTestResult: \"\",\r\n    clientPregnant: \"\",\r\n    clientInformHivTransRoutes: \"\",\r\n    clientInformRiskkHivTrans: \"\",\r\n    clientInformPreventingsHivTrans: \"\",\r\n    clientInformPossibleTestResult: \"\",\r\n    informConsentHivTest: \"\",\r\n  });\r\n  const [objValues, setObjValues] = useState({\r\n    htsClientId: clientId,\r\n    knowledgeAssessment: {},\r\n    personId: patientID,\r\n    riskAssessment: {},\r\n    stiScreening: {},\r\n    tbScreening: {},\r\n    sexPartnerRiskAssessment: {},\r\n  });\r\n\r\n  const [riskAssessment, setRiskAssessment] = useState({\r\n    everHadSexualIntercourse: \"\",\r\n    bloodtransInlastThreeMonths: \"\",\r\n    uprotectedSexWithCasualLastThreeMonths: \"\",\r\n    uprotectedSexWithRegularPartnerLastThreeMonths: \"\",\r\n    unprotectedVaginalSex: \"\",\r\n    uprotectedAnalSex: \"\",\r\n    stiLastThreeMonths: \"\",\r\n    sexUnderInfluence: \"\",\r\n    moreThanOneSexPartnerLastThreeMonths: \"\",\r\n    experiencePain: \"\",\r\n    haveSexWithoutCondom: \"\",\r\n    abuseDrug: \"\",\r\n    bloodTransfusion: \"\",\r\n    consistentWeightFeverNightCough: \"\",\r\n    soldPaidVaginalSex: \"\",\r\n    consistentWeightFeverNightCough: \"\",\r\n    soldPaidVaginalSex: \"\",\r\n    haveCondomBurst: \"\",\r\n    mlStatus: \"\",\r\n    mlScore: \"\",\r\n  });\r\n\r\n  const [riskAssessmentPartner, setRiskAssessmentPartner] = useState({\r\n    sexPartnerHivPositive: \"\",\r\n    newDiagnosedHivlastThreeMonths: \"\",\r\n    currentlyArvForPmtct: \"\",\r\n    knowHivPositiveOnArv: \"\",\r\n    knowHivPositiveAfterLostToFollowUp: \"\",\r\n    uprotectedAnalSex: \"\",\r\n  });\r\n\r\n  const [tbScreening, setTbScreening] = useState({\r\n    currentCough: \"\",\r\n    weightLoss: \"\",\r\n    lymphadenopathy: \"\",\r\n    fever: \"\",\r\n    nightSweats: \"\",\r\n  });\r\n\r\n  const [stiScreening, setStiScreening] = useState({\r\n    vaginalDischarge: \"\",\r\n    lowerAbdominalPains: \"\",\r\n    urethralDischarge: \"\",\r\n    complaintsOfScrotal: \"\",\r\n    complaintsGenitalSore: \"\",\r\n  });\r\n\r\n  const [mlResultObj, setMlResultObj] = useState({\r\n    htsClientId: clientId,\r\n    status: \"\",\r\n    score: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (props.patientObj) {\r\n      let knowledgeAsses = props?.patientObj?.knowledgeAssessment;\r\n      setKnowledgeAssessment(\r\n        props.patientObj.knowledgeAssessment &&\r\n          props.patientObj.knowledgeAssessment !== null\r\n          ? props.patientObj.knowledgeAssessment\r\n          : {}\r\n      );\r\n\r\n      if (props?.patientObj?.pregnant) {\r\n        checkPregnantPatient(props.patientObj.pregnant).then((res) => {\r\n        \r\n          setKnowledgeAssessment({\r\n            ...knowledgeAsses,\r\n            clientPregnant: res ? \"true\" : \"false\",\r\n          });\r\n        });\r\n      }\r\n      setRiskAssessment(\r\n        props.patientObj.riskAssessment &&\r\n          props.patientObj.riskAssessment !== null\r\n          ? props.patientObj.riskAssessment\r\n          : {}\r\n      );\r\n      setRiskAssessmentPartner(\r\n        props.patientObj.sexPartnerRiskAssessment &&\r\n          props.patientObj.sexPartnerRiskAssessment !== null\r\n          ? props.patientObj.sexPartnerRiskAssessment\r\n          : {}\r\n      );\r\n      setStiScreening(\r\n        props.patientObj.stiScreening && props.patientObj.stiScreening !== null\r\n          ? props.patientObj.stiScreening\r\n          : {}\r\n      );\r\n      setTbScreening(\r\n        props.patientObj.tbScreening && props.patientObj.tbScreening !== null\r\n          ? props.patientObj.tbScreening\r\n          : {}\r\n      );\r\n\r\n      if (\r\n        props.patientObj.riskStratificationResponseDto &&\r\n        Object.keys(\r\n          props.patientObj.riskStratificationResponseDto.riskAssessment\r\n        ).length !== 0 &&\r\n        props.patientObj.riskAssessment === null\r\n      ) {\r\n        props.patientObj.riskStratificationResponseDto.riskAssessment\r\n          .whatWasTheResult !== \"\" &&\r\n        props.patientObj.riskStratificationResponseDto.riskAssessment\r\n          .whatWasTheResult === \"Positive\"\r\n          ? (knowledgeAssessment.previousTestedHIVNegative = \"false\")\r\n          : (knowledgeAssessment.previousTestedHIVNegative = \"true\");\r\n      } else {\r\n        setRiskAssessment({\r\n          ...riskAssessment,\r\n          ...props.patientObj.riskAssessment,\r\n        });\r\n      }\r\n      knowledgeAssessment.clientPregnant =\r\n        props.patientObj.pregnant === 73 ? \"true\" : \"\";\r\n\r\n      setModalityCheck(\r\n        getCheckModality(\r\n          props.patientObj?.riskStratificationResponseDto?.testingSetting\r\n        )\r\n      );\r\n    }\r\n  }, [props.patientObj]);\r\n\r\n  const handleItemClick = (page, completedMenu) => {\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n    props.handleItemClick(page);\r\n  };\r\n\r\n  const handleInputChangeKnowledgeAssessment = (e) => {\r\n\r\n    setKnowledgeAssessment({\r\n      ...knowledgeAssessment,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const postPredictions = (e) => {\r\n    e.preventDefault();\r\n    setSavingRsult(true);\r\n\r\n    if (dataObj?.riskStratificationResponseDto?.age <= 15) {\r\n      toast.info(`No risk score for client less than 15 years`, {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n      });\r\n    } else {\r\n      let mlData = {\r\n        modelConfigs: {\r\n          debug: \"true\",\r\n          encounterDate: dataObj?.dateVisit,\r\n          facilityId: \"LBgwDTw2C8u\", // TODO: get facility id from database\r\n          modelId: \"hts_v5\",\r\n        },\r\n        variableValues: {\r\n          age:\r\n            dataObj?.riskStratificationResponseDto?.age !== null\r\n              ? dataObj?.riskStratificationResponseDto?.age\r\n              : -1000.0,\r\n          bloodTransfusionInLast3Months:\r\n            dataObj?.riskStratificationResponseDto?.riskAssessment\r\n              ?.lastHivTestBloodTransfusion === \"true\" ||\r\n            riskAssessment.bloodTransfusion === \"true\" ||\r\n            riskAssessment.bloodtransInlastThreeMonths === \"true\"\r\n              ? 1\r\n              : 0,\r\n          clientPregnant:\r\n            dataObj?.pregnant === 73 &&\r\n            dataObj?.personResponseDto?.sex === \"Female\"\r\n              ? 1\r\n              : dataObj?.pregnant === 72 &&\r\n                dataObj?.personResponseDto?.sex === \"Male\"\r\n              ? 0\r\n              : dataObj?.pregnant === 72 &&\r\n                dataObj?.personResponseDto?.sex === \"Female\"\r\n              ? 0\r\n              : dataObj?.pregnant === \"\" &&\r\n                dataObj?.personResponseDto?.sex === \"Female\"\r\n              ? 0\r\n              : -1000,\r\n          everHadSexualIntercourse:\r\n            riskAssessment?.everHadSexualIntercourse === \"true\" ||\r\n            riskAssessment?.soldPaidVaginalSex === \"true\" ||\r\n            riskAssessmentPartner?.uprotectedAnalSex === \"true\" ||\r\n            riskAssessment?.haveCondomBurst === \"true\" ||\r\n            riskAssessment?.haveSexWithoutCondom === \"true\"\r\n              ? 1\r\n              : riskAssessment?.soldPaidVaginalSex === \"false\" &&\r\n                riskAssessmentPartner?.uprotectedAnalSex === \"false\" &&\r\n                riskAssessment?.haveCondomBurst === \"false\" &&\r\n                riskAssessment?.haveSexWithoutCondom === \"false\"\r\n              ? 0\r\n              : riskAssessment?.soldPaidVaginalSex === \"\" &&\r\n                riskAssessmentPartner?.uprotectedAnalSex === \"\" &&\r\n                riskAssessment?.haveCondomBurst === \"\" &&\r\n                riskAssessment?.haveSexWithoutCondom === \"\"\r\n              ? -1000.0\r\n              : -1000.0,\r\n          first_time_visit: dataObj?.firstTimeVisit === true ? 1 : 0,\r\n          gender_female: dataObj?.personResponseDto?.sex === \"Female\" ? 1 : 0,\r\n          gender_male: dataObj?.personResponseDto?.sex === \"Male\" ? 1 : 0,\r\n          index_client: dataObj?.indexClient === true ? 1 : 0,\r\n          marital_status_divorced:\r\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Divorced\"\r\n              ? 1\r\n              : 0,\r\n          marital_status_married:\r\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Married\"\r\n              ? 1\r\n              : 0,\r\n          marital_status_other:\r\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Divorced\" ||\r\n            dataObj?.personResponseDto?.maritalStatus?.display ===\r\n              \"Separated\" ||\r\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Widowed\"\r\n              ? 1\r\n              : 0,\r\n          marital_status_single:\r\n            dataObj?.personResponseDto?.maritalStatus?.display === \"Single\"\r\n              ? 1\r\n              : 0,\r\n          moreThan1SexPartnerDuringLast3Months:\r\n            riskAssessment?.soldPaidVaginalSex === \"true\" ||\r\n            riskAssessment?.moreThanOneSexPartnerLastThreeMonths === \"true\"\r\n              ? 1\r\n              : 0,\r\n          previously_tested: dataObj?.previouslyTested === true ? 1 : 0,\r\n          referred_from_Community_Mobilization:\r\n            dataObj?.referredFrom === 1015 ? 1 : 0,\r\n          referred_from_OPD: dataObj?.referredFrom === 47 ? 1 : 0,\r\n          referred_from_Others:\r\n            dataObj?.referredFrom === 50 ||\r\n            dataObj?.referredFrom === 45 ||\r\n            dataObj?.referredFrom === 44 ||\r\n            dataObj?.referredFrom === 48 ||\r\n            dataObj?.referredFrom === 45 ||\r\n            dataObj?.referredFrom === 447 ||\r\n            dataObj?.referredFrom === 449 ||\r\n            dataObj?.referredFrom === 46 ||\r\n            dataObj?.referredFrom === 49 ||\r\n            dataObj?.referredFrom === 870\r\n              ? 1\r\n              : 0,\r\n          referred_from_Private_Commercial_Health_facility:\r\n            dataObj?.referredFrom === 448 ? 1 : 0,\r\n          referred_from_Self: dataObj?.referredFrom === 43 ? 1 : 0,\r\n          stiInLast3Months:\r\n            riskAssessment?.stiLastThreeMonths === \"true\" ||\r\n            riskAssessment?.experiencePain === \"true\" ||\r\n            riskAssessmentPartner?.sexPartnerHivPositive === \"true\" ||\r\n            riskAssessmentPartner?.newDiagnosedHivlastThreeMonths === \"true\" ||\r\n            riskAssessmentPartner?.currentlyArvForPmtct === \"true\" ||\r\n            riskAssessmentPartner?.knowHivPositiveOnArv === \"true\" ||\r\n            riskAssessmentPartner?.knowHivPositiveAfterLostToFollowUp === \"true\"\r\n              ? 1\r\n              : 0,\r\n          sti_symptoms:\r\n            (stiScreening?.lowerAbdominalPains === \"true\" &&\r\n              stiScreening?.vaginalDischarge === \"true\") ||\r\n            (stiScreening?.complaintsGenitalSore === \"true\" &&\r\n              stiScreening?.complaintsOfScrotal === \"true\" &&\r\n              stiScreening?.urethralDischarge === \"true\")\r\n              ? 1\r\n              : stiScreening?.lowerAbdominalPains === \"\" ||\r\n                stiScreening?.vaginalDischarge === \"\"\r\n              ? -1000\r\n              : 0,\r\n          target_group_FSW:\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n            \"TARGET_GROUP_FSW\"\r\n              ? 1\r\n              : 0,\r\n          target_group_GEN_POP:\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n            \"TARGET_GROUP_GEN_POP\"\r\n              ? 1\r\n              : 0,\r\n          target_group_MSM:\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n            \"TARGET_GROUP_MSM\"\r\n              ? 1\r\n              : 0,\r\n          target_group_PWID:\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n            \"TARGET_GROUP_PWID\"\r\n              ? 1\r\n              : 0,\r\n          target_group_SEXUAL_PARTNER:\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n            \"TARGET_GROUP_SEXUAL_PARTNER\"\r\n              ? 1\r\n              : 0,\r\n          target_group_other:\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n              \"TARGET_GROUP_PRISON\" ||\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n              \"TARGET_GROUP_TRANSGENDER\" ||\r\n            dataObj?.riskStratificationResponseDto?.targetGroup ===\r\n              \"TARGET_GROUP_CHILDREN_OF_KP\"\r\n              ? 1\r\n              : 0,\r\n          tb_symptoms:\r\n            tbScreening?.currentCough === \"true\" ||\r\n            tbScreening?.weightLoss === \"true\" ||\r\n            tbScreening?.lymphadenopathy === \"true\" ||\r\n            tbScreening?.fever === \"true\" ||\r\n            tbScreening?.nightSweats === \"true\"\r\n              ? 1\r\n              : tbScreening?.currentCough === \"\" &&\r\n                tbScreening?.weightLoss === \"\" &&\r\n                tbScreening?.lymphadenopathy === \"\" &&\r\n                tbScreening?.fever === \"\" &&\r\n                tbScreening?.nightSweats === \"\"\r\n              ? -1000\r\n              : 0,\r\n          testing_settingANC:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n            \"FACILITY_HTS_TEST_SETTING_ANC\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingCPMTCT:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingCT:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_CT\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_CT\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingIndex:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_INDEX\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_SNS\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_SNS\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_INDEX\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingOthers:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_OTHERS\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_OTHERS_(SPECIFY)\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_BLOOD_BANK\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_EMERGENCY\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_FP\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_L&D\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_MALNUTRITION\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_PEDIATRIC\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_STANDALONE_HTS\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_STI\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"FACILITY_HTS_TEST_SETTING_PREP_TESTING\" ||\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n              \"COMMUNITY_HTS_TEST_SETTING_STANDALONE_HTS\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingOutreach:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n            \"COMMUNITY_HTS_TEST_SETTING_OUTREACH\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingOVC:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n            \"COMMUNITY_HTS_TEST_SETTING_OVC\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingTB:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n            \"FACILITY_HTS_TEST_SETTING_TB\"\r\n              ? 1\r\n              : 0,\r\n          testing_settingWard_Inpatient:\r\n            dataObj?.riskStratificationResponseDto?.testingSetting ===\r\n            \"FACILITY_HTS_TEST_SETTING_WARD_INPATIENT\"\r\n              ? 1\r\n              : 0,\r\n          unprotectedSexWithCasualPartnerInLast3Months:\r\n            riskAssessment?.uprotectedSexWithCasualLastThreeMonths === \"true\" ||\r\n            riskAssessment?.soldPaidVaginalSex === \"true\" ||\r\n            riskAssessmentPartner?.uprotectedAnalSex === \"true\"\r\n              ? 1\r\n              : 0,\r\n          unprotectedSexWithRegularPartnerInLast3Months:\r\n            riskAssessment?.uprotectedSexWithRegularPartnerLastThreeMonths ===\r\n              \"true\" ||\r\n            riskAssessment?.haveCondomBurst === \"true\" ||\r\n            riskAssessment?.haveSexWithoutCondom === \"true\"\r\n              ? 1\r\n              : 0,\r\n        },\r\n      };\r\n\r\n      setMlresult(true);\r\n\r\n      axios\r\n        .post(`${baseUrl}machine-learning/evaluate`, mlData, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((resp) => {\r\n         \r\n          let predictions = Object.values(resp.data.result.predictions);\r\n          setPredictionValue(predictions);\r\n          let statusVal = \"\";\r\n\r\n          if (parseFloat(predictions[1]) < 0.005575358) {\r\n            statusVal = \"Low Risk\";\r\n          } else if (\r\n            parseFloat(predictions[1]) > 0.005575358 &&\r\n            parseFloat(predictions[1]) < 0.02719647\r\n          ) {\r\n            statusVal = \"Medium Risk\";\r\n          } else if (\r\n            parseFloat(predictions[1]) > 0.02719647 &&\r\n            parseFloat(predictions[1]) < 0.08083864\r\n          ) {\r\n            statusVal = \"High Risk\";\r\n          } else if (parseFloat(predictions[1]) > 0.08083864) {\r\n            statusVal = \"Highest Risk\";\r\n          } else {\r\n            statusVal = \"No Prediction Result\";\r\n          }\r\n\r\n          setMlResultObj({\r\n            htsClientId: clientId,\r\n            status: statusVal,\r\n            score: predictions[1],\r\n          });\r\n\r\n          setSavingPrediction(true);\r\n          setSavingRsult(false);\r\n        })\r\n        .catch((err) => {\r\n     \r\n        });\r\n    }\r\n  };\r\n\r\n  const handleInputChangeRiskAssessment = (e) => {\r\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\r\n  };\r\n  // Getting the number count of riskAssessment True\r\n  const actualRiskCountTrue = Object.values(riskAssessment);\r\n  const riskCount = actualRiskCountTrue.filter((x) => x === \"true\");\r\n\r\n  const handleInputChangeRiskAssessmentPartner = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setRiskAssessmentPartner({\r\n      ...riskAssessmentPartner,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  // Getting the number count of sexPartRiskCount True\r\n  const actualSexPartRiskCountTrue = Object.values(riskAssessmentPartner);\r\n  const sexPartRiskCount = actualSexPartRiskCountTrue.filter(\r\n    (x) => x === \"true\"\r\n  );\r\n\r\n  const handleInputChangeStiScreening = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setStiScreening({ ...stiScreening, [e.target.name]: e.target.value });\r\n  };\r\n  // Getting the number count of STI True\r\n  const actualStiTrue = Object.values(stiScreening);\r\n  const stiCount = actualStiTrue.filter((x) => x === \"true\");\r\n\r\n  const handleInputChangeTbScreening = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    setTbScreening({ ...tbScreening, [e.target.name]: e.target.value });\r\n  };\r\n  // Getting the number count of TB True\r\n  const actualTBTrue = Object.values(tbScreening);\r\n  const newTbTrue = actualTBTrue.filter((x) => x === \"true\");\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.everHadSexualIntercourse = riskAssessment.everHadSexualIntercourse\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n    props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.bloodtransInlastThreeMonths =\r\n        riskAssessment.bloodtransInlastThreeMonths\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.experiencePain = riskAssessment.experiencePain\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.haveSexWithoutCondom = riskAssessment.haveSexWithoutCondom\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.abuseDrug = riskAssessment.abuseDrug\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.bloodTransfusion = riskAssessment.bloodTransfusion\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.consistentWeightFeverNightCough =\r\n        riskAssessment.consistentWeightFeverNightCough\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n    props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" &&\r\n      (temp.soldPaidVaginalSex = riskAssessment.soldPaidVaginalSex\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x === \"\");\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let latestForm = getNextForm(\r\n      \"pre_test_counseling\",\r\n      objValues.age,\r\n      modalityCheck,\r\n      \"unknown\"\r\n    );\r\n    if (validate()) {\r\n      setSaving(true);\r\n\r\n      riskAssessment.mlStatus = mlResultObj.status;\r\n      riskAssessment.mlScore = mlResultObj.score;\r\n\r\n      objValues.htsClientId = clientId;\r\n      objValues.knowledgeAssessment = knowledgeAssessment;\r\n      objValues.personId = patientID;\r\n      objValues.riskAssessment = riskAssessment;\r\n      objValues.stiScreening = stiScreening;\r\n      objValues.tbScreening = tbScreening;\r\n      objValues.sexPartnerRiskAssessment = riskAssessmentPartner;\r\n\r\n      axios\r\n        .put(`${baseUrl}hts/${clientId}/pre-test-counseling`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          props.setPatientObj({\r\n            ...props.patientObj,\r\n            knowledgeAssessment: response.data.knowledgeAssessment,\r\n            riskAssessment: response.data.riskAssessment,\r\n            stiScreening: response.data.stiScreening,\r\n            tbScreening: response.data.tbScreening,\r\n            sexPartnerRiskAssessment: response.data.sexPartnerRiskAssessment,\r\n          });\r\n          handleItemClick(latestForm[0], latestForm[1]);\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    } else {\r\n      toast.error(\"All fields are required\", {\r\n        position: toast.POSITION.BOTTOM_CENTER,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2>PRE TEST COUNSELING</h2>\r\n          {savingPrediction ? (\r\n            <Stack sx={{ width: \"50%\" }} spacing={2}>\r\n              <Alert severity=\"info\" style={{ fontSize: \"16px\", color: \"000\" }}>\r\n                <b>ML Prediction Result for HTS Patient :</b>{\" \"}\r\n                {predictionRanges(predictionValue[1])}\r\n              </Alert>\r\n            </Stack>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"rgb(0,181,173)\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Knowledge Assessment\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Previously tested HIV negative{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"previousTestedHIVNegative\"\r\n                    id=\"previousTestedHIVNegative\"\r\n                    value={knowledgeAssessment.previousTestedHIVNegative}\r\n                    onChange={handleInputChangeKnowledgeAssessment}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.previousTestedHIVNegative !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.previousTestedHIVNegative}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {knowledgeAssessment.previousTestedHIVNegative === \"true\" && (\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Time of last HIV Negative test Result</Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"timeLastHIVNegativeTestResult\"\r\n                      id=\"timeLastHIVNegativeTestResult\"\r\n                      value={knowledgeAssessment.timeLastHIVNegativeTestResult}\r\n                      onChange={handleInputChangeKnowledgeAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"<1\"> {\"< 1\"} month</option>\r\n                      <option value=\"1-3 Months\">1-3 Months</option>\r\n                      <option value=\"4-6 Months\">4-6 Months</option>\r\n                      <option value=\">6 Months\"> {\">6\"} Months</option>\r\n                      {knowledgeAssessment.previousTestedHIVNegative !==\r\n                        \"true\" && <option value=\"Never\"> Never</option>}\r\n                    </select>\r\n                    {errors.timeLastHIVNegativeTestResult !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.timeLastHIVNegativeTestResult}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {props.patientObj &&\r\n                (props.patientObj.personResponseDto.sex === \"Female\" ||\r\n                  props.patientObj.personResponseDto.sex === \"female\" ||\r\n                  props.patientObj.personResponseDto.sex === \"FEMALE\") && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Client pregnant </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"clientPregnant\"\r\n                        id=\"clientPregnant\"\r\n                        value={knowledgeAssessment.clientPregnant}\r\n                        onChange={handleInputChangeKnowledgeAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={true}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.clientPregnant !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.clientPregnant}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client informed about HIV transmission routes </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"clientInformHivTransRoutes\"\r\n                    id=\"clientInformHivTransRoutes\"\r\n                    value={knowledgeAssessment.clientInformHivTransRoutes}\r\n                    onChange={handleInputChangeKnowledgeAssessment}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.clientInformHivTransRoutes !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.clientInformHivTransRoutes}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Client informed about risk factors for HIV transmission{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"clientInformRiskkHivTrans\"\r\n                    id=\"clientInformRiskkHivTrans\"\r\n                    value={knowledgeAssessment.clientInformRiskkHivTrans}\r\n                    onChange={handleInputChangeKnowledgeAssessment}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.clientInformRiskkHivTrans !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.clientInformRiskkHivTrans}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Client informed on preventing HIV transmission methods{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"clientInformPreventingsHivTrans\"\r\n                    id=\"clientInformPreventingsHivTrans\"\r\n                    value={knowledgeAssessment.clientInformPreventingsHivTrans}\r\n                    onChange={handleInputChangeKnowledgeAssessment}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.clientInformPreventingsHivTrans !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.clientInformPreventingsHivTrans}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client informed about possible test results </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"clientInformPossibleTestResult\"\r\n                    id=\"clientInformPossibleTestResult\"\r\n                    value={knowledgeAssessment.clientInformPossibleTestResult}\r\n                    onChange={handleInputChangeKnowledgeAssessment}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.clientInformPossibleTestResult !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.clientInformPossibleTestResult}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Informed consent for HIV testing given </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"informConsentHivTest\"\r\n                    id=\"informConsentHivTest\"\r\n                    value={knowledgeAssessment.informConsentHivTest}\r\n                    onChange={handleInputChangeKnowledgeAssessment}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.informConsentHivTest !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.informConsentHivTest}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <hr />\r\n              <br />\r\n\r\n              {props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" && (\r\n                <>\r\n                  <div\r\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                    style={{\r\n                      backgroundColor: \"#992E62\",\r\n                      width: \"125%\",\r\n                      height: \"35px\",\r\n                      color: \"#fff\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    HIV Risk Assessment (Last 3 months)\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Ever had sexual intercourse{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"everHadSexualIntercourse\"\r\n                        id=\"everHadSexualIntercourse\"\r\n                        value={riskAssessment.everHadSexualIntercourse}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.everHadSexualIntercourse !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.everHadSexualIntercourse}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Blood transfusion in last 3 months{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"bloodtransInlastThreeMonths\"\r\n                        id=\"bloodtransInlastThreeMonths\"\r\n                        value={riskAssessment.bloodtransInlastThreeMonths}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.bloodtransInlastThreeMonths !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.bloodtransInlastThreeMonths}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Unprotected sex with casual partner in last 3 months{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"uprotectedSexWithCasualLastThreeMonths\"\r\n                            id=\"uprotectedSexWithCasualLastThreeMonths\"\r\n                            value={\r\n                              riskAssessment.uprotectedSexWithCasualLastThreeMonths\r\n                            }\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.uprotectedSexWithCasualLastThreeMonths !==\r\n                          \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.uprotectedSexWithCasualLastThreeMonths}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Unprotected sex with regular partner in the last\r\n                            3months <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\r\n                            id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\r\n                            value={\r\n                              riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths\r\n                            }\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\r\n                          \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {\r\n                                errors.uprotectedSexWithRegularPartnerLastThreeMonths\r\n                              }\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Unprotected vaginal sex{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"unprotectedVaginalSex\"\r\n                            id=\"unprotectedVaginalSex\"\r\n                            value={riskAssessment.unprotectedVaginalSex}\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.unprotectedVaginalSex !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.unprotectedVaginalSex}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Unprotected Anal sex{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"uprotectedAnalSex\"\r\n                            id=\"uprotectedAnalSex\"\r\n                            value={riskAssessment.uprotectedAnalSex}\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.uprotectedAnalSex !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.uprotectedAnalSex}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            STI in last 3 months{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"stiLastThreeMonths\"\r\n                            id=\"stiLastThreeMonths\"\r\n                            value={riskAssessment.stiLastThreeMonths}\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.stiLastThreeMonths !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.stiLastThreeMonths}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Sex under the influence of drugs or alcohol{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"sexUnderInfluence\"\r\n                            id=\"sexUnderInfluence\"\r\n                            value={riskAssessment.sexUnderInfluence}\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.sexUnderInfluence !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.sexUnderInfluence}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                    riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            More than 1 sex partner during last 3 months{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                            id=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                            value={\r\n                              riskAssessment.moreThanOneSexPartnerLastThreeMonths\r\n                            }\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.moreThanOneSexPartnerLastThreeMonths !==\r\n                          \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.moreThanOneSexPartnerLastThreeMonths}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n\r\n                  <Message warning>\r\n                    <h4> Risk assessment score (sum of all 7 answers)</h4>\r\n                    <b>Score : {riskCount.length}</b>\r\n                  </Message>\r\n                  <hr />\r\n                  <br />\r\n                </>\r\n              )}\r\n              {props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" && (\r\n                <>\r\n                  <div\r\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                    style={{\r\n                      backgroundColor: \"#992E62\",\r\n                      width: \"125%\",\r\n                      height: \"35px\",\r\n                      color: \"#fff\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    HIV Risk Assessment (Last 3 months)\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you/your partner experienced lower abdominal pain,\r\n                        smelly discharge, blisters and wounds around you/partner\r\n                        vagina, penis anus or mouth?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"experiencePain\"\r\n                        id=\"experiencePain\"\r\n                        value={riskAssessment.experiencePain}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.experiencePain !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.experiencePain}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you/partner had sex without a condom with someone\r\n                        of unknown HIV status, or you/partner raped by person\r\n                        with unknown HIV status?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"haveSexWithoutCondom\"\r\n                        id=\"haveSexWithoutCondom\"\r\n                        value={riskAssessment.haveSexWithoutCondom}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.haveSexWithoutCondom !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.haveSexWithoutCondom}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you had a condom burst with your partner during\r\n                        sexual intercourse?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"haveCondomBurst\"\r\n                        id=\"haveCondomBurst\"\r\n                        value={riskAssessment.haveCondomBurst}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.haveCondomBurst !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.haveCondomBurst}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Do you/partner share needles/syringes, other sharp\r\n                        objects or used abuse drug substances of any kind?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"abuseDrug\"\r\n                        id=\"abuseDrug\"\r\n                        value={riskAssessment.abuseDrug}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.abuseDrug !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.abuseDrug}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you/partner had any blood or blood product\r\n                        transfusion? <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"bloodTransfusion\"\r\n                        id=\"bloodTransfusion\"\r\n                        value={riskAssessment.bloodTransfusion}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.bloodTransfusion !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.bloodTransfusion}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you/partner experienced coughing, weight loss,\r\n                        fever, night sweats consistently?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"consistentWeightFeverNightCough\"\r\n                        id=\"consistentWeightFeverNightCough\"\r\n                        value={riskAssessment.consistentWeightFeverNightCough}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.consistentWeightFeverNightCough !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.consistentWeightFeverNightCough}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you/partner paid or sold vaginal, anal or oral sex?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"soldPaidVaginalSex\"\r\n                        id=\"soldPaidVaginalSex\"\r\n                        value={riskAssessment.soldPaidVaginalSex}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.soldPaidVaginalSex !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.soldPaidVaginalSex}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <Message warning>\r\n                    <h4> HIV Risk assessment score (sum of all 7 answers)</h4>\r\n                    <b>Score :{riskCount.length}</b>\r\n                  </Message>\r\n                  <hr />\r\n                  <br />\r\n                </>\r\n              )}\r\n\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"#000\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Clinical TB screening\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Current cough </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"currentCough\"\r\n                    id=\"currentCough\"\r\n                    value={tbScreening.currentCough}\r\n                    onChange={handleInputChangeTbScreening}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.currentCough !== \"\" ? (\r\n                    <span className={classes.error}>{errors.currentCough}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Weight loss </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"weightLoss\"\r\n                    id=\"weightLoss\"\r\n                    value={tbScreening.weightLoss}\r\n                    onChange={handleInputChangeTbScreening}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.weightLoss !== \"\" ? (\r\n                    <span className={classes.error}>{errors.weightLoss}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Lymphadenopathy (swelling of the lymph nodes) </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"lymphadenopathy\"\r\n                    id=\"lymphadenopathy\"\r\n                    value={tbScreening.lymphadenopathy}\r\n                    onChange={handleInputChangeTbScreening}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.lymphadenopathy !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.lymphadenopathy}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Fever </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"fever\"\r\n                    id=\"fever\"\r\n                    value={tbScreening.fever}\r\n                    onChange={handleInputChangeTbScreening}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.fever !== \"\" ? (\r\n                    <span className={classes.error}>{errors.fever}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Night sweats</Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"nightSweats\"\r\n                    id=\"nightSweats\"\r\n                    value={tbScreening.nightSweats}\r\n                    onChange={handleInputChangeTbScreening}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.nightSweats !== \"\" ? (\r\n                    <span className={classes.error}>{errors.nightSweats}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <Message warning>\r\n                <h4>\r\n                  TB Screening score (calculate the sum of the TB assessment) If\r\n                  score {\">= 1\"}, test for Xper MTB RIF or refer to TB service{\" \"}\r\n                </h4>\r\n                <b>Score : {newTbTrue.length}</b>\r\n              </Message>\r\n              <hr />\r\n              <br />\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"#992E62\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Sex Partner Risk Assessment (Last 3 months)\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Have you had sex with a partner who is HIV positive?{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"sexPartnerHivPositive\"\r\n                    id=\"sexPartnerHivPositive\"\r\n                    value={riskAssessmentPartner.sexPartnerHivPositive}\r\n                    onChange={handleInputChangeRiskAssessmentPartner}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.sexPartnerHivPositive !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.sexPartnerHivPositive}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {riskAssessmentPartner.sexPartnerHivPositive === \"true\" && (\r\n                <>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Is sex partner newly diagnosed with HIV and started\r\n                        treatment less than 3-6 months ago?\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"newDiagnosedHivlastThreeMonths\"\r\n                        id=\"newDiagnosedHivlastThreeMonths\"\r\n                        value={\r\n                          riskAssessmentPartner.newDiagnosedHivlastThreeMonths\r\n                        }\r\n                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.newDiagnosedHivlastThreeMonths !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.newDiagnosedHivlastThreeMonths}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Is sex partner pregnant and currently receiving ARV for\r\n                        PMTCT?\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"currentlyArvForPmtct\"\r\n                        id=\"currentlyArvForPmtct\"\r\n                        value={riskAssessmentPartner.currentlyArvForPmtct}\r\n                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.currentlyArvForPmtct !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.currentlyArvForPmtct}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Known HIV positive partner on ARV with an unsurpressed\r\n                        VL\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"knowHivPositiveOnArv\"\r\n                        id=\"knowHivPositiveOnArv\"\r\n                        value={riskAssessmentPartner.knowHivPositiveOnArv}\r\n                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.knowHivPositiveOnArv !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.knowHivPositiveOnArv}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Known HIV positive recently returned to treatment after\r\n                        being lost to follow up\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"knowHivPositiveAfterLostToFollowUp\"\r\n                        id=\"knowHivPositiveAfterLostToFollowUp\"\r\n                        value={\r\n                          riskAssessmentPartner.knowHivPositiveAfterLostToFollowUp\r\n                        }\r\n                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.knowHivPositiveAfterLostToFollowUp !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.knowHivPositiveAfterLostToFollowUp}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Unprotected Anal sex</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"uprotectedAnalSex\"\r\n                        id=\"uprotectedAnalSex\"\r\n                        value={riskAssessmentPartner.uprotectedAnalSex}\r\n                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.uprotectedAnalSex !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.uprotectedAnalSex}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                </>\r\n              )}\r\n              <Message warning>\r\n                <h4>\r\n                  Sex Partner Risk Assessment score (sum of all 6 answers)\r\n                </h4>\r\n                <b>Score :{sexPartRiskCount.length}</b>\r\n              </Message>\r\n\r\n              <hr />\r\n              <br />\r\n              {savingResult ? (\r\n                <div\r\n                  style={{\r\n                    display: \"block\",\r\n                    width: 1000,\r\n                    padding: 10,\r\n                  }}\r\n                >\r\n                  <Spinner style={{ width: \"2rem\", height: \"2rem\" }} />\r\n                  <b style={{ color: \"#992E62\", fontSize: \"14px\" }}>\r\n                    {\" \"}\r\n                    <PanToolIcon /> requesting HTS ML predictions...\r\n                  </b>\r\n                </div>\r\n              ) : (\r\n                \" \"\r\n              )}\r\n              {savingPrediction ? (\r\n                <Stack sx={{ width: \"70%\" }} spacing={2}>\r\n                  <Alert\r\n                    severity=\"info\"\r\n                    style={{ fontSize: \"16px\", color: \"000\" }}\r\n                  >\r\n                    <b>ML Prediction Result for HTS Patient :</b>{\" \"}\r\n                    {predictionRanges(predictionValue[1])}\r\n                  </Alert>\r\n\r\n                  <Button\r\n                    content=\"Provide Feedbck\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={toggleModal}\r\n                  />\r\n                  <br />\r\n                </Stack>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"#014D88\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Syndromic STI Screening\r\n              </div>\r\n              {props.patientObj.personResponseDto &&\r\n                props.patientObj.personResponseDto.sex === \"Female\" && (\r\n                  <>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Complaints of vaginal discharge or burning when\r\n                          urinating?\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"vaginalDischarge\"\r\n                          id=\"vaginalDischarge\"\r\n                          value={stiScreening.vaginalDischarge}\r\n                          onChange={handleInputChangeStiScreening}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.vaginalDischarge !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.vaginalDischarge}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Complaints of lower abdominal pains with or without\r\n                          vaginal discharge?\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"lowerAbdominalPains\"\r\n                          id=\"lowerAbdominalPains\"\r\n                          value={stiScreening.lowerAbdominalPains}\r\n                          onChange={handleInputChangeStiScreening}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.lowerAbdominalPains !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.lowerAbdominalPains}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              {props.patientObj.personResponseDto &&\r\n                props.patientObj.personResponseDto.sex === \"Male\" && (\r\n                  <>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Complaints of urethral discharge or burning when\r\n                          urinating?\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"urethralDischarge\"\r\n                          id=\"urethralDischarge\"\r\n                          value={stiScreening.urethralDischarge}\r\n                          onChange={handleInputChangeStiScreening}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.urethralDischarge !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.urethralDischarge}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Complaints of scrotal swelling and pain</Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"complaintsOfScrotal\"\r\n                          id=\"complaintsOfScrotal\"\r\n                          value={stiScreening.complaintsOfScrotal}\r\n                          onChange={handleInputChangeStiScreening}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.complaintsOfScrotal !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.complaintsOfScrotal}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Complaints of genital sore(s) or swollen inguinal\r\n                          lymph nodes with or without pains?\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"complaintsGenitalSore\"\r\n                          id=\"complaintsGenitalSore\"\r\n                          value={stiScreening.complaintsGenitalSore}\r\n                          onChange={handleInputChangeStiScreening}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.complaintsGenitalSore !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.complaintsGenitalSore}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              <Message warning>\r\n                <h4>\r\n                  Calculate the sum of the STI screening. If {\">= \"}1, should be\r\n                  referred for STI test{\" \"}\r\n                </h4>\r\n                <b>Score :{stiCount.length}</b>\r\n              </Message>\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  <Button\r\n                    content=\"Check ML Prediction\"\r\n                    icon=\"refresh\"\r\n                    labelPosition=\"left\"\r\n                    disabled={mlresult ? true : false}\r\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    onClick={postPredictions}\r\n                  />\r\n                  <Button\r\n                    content=\"Save & Continue\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n      <FeedbackModal\r\n        toggleModal={toggleModal}\r\n        openModal={openModal}\r\n        setOpenModal={setOpenModal}\r\n        predictionValue={predictionValue[1]}\r\n        clientId={clientId}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasicInfo;","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RefferalForm.js",["620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646","647","648","649","650","651","652","653","654","655"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport ServicesProvided from \"./ServicesProvided\";\r\nimport RefferralUnit from \"./RefferalUnit\";\r\nimport Cookies from \"js-cookie\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst ClientRefferalForm = (props) => {\r\n  const classes = useStyles();\r\n  console.log(\"props.patientObj\", props.patientObj)\r\n  const [content, setContent] = useState({\r\n    showReferringUnit: false,\r\n    showServiceProviderUnit: false,\r\n  });\r\n  const patientObj = props.patientObj;\r\n  const [kP, setKP] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  let temp = {...errors};\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [setting, setSetting] = useState([]);\r\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\r\n  const [countries, setCountries] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [genders, setGenders] = useState([]);\r\n  const [targetGroupValue, setTargetGroupValue] = useState(null);\r\n\r\n\r\n  const [contentDropDown, setContentDropDown] = useState(\"\");\r\n  // const [formInfo, setFormInfo] = useState({\r\n  //   dateVisit: \"\",\r\n  //   firstName: props?.patientObj?.personResponseDto?.firstName,\r\n  //   middleName:  props?.patientObj?.personResponseDto?.otherName,\r\n  //   lastName:  props?.patientObj?.personResponseDto?.surname,\r\n  //   hospitalNumber:props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\r\n  //   countryId: \"1\",\r\n  //   stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\r\n  //   province: Number(props?.patientObj?.personResponseDto?.address?.address[0]?.district) ,\r\n  //   address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\r\n  //   landmark: \"\",\r\n  //   phoneNumber:  props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]?.value,\r\n  //   sexId:  props?.patientObj?.personResponseDto?.gender?.id,\r\n  //   dob: props?.patientObj.personResponseDto?.dateOfBirth,\r\n  //   age:  \"\",\r\n  //   dateOfBirth:props?.patientObj.personResponseDto?.dateOfBirth,\r\n  //   hivStatus:props?.patientObj?.hivTestResult2 ? props?.patientObj?.hivTestResult2 :\r\n  //       props?.patientObj?.hivTestResult ? props?.patientObj?.hivTestResult : \"\",\r\n  //   referredFromFacility: \"\",\r\n  //   nameOfPersonReferringClient: \"\",\r\n  //   nameOfReferringFacility: Cookies.get(\"facilityName\"),\r\n  //   addressOfReferringFacility: \"\",\r\n  //   phoneNoOfReferringFacility: \"\",\r\n  //   referredTo: \"\",\r\n  //   nameOfContactPerson: \"\",\r\n  //   nameOfReceivingFacility: \"\",\r\n  //   addressOfReceivingFacility: \"\",\r\n  //   phoneNoOfReceivingFacility: \"\",\r\n  //   isDateOfBirthEstimated: false,\r\n  //   serviceNeeded: \"\",\r\n  //   comments: \"\",\r\n  //   receivingStateFacility: \"\",\r\n  //   receivingLgaFacility: \"\",\r\n  //   htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\r\n  //   htsClientUuid:props && props.patientObj ? props.patientObj?.uuid : \"\"\r\n  // });\r\n  // const viewReferralInfo = () => {\r\n  //   axios\r\n  //       .get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\r\n  //         headers: { Authorization: `Bearer ${token}` },\r\n  //       })\r\n  //       .then((response) => {\r\n  //         // setObjValues(response.data);\r\n  //         console.log(\" form information\", response.data);\r\n  //         // setFormInfo(response.data);\r\n  //         // setReceivingOrganization(response.data.receivingOrganization);\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         ;\r\n  //       });\r\n  // };\r\n  // useEffect(() => {\r\n  //   viewReferralInfo();\r\n  // }, []);\r\n\r\n  const handleContentChange = (e) => {\r\n    console.log(e.target.value);\r\n    setContentDropDown(e.target.value);\r\n    if (e.target.value === \"showReferringUnit\") {\r\n      setContent({\r\n        showReferringUnit: true,\r\n        showServiceProviderUnit: false,\r\n      });\r\n    }\r\n\r\n    if (e.target.value === \"showServiceProviderUnit\") {\r\n      setContent({\r\n        showReferringUnit: false,\r\n        showServiceProviderUnit: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n      <>\r\n        <div>\r\n          <div className=\"form-group  col-md-8\">\r\n            <FormGroup>\r\n              <Label>\r\n                Referral Type <span style={{ color: \"red\" }}> *</span>\r\n              </Label>\r\n              <select\r\n                  className=\"form-control\"\r\n                  name=\"contentDropDown\"\r\n                  id=\"contentDropDown\"\r\n                  onChange={handleContentChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n              >\r\n                <option value={\"\"}>Select Refarral form type</option>\r\n                <option value={\"showReferringUnit\"}>Referral form</option>\r\n                <option value={\"showServiceProviderUnit\"}>\r\n                  Service Provider form\r\n                </option>\r\n              </select>\r\n            </FormGroup>\r\n          </div>\r\n        </div>\r\n        <Card className={classes.root}>\r\n          {content.showReferringUnit\r\n              && <RefferralUnit\r\n                  patientObj={patientObj}\r\n                  // formInfo={formInfo}\r\n                  // row={props.row}\r\n                  handleClicked={props.handleClicked}\r\n              />}\r\n          {content.showServiceProviderUnit && (\r\n              <CardBody>\r\n                <ServicesProvided\r\n                    patientObj = {patientObj}\r\n                    // formInfo={props.formInfo}\r\n                    // row={props.row}\r\n                />\r\n              </CardBody>\r\n          )}\r\n          {/* recieving facility  */}\r\n        </Card>\r\n        <Modal\r\n            show={open}\r\n            toggle={toggle}\r\n            className=\"fade\"\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n          <Modal.Header>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              Notification!\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <h4>Are you Sure of the Age entered?</h4>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n                onClick={toggle}\r\n                style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            >\r\n              Yes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </>\r\n  );\r\n};\r\n\r\n\r\nexport default ClientRefferalForm;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\FamilyIndexTestingForm.js",["656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RiskStratification.js",["687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { getNextForm } from \"../../../../utility\";\r\n\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\r\nimport Cookies from \"js-cookie\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst BasicInfo = (props) => {\r\n  const classes = useStyles();\r\n  //const history = useHistory();\r\n  const [enrollSetting, setEnrollSetting] = useState([]);\r\n  const [entryPoint, setEntryPoint] = useState([]);\r\n  const [entryPointCommunity, setEntryPointCommunity] = useState([]);\r\n  const [entryPointSetting, setEntryPointSetting] = useState([]);\r\n\r\n  let riskCountQuestion = [];\r\n  const [kP, setKP] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  let temp = { ...errors };\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [setting, setSetting] = useState([]);\r\n  const [riskCount, setRiskCount] = useState(0);\r\n  const [isPMTCTModality, setIsPMTCTModality] = useState(false);\r\n  const [showRiskAssessment, setShowRiskAssessment] = useState(false);\r\n  const [permissions, setPermission] = useState(\r\n    localStorage.getItem(\"stringifiedPermmision\")?.split(\",\")\r\n  );\r\n  const [spokeFacList, setSpokeFacList] = useState([]);\r\n  const [showHealthFacility, setShowHealthFacility] = useState(false);\r\n\r\n  const [nextForm, setNextForm] = useState([]);\r\n  const [, setTargetGroupValue] = useState(null);\r\n  const [objValues, setObjValues] = useState({\r\n    age: \"\",\r\n    dob: \"\",\r\n    code: \"\",\r\n    visitDate: \"\",\r\n    dateOfBirth: null,\r\n    dateOfRegistration: null,\r\n    isDateOfBirthEstimated: \"\",\r\n    targetGroup: \"\",\r\n    testingSetting: \"\",\r\n    modality: \"\",\r\n    careProvider: \"\",\r\n    personId: \"\",\r\n    id: \"\",\r\n    riskAssessment: {},\r\n    entryPoint: \"\",\r\n    communityEntryPoint: \"\",\r\n    spokeFacility: \"\",\r\n    healthFacility: \"\"\r\n\r\n  });\r\n  const [riskAssessment, setRiskAssessment] = useState({\r\n\r\n    lastHivTestForceToHaveSex: \"\",\r\n    lastHivTestHadAnal: \"\",\r\n    lastHivTestInjectedDrugs: \"\",\r\n    whatWasTheResult: \"\",\r\n    lastHivTestDone: \"\",\r\n    diagnosedWithTb: \"\",\r\n    lastHivTestPainfulUrination: \"\",\r\n    lastHivTestBloodTransfusion: \"\",\r\n    lastHivTestVaginalOral: \"\",\r\n    lastHivTestBasedOnRequest: \"\",\r\n  });\r\n  useEffect(() => {\r\n\r\n\r\nif (objValues.age !== \"\") {\r\n      props.setPatientObjAge(objValues.age);\r\n    }\r\n    if (props?.patientObj?.riskStratificationResponseDto !== null) {\r\n      if(props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\"){\r\n        HTS_ENTRY_POINT_COMMUNITY()\r\n      }else if(props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint=== \"HTS_ENTRY_POINT_FACILITY\"){\r\n\r\n        HTS_ENTRY_POINT_FACILITY()\r\n      }\r\n      setObjValues(props.patientObj.riskStratificationResponseDto);\r\n\r\n      setRiskAssessment(\r\n        props.patientObj.riskStratificationResponseDto.riskAssessment\r\n      );\r\n    }\r\n  }, [objValues.age]);\r\n\r\n\r\n  useEffect(()=>{\r\n    KP();\r\n    TargetGroupSetup();\r\n\r\n    EntryPoint();\r\n  }, [])\r\n  //Get list of HIV STATUS ENROLLMENT\r\n  const EnrollmentSetting = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TEST_SETTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n\r\n        setEnrollSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n\r\n      });\r\n  };\r\n  const EntryPoint = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/HTS_ENTRY_POINT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n\r\n        setEntryPoint(response.data);\r\n        if(props?.patientObj?.riskStratificationResponseDto?.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\"){\r\n          HTS_ENTRY_POINT_COMMUNITY()\r\n        }else if(props?.patientObj?.riskStratificationResponseDto?.entryPoint === \"HTS_ENTRY_POINT_FACILITY\"){\r\n\r\n          HTS_ENTRY_POINT_FACILITY()\r\n        }else{\r\n          setEntryPointSetting([]);\r\n\r\n        }\r\n      })\r\n      .catch((error) => {\r\n\r\n      });\r\n  };\r\n\r\n\r\n\r\n\r\n  const getSpokeFaclityByHubSite = () => {\r\n    let facility =Cookies.get(\"facilityName\")\r\n    axios\r\n      .get(`${baseUrl}hts/spoke-site?hubSite=${facility}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSpokeFacList(response.data)\r\n\r\n\r\n      })\r\n      .catch((error) => {\r\n\r\n      });\r\n  };\r\n\r\n\r\n  const HTS_ENTRY_POINT_FACILITY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n\r\n          let facilityList = []\r\n\r\n        setEntryPointSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n\r\n      });\r\n  };\r\n\r\n\r\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\r\n `, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n\r\n        setEntryPointSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const TargetGroupSetup = () => {\r\n    const userAccountData = localStorage.getItem('user_account');\r\n    if (userAccountData) {\r\n        try {\r\n          const storedValues = JSON.parse(userAccountData);\r\n          props.setOrganizationInfo(storedValues);\r\n          setTargetGroupValue(storedValues);\r\n          return storedValues\r\n        } catch (error) {\r\n            console.error('Error parsing user_account JSON:', error);\r\n            return null; // Return null if parsing fails\r\n        }\r\n    }\r\n    return null; \r\n  };\r\n  //Get list of KP\r\n  const KP = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n\r\n        setKP(response.data);\r\n      })\r\n      .catch((error) => {\r\n\r\n      });\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  //Set HTS menu registration\r\n  const getMenuLogic = () => {\r\n    props.setHideOtherMenu(false);\r\n  };\r\n\r\n  const checkPMTCTModality = (setting) => {\r\n    if (\r\n      setting === \"FACILITY_HTS_TEST_SETTING_ANC\" ||\r\n      setting === \"FACILITY_HTS_TEST_SETTING_L&D\" ||\r\n      setting === \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\r\n\r\n    ) {\r\n      setErrors({...errors,\r\n        lastHivTestDone: \"\",\r\n        whatWasTheResult: \"\",\r\n        lastHivTestVaginalOral: \"\",\r\n        lastHivTestBloodTransfusion: \"\",\r\n        lastHivTestPainfulUrination: \"\",\r\n        diagnosedWithTb: \"\",\r\n        lastHivTestInjectedDrugs: \"\",\r\n        lastHivTestHadAnal: \"\",\r\n        lastHivTestForceToHaveSex: \"\",\r\n       })\r\n      setIsPMTCTModality(true);\r\n      return true;\r\n    } else {\r\n\r\n      setIsPMTCTModality(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"testingSetting\" && e.target.value !== \"\") {\r\n      setErrors({ ...temp, spokeFacility: \"\",  healthFacility: \"\"});\r\n\r\n      SettingModality(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n      let ans = checkPMTCTModality(e.target.value);\r\n\r\n     if(e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||  e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\" ){\r\n            setShowHealthFacility(true)\r\n      }else{\r\n            setShowHealthFacility(false)\r\n\r\n       }\r\n\r\n      displayRiskAssessment(\r\n        riskAssessment.lastHivTestBasedOnRequest,\r\n        objValues.age,\r\n        ans\r\n      );\r\n\r\n\r\n      //get spoke sites\r\n      if(e.target.value === \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" ||  e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\" ){\r\n\r\n        getSpokeFaclityByHubSite();\r\n      }\r\n\r\n      //set risk count\r\n              if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_STANDALONE_HTS\"   || e.target.value === \"FACILITY_HTS_TEST_SETTING_STANDALONE_HTS\") {\r\n                setRiskCount(1);\r\n              }   else if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CT\"  || e.target.value === \"FACILITY_HTS_TEST_SETTING_CT\") {\r\n                setRiskCount(1);\r\n              } else if (e.target.value ===\"FACILITY_HTS_TEST_SETTING_TB\") {\r\n                setRiskCount(1);\r\n              } else if (e.target.value === \"FACILITY_HTS_TEST_SETTING_STI\") {\r\n                setRiskCount(1);\r\n              } else if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_OUTREACH\") {\r\n                setRiskCount(1);\r\n              } else {\r\n                setRiskCount(0);\r\n              }\r\n\r\n\r\n    }\r\n\r\n\r\n    if(e.target.name === \"entryPoint\"){\r\n\r\n          if(e.target.value === \"HTS_ENTRY_POINT_COMMUNITY\"){\r\n            HTS_ENTRY_POINT_COMMUNITY()\r\n          }else if(e.target.value === \"HTS_ENTRY_POINT_FACILITY\"){\r\n\r\n            HTS_ENTRY_POINT_FACILITY()\r\n          }else{\r\n            setEntryPointSetting([]);\r\n\r\n          }\r\n\r\n    }\r\n\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // display risk assement function\r\n\r\n  const displayRiskAssessment = (lastVisit, age, isPMTCTModalityValue) => {\r\n    let SecAge = age !== \"\" ? age : 0;\r\n    let ans;\r\n\r\n    // for the section to show\r\n\r\n    if (lastVisit === \"false\") {\r\n      if (SecAge > 15 && isPMTCTModalityValue) {\r\n        setShowRiskAssessment(false);\r\n        ans = false;\r\n      } else if (SecAge > 15) {\r\n        setShowRiskAssessment(true);\r\n        ans = true;\r\n      } else {\r\n        setShowRiskAssessment(false);\r\n        ans = false;\r\n      }\r\n    } else {\r\n      setShowRiskAssessment(false);\r\n      ans = false;\r\n    }\r\n  };\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n        age_now--;\r\n      }\r\n\r\n      objValues.age = age_now;\r\n      displayRiskAssessment(\r\n        riskAssessment.lastHivTestBasedOnRequest,\r\n        age_now,\r\n        isPMTCTModality\r\n      );\r\n;\r\n    } else {\r\n      setObjValues({ ...objValues, age: \"\" });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      objValues.isDateOfBirthEstimated = false;\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      objValues.isDateOfBirthEstimated = true;\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    displayRiskAssessment(\r\n      riskAssessment.lastHivTestBasedOnRequest,\r\n      e.target.value,\r\n      isPMTCTModality\r\n    );\r\n\r\n    if (!ageDisabled && e.target.value) {\r\n      if (e.target.value !== \"\" && e.target.value >= 85) {\r\n        toggle();\r\n      }\r\n\r\n\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setObjValues({ ...objValues, age: e.target.value });\r\n  };\r\n  //Get list of DSD Model Type\r\n  function SettingModality(settingId) {\r\n    const setting = settingId;\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/${setting}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n  //End of Date of Birth and Age handling\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n\r\n    temp.visitDate = objValues.visitDate ? \"\" : \"This field is required.\";\r\n    temp.entryPoint = objValues.entryPoint ? \"\" : \"This field is required.\";\r\n    temp.testingSetting = objValues.testingSetting\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.entryPoint = objValues.entryPoint ? \"\" : \"This field is required.\";\r\n\r\n    temp.dob = objValues.dob ? \"\" : \"This field is required.\";\r\n    temp.age = objValues.age ? \"\" : \"This field is required.\";\r\n    //\r\n    temp.lastHivTestBasedOnRequest = riskAssessment.lastHivTestBasedOnRequest\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n\r\n    objValues.age > 15 &&\r\n      (temp.targetGroup = objValues.targetGroup\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n//\r\n      objValues.testingSetting ===  \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" &&\r\n      (temp.spokeFacility = objValues.spokeFacility\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n        showHealthFacility &&\r\n        (temp.healthFacility = objValues.healthFacility\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n\r\n    //Risk Assement section\r\n    if (\r\n      objValues.age > 15 &&\r\n      riskAssessment.lastHivTestBasedOnRequest === \"false\" &&\r\n      showRiskAssessment\r\n    ) {\r\n      temp.lastHivTestDone = riskAssessment.lastHivTestDone\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n      riskAssessment.lastHivTestDone !== \"\" &&\r\n        riskAssessment.lastHivTestDone !== \"Never\" &&\r\n        (temp.whatWasTheResult = riskAssessment.whatWasTheResult\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n      temp.lastHivTestVaginalOral = riskAssessment.lastHivTestVaginalOral\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestBloodTransfusion =\r\n        riskAssessment.lastHivTestBloodTransfusion\r\n          ? \"\"\r\n          : \"This field is required.\";\r\n\r\n      temp.lastHivTestPainfulUrination =\r\n        riskAssessment.lastHivTestPainfulUrination\r\n          ? \"\"\r\n          : \"This field is required.\";\r\n\r\n      temp.diagnosedWithTb = riskAssessment.diagnosedWithTb\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestInjectedDrugs = riskAssessment.lastHivTestInjectedDrugs\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestHadAnal = riskAssessment.lastHivTestHadAnal\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestForceToHaveSex = riskAssessment.lastHivTestForceToHaveSex\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    }\r\n\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  // Getting the number count of riskAssessment True\r\n  const actualRiskCountTrue = Object.values(riskAssessment);\r\n  riskCountQuestion = actualRiskCountTrue.filter((x) => x === \"true\");\r\n\r\n  const handleInputChangeRiskAssessment = (e) => {\r\n    displayRiskAssessment(e.target.value, objValues.age, isPMTCTModality);\r\n\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\r\n  };\r\n\r\n\r\n  const handleInputChangeRiskAssessment2 = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // get next form\r\n    let newModality = isPMTCTModality ? \"skip\" : \"fill\";\r\n  \r\n  let latestForm =  getNextForm(\"risk_stratification\", objValues.age, newModality, \"unknown\")\r\n\r\n    getMenuLogic(objValues);\r\n    props.patientObj.riskStratificationResponseDto = objValues;\r\n    props.patientObj.personResponseDto.dob = objValues.dob;\r\n    props.patientObj.personResponseDto.dateOfBirth = objValues.dob;\r\n    props.patientObj.personResponseDto.isDateOfBirthEstimated =\r\n      objValues.isDateOfBirthEstimated;\r\n    props.patientObj.targetGroup = objValues.targetGroup;\r\n    props.patientObj.testingSetting = objValues.testingSetting;\r\n    props.patientObj.modality = objValues.modality;\r\n    props.patientObj.dateVisit = objValues.visitDate;\r\n\r\n    //props.patientObj.riskAssessment =riskAssessment\r\n    objValues.riskAssessment = riskAssessment;\r\n\r\n    //Check if riskStratificationResponseDto is null or empty then call the update method\r\n    if (\r\n      props.patientObj.riskStratificationResponseDto &&\r\n      props.patientObj.riskStratificationResponseDto !== null &&\r\n      props.patientObj.riskStratificationResponseDto.id !== \"\"\r\n    ) {\r\n      if (validate()) {\r\n        setSaving(true);\r\n\r\n        props.setHideOtherMenu(false);\r\n        axios\r\n          .put(\r\n            `${baseUrl}risk-stratification/${props.patientObj.riskStratificationResponseDto.id}`,\r\n            objValues,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n            setSaving(false);\r\n            props.patientObj.riskStratificationResponseDto = response.data;\r\n            objValues.code = response.data.code;\r\n            props.setExtra(objValues);\r\n            handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n            toast.success(\"Risk stratification save succesfully!\");\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              toast.error(errorMessage, {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            } else {\r\n              toast.error(\"Something went wrong. Please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          });\r\n      }\r\n    } else {\r\n      //if riskStratificationResponseDto is null then make a new call to save the record\r\n      if (\r\n        (riskCount > 0 || riskCountQuestion.length > 0) &&\r\n        objValues.age > 15\r\n      ) {\r\n        if (validate()) {\r\n          setSaving(true);\r\n\r\n          props.setHideOtherMenu(false);\r\n          axios\r\n            .post(`${baseUrl}risk-stratification`, objValues, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              setSaving(false);\r\n              props.patientObj.riskStratificationResponseDto = response.data;\r\n              objValues.code = response.data.code;\r\n              props.setExtra(objValues);\r\n\r\n              handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n              toast.success(\"Risk stratification save succesfully!\");\r\n            })\r\n            .catch((error) => {\r\n              setSaving(false);\r\n              if (error.response && error.response.data) {\r\n                let errorMessage =\r\n                  error.response.data.apierror &&\r\n                  error.response.data.apierror.message !== \"\"\r\n                    ? error.response.data.apierror.message\r\n                    : \"Something went wrong, please try again\";\r\n                toast.error(errorMessage, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              } else {\r\n                toast.error(\"Something went wrong. Please try again...\", {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              }\r\n            });\r\n        } else {\r\n          toast.error(\"All fields are required\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n        }\r\n      } else if (objValues.age < 15) {\r\n        if (validate()) {\r\n          setSaving(true);\r\n          axios\r\n            .post(`${baseUrl}risk-stratification`, objValues, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              setSaving(false);\r\n              props.patientObj.riskStratificationResponseDto = response.data;\r\n              objValues.code = response.data.code;\r\n              props.setExtra(objValues);\r\n              handleItemClick(latestForm[0], latestForm[1]);\r\n              //toast.success(\"Risk stratification save succesfully!\");\r\n            })\r\n            .catch((error) => {\r\n              setSaving(false);\r\n              if (error.response && error.response.data) {\r\n                let errorMessage =\r\n                  error.response.data.apierror &&\r\n                  error.response.data.apierror.message !== \"\"\r\n                    ? error.response.data.apierror.message\r\n                    : \"Something went wrong, please try again\";\r\n                toast.error(errorMessage, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              } else {\r\n                toast.error(\"Something went wrong. Please try again...\", {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              }\r\n            });\r\n        } else {\r\n          toast.error(\"All fields are required\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n        }\r\n      } else {\r\n        props.setHideOtherMenu(false);\r\n        props.setExtra(objValues);\r\n        if (validate()) {\r\n          setSaving(true);\r\n          axios\r\n            .post(`${baseUrl}risk-stratification`, objValues, {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            })\r\n            .then((response) => {\r\n              setSaving(false);\r\n              props.patientObj.riskStratificationResponseDto = response.data;\r\n              objValues.code = response.data.code;\r\n              props.setExtra(objValues);\r\n              toast.success(\"Risk stratification save succesfully!\");\r\n              handleItemClick(latestForm[0], latestForm[1]);\r\n            })\r\n            .catch((error) => {\r\n              setSaving(false);\r\n              if (error.response && error.response.data) {\r\n                let errorMessage =\r\n                  error.response.data.apierror &&\r\n                  error.response.data.apierror.message !== \"\"\r\n                    ? error.response.data.apierror.message\r\n                    : \"Something went wrong, please try again\";\r\n                toast.error(errorMessage, {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              } else {\r\n                toast.error(\"Something went wrong. Please try again...\", {\r\n                  position: toast.POSITION.BOTTOM_CENTER,\r\n                });\r\n              }\r\n            });\r\n        } else {\r\n          toast.error(\"All fields are required\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>RISK STRATIFICATION</h2>\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"#992E62\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Modality\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Entry Point <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"entryPoint\"\r\n                      id=\"entryPoint\"\r\n                      value={objValues.entryPoint}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {entryPoint.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.entryPoint !== \"\" ? (\r\n                      <span className={classes.error}>{errors.entryPoint}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label for=\"\">\r\n                      Visit Date <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"date\"\r\n\r\n                      onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                      name=\"visitDate\"\r\n                      id=\"visitDate\"\r\n                      value={objValues.visitDate}\r\n                      onChange={handleInputChange}\r\n                      min=\"1929-12-31\"\r\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                    />\r\n                    {errors.visitDate !== \"\" ? (\r\n                      <span className={classes.error}>{errors.visitDate}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Setting <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"testingSetting\"\r\n                      id=\"testingSetting\"\r\n                      value={objValues.testingSetting}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"} key={0}>\r\n                        {\" \"}\r\n                        Select\r\n                      </option>\r\n                      {entryPointSetting && entryPointSetting.map((value) =>\r\n\r\n                              <option key={value.id} value={value.code}>\r\n                                {value.display}\r\n                              </option>\r\n\r\n                          )\r\n                        }\r\n\r\n                    </select>\r\n                    {errors.testingSetting !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.testingSetting}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {/*  */}\r\n\r\n{ objValues.testingSetting ===  \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" && <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                    Spoke Health Facility <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n\r\n\r\n                   { spokeFacList.length > 0 ?   <> <select\r\n                      className=\"form-control\"\r\n                      name=\"spokeFacility\"\r\n                      id=\"spokeFacility\"\r\n                      value={objValues.spokeFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                        textTransform:\"capitalize  !important\"\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {spokeFacList.map((value) => (\r\n                        <option key={value.id} value={value.spokeSite}\r\n                     >\r\n                          {value.spokeSite}\r\n                        </option>\r\n                      ))}\r\n                    </select></>: <Input\r\n                    type=\"text\"\r\n                    name=\"spokeFacility\"\r\n                    id=\"spokeFacility\"\r\n                    value={objValues.spokeFacility}\r\n                    //value={Math.floor(Math.random() * 1093328)}\r\n                    // onBlur={checkClientCode}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                  /> }\r\n                    {errors.spokeFacility !== \"\" ? (\r\n                      <span className={classes.error}>{errors.spokeFacility}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>}\r\n\r\n\r\n\r\n                {showHealthFacility && <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                     Health Facility <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    { spokeFacList.length > 0 ?    <select\r\n                      className=\"form-control\"\r\n                      name=\"healthFacility\"\r\n                      id=\"healthFacility\"\r\n                      value={objValues.healthFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                        textTransform:\"capitalize  !important\"\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {spokeFacList.map((value) => (\r\n                        <option key={value.id} value={value.spokeSite}\r\n                     >\r\n                          {value.spokeSite}\r\n                        </option>\r\n                      ))}\r\n                    </select>:  <Input\r\n                    type=\"text\"\r\n                    name=\"healthFacility\"\r\n                    id=\"healthFacility\"\r\n                    value={objValues.healthFacility}\r\n\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.25rem\",\r\n                    }}\r\n                  /> }\r\n                    {errors.healthFacility !== \"\" ? (\r\n                      <span className={classes.error}>{errors.healthFacility}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>}\r\n\r\n              </div>\r\n              <br />\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Target Group <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"targetGroup\"\r\n                    id=\"targetGroup\"\r\n                    onChange={handleInputChange}\r\n                    value={objValues.targetGroup}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {kP.map((value) => (\r\n                      <option key={value.id} value={value.code}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.targetGroup !== \"\" ? (\r\n                    <span className={classes.error}>{errors.targetGroup}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-2 col-md-2\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Date Of Birth <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Actual\"\r\n                        name=\"dateOfBirth\"\r\n                        defaultChecked\r\n                        onChange={(e) => handleDateOfBirthChange(e)}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />{\" \"}\r\n                      Actual\r\n                    </label>\r\n                  </div>\r\n                  <div className=\"radio\">\r\n                    <label>\r\n                      <input\r\n                        type=\"radio\"\r\n                        value=\"Estimated\"\r\n                        name=\"dateOfBirth\"\r\n                        onChange={(e) => handleDateOfBirthChange(e)}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />{\" \"}\r\n                      Estimated\r\n                    </label>\r\n                  </div>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Date <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"date\"\r\n\r\n                    onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                    name=\"dob\"\r\n                    id=\"dob\"\r\n                    min=\"1929-12-31\"\r\n                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                    value={objValues.dob}\r\n                    onChange={handleDobChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  />\r\n                  {errors.dob !== \"\" ? (\r\n                    <span className={classes.error}>{errors.dob}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group mb-3 col-md-3\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Age <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    name=\"age\"\r\n                    id=\"age\"\r\n                    value={objValues.age}\r\n                    disabled={ageDisabled}\r\n                    onChange={handleAgeChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  />\r\n                  {errors.age !== \"\" ? (\r\n                    <span className={classes.error}>{errors.age}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-6\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Is this HIV test based on a Clinician/Doctor/Health Care\r\n                    Provider's request ?{\" \"}\r\n                    <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"lastHivTestBasedOnRequest\"\r\n                    id=\"lastHivTestBasedOnRequest\"\r\n                    value={riskAssessment.lastHivTestBasedOnRequest}\r\n                    onChange={handleInputChangeRiskAssessment}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}>Select</option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                  {errors.lastHivTestBasedOnRequest !== \"\" ? (\r\n                    <span className={classes.error}>\r\n                      {errors.lastHivTestBasedOnRequest}\r\n                    </span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              <br />\r\n\r\n              {showRiskAssessment && (\r\n                <>\r\n                  <div\r\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                    style={{\r\n                      backgroundColor: \"#992E62\",\r\n                      width: \"125%\",\r\n                      height: \"35px\",\r\n                      color: \"#fff\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    HIV Risk Assessment (Last 3 months)\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        When was your last HIV test done?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestDone\"\r\n                        id=\"lastHivTestDone\"\r\n                        value={riskAssessment.lastHivTestDone}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"<1\"> {\"< 1\"} month</option>\r\n                        <option value=\"1-3 Months\">1-3 Months</option>\r\n                        <option value=\"4-6 Months\">4-6 Months</option>\r\n                        <option value=\">6 Months\"> {\">6\"} Months</option>\r\n                        <option value=\"Never\">Never</option>\r\n                      </select>\r\n                      {errors.lastHivTestDone !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestDone}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {riskAssessment.lastHivTestDone !== \"\" &&\r\n                    riskAssessment.lastHivTestDone !== \"Never\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            What was the result?{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"whatWasTheResult\"\r\n                            id=\"whatWasTheResult\"\r\n                            value={riskAssessment.whatWasTheResult}\r\n                            onChange={handleInputChangeRiskAssessment2}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"Positive\">Positive</option>\r\n                            <option value=\"Negative\">Negative</option>\r\n                          </select>\r\n                          {errors.whatWasTheResult !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.whatWasTheResult}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you had anal or vaginal\r\n                        or oral sex without a condom with someone who was HIV\r\n                        positive or unaware of their HIV status?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestVaginalOral\"\r\n                        id=\"lastHivTestVaginalOral\"\r\n                        value={riskAssessment.lastHivTestVaginalOral}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestVaginalOral !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestVaginalOral}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you had a blood or blood\r\n                        product transfusion?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestBloodTransfusion\"\r\n                        id=\"lastHivTestBloodTransfusion\"\r\n                        value={riskAssessment.lastHivTestBloodTransfusion}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestBloodTransfusion !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestBloodTransfusion}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you experienced painful\r\n                        urination, lower abdominal pain, vaginal or penile\r\n                        discharge, pain during sexual intercourse, thick,\r\n                        cloudy, or foul smelling discharge and/or small bumps or\r\n                        blisters near the mouth, penis, vagina, or anal areas?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestPainfulUrination\"\r\n                        id=\"lastHivTestPainfulUrination\"\r\n                        value={riskAssessment.lastHivTestPainfulUrination}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestPainfulUrination !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestPainfulUrination}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you been diagnosed with TB or currently have any of\r\n                        the following symptoms : cough, fever, weight loss,\r\n                        night sweats? <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"diagnosedWithTb\"\r\n                        id=\"diagnosedWithTb\"\r\n                        value={riskAssessment.diagnosedWithTb}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.diagnosedWithTb !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.diagnosedWithTb}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you ever injected drugs,\r\n                        shared needles or other sharp objects with someone known\r\n                        to be HIV positive or who you didn’t know their HIV\r\n                        status? <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestInjectedDrugs\"\r\n\r\n                        value={riskAssessment.lastHivTestInjectedDrugs}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestInjectedDrugs !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestInjectedDrugs}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you had anal, oral or\r\n                        vaginal sex in exchange for money or other benefits?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestHadAnal\"\r\n                        id=\"lastHivTestHadAnal\"\r\n                        value={riskAssessment.lastHivTestHadAnal}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestHadAnal !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestHadAnal}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you been forced to have\r\n                        sex? <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestForceToHaveSex\"\r\n                        value={riskAssessment.lastHivTestForceToHaveSex}\r\n                        onChange={handleInputChangeRiskAssessment2}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestForceToHaveSex !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestForceToHaveSex}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <br />\r\n                </>\r\n              )}\r\n              <br />\r\n              <Message warning>\r\n                <h4> Risk assessment score </h4>\r\n                <b>\r\n                  Score :\r\n                  {riskCount +\r\n                    (objValues.age > 14 ? riskCountQuestion.length : 0)}\r\n                </b>\r\n              </Message>\r\n              <hr />\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <Button\r\n                    content=\"Save\"\r\n                    type=\"submit\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasicInfo;","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\ViewPnsForm.js",["708","709","710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\RefferalUnit.js",["731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\PnsForm.js",["761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\PNSHistory.js",["789","790","791","792","793"],"import React, { useState, Fragment } from \"react\";\r\n\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport AddIndexContact from \"../../ContinuesHTSEnrollment/Elicitation/AddIndexContact\";\r\n\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\n//import Button from '@material-ui/core/Button';\r\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport PNSList from \"./PNSlist\";\r\n\r\nconst PNSHistory = (props) => {\r\n  const [activePage, setActivePage] = useState(\"list\");\r\n  const handleIClickPage = (activeItem) => {\r\n    setActivePage(activeItem);\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page, completedMenu);\r\n \r\n  };\r\n  const handleDone = (row, actionType) => {\r\n    props.setActivePage({\r\n      ...props.activePage,\r\n      activePage: \"home\",\r\n      activeObject: row,\r\n      actionType: actionType,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Row>\r\n        <Col md={12}>\r\n          {activePage === \"list\" && (\r\n            <PNSList\r\n              activePage={activePage}\r\n              setActivePage={setActivePage}\r\n              handleIClickPage={handleIClickPage}\r\n              patientObj={props.patientObj}\r\n              handleItemClick={handleItemClick}\r\n              setRow={props.setRow}\r\n            />\r\n          )}\r\n          \r\n          <br />\r\n          <div className=\"row\">\r\n            <div className=\"form-group mb-3 col-md-12\">\r\n              <Button\r\n                content=\"Back\"\r\n                icon=\"left arrow\"\r\n                labelPosition=\"left\"\r\n                style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                onClick={() =>{\r\n                  handleItemClick(\"recency-testing\", \"recency-testing\")}\r\n                }\r\n              />\r\n              <Button\r\n                content=\"Done\"\r\n                icon=\"list\"\r\n                labelPosition=\"left\"\r\n                style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                onClick={() => handleDone()}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default PNSHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Elicitation\\Index.js",["794","795"],"import React, {useState, Fragment } from \"react\";\r\n\r\nimport { Row, Col, Card, } from \"react-bootstrap\";\r\nimport AddIndexContact from './AddIndexContact';\r\nimport IndexContactList from './IndexContactList'\r\nimport { useHistory, } from \"react-router-dom\";\r\n//import Button from '@material-ui/core/Button';\r\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\n\r\nconst Elicitation = (props) => {\r\n    \r\n    const history = useHistory();\r\n    const [activePage, setActivePage]= useState('list')\r\n    const handleIClickPage =(activeItem)=>{\r\n        setActivePage(activeItem)\r\n    }\r\n    const handleDone =()=>{\r\n      history.push('/');\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{        \r\n      if(props.completed.includes(completedMenu)) {\r\n      }else{\r\n          props.setCompleted([...props.completed, completedMenu])\r\n      }\r\n      props.handleItemClick(page)\r\n  }\r\n\r\n  return (\r\n    <Fragment>  \r\n     \r\n      <Row>       \r\n        <Col md={12}>\r\n            {activePage==='list' &&\r\n                (\r\n                    <IndexContactList activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>\r\n                )\r\n            }\r\n            {activePage==='add' && (\r\n                  <AddIndexContact activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>        \r\n            )}\r\n            <br />\r\n                <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('recency-testing','recency-testing')}/>\r\n                <Button content='Done' icon='list' labelPosition='left' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={()=>handleDone()}/>\r\n                \r\n                </div>\r\n                </div>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Elicitation;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\History\\PatientHistory.js",["796","797","798","799","800","801","802","803","804","805"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\ViewFamilyIndexForm.js",["806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\ClientReferralHistory.js",["860"],"import React, {Fragment, useState} from \"react\";\r\nimport {Col, Row} from \"react-bootstrap\";\r\nimport PNSList from \"../../NewRegistration/PartnerNotificationServices/PNSlist\";\r\nimport AddIndexContact from \"../../ContinuesHTSEnrollment/Elicitation/AddIndexContact\";\r\nimport {Button} from \"semantic-ui-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport ClientRerralList from \"./ClientRerralList\";\r\n\r\nconst ClientReferralHistory = (props) => {\r\n    let history = useHistory();\r\n\r\n    const [activePage, setActivePage] = useState(\"list\");\r\n    const handleIClickPage = (activeItem) => {\r\n        setActivePage(activeItem);\r\n    };\r\n    const handleItemClick = (page, completedMenu) => {\r\n        props.handleItemClick(page, completedMenu);\r\n     \r\n      };\r\n    const handleDone = (row, actionType) => {\r\n        if(props === \"existing\"){\r\n         props.setActivePage({\r\n            ...props.activePage,\r\n            activePage: \"home\",\r\n            activeObject: row,\r\n            actionType: actionType,\r\n        });\r\n        }else{\r\n            \r\n        history.push(\"/\");\r\n        }\r\n   \r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Row>\r\n                <Col md={12}>\r\n                    {activePage === \"list\" && (\r\n                        <ClientRerralList\r\n                            activePage={activePage}\r\n                            setActivePage={setActivePage}\r\n                            handleIClickPage={handleIClickPage}\r\n                            patientObj={props.patientObj}\r\n                            handleItemClick={handleItemClick}\r\n                            setRow={props.setRow}\r\n                        />\r\n                    )}\r\n                    {activePage === \"add\" && (\r\n                        <AddIndexContact\r\n                            activePage={activePage}\r\n                            setActivePage={setActivePage}\r\n                            handleIClickPage={handleIClickPage}\r\n                            patientObj={props.patientObj}\r\n                        />\r\n                    )}\r\n                    <br />\r\n                    <div className=\"row\">\r\n                        <div className=\"form-group mb-3 col-md-12\">\r\n                            <Button\r\n                                content=\"Back\"\r\n                                icon=\"left arrow\"\r\n                                labelPosition=\"left\"\r\n                                style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                                onClick={() =>\r\n                                    handleItemClick(\"recency-testing\", \"recency-testing\")\r\n                                }\r\n                            />\r\n                            <Button\r\n                                content=\"Done\"\r\n                                icon=\"list\"\r\n                                labelPosition=\"left\"\r\n                                style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                                onClick={() => handleDone()}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ClientReferralHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\Referrall_view_update.js",["861","862","863","864","865","866","867","868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport ServicesProvided from \"../../NewRegistration/ServicesProvided\";\r\nimport RefferalForm from \"./RefferalUnit\";\r\nimport RefferralUnit from \"./RefferalUnit\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst ViewClientReferral = (props) => {\r\n  const classes = useStyles();\r\n  // console.log(\"props.patientObj\", props.patientObj)\r\n  const [content, setContent] = useState({\r\n    showReferringUnit: false,\r\n    showServiceProviderUnit: false,\r\n  });\r\n  const patientObj = props.patientObj;\r\n  const [kP, setKP] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  let temp = { ...errors };\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [setting, setSetting] = useState([]);\r\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\r\n  const [countries, setCountries] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [genders, setGenders] = useState([]);\r\n  const [targetGroupValue, setTargetGroupValue] = useState(null);\r\n\r\n  const [contentDropDown, setContentDropDown] = useState(\"\");\r\n  const [formInfo, setFormInfo] = useState({\r\n    dateVisit: \"\",\r\n    firstName: props?.patientObj?.personResponseDto?.firstName,\r\n    middleName: props?.patientObj?.personResponseDto?.otherName,\r\n    lastName: props?.patientObj?.personResponseDto?.surname,\r\n    hospitalNumber:\r\n      props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\r\n    countryId: \"1\",\r\n    stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\r\n    province: Number(\r\n      props?.patientObj?.personResponseDto?.address?.address[0]?.district\r\n    ),\r\n    address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\r\n    landmark: \"\",\r\n    phoneNumber:\r\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\r\n        ?.value,\r\n    sexId: props?.patientObj?.personResponseDto?.gender?.id,\r\n    dob: props?.patientObj.personResponseDto?.dateOfBirth,\r\n    age: \"\",\r\n    dateOfBirth: props?.patientObj.personResponseDto?.dateOfBirth,\r\n    hivStatus: props?.patientObj?.hivTestResult2\r\n      ? props?.patientObj?.hivTestResult2\r\n      : props?.patientObj?.hivTestResult\r\n      ? props?.patientObj?.hivTestResult\r\n      : \"\",\r\n    referredFromFacility: \"\",\r\n    nameOfPersonReferringClient: \"\",\r\n    nameOfReferringFacility: Cookies.get(\"facilityName\"),\r\n    addressOfReferringFacility: \"\",\r\n    phoneNoOfReferringFacility: \"\",\r\n    referredTo: \"\",\r\n    nameOfContactPerson: \"\",\r\n    nameOfReceivingFacility: \"\",\r\n    addressOfReceivingFacility: \"\",\r\n    phoneNoOfReceivingFacility: \"\",\r\n    isDateOfBirthEstimated: false,\r\n    serviceNeeded: \"\",\r\n    comments: \"\",\r\n    receivingStateFacility: \"\",\r\n    receivingLgaFacility: \"\",\r\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\r\n    htsClientUuid: props && props.patientObj ? props.patientObj?.uuid : \"\",\r\n  });\r\n  const viewReferralInfo = () => {\r\n    axios\r\n      .get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setFormInfo(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    viewReferralInfo();\r\n  }, []);\r\n\r\n  const handleContentChange = (e) => {\r\n    setContentDropDown(e.target.value);\r\n    if (e.target.value === \"showReferringUnit\") {\r\n      setContent({\r\n        showReferringUnit: true,\r\n        showServiceProviderUnit: false,\r\n      });\r\n    }\r\n\r\n    if (e.target.value === \"showServiceProviderUnit\") {\r\n      setContent({\r\n        showReferringUnit: false,\r\n        showServiceProviderUnit: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"form-group  col-md-8\">\r\n          <FormGroup>\r\n            <Label>\r\n              Referral Type <span style={{ color: \"red\" }}> *</span>\r\n            </Label>\r\n            <select\r\n              className=\"form-control\"\r\n              name=\"contentDropDown\"\r\n              id=\"contentDropDown\"\r\n              onChange={handleContentChange}\r\n              style={{\r\n                border: \"1px solid #014D88\",\r\n                borderRadius: \"0.2rem\",\r\n              }}\r\n            >\r\n              <option value={\"\"}>Select Refarral form type</option>\r\n              <option value={\"showReferringUnit\"}>Referral form</option>\r\n              <option value={\"showServiceProviderUnit\"}>\r\n                Service Provider form\r\n              </option>\r\n            </select>\r\n          </FormGroup>\r\n        </div>\r\n      </div>\r\n      <Card className={classes.root}>\r\n        {content.showReferringUnit && (\r\n          <RefferralUnit\r\n            patientObj={patientObj}\r\n            formInfo={formInfo}\r\n            row={props.row}\r\n            handleItemClick={props.handleItemClick}\r\n            setCompleted={props.setCompleted}\r\n            completed={props.completed}\r\n          />\r\n        )}\r\n        {content.showServiceProviderUnit && (\r\n          <CardBody>\r\n            <ServicesProvided\r\n              patientObj={patientObj}\r\n              formInfo={formInfo}\r\n              row={props.row}\r\n              handleItemClick={props.handleItemClick}\r\n              etCompleted={props.setCompleted}\r\n              completed={props.completed}\r\n            />\r\n          </CardBody>\r\n        )}\r\n        {/* recieving facility  */}\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewClientReferral;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\utils\\index.js",["894","895"],"export const calculate_age = (dob) => {\r\n// the format should be YYYY-MM-DD\r\n  if (dob !== null && dob != \"\") {\r\n    //Check if the DOB is not null or empty\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob);\r\n    let todayMonth = today.getMonth();\r\n    let todayYear = today.getFullYear();\r\n    let todayDate = today.getDate(); // get the day, month and year from date of birth\r\n    let birthDateMonth = birthDate.getMonth();\r\n    let birthDateYear = birthDate.getFullYear();\r\n    let birthdateDate = birthDate.getDate();\r\n    let assumedAge = todayYear - birthDateYear;\r\n    if (assumedAge > 0) {\r\n      //Checking the month to confirm if the age has been cloocked\r\n      let monthGap = todayMonth - birthDateMonth;\r\n      if (monthGap > 0) {\r\n        return assumedAge;\r\n      } else if (monthGap < 0) {\r\n        let confirmedAge = assumedAge - 1;\r\n        return confirmedAge;\r\n      } else if (monthGap === 0) {\r\n        let dateGap = todayDate - birthdateDate;\r\n        if (dateGap > 0) {\r\n          return assumedAge;\r\n        } else if (dateGap < 0) {\r\n          let confirmedAge = assumedAge - 1;\r\n          return confirmedAge;\r\n        }\r\n      }\r\n    } else {\r\n    }\r\n  }\r\n};","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utility\\index.js",["896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\HIVSTPatientHistory.js",["915","916","917"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst HIVSTPatientHistory = (props) => {\r\n  const [hivstHistory, setHivstHistory] = useState([]);\r\n  let history = useHistory();\r\n\r\n  useEffect(() => {\r\n    //patients()\r\n    FetchHivstHistory();\r\n  }, [props.patientObj]);\r\n\r\n  const LoadViewPage = (row, actionType) => {\r\n    props.setActivePage({\r\n      ...props.activePage,\r\n      activePage: \"hivst_view\",\r\n      activeObject: row,\r\n      actionType: actionType,\r\n    });\r\n  };\r\n\r\n  const FetchHivstHistory = () => {\r\n    axios\r\n      .get(`${baseUrl}hivst?patientId=${props.patientObj.personId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        //set the last date of visit after the response\r\n        setHivstHistory(response.data);\r\n      })\r\n      .catch((error) => {\r\n        //setLoading(false)\r\n      });\r\n  };\r\n\r\n  const handleHTSDelete = (row) => {\r\n    axios\r\n      .delete(`${baseUrl}hivst/${props.patientObj.hivstId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        toast.success(`HIVST patient deleted successfully`);\r\n        history.push(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        console.err(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"HIV Self Testing History \"\r\n        columns={[\r\n          { title: \"Date of Visit\", field: \"dateOfVisit\" },\r\n          { title: \"Service Delivery Point\", field: \"serviceDeliveryPoint\" },\r\n          {\r\n            title: \"Number of Test Kits Received\",\r\n            field: \"numberOfHivstKitsReceived\",\r\n          },\r\n          { title: \"User Type\", field: \"userType\" },\r\n          {\r\n            title: \"Type of HIVST Kit Received\",\r\n            field: \"typeOfHivstKitReceived\",\r\n            filtering: false,\r\n          },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={props.loading}\r\n        data={hivstHistory.map((row) => ({\r\n          // id: row.id,\r\n          dateOfVisit: row.dateOfVisit,\r\n          serviceDeliveryPoint: row.serviceDeliveryPoint,\r\n          numberOfHivstKitsReceived: row.numberOfHivstKitsReceived,\r\n          userType: row.userType,\r\n          typeOfHivstKitReceived: row.typeOfHivstKitReceived,\r\n\r\n          actions: (\r\n            <div>\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item>\r\n                  <Button\r\n                    style={{ backgroundColor: \"rgb(153,46,98)\" }}\r\n                    primary\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                    }}\r\n                  >\r\n                    <Dropdown item text=\"Action\">\r\n                      <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                        <Dropdown.Item\r\n                          onClick={() => LoadViewPage(row, \"view\")}\r\n                        >\r\n                          {\" \"}\r\n                          <Icon name=\"eye\" />\r\n                          View\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item\r\n                          onClick={() => LoadViewPage(row, \"update\")}\r\n                        >\r\n                          <Icon name=\"edit\" />\r\n                          Edit\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => handleHTSDelete(row)}>\r\n                          <Icon name=\"delete\" />\r\n                          Delete\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Button>\r\n                </Menu.Item>\r\n              </Menu.Menu>\r\n            </div>\r\n          ),\r\n        }))}\r\n        options={{\r\n          headerStyle: {\r\n            //backgroundColor: \"#9F9FA5\",\r\n            color: \"#000\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HIVSTPatientHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\ClientRerralList.js",["918","919","920","921"],"import React, { forwardRef, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Dropdown, Icon, Menu } from \"semantic-ui-react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\nconst ClientRerralList = (props) => {\r\n  const [indexClientList, setIndexClientList] = useState([]);\r\n  const [recordSelected, setRecordSelected] = useState({});\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [serviceMapping, setServiceMapping] = useState({});\r\n  const [serviceNeeded, setServiceNeeded] = useState([]);\r\n  const toggle = () => setOpen(!open);\r\n\r\n  //const [patientObj, setpatientObj] = useState([])\r\n  const patientId =\r\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\r\n  //const [key, setKey] = useState('home');\r\n  \r\n  useEffect(() => {\r\n    patients();\r\n  }, []);\r\n  //get services needed\r\n  const SERVICE_NEEDED = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setServiceNeeded(response.data);\r\n          const mapping = {};\r\n          response.data.forEach((item) => {\r\n            mapping[item.code] = item.display;\r\n          });\r\n          setServiceMapping(mapping);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(\"Fetch Services error:\", e);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    SERVICE_NEEDED();\r\n  }, []);\r\n\r\n  async function patients() {\r\n    axios\r\n      .get(`${baseUrl}hts-client-referral/all/${patientId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        // console.log(response.data);\r\n        setIndexClientList(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n  const addNewPns = (e) => {\r\n    e.preventDefault();\r\n    props.handleItemClick(\"client-referral\");\r\n  };\r\n  const LoadViewPage = (row, actionType) => {\r\n    props.handleItemClick(\"view-referral\");\r\n    props.setRow({ row: row, action: actionType });\r\n  };\r\n  const LoadModal = (row) => {\r\n    toggle();\r\n    // console.log(row);\r\n    setRecordSelected(row);\r\n  };\r\n  const LoadDeletePage = (row) => {\r\n    axios\r\n      .delete(`${baseUrl}hts-client-referral/${recordSelected.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        toast.success(\"Record Deleted Successfully\");\r\n        toggle();\r\n        patients();\r\n        // setSaving(false);\r\n      })\r\n      .catch((error) => {\r\n        // setSaving(false);\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\" float-end  mr-2 mt-2\"\r\n          onClick={(e) => addNewPns(e)}\r\n          //startIcon={<FaUserPlus size=\"10\"/>}\r\n        >\r\n          <span style={{ textTransform: \"capitalize\" }}> Refer Client</span>\r\n        </Button>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title=\"List of  client submitted referral forms\"\r\n          columns={[\r\n            { title: \"Date visited\", field: \"date\" },\r\n            { title: \"Service needed\", field: \"service\" },\r\n            //   { title: \"Phone Number\", field: \"phone\" },\r\n            { title: \"Receiving Facility\", field: \"receiving\" },\r\n            { title: \"Actions\", field: \"actions\", filtering: false },\r\n          ]}\r\n          isLoading={props.loading}\r\n          data={indexClientList\r\n            .filter((b) => b.firstName !== \"\")\r\n            .map((row) => ({\r\n              date: row.dateVisit,\r\n              // service: serviceMapping[row.serviceNeeded] || row.serviceNeeded,\r\n                service: Object.values(row.serviceNeeded).join(', '),\r\n              // phone: row.phoneNumber,\r\n              receiving: row.nameOfReceivingFacility,\r\n              actions: (\r\n                <div>\r\n                  <Menu.Menu position=\"right\">\r\n                    <Menu.Item>\r\n                      <Button\r\n                          style={{ backgroundColor: \"rgb(153,46,98)\" }}\r\n                          primary\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                          }}\r\n                      >\r\n                      <Dropdown\r\n                        item\r\n                        text=\"Action\"\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                        }}\r\n                      >\r\n                        <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                          <Dropdown.Item\r\n                            onClick={(e) => LoadViewPage(row, \"view\")}\r\n                          >\r\n                            {\" \"}\r\n                            <Icon name=\"eye\" />\r\n                            View\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item\r\n                            onClick={() => LoadViewPage(row, \"update\")}\r\n                          >\r\n                            <Icon name=\"edit\" />\r\n                            Edit\r\n                          </Dropdown.Item>\r\n                          <Dropdown.Item onClick={() => LoadModal(row)}>\r\n                            <Icon name=\"delete\" />\r\n                            Delete\r\n                          </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                      </Dropdown>\r\n                       </Button>\r\n                    </Menu.Item>\r\n                  </Menu.Menu>\r\n                </div>\r\n              ),\r\n            }))}\r\n          options={{\r\n            headerStyle: {\r\n              //backgroundColor: \"#9F9FA5\",\r\n              color: \"#000\",\r\n            },\r\n            searchFieldStyle: {\r\n              width: \"200%\",\r\n              margingLeft: \"250px\",\r\n            },\r\n            filtering: false,\r\n            exportButton: false,\r\n            //   searchFieldAlignment: \"left\",\r\n            pageSizeOptions: [10, 20, 100],\r\n            pageSize: 10,\r\n            debounceInterval: 400,\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>\r\n            Are you Sure you want to delete{\" \"}\r\n            {/* <b>{row && record.activityName}</b> */}\r\n          </h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => LoadDeletePage(recordSelected)}\r\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            Yes\r\n            {/* {saving === false ? \"Yes\" : \"Deleting...\"} */}\r\n          </Button>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClientRerralList;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\ClientReferral\\RefferalUnit.js",["922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../../api\";\r\n\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport Select from \"react-select\";\r\n// import { getAcount } from \"../../../../utility\";\r\nimport Cookies from \"js-cookie\";\r\nimport \"react-dual-listbox/lib/react-dual-listbox.css\";\r\nimport {\r\n  getAllStateByCountryId,\r\n  getAllCountry,\r\n  getAllProvinces,\r\n  getAllGenders,\r\n  alphabetOnly,\r\n} from \"../../../../../utility\";\r\nimport { calculate_age } from \"../../../utils\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport DualListBox from \"react-dual-listbox\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst RefferralUnit = (props) => {\r\n  // console.log(\"props.patientObj\", props.patientObj);\r\n  const patientObj = props.patientObj;\r\n  const classes = useStyles();\r\n  const [errors, setErrors] = useState({});\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  let temp = { ...errors };\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [setting, setSetting] = useState([]);\r\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\r\n  const [countries, setCountries] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n\r\n  const [states, setStates] = useState([]);\r\n  const [genders, setGenders] = useState([]);\r\n  const [hivStatus, setHivStatus] = useState([]);\r\n  const [serviceNeeded, setServiceNeeded] = useState([]);\r\n\r\n  const [facilityName, setFacilityName] = useState(Cookies.get(\"facilityName\"));\r\n  const [allFacilities, setAllFacilities] = useState([]);\r\n  // console.log(Cookies.get(\"facilityName\"));\r\n  const [statesOfTheReceivingFacility, setStateOfTheReceivingFacility] =\r\n    useState([]);\r\n  const [lgasOfTheReceivingFacility, setLgasOfTheReceivingFacility] = useState(\r\n    []\r\n  );\r\n  const [receivingFacilities, setReceivingFacilities] = useState([]);\r\n  const [receivingFacility, setReceivingFacility] = useState([]);\r\n  const [selectedReceivingState, setSelectedReceivingState] = useState({});\r\n  const [selectedReceivingFacility, setSelectedReceivingFacility] = useState(\r\n    {}\r\n  );\r\n  const [selectedReceivingLga, setSelectedReceivingLga] = useState({});\r\n  const history = useHistory();\r\n  const [selectedServiceNeeded, setSelectServiceNeeded] = useState([]);\r\n\r\n  const [payload, setPayload] = useState({\r\n    dateVisit: props?.formInfo?.dateVisit,\r\n    firstName: props?.patientObj?.personResponseDto?.firstName,\r\n    middleName: props?.patientObj?.personResponseDto?.otherName,\r\n    lastName: props?.patientObj?.personResponseDto?.surname,\r\n    hospitalNumber:\r\n      props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\r\n    countryId: \"1\",\r\n    stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\r\n    province: Number(\r\n      props?.patientObj?.personResponseDto?.address?.address[0]?.district\r\n    ),\r\n    address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\r\n    landmark: \"\",\r\n    phoneNumber:\r\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\r\n        ?.value,\r\n    sexId: props?.patientObj?.personResponseDto?.gender?.id,\r\n    dob: props?.patientObj.personResponseDto?.dateOfBirth,\r\n    age: \"\",\r\n    dateOfBirth: props?.patientObj.personResponseDto?.dateOfBirth,\r\n    hivStatus: props?.patientObj?.hivTestResult2\r\n      ? props?.patientObj?.hivTestResult2\r\n      : props?.patientObj?.hivTestResult\r\n      ? props?.patientObj?.hivTestResult\r\n      : \"\",\r\n    referredFromFacility: props?.formInfo?.referredFromFacility,\r\n    nameOfPersonReferringClient: props?.formInfo?.nameOfPersonReferringClient,\r\n    nameOfReferringFacility: props?.formInfo?.nameOfReferringFacility,\r\n    addressOfReferringFacility: props?.formInfo?.addressOfReferringFacility,\r\n    phoneNoOfReferringFacility: props?.formInfo?.phoneNoOfReferringFacility,\r\n    referredTo: props?.formInfo?.referredTo,\r\n    nameOfContactPerson: props?.formInfo?.nameOfContactPerson,\r\n    nameOfReceivingFacility: props?.formInfo?.nameOfReceivingFacility,\r\n    addressOfReceivingFacility: props?.formInfo?.addressOfReceivingFacility,\r\n    phoneNoOfReceivingFacility: props?.formInfo?.phoneNoOfReceivingFacility,\r\n    isDateOfBirthEstimated: false,\r\n    serviceNeeded: props?.formInfo?.serviceNeeded,\r\n    comments: props?.formInfo?.comments,\r\n    receivingFacilityStateName: props.formInfo.receivingFacilityStateName,\r\n    receivingFacilityLgaName: props.formInfo.receivingFacilityLgaName,\r\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\r\n    htsClientUuid: props && props.patientObj ? props.patientObj?.uuid : \"\",\r\n  });\r\n\r\n  // console.log(\"PAYLOAD\", payload);\r\n  // console.log(\"props.formInfo\", props.formInfo);\r\n  const loadGenders = useCallback(async () => {\r\n    getAllGenders()\r\n      .then((response) => {\r\n        setGenders(response);\r\n      })\r\n      .catch(() => {});\r\n  }, []);\r\n  const getReceivinglga = (id) => {\r\n    getAllProvinces(id)\r\n      .then((res) => {\r\n        setLgasOfTheReceivingFacility(res);\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n\r\n  const getProvincesWithId = (id) => {\r\n    getAllProvinces(id)\r\n      .then((res) => {\r\n        setProvinces(res);\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n  useEffect(() => {\r\n    loadGenders();\r\n    getCountry();\r\n    getStateByCountryId();\r\n\r\n    if (props?.patientObj?.personResponseDto?.address?.address[0]?.stateId) {\r\n      getProvincesWithId(\r\n        props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  //Get list of State\r\n  const getStateByCountryId = () => {\r\n    getAllStateByCountryId()\r\n      .then((res) => {\r\n        setStates(res);\r\n\r\n        let ans = res.filter((each, index) => {\r\n          return (\r\n            each.name.toLowerCase() ===\r\n            props.formInfo.receivingFacilityStateName.toLowerCase()\r\n          );\r\n        });\r\n\r\n        getReceivinglga(ans[0].id);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    if (e) {\r\n      setErrors({ ...errors, phoneNumber: \"\" });\r\n    }\r\n    const limit = 10;\r\n\r\n    if (inputName === \"phoneNumber\") {\r\n      setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\r\n    } else if (inputName === \"phoneNoOfReferringFacility\") {\r\n      setPayload({\r\n        ...payload,\r\n        phoneNoOfReferringFacility: e.slice(0, limit),\r\n      });\r\n    } else if (inputName === \"phoneNoOfReceivingFacility\") {\r\n      setPayload({ ...payload, phoneNoOfReceivingFacility: e.slice(0, limit) });\r\n    }\r\n  };\r\n\r\n  // handle Facility Name to slect drop down\r\n  const handleInputChangeObject = (e) => {\r\n    // console.log(e);\r\n    setPayload({\r\n      ...payload,\r\n      nameOfReceivingFacility: e.name,\r\n      addressOfReceivingFacility: e.parentParentOrganisationUnitName,\r\n      // lgaTransferTo: e.parentOrganisationUnitName,\r\n    });\r\n    setErrors({ ...errors, nameOfReceivingFacility: \"\" });\r\n    // setSelectedState(e.parentParentOrganisationUnitName);\r\n    // setSelectedLga(e.parentOrganisationUnitName);\r\n  };\r\n\r\n  //fetch province\r\n  const getProvinces = (e) => {\r\n    const stateId = e.target.value;\r\n    if (e.target.value) {\r\n      setErrors({ ...errors, stateId: \"\" });\r\n    }\r\n    setPayload({ ...payload, stateId: e.target.value });\r\n    getAllProvinces(stateId)\r\n      .then((res) => {\r\n        setProvinces(res);\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n  const getCountry = () => {\r\n    getAllCountry()\r\n      .then((res) => {\r\n        setCountries(res);\r\n      })\r\n      .catch((e) => {\r\n        // console.log(e);\r\n      });\r\n\r\n    // console.log(response);\r\n  };\r\n\r\n  const checkNumberLimit = (e) => {\r\n    const limit = 11;\r\n    const acceptedNumber = e.slice(0, limit);\r\n    return acceptedNumber;\r\n  };\r\n  const handleInputChangePhoneNumber = (e, inputName) => {\r\n    const limit = 11;\r\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\r\n    setPayload({ ...payload, [inputName]: NumberValue });\r\n  };\r\n\r\n  // ########################################################################\r\n  const loadStates = () => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setStateOfTheReceivingFacility(response.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        // console.log(\"Fetch states error\" + e);\r\n      });\r\n  };\r\n\r\n  const loadLGA = (id) => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setLgasOfTheReceivingFacility(response.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        // console.log(\"Fetch LGA error\" + e);\r\n      });\r\n  };\r\n\r\n  const loadFacilities = (id) => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setReceivingFacilities(response.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        // console.log(\"Fetch Facilities error\" + e);\r\n      });\r\n  };\r\n\r\n  const SERVICE_NEEDED = () => {\r\n    axios\r\n        .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          if (response.data) {\r\n            // create array of objects from the response\r\n            const serviceNeeded = response.data.map((service) => {\r\n              return {\r\n                value: service.display,\r\n                label: service.display\r\n              }\r\n            });\r\n            setServiceNeeded(serviceNeeded);\r\n            // console.log(\"serviceNeeded\", serviceNeeded)\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          // handle error\r\n        });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    axios.get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    })\r\n        .then((response) => {\r\n          // Convert the serviceNeeded object into an array of its values\r\n          const serviceNeededArray = Object.values(response.data.serviceNeeded);\r\n\r\n          // Set the serviceNeededArray to selectedServiceNeeded state\r\n          setSelectServiceNeeded(serviceNeededArray);\r\n        })\r\n        .catch((error) => {\r\n          // Handle error...\r\n        });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadStates();\r\n    SERVICE_NEEDED();\r\n\r\n    loadLGA();\r\n  }, []);\r\n\r\n  // ###########################################################################\r\n  //Get list of HIV STATUS ENROLLMENT\r\n\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n\r\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (\r\n      e.target.name === \"nameOfContactPerson\" &&\r\n      e.target.value !== \"\"\r\n    ) {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (\r\n      e.target.name === \"nameOfPersonReferringClient\" &&\r\n      e.target.value !== \"\"\r\n    ) {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\r\n      async function getHosiptalNumber() {\r\n        const hosiptalNumber = e.target.value;\r\n        const response = await axios.post(\r\n          `${baseUrl}patient/exist/hospital-number`,\r\n          hosiptalNumber,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data !== true) {\r\n          setHospitalNumStatus(false);\r\n          errors.hospitalNumber = \"\";\r\n        } else {\r\n          errors.hospitalNumber = \"\";\r\n          toast.error(\"Error! Hosiptal Number already exist\");\r\n          setHospitalNumStatus(true);\r\n        }\r\n      }\r\n\r\n      getHosiptalNumber();\r\n    } else {\r\n      setPayload({ ...payload, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n        age_now--;\r\n      }\r\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      //   age_now--;\r\n      // }\r\n      payload.age = age_now;\r\n\r\n      //setpayload({...payload, age: age_now});\r\n    } else {\r\n      setPayload({ ...payload, age: \"\" });\r\n    }\r\n    setPayload({ ...payload, [e.target.name]: e.target.value });\r\n\r\n    setPayload({ ...payload, dob: e.target.value });\r\n    if (payload.age !== \"\" && payload.age <= 15) {\r\n      // props.setHideOtherMenu(true);\r\n    } else if (payload.age !== \"\" && payload.age > 15) {\r\n      // props.setHideOtherMenu(true);\r\n    } else {\r\n      // props.setHideOtherMenu(true);\r\n    }\r\n\r\n    if (payload.age !== \"\" && payload.age >= 85) {\r\n      toggle();\r\n    }\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      payload.isDateOfBirthEstimated = false;\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      payload.isDateOfBirthEstimated = true;\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      if (e.target.value !== \"\" && e.target.value >= 85) {\r\n        toggle();\r\n      }\r\n      if (e.target.value !== \"\" && e.target.value <= 15) {\r\n        props.setHideOtherMenu(false);\r\n      } else if (e.target.value !== \"\" && e.target.value > 15) {\r\n        props.setHideOtherMenu(true);\r\n      } else {\r\n        props.setHideOtherMenu(true);\r\n      }\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      setPayload({ ...payload, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n      payload.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setPayload({ ...payload, age: e.target.value });\r\n  };\r\n\r\n  // const handleItemClick = (page, completedMenu) => {\r\n  //     props.handleItemClick(page);\r\n  //     if (props.completed.includes(completedMenu)) {\r\n  //     } else {\r\n  //         props.setCompleted([...props.completed, completedMenu]);\r\n  //     }\r\n  // };\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n    temp.dateVisit = payload.dateVisit ? \"\" : \"This field is required.\";\r\n    temp.firstName = payload.firstName ? \"\" : \"This field is required.\";\r\n    temp.lastName = payload.lastName ? \"\" : \"This field is required.\";\r\n    temp.stateId = payload.stateId ? \"\" : \"This field is required.\";\r\n    temp.province = payload.province ? \"\" : \"This field is required.\";\r\n    temp.address = payload.address ? \"\" : \"This field is required.\";\r\n    temp.phoneNumber = payload.phoneNumber ? \"\" : \"This field is required.\";\r\n    temp.sexId = payload.sexId ? \"\" : \"This field is required.\";\r\n    temp.dob = payload.dob ? \"\" : \"This field is required.\";\r\n    // temp.age = payload.age ? \"\" : \"This field is required.\";\r\n    // temp.hivStatus = payload.hivStatus ? \"\" : \"This field is required.\";\r\n    // temp.stateTransferTo = payload.receivingFacilityStateName? \"\" : \"This field is required.\";\r\n    // temp.lgaTransferTo = payload.receivingFacilityLgaName ? \"\" : \"This field is required.\";\r\n    // temp.stateTransferTo = payload.receivingFacilityStateName ? \"\" : \"This field is required.\";\r\n    temp.facilityTransferTo = payload.nameOfReceivingFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.referredFromFacility = payload.referredFromFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.nameOfPersonReferringClient = payload.nameOfPersonReferringClient\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n\r\n    temp.nameOfReferringFacility = payload.nameOfReferringFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.addressOfReferringFacility = payload.addressOfReferringFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.phoneNoOfReferringFacility = payload.phoneNoOfReferringFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.nameOfContactPerson = payload.nameOfContactPerson\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.nameOfReceivingFacility = payload.nameOfReceivingFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.addressOfReceivingFacility = payload.addressOfReceivingFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.phoneNoOfReceivingFacility = payload.phoneNoOfReceivingFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.serviceNeeded = payload.serviceNeeded ? \"\" : \"This field is required.\";\r\n    // console.log(\"temp\", temp);\r\n    temp.referredTo = payload.referredTo ? \"\" : \"This field is required.\";\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const postPayload = (payload) => {\r\n    axios\r\n      .post(`${baseUrl}risk-stratification`, payload, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSaving(false);\r\n\r\n        //toast.success(\"Risk stratification save succesfully!\");\r\n      })\r\n      .catch((error) => {\r\n        setSaving(false);\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage, {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (validate()) {\r\n      try {\r\n        setSaving(true);\r\n        await axios.put(\r\n          `${baseUrl}hts-client-referral/update-hts-client-referral/${props.row.row.id}`,\r\n          payload,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n        setSaving(false);\r\n        toast.success(\"Record saved successfully\", {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        props.handleItemClick(\"refferal-history\");\r\n        // history.push(\"/\")\r\n      } catch (error) {\r\n        setSaving(false);\r\n        // console.log(\"error\", error);\r\n        const errorMessage =\r\n          error.response?.data?.apierror?.message ||\r\n          \"Something went wrong, please try again\";\r\n        toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>\r\n            Client Referral Form -{\" \"}\r\n            {props.row.action === \"update\" ? \"Update\" : \"View\"}{\" \"}\r\n          </h2>\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"#992E62\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Referral Form For Referring Unit\r\n              </div>\r\n\r\n              <p style={{ color: \"black\", marginBottom: \"20px\" }}>\r\n                <i>\r\n                  Note: This form is to be filed by the organization making the\r\n                  referral (Referring unit or organization)\r\n                </i>\r\n              </p>\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"\">\r\n                      Date <span style={{color: \"red\"}}> *</span>{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"dateVisit\"\r\n                        id=\"dateVisit\"\r\n                        value={payload.dateVisit}\r\n                        onChange={handleInputChange}\r\n                        min=\"1929-12-31\"\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.dateVisit !== \"\" ? (\r\n                        <span className={classes.error}>{errors.dateVisit}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      First Name <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"firstName\"\r\n                        id=\"firstName\"\r\n                        value={payload.firstName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                    />\r\n                    {errors.firstName !== \"\" ? (\r\n                        <span className={classes.error}>{errors.firstName}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Middle Name</Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"middleName\"\r\n                        id=\"middleName\"\r\n                        value={payload.middleName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Last Name <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"lastName\"\r\n                        id=\"lastName\"\r\n                        value={payload.lastName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                    />\r\n                    {errors.lastName !== \"\" ? (\r\n                        <span className={classes.error}>{errors.lastName}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"patientId\">\r\n                      Hospital Number <span style={{color: \"red\"}}> *</span>{\" \"}\r\n                    </Label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"hospitalNumber\"\r\n                        id=\"hospitalNumber\"\r\n                        value={payload.hospitalNumber}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                    />\r\n                    {errors.hospitalNumber !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.hospitalNumber}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                    {hospitalNumStatus === true ? (\r\n                        <span className={classes.error}>\r\n                        {\"Hospital number already exist\"}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                    {/* {hospitalNumStatus2===true ? (\r\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\r\n                                                    ) :\"\"} */}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Country <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"countryId\"\r\n                        id=\"countryId\"\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        value={payload.countryId}\r\n                        disabled\r\n                        //onChange={getStates}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {countries.map((value, index) => (\r\n                          <option key={index} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                      ))}\r\n                    </select>\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      State <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"stateId\"\r\n                        id=\"stateId\"\r\n                        value={payload.stateId}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        onChange={getProvinces}\r\n                        disabled\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {states.map((value, index) => (\r\n                          <option key={index} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.stateId !== \"\" ? (\r\n                        <span className={classes.error}>{errors.stateId}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Province/District/LGA{\" \"}\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"province\"\r\n                        id=\"province\"\r\n                        value={payload.province}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                        onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {provinces.map((value, index) => (\r\n                          <option key={index} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.province !== \"\" ? (\r\n                        <span className={classes.error}>{errors.province}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Street Address <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        id=\"address\"\r\n                        value={payload.address}\r\n                        disabled\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                    />\r\n                    {errors.address !== \"\" ? (\r\n                        <span className={classes.error}>{errors.address}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Landmark</Label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"landmark\"\r\n                        id=\"landmark\"\r\n                        value={payload.landmark}\r\n                        disabled\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Phone Number <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name=\"phoneNumber\"\r\n                        id=\"phoneNumber\"\r\n                        onChange={(e) => {\r\n                          handleInputChangePhoneNumber(e, \"phoneNumber\");\r\n                        }}\r\n                        value={payload.phoneNumber}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                        // required\r\n                    />\r\n                    {errors.phoneNumber !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.phoneNumber}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Sex <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        name=\"sexId\"\r\n                        id=\"sexId\"\r\n                        onChange={handleInputChange}\r\n                        value={payload.sexId}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {genders &&\r\n                          genders.map((gender, index) => (\r\n                              <option key={gender.id} value={gender.id}>\r\n                                {gender.display}\r\n                              </option>\r\n                          ))}\r\n                    </select>\r\n                    {errors.sexId !== \"\" ? (\r\n                        <span className={classes.error}>{errors.sexId}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {/* <div className=\"form-group mb-2 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Date Of Birth <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <div className=\"radio\">\r\n                      <label>\r\n                        <input\r\n                          type=\"radio\"\r\n                          value=\"Actual\"\r\n                          name=\"dateOfBirth\"\r\n                          defaultChecked\r\n                          onChange={(e) => handleDateOfBirthChange(e)}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        />{\" \"}\r\n                        Actual\r\n                      </label>\r\n                    </div>\r\n                    <div className=\"radio\">\r\n                      <label>\r\n                        <input\r\n                          type=\"radio\"\r\n                          value=\"Estimated\"\r\n                          name=\"dateOfBirth\"\r\n                          onChange={(e) => handleDateOfBirthChange(e)}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        />{\" \"}\r\n                        Estimated\r\n                      </label>\r\n                    </div>\r\n                  </FormGroup>\r\n                </div> */}\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Date Of Birth<span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"dob\"\r\n                        id=\"dob\"\r\n                        min=\"1929-12-31\"\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        value={payload.dob}\r\n                        onChange={handleDobChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                    />\r\n                    {errors.dob !== \"\" ? (\r\n                        <span className={classes.error}>{errors.dob}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Age <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"number\"\r\n                        name=\"age\"\r\n                        id=\"age\"\r\n                        disabled={ageDisabled}\r\n                        onChange={payload.age}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        value={calculate_age(\r\n                            props?.patientObj.personResponseDto?.dateOfBirth\r\n                                ? props?.patientObj?.personResponseDto?.dateOfBirth\r\n                                : props?.patientObj?.personResponseDto?.dateOfBirth\r\n                        )}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      HIV Status<span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"hivStatus\"\r\n                        id=\"hivStatus\"\r\n                        value={payload.hivStatus}\r\n                        disabled={ageDisabled}\r\n                        onChange={handleAgeChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                    />\r\n                    {/*<select*/}\r\n                    {/*  className=\"form-control\"*/}\r\n                    {/*  name=\"hivStatus\"*/}\r\n                    {/*  id=\"hivStatus\"*/}\r\n                    {/*  onChange={handleInputChange}*/}\r\n                    {/*  value={payload.hivStatus}*/}\r\n                    {/*  style={{*/}\r\n                    {/*    border: \"1px solid #014D88\",*/}\r\n                    {/*    borderRadius: \"0.2rem\",*/}\r\n                    {/*  }}*/}\r\n                    {/*>*/}\r\n                    {/*<option value={\"\"}>Select</option>*/}\r\n                    {/*{hivStatus.map((gender, index) => (*/}\r\n                    {/*  <option key={gender.id} value={gender.id}>*/}\r\n                    {/*    {gender.display}*/}\r\n                    {/*  </option>*/}\r\n                    {/*))}*/}\r\n                    {/*</select>*/}\r\n                    {errors.hivStatus !== \"\" ? (\r\n                        <span className={classes.error}>{errors.hivStatus}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Referred from (Department):\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        name=\"referredFromFacility\"\r\n                        id=\"referredFromFacility\"\r\n                        value={payload.referredFromFacility}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n\r\n                    {errors.referredFromFacility !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.referredFromFacility}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Name of Person Referring Client\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"nameOfPersonReferringClient\"\r\n                        id=\"nameOfPersonReferringClient\"\r\n                        value={payload.nameOfPersonReferringClient}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.nameOfPersonReferringClient !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.nameOfPersonReferringClient}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Name of Referring Facility\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"nameOfReferringFacility\"\r\n                        id=\"nameOfReferringFacility\"\r\n                        value={payload.nameOfReferringFacility}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled\r\n                    />\r\n                    {errors.nameOfReferringFacility !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.nameOfReferringFacility}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Address of Referring Facility\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"addressOfReferringFacility\"\r\n                        id=\"addressOfReferringFacility\"\r\n                        value={payload.addressOfReferringFacility}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.addressOfReferringFacility !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.addressOfReferringFacility}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Phone Number of Referring Facility{\" \"}\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name=\"phoneNoOfReferringFacility\"\r\n                        id=\"phoneNoOfReferringFacility\"\r\n                        onChange={(e) => {\r\n                          handleInputChangePhoneNumber(\r\n                              e,\r\n                              \"phoneNoOfReferringFacility\"\r\n                          );\r\n                        }}\r\n                        value={payload.phoneNoOfReferringFacility}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.phoneNoOfReferringFacility !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.phoneNoOfReferringFacility}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Referred to (Department)\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"referredTo\"\r\n                        id=\"referredTo\"\r\n                        value={payload.referredTo}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.referredTo !== \"\" ? (\r\n                        <span className={classes.error}>{errors.referredTo}</span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Name of Contact Person:\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"nameOfContactPerson\"\r\n                        id=\"nameOfContactPerson\"\r\n                        value={payload.nameOfContactPerson}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.nameOfContactPerson !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.nameOfContactPerson}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {/* props.row.action === \"update\" && */}\r\n                {\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label\r\n                          for=\"\"\r\n                          style={{color: \"#014d88\", fontWeight: \"bolder\"}}\r\n                      >\r\n                        Receiving Facility State{\" \"}\r\n                        <span style={{color: \"red\"}}> *</span>{\" \"}\r\n                      </Label>\r\n                      <Input\r\n                          type=\"select\"\r\n                          name=\"stateId\"\r\n                          style={{\r\n                            height: \"40px\",\r\n                            border: \"solid 1px #014d88\",\r\n                            borderRadius: \"5px\",\r\n                            fontWeight: \"bolder\",\r\n                            appearance: \"auto\",\r\n                          }}\r\n                          required\r\n                          disabled={props.row.action === \"view\" ? true : false}\r\n                          onChange={(e) => {\r\n                            if (e.target.value !== \"\") {\r\n                              const filterState =\r\n                                  statesOfTheReceivingFacility.filter((st) => {\r\n                                    return st.name === e.target.value;\r\n                                  });\r\n                              setSelectedReceivingState(filterState);\r\n\r\n                              setPayload((prevPayload) => ({\r\n                                ...prevPayload,\r\n                                receivingFacilityStateName: filterState[0].name,\r\n                              }));\r\n\r\n                              getReceivinglga(filterState[0].id);\r\n                            }\r\n                          }}\r\n                          value={payload.receivingFacilityStateName}\r\n                      >\r\n                        {/*{console.log(*/}\r\n                        {/*    \"receivng\",*/}\r\n                        {/*    payload.receivingFacilityStateName*/}\r\n                        {/*)}*/}\r\n                        <option>Select State</option>\r\n                        {states.map((state) => (\r\n                            <option key={state?.id} value={state?.name}>\r\n                              {state.name}\r\n                            </option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n                }\r\n                {/* props.row.action === \"update\" &&  */}\r\n                {\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label\r\n                          for=\"\"\r\n                          style={{color: \"#014d88\", fontWeight: \"bolder\"}}\r\n                      >\r\n                        {\" \"}\r\n                        Receiving Facility LGA{\" \"}\r\n                        <span style={{color: \"red\"}}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                          type=\"select\"\r\n                          name=\" receivingFacilityLgaName\"\r\n                          style={{\r\n                            height: \"40px\",\r\n                            border: \"solid 1px #014d88\",\r\n                            borderRadius: \"5px\",\r\n                            fontWeight: \"bolder\",\r\n                            appearance: \"auto\",\r\n                          }}\r\n                          required\r\n                          disabled={props.row.action === \"view\" ? true : false}\r\n                          value={payload.receivingFacilityLgaName}\r\n                          onChange={(e) => {\r\n                            if (e.target.value !== \"\") {\r\n                              const filterlga = lgasOfTheReceivingFacility.filter(\r\n                                  (lg) => {\r\n                                    return lg.name === e.target.value;\r\n                                  }\r\n                              );\r\n                              setSelectedReceivingLga(filterlga);\r\n                              setPayload((prevPayload) => ({\r\n                                ...prevPayload,\r\n                                receivingFacilityLgaName: filterlga[0].name,\r\n                              }));\r\n                              loadFacilities(filterlga[0].id);\r\n                            }\r\n                          }}\r\n                      >\r\n                        {/*{console.log(\"receivng\", payload.receivingFacilityLgaName)}*/}\r\n                        <option>Select LGA</option>\r\n                        {lgasOfTheReceivingFacility.map((lga) => (\r\n                            <option key={lga.id} value={lga.name}>\r\n                              {lga.name}\r\n                            </option>\r\n                        ))}\r\n                      </Input>\r\n                      {errors.lgaId !== \"\" ? (\r\n                          <span className={classes.error}>{errors.lgaId}</span>\r\n                      ) : (\r\n                          \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                }\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label\r\n                        for=\"\"\r\n                        style={{color: \"#014d88\", fontWeight: \"bolder\"}}\r\n                    >\r\n                      Name of Receiving Facility\r\n                      <span style={{color: \"red\"}}> *</span>{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                        type=\"select\"\r\n                        name=\"nameOfReceivingFacility\"\r\n                        style={{\r\n                          height: \"40px\",\r\n                          border: \"solid 1px #014d88\",\r\n                          borderRadius: \"5px\",\r\n                          fontWeight: \"bolder\",\r\n                          appearance: \"auto\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                        //   disabled\r\n                        // required\r\n                        value={payload.nameOfReceivingFacility}\r\n                        onChange={handleInputChange}\r\n                    >\r\n                      <option>Select State</option>\r\n                      {receivingFacilities.length > 0 &&\r\n                          receivingFacilities.map((fa) => (\r\n                              <option key={fa.id} value={fa.name}>\r\n                                {fa.name}\r\n                              </option>\r\n                          ))}\r\n\r\n                      {receivingFacilities.length < 1 && (\r\n                          <option\r\n                              key={3}\r\n                              value={payload?.nameOfReceivingFacility}\r\n                          >\r\n                            {payload?.nameOfReceivingFacility}\r\n                          </option>\r\n                      )}\r\n                    </Input>\r\n                    {errors.nameOfReceivingFacility !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.nameOfReceivingFacility}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Address of the Receiving Facility\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        name=\"addressOfReceivingFacility\"\r\n                        id=\"addressOfReceivingFacility\"\r\n                        value={payload.addressOfReceivingFacility}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.addressOfReceivingFacility !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.addressOfReceivingFacility}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Phone No of Receiving Facility\r\n                      <span style={{color: \"red\"}}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        name=\"phoneNoOfReceivingFacility\"\r\n                        id=\"phoneNoOfReceivingFacility\"\r\n                        onChange={(e) => {\r\n                          handleInputChangePhoneNumber(\r\n                              e,\r\n                              \"phoneNoOfReceivingFacility\"\r\n                          );\r\n                        }}\r\n                        value={payload.phoneNoOfReceivingFacility}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {errors.phoneNoOfReceivingFacility !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                        {errors.phoneNoOfReceivingFacility}\r\n                      </span>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {/*<div className=\"form-group mb-3 col-md-4\">*/}\r\n                {/*  <FormGroup>*/}\r\n                {/*    <Label for=\"firstName\">*/}\r\n                {/*      Services needed*/}\r\n                {/*      <span style={{ color: \"red\" }}> *</span>*/}\r\n                {/*    </Label>*/}\r\n                {/*    <select*/}\r\n                {/*      className=\"form-control\"*/}\r\n                {/*      name=\"serviceNeeded\"*/}\r\n                {/*      id=\"serviceNeeded\"*/}\r\n                {/*      onChange={handleInputChange}*/}\r\n                {/*      value={payload.serviceNeeded}*/}\r\n                {/*      style={{*/}\r\n                {/*        border: \"1px solid #014D88\",*/}\r\n                {/*        borderRadius: \"0.2rem\",*/}\r\n                {/*      }}*/}\r\n                {/*      disabled={props.row.action === \"view\" ? true : false}*/}\r\n                {/*    >*/}\r\n                {/*      <option value={\"\"}>Select Service</option>*/}\r\n                {/*      {serviceNeeded.map((value, index) => (*/}\r\n                {/*        <option key={value.id} value={value.code}>*/}\r\n                {/*          {value.display}*/}\r\n                {/*        </option>*/}\r\n                {/*      ))}*/}\r\n                {/*    </select>*/}\r\n\r\n                {/*    {errors.serviceNeeded !== \"\" ? (*/}\r\n                {/*      <span className={classes.error}>*/}\r\n                {/*        {errors.serviceNeeded}*/}\r\n                {/*      </span>*/}\r\n                {/*    ) : (*/}\r\n                {/*      \"\"*/}\r\n                {/*    )}*/}\r\n                {/*  </FormGroup>*/}\r\n                {/*</div>*/}\r\n\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  <DualListBox\r\n                      options={serviceNeeded}\r\n                      selected={selectedServiceNeeded}\r\n                      disabled={props.row.action === \"view\" ? true : false}\r\n                      onChange={(value) => {\r\n                        // Update selectedServiceNeeded state\r\n                        setSelectServiceNeeded(value);\r\n                        // Convert selectedServiceNeeded array into an object\r\n                        const serviceNeededObject = value.reduce(\r\n                            (obj, item, index) => {\r\n                              obj[index] = item;\r\n                              return obj;\r\n                            },\r\n                            {}\r\n                        );\r\n\r\n                        // Update serviceNeeded in payload\r\n                        setPayload({\r\n                          ...payload,\r\n                          serviceNeeded: serviceNeededObject,\r\n                        });\r\n                      }}\r\n                  />\r\n                </div>\r\n\r\n\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Comments\r\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\r\n                    </Label>\r\n                    <Input\r\n                        className=\"form-control\"\r\n                        type=\"textarea\"\r\n                        rows=\"4\"\r\n                        cols=\"7\"\r\n                        name=\"comments\"\r\n                        id=\"comments\"\r\n                        value={payload.comments}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                          height: \"100px\",\r\n                        }}\r\n                        disabled={props.row.action === \"view\" ? true : false}\r\n                    />\r\n                    {/* {errors.firstName !== \"\" ? (\r\n                      <span className={classes.error}>{errors.firstName}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )} */}\r\n                  </FormGroup>\r\n                </div>\r\n              </div>\r\n              <br/>\r\n\r\n              <br/>\r\n\r\n              {/* <hr /> */}\r\n              {saving ? <Spinner/> : \"\"}\r\n              <br/>\r\n              {props.row.action === \"update\" && (\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-6\">\r\n                      <Button\r\n                          content=\"Update\"\r\n                          type=\"submit\"\r\n                          icon=\"right arrow\"\r\n                          labelPosition=\"right\"\r\n                          style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\r\n                          onClick={handleSubmit}\r\n                          disabled={saving}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal\r\n          show={open}\r\n          toggle={toggle}\r\n          className=\"fade\"\r\n          size=\"sm\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RefferralUnit;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\ServicesProvided.js",["954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\n\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport { getAllGenders, alphabetOnly } from \"../../../../utility\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport DualListBox from \"react-dual-listbox\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst ServicesProvided = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  let temp = { ...errors };\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [genders, setGenders] = useState([]);\r\n    const [serviceNeeded, setServiceNeeded] = useState([]);\r\n    const [selectedServiceNeeded, setSelectServiceNeeded] = useState([]);\r\n\r\n    const [payload, setPayload] = useState({\r\n        nameOfFacilityProvider: props?.formInfo?.nameOfReceivingFacility,\r\n        addressOfFacilityProvider: props?.formInfo?.addressOfReceivingFacility || \"\",\r\n        visitDate: props?.formInfo?.receivingOrganization?.visitDate || \"\",\r\n        comments: props?.formInfo?.comments || \"\",\r\n        clientFirstName: props?.patientObj?.personResponseDto?.firstName,\r\n        clientLastName: props?.patientObj?.personResponseDto?.surname,\r\n        clientMiddleName: props?.patientObj?.personResponseDto?.otherName,\r\n        nameOfServiceProvider: props?.formInfo?.receivingOrganization?.nameOfServiceProvider || \"\",\r\n        signature: props?.formInfo?.receivingOrganization?.signature || \"\",\r\n        phoneNumber: props?.formInfo?.receivingOrganization?.phoneNumber || \"\",\r\n        categoryOfService: props?.formInfo?.receivingOrganization?.categoryOfService\r\n            || {},\r\n        receivingFacilityLgaName: props?.formInfo?.receivingFacilityLgaName,\r\n        receivingFacilityStateName: props?.formInfo?.receivingFacilityStateName\r\n    });\r\n\r\n const history = useHistory();\r\n  const [states1, setStates1] = useState([])\r\n  const [lgas1, setLGAs1] = useState([])\r\n  const [facilities1, setFacilities1] = useState([])\r\n  const [selectedState, setSelectedState] = useState({})\r\n  const [selectedFacility, setSelectedFacility] = useState({});\r\n  const [selectedLga, setSelectedLga] = useState({});\r\n\r\n    const handleItemClick = (page, completedMenu) => {\r\n        props.handleItemClick(page);\r\n        if (props.completed.includes(completedMenu)) {\r\n        } else {\r\n            props.setCompleted([...props.completed, completedMenu]);\r\n        }\r\n    };\r\n\r\n    const checkNumberLimit = (e) => {\r\n        const limit = 11;\r\n        const acceptedNumber = e.slice(0, limit);\r\n        return acceptedNumber;\r\n    };\r\n    const handleInputChangePhoneNumber = (e, inputName) => {\r\n        const limit = 11;\r\n        const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\r\n        setPayload({ ...payload, [inputName]: NumberValue });\r\n    };\r\n\r\n\r\n  // ##############################################\r\n\r\n    const SERVICE_NEEDED = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    // create array of objects from the response\r\n                    const serviceNeeded = response.data.map((service) => {\r\n                        return {\r\n                            value: service.display,\r\n                            label: service.display\r\n                        }\r\n                    });\r\n                    setServiceNeeded(serviceNeeded);\r\n                    // console.log(\"serviceNeeded\", serviceNeeded)\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                // handle error\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Fetch the saved serviceNeeded from the backend\r\n        axios.get(`${baseUrl}hts-client-referral/${props.row.row.id}`, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n            .then((response) => {\r\n                // Convert the serviceNeeded object into an array of its values\r\n                const serviceNeededArray = Object.values(response.data.serviceNeeded);\r\n\r\n                // Set the serviceNeededArray to selectedServiceNeeded state\r\n                setSelectServiceNeeded(serviceNeededArray);\r\n            })\r\n            .catch((error) => {\r\n                // Handle error...\r\n            });\r\n    }, []);\r\n\r\n\r\n  const loadStates1 = () => {\r\n    axios.get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    })\r\n        .then((response) => {\r\n          if (response.data) {\r\n            setStates1(response.data);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          // console.log(\"Fetch states error\" + e);\r\n        });\r\n  };\r\n\r\n\r\n\r\n  const loadLGA1 = (id) => {\r\n    axios.get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    })\r\n        .then((response) => {\r\n          if (response.data) {\r\n            setLGAs1(response.data);\r\n            // const selectedLga = response.data.find(lga => lga.id === id);\r\n            // setPayload(prevPayload => ({ ...prevPayload, lgaTransferTo: selectedLga ? selectedLga.name : \"\" }));\r\n          }\r\n\r\n        })\r\n        .catch((e) => {\r\n          // console.log(\"Fetch LGA error\" + e);\r\n        });\r\n  };\r\n\r\n  const loadFacilities1 = (id) => {\r\n    axios.get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`\r\n      }\r\n    })\r\n        .then((response) => {\r\n          if (response.data) {\r\n            setFacilities1(response.data);\r\n\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          // console.log(\"Fetch Facilities error\" + e);\r\n        });\r\n  };\r\n\r\n  const handleInputChangeLocation = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if(e.target.name === 'stateTransferTo'){\r\n      let filteredState = states1.filter((each)=>{\r\n        return each.name.toLowerCase()  === e.target.value.toLowerCase()\r\n      })\r\n      setPayload({ ...payload, receivingFacilityStateName : e.target.value });\r\n\r\n      loadLGA1(filteredState[0].id);\r\n    }\r\n    if(e.target.name === 'lgaTransferTo'){\r\n      let filteredState = lgas1.filter((each)=>{\r\n        return each.name.toLowerCase()  === e.target.value.toLowerCase()\r\n      })\r\n      setPayload({ ...payload, [e.target.name]: e.target.value });\r\n      loadFacilities1(filteredState[0].id);\r\n\r\n    }\r\n\r\n  };\r\n  // ################################################\r\n  const getGenders = () => {\r\n    getAllGenders()\r\n      .then((res) => {\r\n        setGenders(res);\r\n      })\r\n      .catch((e) => {\r\n        // console.log(\"error\", e);\r\n      });\r\n    // ;\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    getGenders();\r\n    loadStates1()\r\n    SERVICE_NEEDED()\r\n  }, []);\r\n\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    if (e) {\r\n      setErrors({ ...errors, phoneNumber: \"\" });\r\n    }\r\n    const limit = 10;\r\n    setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n\r\n    if (e.target.name === \"nameOfFacilityProvider\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (\r\n      e.target.name === \"addressOfFacilityProvider\" &&\r\n      e.target.value !== \"\"\r\n    ) {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"clientFirstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"clientMiddleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"clientLastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (\r\n      e.target.name === \"nameOfServiceProvider\" &&\r\n      e.target.value !== \"\"\r\n    ) {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else {\r\n      setPayload({ ...payload, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n\r\n    temp.nameOfFacilityProvider = payload.nameOfFacilityProvider\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.addressOfFacilityProvider = payload.addressOfFacilityProvider\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.visitDate = payload.visitDate ? \"\" : \"This field is required.\";\r\n    // temp.clientFirstName = payload.clientFirstName\r\n    //   ? \"\"\r\n    //   : \"This field is required.\";\r\n    // temp.clientLastName = payload.clientLastName\r\n    //   ? \"\"\r\n    //   : \"This field is required.\";\r\n    temp.nameOfServiceProvider = payload.nameOfServiceProvider\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n\r\n    temp.signature = payload.signature ? \"\" : \"This field is required.\";\r\n    temp.phoneNumber = payload.phoneNumber ? \"\" : \"This field is required.\";\r\n\r\n    temp.categoryOfService = payload.categoryOfService\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n     // console.log(\"temp\", temp);\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const data = {\r\n      htsClientReferralId: props.row.row.id,\r\n      receivingOrganizationDTO: payload\r\n    };\r\n    if (validate()) {\r\n      try {\r\n        setSaving(true);\r\n        await axios.put(`${baseUrl}hts-client-referral/${props.row.row.id}`, data, {\r\n          headers: { Authorization: `Bearer ${token}` }\r\n        });\r\n        setSaving(false);\r\n        toast.success(\"Record saved successfully\", { position: toast.POSITION.BOTTOM_CENTER });\r\n          props.handleItemClick(\"refferal-history\");\r\n      } catch (error) {\r\n        setSaving(false);\r\n        const errorMessage = error.response?.data?.apierror?.message || \"Something went wrong, please try again\";\r\n        toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\" \"}\r\n      <div>\r\n        <h2 style={{ color: \"#000\" }}>Client Referral Form </h2>\r\n        <br />\r\n        <div className=\"row\">\r\n          <div\r\n            className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n            style={{\r\n              backgroundColor: \"#992E62\",\r\n              width: \"125%\",\r\n              height: \"35px\",\r\n              color: \"#fff\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            Referral Form For Services Provided\r\n          </div>\r\n\r\n          <p style={{ color: \"black\", marginBottom: \"20px\" }}>\r\n            <i>\r\n              Note: This form should be filled out by the organization providing\r\n              the service\r\n            </i>\r\n          </p>\r\n          <div className=\"row\">\r\n            {/*###############################*/}\r\n            {/*<div className=\"form-group mb-3 col-md-6\">*/}\r\n            {/*  <FormGroup>*/}\r\n            {/*    <Label for=\"firstName\">*/}\r\n            {/*      Facility providing service State*/}\r\n            {/*    </Label>*/}\r\n            {/*    <Input*/}\r\n            {/*        className=\"form-control\"*/}\r\n            {/*        type=\"text\"*/}\r\n            {/*        name=\"receivingFacilityStateName\"*/}\r\n            {/*        id=\"receivingFacilityStateName\"*/}\r\n            {/*        value={payload.receivingFacilityStateName}*/}\r\n            {/*        onChange={handleInputChange}*/}\r\n            {/*        style={{*/}\r\n            {/*          border: \"1px solid #014D88\",*/}\r\n            {/*          borderRadius: \"0.2rem\",*/}\r\n            {/*        }}*/}\r\n            {/*        disabled*/}\r\n            {/*    />*/}\r\n            {/*    {errors.nameOfServiceProvider !== \"\" ? (*/}\r\n            {/*        <span className={classes.error}>*/}\r\n            {/*        {errors.nameOfServiceProvider}*/}\r\n            {/*      </span>*/}\r\n            {/*    ) : (*/}\r\n            {/*        \"\"*/}\r\n            {/*    )}*/}\r\n            {/*  </FormGroup>*/}\r\n            {/*</div>*/}\r\n\r\n            {/*<div className=\"form-group mb-3 col-md-6\">*/}\r\n            {/*  <FormGroup>*/}\r\n            {/*    <Label for=\"firstName\">*/}\r\n            {/*      Facility providing service LGA*/}\r\n            {/*    </Label>*/}\r\n            {/*    <Input*/}\r\n            {/*        className=\"form-control\"*/}\r\n            {/*        type=\"text\"*/}\r\n            {/*        name=\"receivingFacilityLgaName\"*/}\r\n            {/*        id=\"receivingFacilityLgaName\"*/}\r\n            {/*        value={payload.receivingFacilityLgaName}*/}\r\n            {/*        onChange={handleInputChange}*/}\r\n            {/*        style={{*/}\r\n            {/*          border: \"1px solid #014D88\",*/}\r\n            {/*          borderRadius: \"0.2rem\",*/}\r\n            {/*        }}*/}\r\n            {/*        disabled*/}\r\n            {/*    />*/}\r\n            {/*  </FormGroup>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"firstName\">Facility providing Service</Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"nameOfFacilityProvider\"\r\n                  id=\"nameOfFacilityProvider\"\r\n                  value={payload.nameOfFacilityProvider}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  disabled\r\n                />\r\n              </FormGroup>\r\n            </div>\r\n            {/*###############################*/}\r\n\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"firstName\">\r\n                  Address of Facility providing the service{\" \"}\r\n                  <span style={{ color: \"red\" }}> *</span>\r\n                </Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"addressOfFacilityProvider\"\r\n                  id=\"addressOfFacilityProvider\"\r\n                  value={payload.addressOfFacilityProvider}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  // disabled={props.row.action === \"view\" ? true : false}\r\n                  disabled\r\n                />\r\n                {errors.addressOfFacilityProvider !== \"\" ? (\r\n                  <span className={classes.error}>\r\n                    {errors.addressOfFacilityProvider}\r\n                  </span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"\">\r\n                  Date <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                </Label>\r\n                <Input\r\n                  type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                  name=\"visitDate\"\r\n                  id=\"visitDate\"\r\n                  value={payload.visitDate}\r\n                  onChange={handleInputChange}\r\n                  min={props.formInfo.dateVisit}\r\n                  max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.25rem\",\r\n                  }}\r\n                  disabled={props.row.action === \"view\" ? true : false}\r\n                />\r\n                {errors.visitDate !== \"\" ? (\r\n                  <span className={classes.error}>{errors.visitDate}</span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"firstName\">\r\n                  Client First Name <span style={{ color: \"red\" }}> *</span>\r\n                </Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"clientFirstName\"\r\n                  id=\"clientFirstName\"\r\n                  value={payload.clientFirstName}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  // disabled={props.row.action === \"view\" ? true : false}\r\n                  disabled\r\n                />\r\n                {errors.clientFirstName !== \"\" ? (\r\n                  <span className={classes.error}>\r\n                    {errors.clientFirstName}\r\n                  </span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"clientMiddleName\">\r\n                  Client Middle Name\r\n                  {/* <span style={{ color: \"red\" }}> *</span> */}\r\n                </Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"clientMiddleName\"\r\n                  id=\"clientMiddleName\"\r\n                  value={payload.clientMiddleName}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  // disabled={props.row.action === \"view\" ? true : false}\r\n                  disabled\r\n                />\r\n              </FormGroup>\r\n            </div>\r\n\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"clientLastName\">\r\n                  Client Last Name <span style={{ color: \"red\" }}> *</span>\r\n                </Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"clientLastName\"\r\n                  id=\"clientLastName\"\r\n                  value={payload.clientLastName}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  // disabled={props.row.action === \"view\" ? true : false}\r\n                  disabled\r\n                />\r\n                {errors.clientLastName !== \"\" ? (\r\n                  <span className={classes.error}>{errors.clientLastName}</span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n\r\n            <div className=\"form-group mb-3 col-md-12\">\r\n              <FormGroup>\r\n                <Label for=\"firstName\">\r\n                  Comments\r\n                  {/* <span style={{ color: \"red\" }}> *</span> */}\r\n                </Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"textarea\"\r\n                  rows=\"4\"\r\n                  cols=\"7\"\r\n                  name=\"comments\"\r\n                  id=\"comments\"\r\n                  value={payload.comments}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                    height: \"100px\",\r\n                  }}\r\n                  disabled={props.row.action === \"view\" ? true : false}\r\n                />\r\n                {/* {errors.firstName !== \"\" ? (\r\n                  <span className={classes.error}>{errors.firstName}</span>\r\n                ) : (\r\n                  \"\"\r\n                )} */}\r\n              </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"firstName\">\r\n                  Name of service provider\r\n                  <span style={{ color: \"red\" }}> *</span>\r\n                </Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"nameOfServiceProvider\"\r\n                  id=\"nameOfServiceProvider\"\r\n                  value={payload.nameOfServiceProvider}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  disabled={props.row.action === \"view\" ? true : false}\r\n                />\r\n                {errors.nameOfServiceProvider !== \"\" ? (\r\n                  <span className={classes.error}>\r\n                    {errors.nameOfServiceProvider}\r\n                  </span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n            <div className=\"form-group mb-3 col-md-6\">\r\n              <FormGroup>\r\n                <Label for=\"firstName\">\r\n                  Signature\r\n                  <span style={{ color: \"red\" }}> *</span>\r\n                </Label>\r\n                <Input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"signature\"\r\n                  id=\"signature\"\r\n                  value={payload.signature}\r\n                  onChange={handleInputChange}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  disabled={props.row.action === \"view\" ? true : false}\r\n                />\r\n                {errors.signature !== \"\" ? (\r\n                  <span className={classes.error}>{errors.signature}</span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n            <div className=\"form-group  col-md-4\">\r\n              <FormGroup>\r\n                <Label>\r\n                  Phone Number <span style={{ color: \"red\" }}> *</span>\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"phoneNumber\"\r\n                  id=\"phoneNumber\"\r\n                  onChange={(e) => {\r\n                    handleInputChangePhoneNumber(e, \"phoneNumber\");\r\n                  }}\r\n                  value={payload.phoneNumber}\r\n                  style={{\r\n                    border: \"1px solid #014D88\",\r\n                    borderRadius: \"0.2rem\",\r\n                  }}\r\n                  disabled={props.row.action === \"view\" ? true : false}\r\n                  // required\r\n                />\r\n                {errors.phoneNumber !== \"\" ? (\r\n                  <span className={classes.error}>{errors.phoneNumber}</span>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </FormGroup>\r\n            </div>\r\n            {/*<div className=\"form-group mb-3 col-md-6\">*/}\r\n            {/*  <FormGroup>*/}\r\n            {/*    <Label for=\"firstName\">Categories of Services </Label>*/}\r\n            {/*    <Input*/}\r\n            {/*      className=\"form-control\"*/}\r\n            {/*      type=\"text\"*/}\r\n            {/*      name=\"serviceCategory\"*/}\r\n            {/*      id=\"serviceCategory\"*/}\r\n            {/*      value={payload.categoryOfService}*/}\r\n            {/*      onChange={handleInputChange}*/}\r\n            {/*      style={{*/}\r\n            {/*        border: \"1px solid #014D88\",*/}\r\n            {/*        borderRadius: \"0.2rem\",*/}\r\n            {/*      }}*/}\r\n            {/*      disabled*/}\r\n            {/*    />*/}\r\n            {/*  </FormGroup>*/}\r\n            {/*</div>*/}\r\n              <div className=\"form-group mb-3 col-md-12\">\r\n                  <FormGroup>\r\n                      <Label for=\"dualListBox\">\r\n                          Categories of Services\r\n                      </Label>\r\n              <DualListBox\r\n                  options={serviceNeeded}\r\n                  selected={selectedServiceNeeded}\r\n                  onChange={(value) => {\r\n                      // Update selectedServiceNeeded state\r\n                      setSelectServiceNeeded(value);\r\n                      // Convert selectedServiceNeeded array into an object\r\n                      const serviceNeededObject = value.reduce((obj, item, index) => {\r\n                          obj[index] = item;\r\n                          return obj;\r\n                      }, {});\r\n                      // Update serviceNeeded in payload\r\n                      setPayload({ ...payload, categoryOfService: serviceNeededObject });\r\n                  }}\r\n                  // disabled={props.row.action === \"view\" ? true : false}\r\n                  disabled\r\n              />\r\n                  </FormGroup>\r\n              </div>\r\n          </div>\r\n          <br />\r\n\r\n          <br />\r\n\r\n          <br />\r\n          {props.row.action === \"update\" && (\r\n            <div className=\"row\">\r\n              {/*<div className=\"form-group mb-3 col-md-12\">*/}\r\n              {/*  <Button*/}\r\n              {/*    content=\"Done\"*/}\r\n              {/*    type=\"submit\"*/}\r\n              {/*    // icon=\"right arrow\"*/}\r\n              {/*    // labelPosition=\"right\"*/}\r\n              {/*    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}*/}\r\n              {/*    onClick={() => {*/}\r\n              {/*      history.push(\"/\");*/}\r\n              {/*    }}*/}\r\n              {/*    disabled={saving}*/}\r\n              {/*  />*/}\r\n              {/*</div>*/}\r\n              <div className=\"form-group mb-3 mt-5 col-md-6\">\r\n                <Button\r\n                  content=\"Done\"\r\n                  type=\"submit\"\r\n                  // icon=\"right arrow\"\r\n                  // labelPosition=\"right\"\r\n                  style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                  onClick={handleSubmit}\r\n                  disabled={saving}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ServicesProvided;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\PartnerNotificationServices\\PNSlist.js",["979","980","981","982","983"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../../../api\";\r\n//import { token as token } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst PNSList = (props) => {\r\n  let history = useHistory();\r\n  const [indexClientList, setIndexClientList] = useState([]);\r\n  const [recordSelected, setRecordSelected] = useState({});\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n\r\n  //const [patientObj, setpatientObj] = useState([])\r\n  const patientId =\r\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\r\n  //const [key, setKey] = useState('home');\r\n  \r\n  useEffect(() => {\r\n    patients();\r\n  }, []);\r\n  ///GET LIST OF Patients\r\n  async function patients() {\r\n    axios\r\n      .get(\r\n        `${baseUrl}hts-personal-notification-service/${props.patientObj.id}/hts-client`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n     \r\n        setIndexClientList(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n  const addNewPns = (e) => {\r\n    e.preventDefault();\r\n    props.handleItemClick(\"pns\");\r\n  };\r\n  const LoadViewPage = (row, actionType) => {\r\n    props.handleItemClick(\"view-pns\");\r\n    props.setRow({ row: row, action: actionType });\r\n  };\r\n  const LoadModal = (row) => {\r\n    toggle();\r\n    setRecordSelected(row);\r\n  };\r\n\r\n  const enrollEllicitedPatient = (row, actionType) => {\r\n  \r\n    let obj = {\r\n      uuid: row.uuid,\r\n      type: \"partner\",\r\n      clientCode: props?.patientObj?.clientCode,\r\n    };\r\n    localStorage.setItem(\"index\", JSON.stringify(obj));\r\n    history.push(\"/register-patient\");\r\n  };\r\n  const LoadDeletePage = (row) => {\r\n    // setSaving(true);\r\n    //props.setActiveContent({...props.activeContent, route:'mental-health-view', id:row.id})\r\n    axios\r\n      .delete(\r\n        `${baseUrl}hts-personal-notification-service/${recordSelected.id}`,\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        toast.success(\"Record Deleted Successfully\");\r\n        toggle();\r\n        patients();\r\n        // setSaving(false);\r\n      })\r\n      .catch((error) => {\r\n        // setSaving(false);\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\" float-end  mr-2 mt-2\"\r\n          onClick={(e) => addNewPns(e)}\r\n          //startIcon={<FaUserPlus size=\"10\"/>}\r\n        >\r\n          <span style={{ textTransform: \"capitalize\" }}>Add New PNS </span>\r\n        </Button>\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title=\"List of  client contact\"\r\n          columns={[\r\n            { title: \"Partner Name\", field: \"date\" },\r\n            { title: \"Partner ID\", field: \"age\" },\r\n            //   { title: \"Phone Number\", field: \"phone\" },\r\n            { title: \"Partner Address\", field: \"address\" },\r\n            { title: \"Actions\", field: \"actions\", filtering: false },\r\n          ]}\r\n          isLoading={props.loading}\r\n          data={indexClientList\r\n            .filter((b) => b.firstName !== \"\")\r\n            .map((row) => ({\r\n              date: row.htsClientInformation.partnerName,\r\n              age: row.partnerId,\r\n              // phone: row.phoneNumber,\r\n              address: row.htsClientInformation.partnerAddress,\r\n              actions: (\r\n                <div>\r\n                  <Menu.Menu position=\"right\">\r\n                    <Menu.Item>\r\n                      <Button\r\n                        style={{ backgroundColor: \"rgb(153,46,98)\" }}\r\n                        primary\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                        }}\r\n                      >\r\n                        <Dropdown\r\n                          item\r\n                          text=\"Action\"\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                          }}\r\n                        >\r\n                          <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                            {row?.isHtsClient === \"No\"  && \r\n                         <Dropdown.Item\r\n                            onClick={() =>\r\n                              enrollEllicitedPatient(row, \"enroll\")\r\n                            }\r\n                          >\r\n                            {\" \"}\r\n                            <Icon name=\"save\" />\r\n                            Enroll\r\n                          </Dropdown.Item>}\r\n                           \r\n                           \r\n                            <Dropdown.Item\r\n                              onClick={(e) => LoadViewPage(row, \"view\")}\r\n                            >\r\n                              {\" \"}\r\n                              <Icon name=\"eye\" />\r\n                              View\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item\r\n                              onClick={() => LoadViewPage(row, \"update\")}\r\n                            >\r\n                              <Icon name=\"edit\" />\r\n                              Edit\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item onClick={() => LoadModal(row)}>\r\n                              <Icon name=\"delete\" />\r\n                              Delete\r\n                            </Dropdown.Item>\r\n                          </Dropdown.Menu>\r\n                        </Dropdown>\r\n                      </Button>\r\n                    </Menu.Item>\r\n                  </Menu.Menu>\r\n                </div>\r\n              ),\r\n            }))}\r\n          options={{\r\n            headerStyle: {\r\n              //backgroundColor: \"#9F9FA5\",\r\n              color: \"#000\",\r\n            },\r\n            searchFieldStyle: {\r\n              width: \"200%\",\r\n              margingLeft: \"250px\",\r\n            },\r\n            filtering: false,\r\n            exportButton: false,\r\n            //   searchFieldAlignment: \"left\",\r\n            pageSizeOptions: [10, 20, 100],\r\n            pageSize: 10,\r\n            debounceInterval: 400,\r\n          }}\r\n        />\r\n      </div>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"md\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>\r\n            Are you Sure you want to delete{\" \"}\r\n            {/* <b>{row && record.activityName}</b> */}\r\n          </h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={() => LoadDeletePage(recordSelected)}\r\n            style={{ backgroundColor: \"red\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            Yes\r\n            {/* {saving === false ? \"Yes\" : \"Deleting...\"} */}\r\n          </Button>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n            // disabled={saving}\r\n          >\r\n            No\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PNSList;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\ExistenceClientHIVSTRegistration.js",["984","985","986","987","988","989","990","991","992"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Card, CardBody } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\n// import FamilyIndexTestingForm from \"./NewRegistration/FamilyIndexTestingForm\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Icon, Menu, Sticky } from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport HIVSTPatientRegistration from \"./HIVSTPatientRegistration\";\r\n// import RiskStratification from \"../ContinuesHTSEnrollment/RiskStratification\";\r\n// import BasicInfo from \"../ContinuesHTSEnrollment/BasicInfo\";\r\n// import PreTest from \"../ContinuesHTSEnrollment/PreTest\";\r\n// import HivTestResult from \"../ContinuesHTSEnrollment/HivTestResult\";\r\n// import PostTest from \"../ContinuesHTSEnrollment/PostTest\";\r\n// import IndexingContactTracing from \"../ContinuesHTSEnrollment/Elicitation\";\r\n// import RecencyTesting from \"../ContinuesHTSEnrollment/RecencyTesting\";\r\n// import Others from \"../ContinuesHTSEnrollment/Others\";\r\n// import PNSHistory from \"../NewRegistration/PartnerNotificationServices/PNSHistory\";\r\n// import PnsForm from \"../NewRegistration/PartnerNotificationServices/PnsForm\";\r\n// import ViewPNSForm from \"../NewRegistration/PartnerNotificationServices/ViewPnsForm\";\r\n// import ReferralUnit from \"../ContinuesHTSEnrollment/ClientReferral/ReferralUnit\";\r\n\r\nconst ExistenceClientHIVSTRegistration = (props) => {\r\n    const location = useLocation();\r\n    const locationState = location.state;\r\n    const [activeItem, setactiveItem] = useState(\"reg\");\r\n    const [completed, setCompleted] = useState([]);\r\n    const [hideOtherMenu, setHideOtherMenu] = useState(true);\r\n    // const [saving, setSaving] = useState(false);\r\n    const [patientObj2, setPatientObj2] = useState({});\r\n\r\n    const handleItemClick = (activeItem) => {\r\n        setactiveItem(activeItem);\r\n        //setCompleted({...completed, ...completedMenu})\r\n    };\r\n\r\n    return (<>\r\n        <ToastContainer autoClose={3000} hideProgressBar />\r\n\r\n        <Card>\r\n            <CardBody>\r\n                <form>\r\n                    <div className=\"row\">\r\n                        <h3> HIV SELF TEST </h3>\r\n                        <br />\r\n                        <br />\r\n                        <div className=\"col-md-3 col-sm-3 col-lg-3\">\r\n                            <Menu\r\n                                size=\"large\"\r\n                                vertical\r\n                                style={{ backgroundColor: \"#014D88\" }}\r\n                            >\r\n                                <Menu.Item\r\n                                    name=\"inbox\"\r\n                                    active={activeItem === \"reg\"}\r\n                                    onClick={() => handleItemClick(\"reg\")}\r\n                                    style={{\r\n                                        backgroundColor: activeItem === \"reg\" ? \"#000\" : \"\",\r\n                                    }}\r\n                                >\r\n                                    <span style={{ color: \"#fff\" }}>\r\n                                        {\" \"}\r\n                                        Patient Registration\r\n                                        {completed.includes(\"reg\") && (<Icon name=\"check\" color=\"green\" />)}\r\n                                    </span>\r\n                                </Menu.Item>\r\n                            </Menu>\r\n                        </div>\r\n                        <div\r\n                            className=\"col-md-9 col-sm-9 col-lg-9 \"\r\n                            style={{\r\n                                backgroundColor: \"#fff\", margingLeft: \"-50px\", paddingLeft: \"-20px\",\r\n                            }}\r\n                        >\r\n                            {activeItem === \"reg\" && ( <HIVSTPatientRegistration\r\n                                handleItemClick={handleItemClick}\r\n                                setCompleted={setCompleted}\r\n                                completed={completed}\r\n                                setPatientObj={setPatientObj2}\r\n                                patientObj={patientObj2}\r\n                                setHideOtherMenu={setHideOtherMenu}\r\n                                // patientAge={props.patientAge}\r\n                                // setExtra={setExtra}\r\n                                // extra={extra}\r\n                                patientObject={locationState.patientObject}\r\n                            // activePage={props.activePage}\r\n                            // setActivePage={props.setActivePage}\r\n                            />)}\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </CardBody>\r\n        </Card>\r\n    </>);\r\n\r\n};\r\nexport default ExistenceClientHIVSTRegistration;","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContineousRegistrationTesting.js",["993","994","995","996","997","998","999","1000","1001","1002"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Elicitation\\AddIndexContact.js",["1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\n// import {token, url as baseUrl } from \"../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport PersonIcon from \"@mui/icons-material/Person\";\r\nimport { alphabetOnly } from \"../../../../../utility\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst AddIndexContact = (props) => {\r\n  const classes = useStyles();\r\n  const [saving, setSaving] = useState(false);\r\n  const [sexs, setSexs] = useState([]);\r\n  const [notificationContact, setNotificationContact] = useState([]);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [indexTesting, setIndexTesting] = useState([]);\r\n  const [consent, setConsent] = useState([]);\r\n  const [hivTestDate, setHivTestDate] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n  const [states, setStates] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [elicitedCount, setElicitedCount] = useState(0);\r\n\r\n  let temp = { ...errors };\r\n  const [objValuesIndex, setObjValuesIndex] = useState({\r\n    htsClientId: null,\r\n    indexNotificationServicesElicitation: {},\r\n    personId: null,\r\n  });\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    firstName: \"\",\r\n    middleName: \"\",\r\n    lastName: \"\",\r\n    dob: \"\",\r\n    phoneNumber: \"\",\r\n    altPhoneNumber: \"\",\r\n    sex: \"\",\r\n    htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\r\n    physicalHurt: \"\",\r\n    threatenToHurt: \"\",\r\n    address: \"\",\r\n    hangOutSpots: \"\",\r\n    relativeToIndexClient: \"\",\r\n    currentlyLiveWithPartner: \"\",\r\n    partnerTestedPositive: \"\",\r\n    sexuallyUncomfortable: \"\",\r\n    notificationMethod: \"\",\r\n    datePartnerCameForTesting: \"\",\r\n    offeredIns: \"\",\r\n    acceptedIns: \"\",\r\n    elicited: \"\",\r\n    stateId: \"\",\r\n    lga: \"\",\r\n    dateTested: \"\",\r\n    currentHivStatus: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    Sex();\r\n    getStates();\r\n    NotificationContact();\r\n    IndexTesting();\r\n    Consent();\r\n    if (props.patientObj) {\r\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\r\n        setHivTestDate(props.patientObj.dateVisit);\r\n      } else {\r\n        setHivTestDate(\"\");\r\n      }\r\n    }\r\n  }, [props.patientObj]);\r\n\r\n  function getStateByCountryId(getCountryId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setStates(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n\r\n  function getProvincesId(getStateId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n\r\n  const getProvinces = (e) => {\r\n    const stateId = e.target.value;\r\n    setObjValues({ ...objValues, stateId: e.target.value });\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(\r\n          response.data.sort((x, y) => {\r\n            return x.id - y.id;\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n  const getStates = () => {\r\n    getStateByCountryId(\"1\");\r\n    setObjValues({ ...objValues, countryId: 1 });\r\n  };\r\n\r\n  //Get list of Genders from\r\n  const Sex = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        \r\n        setSexs(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of IndexTesting\r\n  const IndexTesting = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setIndexTesting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  ///CONSENT\tYes\t\ten\tCONSENT\r\n  const Consent = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setConsent(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  const NotificationContact = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        \r\n        setNotificationContact(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  const handleItemClickPage = (page) => {\r\n    props.handleIClickPage(page);\r\n  };\r\n  const handleInputChange = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    if (e.target.name === \"middleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\r\n    //     setHideNumChild(true)\r\n    // }else{\r\n    //     setHideNumChild(false)\r\n    // }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age_now--;\r\n      }\r\n      objValues.age = age_now;\r\n\r\n      //setBasicInfo({...basicInfo, age: age_now});\r\n    } else {\r\n      setObjValues({ ...objValues, age: \"\" });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n\r\n    setObjValues({ ...objValues, dob: e.target.value });\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value === \"Actual\") {\r\n      objValues.isDateOfBirthEstimated = false;\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value === \"Estimated\") {\r\n      objValues.isDateOfBirthEstimated = true;\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setObjValues({ ...objValues, age: e.target.value });\r\n  };\r\n  //End of Date of Birth and Age handling\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    const limit = 10;\r\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\r\n  };\r\n  \r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n    //temp.acceptedIns = objValues.acceptedIns ? \"\" : \"This field is required.\"\r\n    temp.offeredIns = objValues.offeredIns ? \"\" : \"This field is required.\";\r\n\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setSaving(true);\r\n      objValues.isDateOfBirthEstimated =\r\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\r\n      axios\r\n        .post(`${baseUrl}index-elicitation`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          toast.success(\"Record save successfully\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          if (\r\n            objValues.offeredIns !== \"No\" &&\r\n            objValues.acceptedIns !== \"No\" &&\r\n            objValues.elicited !== \"No\"\r\n          ) {\r\n            setElicitedCount(elicitedCount + 1);\r\n            setObjValues({\r\n              firstName: \"\",\r\n              middleName: \"\",\r\n              lastName: \"\",\r\n              dob: \"\",\r\n              phoneNumber: \"\",\r\n              altPhoneNumber: \"\",\r\n              sex: \"\",\r\n              htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\r\n              physicalHurt: \"\",\r\n              threatenToHurt: \"\",\r\n              address: \"\",\r\n              hangOutSpots: \"\",\r\n              relativeToIndexClient: \"\",\r\n              currentlyLiveWithPartner: \"\",\r\n              partnerTestedPositive: \"\",\r\n              sexuallyUncomfortable: \"\",\r\n              notificationMethod: \"\",\r\n              datePartnerCameForTesting: \"\",\r\n              age: \"\",\r\n              isDateOfBirthEstimated: false,\r\n              //offeredIns:\"\",\r\n              //acceptedIns:\"\",\r\n              //elicited: \"\",\r\n              stateId: \"\",\r\n              lga: \"\",\r\n              dateTested: \"\",\r\n              currentHivStatus: \"\",\r\n            });\r\n          }\r\n          //handleItemClickPage('list')\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage, {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>\r\n            Index Notification Services - Elicitation\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\" float-end  mr-2 mt-2\"\r\n              onClick={() => handleItemClickPage(\"list\")}\r\n              //startIcon={<FaUserPlus size=\"10\"/>}\r\n            >\r\n              <span style={{ textTransform: \"capitalize\" }}>\r\n                {\" \"}\r\n                Back To Client Index List\r\n              </span>\r\n            </Button>\r\n          </h2>\r\n          {elicitedCount === 0 ? (\r\n            \"\"\r\n          ) : (\r\n            <Badge badgeContent={elicitedCount} color=\"primary\">\r\n              Elicited Clients\r\n              <PersonIcon color=\"action\" />\r\n            </Badge>\r\n          )}\r\n          <br />\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Offered INS ? <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"offeredIns\"\r\n                    id=\"offeredIns\"\r\n                    value={objValues.offeredIns}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {consent.map((value) => (\r\n                      <option key={value.id} value={value.display}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.offeredIns !== \"\" ? (\r\n                    <span className={classes.error}>{errors.offeredIns}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.offeredIns !== \"\" && objValues.offeredIns !== \"No\" && (\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Accepted INS ? <span style={{ color: \"red\" }}> </span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"acceptedIns\"\r\n                      id=\"acceptedIns\"\r\n                      value={objValues.acceptedIns}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      {consent.map((value) => (\r\n                        <option key={value.id} value={value.display}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {objValues.acceptedIns !== \"\" &&\r\n                objValues.acceptedIns !== \"No\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Elicited ? <span style={{ color: \"red\" }}> </span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"elicited\"\r\n                        id=\"elicited\"\r\n                        value={objValues.elicited}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              {objValues.elicited !== \"\" && objValues.elicited !== \"No\" && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">First Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"firstName\"\r\n                        id=\"firstName\"\r\n                        value={objValues.firstName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Middle Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"middleName\"\r\n                        id=\"middleName\"\r\n                        value={objValues.middleName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Last Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"lastName\"\r\n                        id=\"lastName\"\r\n                        value={objValues.lastName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-2 col-md-2\">\r\n                    <FormGroup>\r\n                      <Label>Date Of Birth</Label>\r\n                      <div className=\"radio\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            value=\"Actual\"\r\n                            name=\"dateOfBirth\"\r\n                            defaultChecked\r\n                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />{\" \"}\r\n                          Actual\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"radio\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            value=\"Estimated\"\r\n                            name=\"dateOfBirth\"\r\n                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />{\" \"}\r\n                          Estimated\r\n                        </label>\r\n                      </div>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                      <Label>Date</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"dob\"\r\n                        id=\"dob\"\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        value={objValues.dob}\r\n                        onChange={handleDobChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                      <Label>Age</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"number\"\r\n                        name=\"age\"\r\n                        id=\"age\"\r\n                        value={objValues.age}\r\n                        disabled={ageDisabled}\r\n                        onChange={handleAgeChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Phone Number</Label>\r\n\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014D88\",\r\n                        }}\r\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                        country={\"ng\"}\r\n                        placeholder=\"(234)7099999999\"\r\n                        minLength={10}\r\n                        name=\"phoneNumber\"\r\n                        id=\"phoneNumber\"\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        value={objValues.phoneNumber}\r\n                        onChange={(e) => {\r\n                          checkPhoneNumberBasic(e, \"phoneNumber\");\r\n                        }}\r\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                      />\r\n                      {errors.phoneNumber !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.phoneNumber}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Alternative Phone Number</Label>\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014D88\",\r\n                        }}\r\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                        country={\"ng\"}\r\n                        placeholder=\"(234)7099999999\"\r\n                        minLength={10}\r\n                        name=\"altPhoneNumber\"\r\n                        id=\"altPhoneNumber\"\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        value={objValues.altPhoneNumber}\r\n                        onChange={(e) => {\r\n                          checkPhoneNumberBasic(e, \"altPhoneNumber\");\r\n                        }}\r\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Sex *</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sex\"\r\n                        id=\"sex\"\r\n                        value={objValues.sex}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {sexs.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        State <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"state\"\r\n                        id=\"state\"\r\n                        onChange={getProvinces}\r\n                        value={objValues.stateId}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {states.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.stateId !== \"\" ? (\r\n                        <span className={classes.error}>{errors.stateId}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        LGA <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lga\"\r\n                        id=\"lga\"\r\n                        value={objValues.lga}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {provinces.map((value, index) => (\r\n                          <option key={index} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.lga !== \"\" ? (\r\n                        <span className={classes.error}>{errors.lga}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Address</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        id=\"address\"\r\n                        value={objValues.address}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Hang-out spots</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"hangOutSpots\"\r\n                        id=\"hangOutSpots\"\r\n                        value={objValues.hangOutSpots}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Relationship to Index Client *</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"relativeToIndexClient\"\r\n                        id=\"relativeToIndexClient\"\r\n                        value={objValues.relativeToIndexClient}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {indexTesting.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Do you currently live with this partner? *</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"currentlyLiveWithPartner\"\r\n                        id=\"currentlyLiveWithPartner\"\r\n                        value={objValues.currentlyLiveWithPartner}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value={\"true\"}>Yes</option>\r\n                        <option value={\"false\"}>No</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        As far as you know, has this partner ever tested\r\n                        positive for HIV *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"partnerTestedPositive\"\r\n                        id=\"partnerTestedPositive\"\r\n                        value={objValues.partnerTestedPositive}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever hit, kick, slapped or otherwise\r\n                        physical hurt you? *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"physicalHurt\"\r\n                        id=\"physicalHurt\"\r\n                        value={objValues.physicalHurt}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever threatened to hurt you? *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"threatenToHurt\"\r\n                        id=\"threatenToHurt\"\r\n                        value={objValues.threatenToHurt}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever threatened to force you to do\r\n                        something sexually that made you uncomfortable ? *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sexuallyUncomfortable\"\r\n                        id=\"sexuallyUncomfortable\"\r\n                        value={objValues.sexuallyUncomfortable}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Notification Method selected*</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"notificationMethod\"\r\n                        id=\"notificationMethod\"\r\n                        value={objValues.notificationMethod}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {notificationContact.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">\r\n                        If contract by which date will partner come for testing?\r\n                      </Label>\r\n                      <Input\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"datePartnerCameForTesting\"\r\n                        id=\"datePartnerCameForTesting\"\r\n                        value={objValues.datePartnerCameForTesting}\r\n                        onChange={handleInputChange}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                      {errors.datePartnerComeForTesting !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.datePartnerComeForTesting}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        HIV Status of Index Client{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"currentHivStatus\"\r\n                        id=\"currentHivStatus\"\r\n                        value={objValues.currentHivStatus}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"negative\">Negative</option>\r\n                        <option value=\"positive\">Positive</option>\r\n                        <option value=\"unknown\">Unknown</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  {objValues.currentHivStatus !== \"\" &&\r\n                    objValues.currentHivStatus === \"positive\" && (\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"\">\r\n                            Date Tested?{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <Input\r\n                            type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                            name=\"dateTested\"\r\n                            id=\"dateTested\"\r\n                            value={objValues.dateTested}\r\n                            onChange={handleInputChange}\r\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.25rem\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                </>\r\n              )}\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <Button\r\n                    content=\"Save\"\r\n                    icon=\"save\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddIndexContact;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\History\\History.js",["1014","1015","1016","1017"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst PatientnHistory = (props) => {\r\n  let history = useHistory();\r\n  useEffect(() => {\r\n    //patients()\r\n  }, [props.patientObj]);\r\n\r\n  const LoadViewPage = (row, actionType) => {\r\n    props.setActivePage({\r\n      ...props.activePage,\r\n      activePage: \"view\",\r\n      activeObject: row,\r\n      actionType: actionType,\r\n    });\r\n  };\r\n\r\n  const handleHTSDelete = (row) => {\r\n    axios\r\n      .delete(`${baseUrl}hts/${row.id}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        toast.success(\r\n          `HTS patient with client code ${row.clientCode}, deleted successfully`\r\n        );\r\n        history.push(\"/\");\r\n      })\r\n      .catch((err) => {\r\n  \r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"HTS HISTORY\"\r\n        columns={[\r\n          // { title: \"HTS ID\", field: \"id\" },\r\n          { title: \"Date\", field: \"date\" },\r\n          { title: \"Client Code\", field: \"clientCode\" },\r\n          { title: \"Pre Test Counseling\", field: \"pre\" },\r\n          { title: \"Recency Test\", field: \"rencency\" },\r\n          { title: \"Post Test\", field: \"post\" },\r\n          // { title: \"Index Notification\", field: \"indexNotifiation\", filtering: false },\r\n          {\r\n            title: \"Request & Result\",\r\n            field: \"requestResult\",\r\n            filtering: false,\r\n          },\r\n          { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        isLoading={props.loading}\r\n        data={props.patientList.map((row) => ({\r\n          // id: row.id,\r\n          date: row.dateVisit,\r\n          clientCode: row.clientCode,\r\n\r\n          pre: row.knowledgeAssessment ? \"Filled\" : \"Not Filled \",\r\n          requestResult: row.confirmatoryTest ? \"Filled\" : \"Not Filled \",\r\n          rencency: row.recency ? \"Filled\" : \"Not Filled \",\r\n          post: row.postTestCounselingKnowledgeAssessment\r\n            ? \"Filled\"\r\n            : \"Not Filled \",\r\n          //indexNotifiation:row.indexNotificationServicesElicitation ? \"Filled\":\"Not Filled \",\r\n\r\n          actions: (\r\n            <div>\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item>\r\n                  <Button\r\n                    style={{ backgroundColor: \"rgb(153,46,98)\" }}\r\n                    primary\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                    }}\r\n                  >\r\n                    <Dropdown item text=\"Action\">\r\n                      <Dropdown.Menu style={{ marginTop: \"10px\" }}>\r\n                        <Dropdown.Item\r\n                          onClick={() => LoadViewPage(row, \"view\")}\r\n                        >\r\n                          {\" \"}\r\n                          <Icon name=\"eye\" />\r\n                          View\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item\r\n                          onClick={() => LoadViewPage(row, \"update\")}\r\n                        >\r\n                          <Icon name=\"edit\" />\r\n                          Edit\r\n                        </Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => handleHTSDelete(row)}>\r\n                          <Icon name=\"delete\" />\r\n                          Delete\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Button>\r\n                </Menu.Item>\r\n              </Menu.Menu>\r\n            </div>\r\n          ),\r\n        }))}\r\n        options={{\r\n          headerStyle: {\r\n            //backgroundColor: \"#9F9FA5\",\r\n            color: \"#000\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientnHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\Elicitation\\IndexContactList.js",["1018","1019","1020","1021","1022","1023","1024","1025"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../../../api\";\r\n//import { token as token } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst PatientnHistory = (props) => {\r\n  const [indexClientList, setIndexClientList] = useState([]);\r\n  //const [patientObj, setpatientObj] = useState([])\r\n  const patientId =\r\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\r\n  //const [key, setKey] = useState('home');\r\n  \r\n  useEffect(() => {\r\n    patients();\r\n  }, []);\r\n  ///GET LIST OF Patients\r\n  async function patients() {\r\n    axios\r\n      .get(`${baseUrl}hts/${props.patientObj.id}/index-elicitation`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setIndexClientList(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n  const handleItemClickPage = (page) => {\r\n    props.handleIClickPage(page);\r\n  };\r\n  const handleIEditIndex = (page, activePage) => {\r\n    console.log(page);\r\n    console.log(activePage);\r\n    //props.setActivePage({...props.activePage, activePage:\"activePage\", activeObject:row, actionType:actionType})\r\n    //props.handleIClickPage(page)\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-end  mr-2 mt-2\"\r\n        onClick={() => handleItemClickPage(\"add\")}\r\n        //startIcon={<FaUserPlus size=\"10\"/>}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>New Index Client </span>\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"List of  client contact\"\r\n        columns={[\r\n          { title: \"Name\", field: \"name\" },\r\n          { title: \"Age\", field: \"age\" },\r\n          { title: \"Phone Number\", field: \"phone\" },\r\n          { title: \"Adress\", field: \"address\" },\r\n          // { title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={indexClientList\r\n          .filter((b) => b.firstName !== \"\")\r\n          .map((row) => ({\r\n            name: row.firstName + \" \" + row.lastName,\r\n            age: calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n            phone: row.phoneNumber,\r\n            address: row.address,\r\n            actions: (\r\n              <>\r\n                {/* <Menu.Menu position='right'  >\r\n                            <Menu.Item >\r\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                <Dropdown item text='Action'>\r\n\r\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                \r\n                                <Dropdown.Item  \r\n                                //onClick={()=>handleIEditIndex(row, 'update')}\r\n                                >\r\n                                    <Icon name='edit' />Edit</Dropdown.Item>\r\n                                <Dropdown.Item  \r\n                                //onClick={()=>LoadDeletePage(row, 'delete')}\r\n                                > <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                                </Button>\r\n                            </Menu.Item>\r\n                        </Menu.Menu> */}\r\n              </>\r\n            ),\r\n          }))}\r\n        options={{\r\n          headerStyle: {\r\n            //backgroundColor: \"#9F9FA5\",\r\n            color: \"#000\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientnHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Elicitation\\AddIndexContact.js",["1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\n// import {token, url as baseUrl } from \"../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport PersonIcon from \"@mui/icons-material/Person\";\r\nimport { alphabetOnly } from \"../../../../../utility\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst AddIndexContact = (props) => {\r\n  const classes = useStyles();\r\n  const [saving, setSaving] = useState(false);\r\n  const [sexs, setSexs] = useState([]);\r\n  const [notificationContact, setNotificationContact] = useState([]);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [indexTesting, setIndexTesting] = useState([]);\r\n  const [consent, setConsent] = useState([]);\r\n  const [hivTestDate, setHivTestDate] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n  const [states, setStates] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [elicitedCount, setElicitedCount] = useState(0);\r\n\r\n  let temp = { ...errors };\r\n  const [objValuesIndex, setObjValuesIndex] = useState({\r\n    htsClientId: null,\r\n    indexNotificationServicesElicitation: {},\r\n    personId: null,\r\n  });\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    firstName: \"\",\r\n    middleName: \"\",\r\n    lastName: \"\",\r\n    dob: \"\",\r\n    phoneNumber: \"\",\r\n    altPhoneNumber: \"\",\r\n    sex: \"\",\r\n    htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\r\n    physicalHurt: \"\",\r\n    threatenToHurt: \"\",\r\n    address: \"\",\r\n    hangOutSpots: \"\",\r\n    relativeToIndexClient: \"\",\r\n    currentlyLiveWithPartner: \"\",\r\n    partnerTestedPositive: \"\",\r\n    sexuallyUncomfortable: \"\",\r\n    notificationMethod: \"\",\r\n    datePartnerCameForTesting: \"\",\r\n    offeredIns: \"\",\r\n    acceptedIns: \"\",\r\n    elicited: \"\",\r\n    stateId: \"\",\r\n    lga: \"\",\r\n    dateTested: \"\",\r\n    currentHivStatus: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    Sex();\r\n    getStates();\r\n    NotificationContact();\r\n    IndexTesting();\r\n    Consent();\r\n    if (props.patientObj) {\r\n      if (props.patientObj.dateVisit && props.patientObj.dateVisit !== \"\") {\r\n        setHivTestDate(props.patientObj.dateVisit);\r\n      } else {\r\n        setHivTestDate(\"\");\r\n      }\r\n    }\r\n  }, [props.patientObj]);\r\n\r\n  function getStateByCountryId(getCountryId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setStates(response.data);\r\n      })\r\n      .catch((error) => {\r\n       \r\n      });\r\n  }\r\n\r\n  function getProvincesId(getStateId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(response.data);\r\n      })\r\n      .catch((error) => {\r\n        \r\n      });\r\n  }\r\n\r\n  const getProvinces = (e) => {\r\n    const stateId = e.target.value;\r\n    setObjValues({ ...objValues, stateId: e.target.value });\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(\r\n          response.data.sort((x, y) => {\r\n            return x.id - y.id;\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n       \r\n      });\r\n  };\r\n\r\n  const getStates = () => {\r\n    getStateByCountryId(\"1\");\r\n    setObjValues({ ...objValues, countryId: 1 });\r\n  };\r\n\r\n  //Get list of Genders from\r\n  const Sex = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSexs(response.data);\r\n      })\r\n      .catch((error) => {\r\n       \r\n      });\r\n  };\r\n  //Get list of IndexTesting\r\n  const IndexTesting = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setIndexTesting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        \r\n      });\r\n  };\r\n  ///CONSENT\tYes\t\ten\tCONSENT\r\n  const Consent = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setConsent(response.data);\r\n      })\r\n      .catch((error) => {\r\n       \r\n      });\r\n  };\r\n  const NotificationContact = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setNotificationContact(response.data);\r\n      })\r\n      .catch((error) => {\r\n        \r\n      });\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  const handleItemClickPage = (page) => {\r\n    props.handleIClickPage(page);\r\n  };\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    if (e.target.name === \"middleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\r\n    //     setHideNumChild(true)\r\n    // }else{\r\n    //     setHideNumChild(false)\r\n    // }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n        age_now--;\r\n      }\r\n      objValues.age = age_now;\r\n\r\n      //setBasicInfo({...basicInfo, age: age_now});\r\n    } else {\r\n      setObjValues({ ...objValues, age: \"\" });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n\r\n    setObjValues({ ...objValues, dob: e.target.value });\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      objValues.isDateOfBirthEstimated = false;\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      objValues.isDateOfBirthEstimated = true;\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setObjValues({ ...objValues, age: e.target.value });\r\n  };\r\n  //End of Date of Birth and Age handling\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    const limit = 10;\r\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\r\n  };\r\n  \r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n    //temp.acceptedIns = objValues.acceptedIns ? \"\" : \"This field is required.\"\r\n    temp.offeredIns = objValues.offeredIns ? \"\" : \"This field is required.\";\r\n\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setSaving(true);\r\n      objValues.isDateOfBirthEstimated =\r\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\r\n      axios\r\n        .post(`${baseUrl}index-elicitation`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          toast.success(\"Record save successfully\", {\r\n            position: toast.POSITION.BOTTOM_CENTER,\r\n          });\r\n          if (\r\n            objValues.offeredIns !== \"No\" &&\r\n            objValues.acceptedIns !== \"No\" &&\r\n            objValues.elicited !== \"No\"\r\n          ) {\r\n            setElicitedCount(elicitedCount + 1);\r\n            setObjValues({\r\n              firstName: \"\",\r\n              middleName: \"\",\r\n              lastName: \"\",\r\n              dob: \"\",\r\n              phoneNumber: \"\",\r\n              altPhoneNumber: \"\",\r\n              sex: \"\",\r\n              htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\r\n              physicalHurt: \"\",\r\n              threatenToHurt: \"\",\r\n              address: \"\",\r\n              hangOutSpots: \"\",\r\n              relativeToIndexClient: \"\",\r\n              currentlyLiveWithPartner: \"\",\r\n              partnerTestedPositive: \"\",\r\n              sexuallyUncomfortable: \"\",\r\n              notificationMethod: \"\",\r\n              datePartnerCameForTesting: \"\",\r\n              age: \"\",\r\n              isDateOfBirthEstimated: false,\r\n              //offeredIns:\"\",\r\n              //acceptedIns:\"\",\r\n              //elicited: \"\",\r\n              stateId: \"\",\r\n              lga: \"\",\r\n              dateTested: \"\",\r\n              currentHivStatus: \"\",\r\n            });\r\n          }\r\n          //handleItemClickPage('list')\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage, {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\", {\r\n              position: toast.POSITION.BOTTOM_CENTER,\r\n            });\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>\r\n            Index Notification Services - Elicitation\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\" float-end  mr-2 mt-2\"\r\n              onClick={() => handleItemClickPage(\"list\")}\r\n              //startIcon={<FaUserPlus size=\"10\"/>}\r\n            >\r\n              <span style={{ textTransform: \"capitalize\" }}>\r\n                {\" \"}\r\n                Back To Client Index List\r\n              </span>\r\n            </Button>\r\n          </h2>\r\n          {elicitedCount === 0 ? (\r\n            \"\"\r\n          ) : (\r\n            <Badge badgeContent={elicitedCount} color=\"primary\">\r\n              Elicited Clients\r\n              <PersonIcon color=\"action\" />\r\n            </Badge>\r\n          )}\r\n          <br />\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Offered INS ? <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"offeredIns\"\r\n                    id=\"offeredIns\"\r\n                    value={objValues.offeredIns}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {consent.map((value) => (\r\n                      <option key={value.id} value={value.display}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.offeredIns !== \"\" ? (\r\n                    <span className={classes.error}>{errors.offeredIns}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.offeredIns !== \"\" && objValues.offeredIns !== \"No\" && (\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Accepted INS ? <span style={{ color: \"red\" }}> </span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"acceptedIns\"\r\n                      id=\"acceptedIns\"\r\n                      value={objValues.acceptedIns}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      {consent.map((value) => (\r\n                        <option key={value.id} value={value.display}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {objValues.acceptedIns !== \"\" &&\r\n                objValues.acceptedIns !== \"No\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Elicited ? <span style={{ color: \"red\" }}> </span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"elicited\"\r\n                        id=\"elicited\"\r\n                        value={objValues.elicited}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              {objValues.elicited !== \"\" && objValues.elicited !== \"No\" && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">First Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"firstName\"\r\n                        id=\"firstName\"\r\n                        value={objValues.firstName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Middle Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"middleName\"\r\n                        id=\"middleName\"\r\n                        value={objValues.middleName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Last Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"lastName\"\r\n                        id=\"lastName\"\r\n                        value={objValues.lastName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-2 col-md-2\">\r\n                    <FormGroup>\r\n                      <Label>Date Of Birth</Label>\r\n                      <div className=\"radio\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            value=\"Actual\"\r\n                            name=\"dateOfBirth\"\r\n                            defaultChecked\r\n                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />{\" \"}\r\n                          Actual\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"radio\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            value=\"Estimated\"\r\n                            name=\"dateOfBirth\"\r\n                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />{\" \"}\r\n                          Estimated\r\n                        </label>\r\n                      </div>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                      <Label>Date</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"dob\"\r\n                        id=\"dob\"\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        value={objValues.dob}\r\n                        onChange={handleDobChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                      <Label>Age</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"number\"\r\n                        name=\"age\"\r\n                        id=\"age\"\r\n                        value={objValues.age}\r\n                        disabled={ageDisabled}\r\n                        onChange={handleAgeChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Phone Number</Label>\r\n\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014D88\",\r\n                        }}\r\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                        country={\"ng\"}\r\n                        placeholder=\"(234)7099999999\"\r\n                        minLength={10}\r\n                        name=\"phoneNumber\"\r\n                        id=\"phoneNumber\"\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        value={objValues.phoneNumber}\r\n                        onChange={(e) => {\r\n                          checkPhoneNumberBasic(e, \"phoneNumber\");\r\n                        }}\r\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                      />\r\n                      {errors.phoneNumber !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.phoneNumber}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Alternative Phone Number</Label>\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014D88\",\r\n                        }}\r\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                        country={\"ng\"}\r\n                        placeholder=\"(234)7099999999\"\r\n                        minLength={10}\r\n                        name=\"altPhoneNumber\"\r\n                        id=\"altPhoneNumber\"\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        value={objValues.altPhoneNumber}\r\n                        onChange={(e) => {\r\n                          checkPhoneNumberBasic(e, \"altPhoneNumber\");\r\n                        }}\r\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Sex *</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sex\"\r\n                        id=\"sex\"\r\n                        value={objValues.sex}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {sexs.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        State <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"state\"\r\n                        id=\"state\"\r\n                        onChange={getProvinces}\r\n                        value={objValues.stateId}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {states.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.stateId !== \"\" ? (\r\n                        <span className={classes.error}>{errors.stateId}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        LGA <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lga\"\r\n                        id=\"lga\"\r\n                        value={objValues.lga}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {provinces.map((value, index) => (\r\n                          <option key={index} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.lga !== \"\" ? (\r\n                        <span className={classes.error}>{errors.lga}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Address</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        id=\"address\"\r\n                        value={objValues.address}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Hang-out spots</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"hangOutSpots\"\r\n                        id=\"hangOutSpots\"\r\n                        value={objValues.hangOutSpots}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Relationship to Index Client *</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"relativeToIndexClient\"\r\n                        id=\"relativeToIndexClient\"\r\n                        value={objValues.relativeToIndexClient}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {indexTesting.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Do you currently live with this partner? *</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"currentlyLiveWithPartner\"\r\n                        id=\"currentlyLiveWithPartner\"\r\n                        value={objValues.currentlyLiveWithPartner}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value={\"true\"}>Yes</option>\r\n                        <option value={\"false\"}>No</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        As far as you know, has this partner ever tested\r\n                        positive for HIV *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"partnerTestedPositive\"\r\n                        id=\"partnerTestedPositive\"\r\n                        value={objValues.partnerTestedPositive}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever hit, kick, slapped or otherwise\r\n                        physical hurt you? *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"physicalHurt\"\r\n                        id=\"physicalHurt\"\r\n                        value={objValues.physicalHurt}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever threatened to hurt you? *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"threatenToHurt\"\r\n                        id=\"threatenToHurt\"\r\n                        value={objValues.threatenToHurt}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever threatened to force you to do\r\n                        something sexually that made you uncomfortable ? *\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sexuallyUncomfortable\"\r\n                        id=\"sexuallyUncomfortable\"\r\n                        value={objValues.sexuallyUncomfortable}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Notification Method selected*</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"notificationMethod\"\r\n                        id=\"notificationMethod\"\r\n                        value={objValues.notificationMethod}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {notificationContact.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">\r\n                        If contract by which date will partner come for testing?\r\n                      </Label>\r\n                      <Input\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"datePartnerCameForTesting\"\r\n                        id=\"datePartnerCameForTesting\"\r\n                        value={objValues.datePartnerCameForTesting}\r\n                        onChange={handleInputChange}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                      {errors.datePartnerComeForTesting !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.datePartnerComeForTesting}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        HIV Status of Index Client{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"currentHivStatus\"\r\n                        id=\"currentHivStatus\"\r\n                        value={objValues.currentHivStatus}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"negative\">Negative</option>\r\n                        <option value=\"positive\">Positive</option>\r\n                        <option value=\"unknown\">Unknown</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  {objValues.currentHivStatus !== \"\" &&\r\n                    objValues.currentHivStatus === \"positive\" && (\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"\">\r\n                            Date Tested?{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <Input\r\n                            type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                            name=\"dateTested\"\r\n                            id=\"dateTested\"\r\n                            value={objValues.dateTested}\r\n                            onChange={handleInputChange}\r\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.25rem\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                </>\r\n              )}\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <Button\r\n                    content=\"Save\"\r\n                    icon=\"save\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddIndexContact;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\HIVST\\HIVSTPatientRegistration.js",["1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067"],"import React, {useEffect, useState} from \"react\";\r\nimport {CardBody, FormGroup, Input, Label} from \"reactstrap\";\r\nimport * as moment from \"moment/moment\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport Select from 'react-select';\r\n\r\n\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl} from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport {Button, Icon, Label as LabelSui, List} from \"semantic-ui-react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport {Modal, Table} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport {calculate_age} from \"../../utils\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        \"& > *\": {\r\n            margin: theme.spacing(1),\r\n        },\r\n        \"& .card-title\": {\r\n            color: \"#fff\",\r\n            fontWeight: \"bold\",\r\n        },\r\n        \"& .form-control\": {\r\n            borderRadius: \"0.25rem\",\r\n            height: \"41px\",\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\",\r\n        },\r\n        \"& select\": {\r\n            \"-webkit-appearance\": \"listbox !important\",\r\n        },\r\n        \"& p\": {\r\n            color: \"red\",\r\n        },\r\n        \"& label\": {\r\n            fontSize: \"14px\",\r\n            color: \"#014d88\",\r\n            fontWeight: \"bold\",\r\n        },\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"12.8px\",\r\n    },\r\n    success: {\r\n        color: \"green\",\r\n        fontSize: \"12.8px\",\r\n        fontWeight: \"bold\",\r\n    },\r\n}));\r\n\r\nconst HIVSTPatientRegistration = (props) => {\r\n    const patient = props.patientObject;\r\n    const [saving, setSaving] = useState(false)\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors };\r\n    const [serialNumber, setSerialNumber] = useState(null);\r\n    const [createdCode, setCreatedCode] = useState(\"\");\r\n    const [selectedUsers, setSelectedUsers] = useState([]);\r\n    const [showUserInfo, setShowUserInfo] = useState(false);\r\n    const [otherText, setOtherText] = useState('');\r\n    const [otherTestKitUserInfoAvailable, setIsUserInformationAvailable] = useState(false);\r\n    const [kitUserInformation, setKitUserInformation] = useState([]);\r\n    const [serviceNeeded, setServiceNeeded] = useState([]);\r\n    const [hasConductedHIVST, setHasConductedHIVST] = useState(false);\r\n    const [maritalStatus, setMaritalStatus] = useState([]);\r\n    const [sexs, setSexs] = useState([]);\r\n    const [userInformationList, setUserInformationList] = useState([])\r\n    const [userInformationErrors, setUserInformationErrors] = useState({});\r\n    const [ageDisabled, setAgeDisabled] = useState(true);\r\n    const [open, setOpen] = React.useState(false);\r\n    const toggle = () => setOpen(!open);\r\n\r\n    const [objValues, setObjValues] = useState({\r\n        patientId: patient?.personId ? patient.personId : \"\",\r\n        // patientObject: {\r\n        //     surname: patient?.surname ? patient.surname : \"\",\r\n        //     firstName: patient?.firstName ? patient.firstName : \"\",\r\n        //     otherName: patient?.otherName ? patient.otherName : \"\",\r\n        //     dateOfBirth: patient?.dateOfBirth ? patient.dateOfBirth : \"\",\r\n        //     maritalStatusId: \"1\",\r\n        //     genderId: patient.gender ? patient.gender : \"\",\r\n        //     sexId: patient.personResponseDto && patient.personResponseDto.sex !== null\r\n        //         ? patient.personResponseDto.sex\r\n        //         : \"\",\r\n        //     address: \"\",\r\n        //     dateOfRegistration: \"\",\r\n        //     hospitalNumber: patient?.hospitalNumber ? patient?.hospitalNumber : \"\",\r\n        // },\r\n        dateOfVisit: \"\",\r\n        serviceDeliveryPoint: \"\",\r\n        userType: \"\",\r\n        serialNumber: \"\",\r\n        clientCode: \"\",\r\n        previouslyTestedWithin12Months: \"\",\r\n        resultOfPreviouslyTestedWithin12Months: \"\",\r\n        consentForFollowUpCalls: \"\",\r\n        typeOfHivstKitReceived: \"\",\r\n        numberOfHivstKitsReceived: \"\",\r\n        nameOfTestKit: \"\",\r\n        lotNumber: \"\",\r\n        expiryDate: \"\",\r\n        testKitUsers: null,\r\n        testKitUserDetails: [],\r\n        otherTestKitUserInfoAvailable: \"\",\r\n        hasConductedHIVST: \"\",\r\n    });\r\n\r\n    const [testKitUserDetails, setUserInformation] = useState(\r\n        {\r\n            basicUserInfo: {\r\n                id: \"\",\r\n                firstName:\"\",\r\n                surname:\"\",\r\n                otherName:\"\",\r\n                dateOfRegistration:\"\",\r\n                otherCategory: \"\",\r\n                clientCode: \"\",\r\n                dateOfBirth: \"\",\r\n                age: \"\",\r\n                sex: \"\",\r\n                maritalStatusId: \"\",\r\n                typeOfHivst: \"\",\r\n                userCategory: \"\",\r\n                isDateOfBirthEstimated: \"\"\r\n            },\r\n            postTestAssessment: {\r\n                everUsedHivstKit: \"\",\r\n                everUsedHivstKitForSelfOrOthers: \"\",\r\n                otherHivstKitUserCategory: \"\",\r\n                otherHivstKitUserCategoryText: \"\",\r\n                resultOfHivstTest: \"\",\r\n                accessConfirmatoryHts: \"\",\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            }\r\n        }\r\n    );\r\n\r\n\r\n    const options = [\r\n        {value: 'myself', label: 'For myself'},\r\n        {value: 'spouse', label: 'Spouse'},\r\n        {value: 'children', label: 'Children'},\r\n        {value: 'sexual partner', label: 'Sexual Partner'},\r\n        {value: 'social network', label: 'Social Network'},\r\n        {value: 'others', label: 'Others (Please specify)'},\r\n    ];\r\n\r\n    const matches = useMediaQuery('(max-width:600px)');\r\n    const style = {fontSize: matches ? '12px' : '16px',};\r\n\r\n\r\n    const SERVICE_NEEDED = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    // create array of objects from the response\r\n                    const serviceNeeded = response.data.map((service) => {\r\n                        return {\r\n                            value: service.display,\r\n                            label: service.display\r\n                        }\r\n                    });\r\n                    setServiceNeeded(serviceNeeded);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                // handle error\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        SERVICE_NEEDED();\r\n    }, []);\r\n\r\n    const validateObjValues = () => {\r\n        temp.dateOfVisit = objValues.dateOfVisit ? \"\" : \"This field is required.\";\r\n        temp.clientCode = objValues.clientCode ? \"\" : \"This field is required.\";\r\n        temp.serviceDeliveryPoint = objValues.serviceDeliveryPoint ? \"\" : \"This field is required.\";\r\n        temp.userType = objValues.userType ? \"\" : \"This field is required.\";\r\n        temp.serialNumber = objValues.serialNumber ? \"\" : \"This field is required.\";\r\n        temp.previouslyTestedWithin12Months = objValues.previouslyTestedWithin12Months ? \"\" : \"This field is required.\";\r\n        temp.consentForFollowUpCalls = objValues.consentForFollowUpCalls ? \"\" : \"This field is required.\";\r\n        if (objValues.previouslyTestedWithin12Months !== \"\" && objValues.previouslyTestedWithin12Months !== \"No\") {\r\n            temp.resultOfPreviouslyTestedWithin12Months = objValues.resultOfPreviouslyTestedWithin12Months ? \"\" : \"This field is required.\";\r\n        }\r\n        temp.nameOfTestKit = objValues.nameOfTestKit ? \"\" : \"This field is required.\";\r\n        temp.typeOfHivstKitReceived = objValues.typeOfHivstKitReceived ? \"\" : \"This field is required.\";\r\n        temp.numberOfHivstKitsReceived = objValues.numberOfHivstKitsReceived ? \"\" : \"This field is required.\";\r\n        temp.expiryDate = objValues.expiryDate ? \"\" : \"This field is required.\";\r\n        temp.lotNumber = objValues.lotNumber ? \"\" : \"This field is required.\";\r\n        if(selectedUsers.length === 0) {\r\n            temp.selectedUsers =   objValues.testKitUsers ? \"\" : \"Please select at least one user\"\r\n        }\r\n    \r\n        setErrors({ ...temp });\r\n        return Object.values(temp).every((x) => x == \"\");\r\n    }\r\n\r\n    // validate testKitUserDetails\r\n    const validateUserInformation = () => {\r\n        // if (objValues.otherTestKitUserInfoAvailable === \"Yes\") {\r\n            let temp = {};\r\n            temp.firstName = testKitUserDetails.basicUserInfo.firstName ?  \"\" : \"This field is required.\";\r\n            temp.surname = testKitUserDetails.basicUserInfo.surname ?  \"\" : \"This field is required.\";\r\n            temp.userCategory = testKitUserDetails.basicUserInfo.userCategory ? \"\" : \"This field is required.\";\r\n            // temp.otherCategory = testKitUserDetails.basicUserInfo.userCategory === \"Others\" ? testKitUserDetails.basicUserInfo.otherCategory ? \"\" : \"This field is required.\" : \"\";\r\n            temp.clientCode = testKitUserDetails.basicUserInfo.clientCode ? \"\" : \"This field is required.\";\r\n            // temp.dateOfBirth = testKitUserDetails.basicUserInfo.dateOfBirth ? \"\" : \"This field is required.\";\r\n            temp.typeOfHivst = testKitUserDetails.basicUserInfo.typeOfHivst ? \"\" : \"This field is required.\";\r\n            // Check if the selected user category is in the selectedUsers array\r\n            if (!selectedUsers.includes(testKitUserDetails.basicUserInfo.userCategory) && testKitUserDetails.basicUserInfo.userCategory !== \"\" ) {\r\n                temp.userCategory = \"The selected user category does not match the selected kit users.\";\r\n            }\r\n            // the number of kit is empty\r\n            setUserInformationErrors({...temp});\r\n            return Object.values(temp).every((x) => x == \"\");\r\n        // }\r\n    }\r\n    const handleInputChange = (e) => {\r\n        const {name, value} = e.target;\r\n        let newObjectValues = {...objValues};\r\n        if (name in objValues) {\r\n            newObjectValues[name] = value;\r\n        } else if (name in objValues.postTestAssessment) {\r\n            newObjectValues.postTestAssessment[name] = value;\r\n        } else if (name in objValues.postTestAssessment.referralInformation) {\r\n            newObjectValues.postTestAssessment.referralInformation[name] = value;\r\n        }\r\n\r\n        // Check if the name is \"previouslyTestedWithin12Months\"\r\n        if (name === \"previouslyTestedWithin12Months\") {\r\n            newObjectValues.resultOfPreviouslyTestedWithin12Months = \"\";\r\n        }\r\n        if (name === \"typeOfHivstKitReceived\") {\r\n            newObjectValues.numberOfHivstKitsReceived = \"\";\r\n            newObjectValues.nameOfTestKit = \"\";\r\n            newObjectValues.lotNumber = \"\";\r\n            newObjectValues.expiryDate = \"\";\r\n        }\r\n        // Check if the name is \"hasConductedHIVST\" and objValues.hasConductedHIVST is \"No\"\r\n        if (name === \"hasConductedHIVST\") {\r\n            testKitUserDetails.postTestAssessment = {\r\n                ...testKitUserDetails.postTestAssessment,\r\n                everUsedHivstKitForSelfOrOthers: \"\",\r\n                otherHivstKitUserCategory: \"\",\r\n                otherHivstKitUserCategoryText: \"\",\r\n                resultOfHivstTest: \"\",\r\n                accessConfirmatoryHts: \"\",\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n        }\r\n// Validate the field and remove the error message if the field is filled\r\n        if (value) {\r\n            let tempErrors = {...errors};\r\n            tempErrors[name] = \"\";\r\n            setErrors(tempErrors);\r\n        }\r\n\r\n        setObjValues(newObjectValues);\r\n    }\r\n\r\n\r\n    const handleUserInformationInputChange = (e, section) => {\r\n        const {name, value} = e.target;\r\n        let newUserInformation = {...testKitUserDetails};\r\n\r\n        if (section === 'postTestAssessment' && name in newUserInformation[section].referralInformation) {\r\n            newUserInformation[section].referralInformation[name] = value;\r\n        } else {\r\n            newUserInformation[section][name] = value;\r\n        }\r\n\r\n        // if everUsedHivstKitForSelfOrOthers  clear otherHivstKitUserCategory\r\n        if (name === \"everUsedHivstKitForSelfOrOthers\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                otherHivstKitUserCategory: \"\",\r\n                otherHivstKitUserCategoryText: \"\"\r\n            };\r\n        }\r\n\r\n        // if  resultOfHivstTestchnages clear all the feilds below\r\n        if (name === \"resultOfHivstTest\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                accessConfirmatoryHts: \"\",\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n\r\n        }\r\n        // if  accessConfirmatoryHtschnages clear all the feilds below\r\n        if (name === \"accessConfirmatoryHts\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n\r\n        }\r\n        // if  referPreventionServiceschnages clear all the feilds below\r\n        if (name === \"referPreventionServices\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                    dateReferredForPreventionServices: \"\"\r\n                }\r\n            };\r\n        }\r\n\r\n        // any change in referredForPreventionServices clear dateReferredForPreventionServices\r\n        if (name === \"referredForPreventionServices\") {\r\n            newUserInformation.postTestAssessment.referralInformation = {\r\n                ...newUserInformation.postTestAssessment.referralInformation,\r\n                dateReferredForPreventionServices: \"\"\r\n            };\r\n        }\r\n\r\n        if (name === \"hasConductedHIVST\" && value === \"No\") {\r\n            newUserInformation.postTestAssessment = {\r\n                ...newUserInformation.postTestAssessment,\r\n                everUsedHivstKitForSelfOrOthers: \"\",\r\n                otherHivstKitUserCategory: \"\",\r\n                otherHivstKitUserCategoryText: \"\",\r\n                resultOfHivstTest: \"\",\r\n                accessConfirmatoryHts: \"\",\r\n                referPreventionServices: \"\",\r\n                referralInformation: {\r\n                    referredForConfirmatoryHts: \"\",\r\n                    dateReferredForConfirmatoryHts: \"\",\r\n                    referredForPreventionServices: \"\",\r\n                }\r\n            };\r\n        }\r\n        // if userCategory changes clear all other fields in basicUserInfo\r\n        if (name === \"userCategory\") {\r\n            newUserInformation.basicUserInfo = {\r\n                ...newUserInformation.basicUserInfo,\r\n                otherCategory: \"\",\r\n                clientCode: \"\",\r\n                dateOfBirth: \"\",\r\n                age: \"\",\r\n            }\r\n        }\r\n        // validate and remove error message if the field is filled\r\n        if (value) {\r\n            let tempErrors = {...userInformationErrors};\r\n            tempErrors[name] = \"\";\r\n            setUserInformationErrors(tempErrors);\r\n        }\r\n\r\n        setUserInformation(newUserInformation);\r\n    };\r\n\r\n\r\n// Function to add a testKitUserDetails object to the list\r\n\r\n    const addUserInformation = () => {\r\n        if(validateUserInformation()) {\r\n            if(userInformationList.length <= objValues.numberOfHivstKitsReceived) {\r\n                let newUserInformation = {\r\n                    basicUserInfo: {\r\n                        id: \"\",\r\n                        firstName:testKitUserDetails.basicUserInfo.firstName,\r\n                        surname:testKitUserDetails.basicUserInfo.surname,\r\n                        otherName:testKitUserDetails.basicUserInfo.otherName,\r\n                        dateOfRegistration:testKitUserDetails.basicUserInfo.dateOfRegistration,\r\n                        otherCategory: testKitUserDetails.basicUserInfo.otherCategory,\r\n                        clientCode: testKitUserDetails.basicUserInfo.clientCode,\r\n                        dateOfBirth: testKitUserDetails.basicUserInfo.dateOfBirth,\r\n                        age: testKitUserDetails.basicUserInfo.age,\r\n                        sex: testKitUserDetails.basicUserInfo.sex,\r\n                        maritalStatusId: testKitUserDetails.basicUserInfo.maritalStatusId,\r\n                        typeOfHivst: testKitUserDetails.basicUserInfo.typeOfHivst,\r\n                        userCategory: testKitUserDetails.basicUserInfo.userCategory\r\n                    },\r\n                    postTestAssessment: {\r\n                        everUsedHivstKit: testKitUserDetails.postTestAssessment.everUsedHivstKit,\r\n                        everUsedHivstKitForSelfOrOthers: testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers,\r\n                        otherHivstKitUserCategory: testKitUserDetails.postTestAssessment.otherHivstKitUserCategory,\r\n                        otherHivstKitUserCategoryText: testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText,\r\n                        resultOfHivstTest: testKitUserDetails.postTestAssessment.resultOfHivstTest,\r\n                        accessConfirmatoryHts: testKitUserDetails.postTestAssessment.accessConfirmatoryHts,\r\n                        referPreventionServices: testKitUserDetails.postTestAssessment.referPreventionServices,\r\n                        referralInformation: {\r\n                            referredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts,\r\n                            dateReferredForConfirmatoryHts: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts,\r\n                            referredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices,\r\n                            dateReferredForPreventionServices: testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices\r\n                        }\r\n                    }\r\n                }\r\n                setUserInformationList([...userInformationList, newUserInformation]);\r\n                setObjValues({...objValues, testKitUserDetails: [...userInformationList, newUserInformation]});\r\n\r\n                // clear testKitUserDetails after adding to the list and also set the hasConductedHIVST to No\r\n                setUserInformation({\r\n                    basicUserInfo: {\r\n                        firstName:\"\",\r\n                        surname:\"\",\r\n                        otherName:\"\",\r\n                        dateOfRegistration:\"\",\r\n                        otherCategory: \"\",\r\n                        clientCode: \"\",\r\n                        dateOfBirth: \"\",\r\n                        age: \"\",\r\n                        sex: \"\",\r\n                        maritalStatusId: \"\",\r\n                        typeOfHivst: \"\",\r\n                        userCategory: \"\",\r\n                        isDateOfBirthEstimated: \"\"\r\n                    },\r\n                    postTestAssessment: {\r\n                        everUsedHivstKit: \"\",\r\n                        everUsedHivstKitForSelfOrOthers: \"\",\r\n                        otherHivstKitUserCategory: \"\",\r\n                        otherHivstKitUserCategoryText: \"\",\r\n                        resultOfHivstTest: \"\",\r\n                        accessConfirmatoryHts: \"\",\r\n                        referPreventionServices: \"\",\r\n                        referralInformation: {\r\n                            referredForConfirmatoryHts: \"\",\r\n                            dateReferredForConfirmatoryHts: \"\",\r\n                            referredForPreventionServices: \"\",\r\n                            dateReferredForPreventionServices: \"\"\r\n                        }\r\n                    }\r\n                });\r\n                setObjValues({...objValues, hasConductedHIVST: \"No\"});\r\n            } else {\r\n               \r\n            }\r\n        } else{\r\n            toast.error(\"Please fill all the required fields\");\r\n        }\r\n\r\n    }\r\n// Function to remove a testKitUserDetails object from the list based on index\r\n    const removeUserInformation = (index) => {\r\n        const updatedUserInformationList = userInformationList.filter((_, i) => i !== index);\r\n        setUserInformationList(updatedUserInformationList);\r\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\r\n    };\r\n\r\n// Function to update a testKitUserDetails object in the list based on index\r\n    const updateUserInformation = (index, updatedUserInformation) => {\r\n        const updatedUserInformationList = userInformationList.map((testKitUserDetails, i) =>\r\n            i === index ? updatedUserInformation : testKitUserDetails\r\n        );\r\n        setUserInformationList(updatedUserInformationList);\r\n        setObjValues({...objValues, testKitUserDetails: updatedUserInformationList});\r\n    };\r\n\r\n// Function to clear the testKitUserDetails list\r\n    const clearUserInformationList = () => {\r\n        setUserInformationList([]);\r\n        setObjValues({...objValues, testKitUserDetails: []});\r\n    };\r\n\r\n\r\n    const handleKitSelectUserChange = selectedUsers => {\r\n        // if (objValues.userType === \"Secondary User\") {\r\n        //     setSelectedUsers([\"myself\"]);\r\n        //     let newValues = {...objValues, testKitUsers: selectedUsers};\r\n        //     setObjValues(newValues);\r\n        // } else\r\n        // {\r\n            setSelectedUsers(selectedUsers);\r\n            let newValues = {...objValues, testKitUsers: selectedUsers};\r\n            if (!selectedUsers || selectedUsers.length === 0) {\r\n                setShowUserInfo(false);\r\n                newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\r\n            } else if (selectedUsers.length === 1 && selectedUsers[0] === 'myself') {\r\n                setShowUserInfo(false);\r\n                newValues = {...newValues, otherTestKitUserInfoAvailable: \"\"};\r\n            } else {\r\n                setShowUserInfo(true);\r\n            }\r\n            if (!showUserInfo) {\r\n                testKitUserDetails.userCategory = \"\";\r\n                testKitUserDetails.otherCategory = \"\";\r\n                testKitUserDetails.clientCode = \"\";\r\n                testKitUserDetails.dateOfBirth = \"\";\r\n                testKitUserDetails.age = \"\";\r\n                testKitUserDetails.sex = \"\";\r\n                testKitUserDetails.maritalStatus = \"\";\r\n                testKitUserDetails.clientCode = \"\";\r\n                testKitUserDetails.typeOfHivSelfTest = \"\";\r\n            }\r\n            // always clear the userInformationList when the user selects a new user\r\n            // setUserInformationList([]);\r\n            setObjValues(newValues);\r\n        // }\r\n    };\r\n    const checkClientCode = (e) => {\r\n        let code = \"\";\r\n        if (e.target.name === \"serialNumber\") {\r\n            code = createdCode + e.target.value;\r\n            setCreatedCode(code);\r\n         \r\n            setObjValues({...objValues, clientCode: code});\r\n        }\r\n\r\n        async function getIndexClientCode() {\r\n            const indexClientCode = objValues.clientCode;\r\n            const response = await axios.get(\r\n                `${baseUrl}hts/client/${indexClientCode}`,\r\n                {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"text/plain\",\r\n                    },\r\n                }\r\n            );\r\n        }\r\n\r\n        getIndexClientCode();\r\n    };\r\n\r\n\r\n    const Sex = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n                headers: {Authorization: `Bearer ${token}`},\r\n            })\r\n            .then((response) => {\r\n               \r\n                setSexs(response.data);\r\n            })\r\n            .catch((error) => {\r\n                \r\n            });\r\n    };\r\n\r\n    const MARITALSTATUS = () => {\r\n        axios\r\n            .get(`${baseUrl}application-codesets/v2/MARITAL_STATUS`, {\r\n                headers: {Authorization: `Bearer ${token}`},\r\n            })\r\n            .then((response) => {\r\n              \r\n                setMaritalStatus(response.data);\r\n            })\r\n            .catch((error) => {\r\n               \r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        Sex();\r\n        MARITALSTATUS();\r\n    }, []);\r\n\r\n\r\n    const setAge = () => {\r\n        const age = calculate_age(testKitUserDetails.basicUserInfo?.dateOfBirth);\r\n        setUserInformation(prevState => ({\r\n            ...prevState,\r\n            basicUserInfo: {\r\n                ...prevState.basicUserInfo,\r\n                age: age\r\n            }\r\n        }));\r\n        return age;\r\n    }\r\n\r\n    const handleDateOfBirthChange1 = (e) => {\r\n        let newUserInformation = {...testKitUserDetails};\r\n        newUserInformation.basicUserInfo[e.target.name] = e.target.value;\r\n        if (e.target.value && new Date(e.target.value) <= new Date()) {\r\n            const age_now = calculate_age(e.target.value);\r\n            newUserInformation.basicUserInfo.age = age_now;\r\n        } else {\r\n            newUserInformation.basicUserInfo.age = \"\";\r\n        }\r\n        setUserInformation(newUserInformation);\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (validateObjValues()) {\r\n            const userInfoList = userInformationList;\r\n            objValues.testKitUserDetails = userInformationList;\r\n            setSaving(true)\r\n            axios\r\n                .post(`${baseUrl}hivst`, objValues, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                })\r\n                .then((response) => {\r\n                    if (response.status === 200) {\r\n                        setSaving(false)\r\n                        toast.success(\"HIVST Registration Successful\");\r\n                        history.push(\"/patient/hivst\");\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    setSaving(false)\r\n                    toast.error(\"An error occurred. Please try again.\");\r\n                });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const handleDobChange = (e) => {\r\n        const today = new Date();\r\n        const birthDate = new Date(e.target.value);\r\n        let age_now = today.getFullYear() - birthDate.getFullYear();\r\n        const m = today.getMonth() - birthDate.getMonth();\r\n        if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n            age_now--;\r\n        }\r\n        setUserInformation({\r\n            ...testKitUserDetails,\r\n            basicUserInfo: {\r\n                ...testKitUserDetails.basicUserInfo,\r\n                dateOfBirth: e.target.value,\r\n                age: age_now\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleDateOfBirthChange = (e) => {\r\n        if (e.target.value == \"Actual\") {\r\n            setUserInformation({\r\n                ...testKitUserDetails,\r\n                basicUserInfo: {\r\n                    ...testKitUserDetails.basicUserInfo,\r\n                    isDateOfBirthEstimated: false\r\n                }\r\n            });\r\n            setAgeDisabled(true);\r\n        } else if (e.target.value == \"Estimated\") {\r\n            setUserInformation({\r\n                ...testKitUserDetails,\r\n                basicUserInfo: {\r\n                    ...testKitUserDetails.basicUserInfo,\r\n                    isDateOfBirthEstimated: true\r\n                }\r\n            });\r\n            setAgeDisabled(false);\r\n        }\r\n    };\r\n\r\n    const handleAgeChange = (e) => {\r\n        if (!ageDisabled && e.target.value) {\r\n            const currentDate = new Date();\r\n            currentDate.setDate(15);\r\n            currentDate.setMonth(5);\r\n            const estDob = moment(currentDate.toISOString());\r\n            const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n            setUserInformation({\r\n                ...testKitUserDetails,\r\n                basicUserInfo: {\r\n                    ...testKitUserDetails.basicUserInfo,\r\n                    age: e.target.value,\r\n                    dateOfBirth: moment(dobNew).format(\"YYYY-MM-DD\")\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n                    <h2 style={{color: \"#000\"}}> HIV SELF - TEST AND RESPONSE CARD </h2>\r\n                    <br/>\r\n                    <form>\r\n                        <div className=\"row mb-7\">\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Visit Date <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                        name=\"dateOfVisit\"\r\n                                        id=\"dateOfVisit\"\r\n                                        value={objValues.dateOfVisit}\r\n                                        onChange={handleInputChange}\r\n                                        min=\"1929-12-31\"\r\n                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                    />\r\n                                    {errors.dateOfVisit !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.dateOfVisit}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label >\r\n                                        Service Delivery Point\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"serviceDeliveryPoint\"\r\n                                        id=\"serviceDeliveryPoint\"\r\n                                        value={objValues.serviceDeliveryPoint}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Health Facility\">Health Facility</option>\r\n                                        <option value=\"Comunity Pharmacy\">Community Pharmacy</option>\r\n                                        <option value=\"PPMV\">PPMV</option>\r\n                                        <option value=\"Mobile Distribution\">Mobile Distribution</option>\r\n                                        <option value=\"Workplace\">WorkPlace</option>\r\n                                        <option value=\"Others\">Others</option>\r\n                                        <option value=\"Home based\">Home based</option>\r\n                                        <option value=\"Door to Door\">Door to Door</option>\r\n                                    </select>\r\n                                    {errors.serviceDeliveryPoint !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.serviceDeliveryPoint}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                        User Type\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"userType\"\r\n                                        id=\"userType\"\r\n                                        value={objValues.userType}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Primary User\">Primary User</option>\r\n                                        <option value=\"Secondary User\">secondary user</option>\r\n                                    </select>\r\n                                    {errors.userType !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.userType}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Serial Number <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"serialNumber\"\r\n                                        id=\"serialNumber\"\r\n                                        value={serialNumber}\r\n                                        //value={Math.floor(Math.random() * 1093328)}\r\n                                        onBlur={checkClientCode}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                    />\r\n                                    {errors.serialNumber !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.serialNumber}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Client Code <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        name=\"clientCode\"\r\n                                        id=\"clientCode\"\r\n                                        value={objValues.clientCode}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                        //readOnly={props.activePage.actionType === \"view\"}\r\n                                    />\r\n                                     {errors.clientCode !== \"\" ? (\r\n                                         <span className={classes.error}>{errors.clientCode}</span>\r\n                                        ) : (\r\n                                         \"\"\r\n                                        )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>\r\n                                        Have you previously tested for HIV in the last 12 months?\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"previouslyTestedWithin12Months\"\r\n                                        id=\"previouslyTestedWithin12Months\"\r\n                                        value={objValues.previouslyTestedWithin12Months}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">YES</option>\r\n                                        <option value=\"No\">NO</option>\r\n                                    </select>\r\n                                    {errors.previouslyTestedWithin12Months !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.previouslyTestedWithin12Months}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            {objValues?.previouslyTestedWithin12Months === \"Yes\" ? (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label >\r\n                                            What was the test result?\r\n                                            <span style={{color: \"red\"}}> *</span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"resultOfPreviouslyTestedWithin12Months\"\r\n                                            id=\"resultOfPreviouslyTestedWithin12Months\"\r\n                                            value={objValues.resultOfPreviouslyTestedWithin12Months}\r\n                                            onChange={handleInputChange}\r\n                                            style={{\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0.2rem\",\r\n                                            }}\r\n                                        >\r\n                                            <option value={\"\"}></option>\r\n                                            <option value=\"Positive\">Positive</option>\r\n                                            <option value=\"Negative\">Negative</option>\r\n                                            <option value=\"Unknown\">Unknown</option>\r\n                                        </select>\r\n                                        {errors.resultOfPreviouslyTestedWithin12Months !== \"\" ? (\r\n                                            <span className={classes.error}>{errors.resultOfPreviouslyTestedWithin12Months}</span>\r\n                                        ) : (\r\n                                            \"\"\r\n                                        )}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            ) : \"\"}\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label >\r\n                                        Do you consent to be followed-up via phone calls?\r\n                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"consentForFollowUpCalls\"\r\n                                        id=\"consentForFollowUpCalls\"\r\n                                        value={objValues.consentForFollowUpCalls}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">YES</option>\r\n                                        <option value=\"No\">NO</option>\r\n                                    </select>\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label >\r\n                                        What type of HIVST kit did you receive/purchase today?\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"typeOfHivstKitReceived\"\r\n                                        id=\"typeOfHivstKitReceived\"\r\n                                        value={objValues.typeOfHivstKitReceived}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Oral fluid\">Oral fluid</option>\r\n                                        <option value=\"Blood\">Blood</option>\r\n                                    </select>\r\n                                    {errors.typeOfHivstKitReceived !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.typeOfHivstKitReceived}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Number of individual HIV self-test kits received? {\" \"}\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        name=\"numberOfHivstKitsReceived\"\r\n                                        id=\"numberOfHivstKitsReceived\"\r\n                                        value={objValues.numberOfHivstKitsReceived}\r\n                                        min=\"1\"\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                    />\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"providerNameCompletingForm\">\r\n                                        Name of Test Kit ?\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        name=\"nameOfTestKit\"\r\n                                        id=\"nameOfTestKit\"\r\n                                        value={objValues.nameOfTestKit}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                    />\r\n                                    {errors.nameOfTestKit !== \"\" ? (\r\n                                        <span className={classes.error}>\r\n                                            {errors.nameOfTestKit}\r\n                                        </span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"providerNameCompletingForm\">\r\n                                        Lot No\r\n                                        <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        name=\"lotNumber\"\r\n                                        id=\"\" lotNumber\r\n                                        value={objValues.lotNumber}\r\n                                        onChange={handleInputChange}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.2rem\",\r\n                                        }}\r\n                                    />\r\n                                    {errors.lotNumber !== \"\" ? (\r\n                                        <span className={classes.error}>\r\n                                            {errors.lotNumber}\r\n                                        </span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label for=\"\">\r\n                                        Expiry Date <span style={{color: \"red\"}}> *</span>\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                        name=\"expiryDate\"\r\n                                        id=\"expirtyDate\"\r\n                                        value={objValues.expiryDate}\r\n                                        onChange={handleInputChange}\r\n                                        min={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                        max={moment(new Date()).add(5, 'years').format(\"YYYY-MM-DD\")}\r\n                                        style={{\r\n                                            border: \"1px solid #014D88\",\r\n                                            borderRadius: \"0.25rem\",\r\n                                        }}\r\n                                    />\r\n                                    {errors.expiryDate !== \"\" ? (\r\n                                        <span className={classes.error}>{errors.expiryDate}</span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-12\">\r\n                                <FormGroup>\r\n                                    <Label for=\"dualListBox\">\r\n                                        Who do you want to use the kit for?\r\n                                    </Label>\r\n                                    <DualListBox\r\n                                        options={options}\r\n                                        selected={selectedUsers}\r\n                                        onChange={handleKitSelectUserChange}\r\n                                        // disabled={objValues.userType === \"Secondary User\" ? true : false}\r\n                                    />\r\n                                    {errors.testKitUsers !== \"\" ? (\r\n                                        <span className={classes.error}>\r\n                                            {errors.testKitUsers}\r\n                                        </span>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )}\r\n                                </FormGroup>\r\n                            </div>\r\n\r\n                            {/*<div className=\"form-group mb-7 col-md-4\">*/}\r\n                            {/*    <FormGroup>*/}\r\n                            {/*        <Label for=\"testKitUsers\">*/}\r\n                            {/*            Who do you want to use the kit for?*/}\r\n                            {/*        </Label>*/}\r\n                            {/*        <Select*/}\r\n                            {/*            isMulti*/}\r\n                            {/*            name=\"whoDoYouWantToUseTheKitFor\"*/}\r\n                            {/*            options={options}*/}\r\n                            {/*            className=\"basic-multi-select\"*/}\r\n                            {/*            classNamePrefix=\"select\"*/}\r\n                            {/*            onChange={handleKitSelectUserChange}*/}\r\n                            {/*            styles={{*/}\r\n                            {/*                control: (provided) => ({*/}\r\n                            {/*                    ...provided,*/}\r\n                            {/*                    border: \"1px solid #014D88\",*/}\r\n                            {/*                    borderRadius: \"0.25rem\",*/}\r\n                            {/*                }),*/}\r\n                            {/*            }}*/}\r\n                            {/*        />*/}\r\n                            {/*    </FormGroup>*/}\r\n                            {/*</div>*/}\r\n\r\n                            {selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === 'others' &&\r\n                                <div className=\"form-group mb-3 col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label for=\"testKitUsers\">\r\n                                            Please Specify\r\n                                        </Label>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            name=\"otherText\"\r\n                                            id=\"otherText\"\r\n                                            value={otherText}\r\n                                            onChange={e => setOtherText(e.target.value)}\r\n                                            placeholder=\"Please specify\"\r\n                                            style={{\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0.25rem\",\r\n                                            }}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </div>\r\n                            }\r\n                            {showUserInfo &&\r\n                                <div className=\"form-group  col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label >\r\n                                            Is user information available?\r\n                                            <span style={{color: \"red\"}}> *</span>\r\n                                        </Label>\r\n                                        <select\r\n                                            className=\"form-control\"\r\n                                            name=\"otherTestKitUserInfoAvailable\"\r\n                                            id=\"otherTestKitUserInfoAvailable\"\r\n                                            value={objValues.otherTestKitUserInfoAvailable}\r\n                                            onChange={handleInputChange}\r\n                                            style={{\r\n                                                border: \"1px solid #014D88\",\r\n                                                borderRadius: \"0.2rem\",\r\n                                            }}\r\n                                            // disabled={objValues.userType === \"Secondary User\" ? true : false}\r\n                                        >\r\n                                            <option value={\"\"}></option>\r\n                                            <option value=\"Yes\">YES</option>\r\n                                            <option value=\"No\">NO</option>\r\n                                        </select>\r\n                                        {/*                {errors.firstTimeVisit !== \"\" ? (*/}\r\n                                        {/*                    <span className={classes.error}>*/}\r\n                                        {/*  {errors.firstTimeVisit}*/}\r\n                                        {/*</span>*/}\r\n                                        {/*                ) : (*/}\r\n                                        {/*                    \"\"*/}\r\n                                        {/*                )}*/}\r\n                                    </FormGroup>\r\n                                </div>\r\n                            }\r\n                            {/*{objValues?.otherTestKitUserInfoAvailable === \"Yes\" &&*/}\r\n                            {selectedUsers.length === 0 ? (\"\") : (\r\n                                <>\r\n                                    <div className=\"row center\">\r\n                                        <div\r\n                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\r\n                                            style={{\r\n                                                backgroundColor: \"#992E62\",\r\n                                                width: \"125%\",\r\n                                                height: \"35px\",\r\n                                                color: \"#fff\",\r\n                                                fontWeight: \"bold\",\r\n                                            }}\r\n                                        >\r\n                                            Intended Kit User Information\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"form-group mb-3 col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label for=\"\">\r\n                                                    Registration Date\r\n                                                    {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                </Label>\r\n                                                <Input\r\n                                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                    name=\"dateOfRegistration\"\r\n                                                    id=\"dateOfRegistration\"\r\n                                                    min=\"1929-12-31\"\r\n                                                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                    value={testKitUserDetails.basicUserInfo.dateOfRegistration}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                    // disabled\r\n                                                />\r\n                                                {/*{errors.dateOfVisit !== \"\" ? (*/}\r\n                                                {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\r\n                                                {/*) : (*/}\r\n                                                {/*    \"\"*/}\r\n                                                {/*)}*/}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    First Name\r\n                                                    <span style={{color: \"red\"}}> *</span>\r\n                                                </Label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    name=\"firstName\"\r\n                                                    id=\"firstName\"\r\n                                                    value={testKitUserDetails.basicUserInfo.firstName}\r\n                                                    // onChange={handleInputChange1}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                />\r\n                                                {userInformationErrors.firstName !== \"\" ? (\r\n                                                    <span\r\n                                                        className={classes.error}>{userInformationErrors.firstName}</span>\r\n                                                ) : (\r\n                                                    \"\"\r\n                                                )}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    Surname\r\n                                                    <span style={{color: \"red\"}}> *</span>\r\n                                                </Label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    name=\"surname\"\r\n                                                    id=\"surname\"\r\n                                                    value={testKitUserDetails.basicUserInfo.surname}\r\n                                                    // onChange={handleInputChange1}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                />\r\n                                                {userInformationErrors.surname !== \"\" ? (\r\n                                                    <span\r\n                                                        className={classes.error}>{userInformationErrors.surname}</span>\r\n                                                ) : (\r\n                                                    \"\"\r\n                                                )}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    Other name\r\n                                                </Label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    name=\"otherName\"\r\n                                                    id=\"otherName\"\r\n                                                    value={testKitUserDetails.basicUserInfo.otherName}\r\n                                                    // onChange={handleInputChange1}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                />\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    user Category\r\n                                                    <span style={{color: \"red\"}}> *</span>\r\n                                                </Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    name=\"userCategory\"\r\n                                                    id=\"userCategory\"\r\n                                                    value={testKitUserDetails.basicUserInfo.userCategory}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                >\r\n                                                    <option value={\"\"}></option>\r\n                                                    {/*{options.map(option => (*/}\r\n                                                    {/*    <option key={option.value} value={option.value}>*/}\r\n                                                    {/*        {option.label}*/}\r\n                                                    {/*    </option>*/}\r\n                                                    {/*))}*/}\r\n                                                    {selectedUsers.map((user, index) => (\r\n                                                        <option key={index} value={user}>{user}</option>\r\n                                                    ))}\r\n                                                    ))\r\n                                                </select>\r\n                                                {userInformationErrors.userCategory !== \"\" ? (\r\n                                                    <span\r\n                                                        className={classes.error}>{userInformationErrors.userCategory}</span>\r\n                                                ) : (\r\n                                                    \"\"\r\n                                                )}\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        {testKitUserDetails.basicUserInfo.userCategory === \"others\" ? (\r\n                                            <div className=\"form-group col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>\r\n                                                        Specify Other Category\r\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                    </Label>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        className=\"form-control\"\r\n                                                        name=\"otherCategory\"\r\n                                                        id=\"otherCategory\"\r\n                                                        value={testKitUserDetails.basicUserInfo.otherCategory}\r\n                                                        // onChange={handleInputChange1}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                    />\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        ) : \"\"}\r\n                                        <div className=\"form-group col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    Client Code\r\n                                                    <span style={{color: \"red\"}}> *</span>\r\n                                                </Label>\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"form-control\"\r\n                                                    name=\"clientCode\"\r\n                                                    id=\"clientCode\"\r\n                                                    value={testKitUserDetails.basicUserInfo.clientCode}\r\n                                                    // onChange={handleInputChange1}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                />\r\n                                                {userInformationErrors.clientCode !== \"\" ? (\r\n                                                    <span\r\n                                                        className={classes.error}>{userInformationErrors.clientCode}</span>\r\n                                                ) : (\r\n                                                    \"\"\r\n                                                )}\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group mb-2 col-md-2\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    Date Of Birth <span style={{color: \"red\"}}> *</span>\r\n                                                </Label>\r\n                                                <div className=\"radio\">\r\n                                                    <label>\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            value=\"Actual\"\r\n                                                            name=\"dateOfBirth\"\r\n                                                            defaultChecked\r\n                                                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                        />{\" \"}\r\n                                                        Actual\r\n                                                    </label>\r\n                                                </div>\r\n                                                <div className=\"radio\">\r\n                                                    <label>\r\n                                                        <input\r\n                                                            type=\"radio\"\r\n                                                            value=\"Estimated\"\r\n                                                            name=\"dateOfBirth\"\r\n                                                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                        />{\" \"}\r\n                                                        Estimated\r\n                                                    </label>\r\n                                                </div>\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        <div className=\"form-group mb-3 col-md-3\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    Date <span style={{color: \"red\"}}> *</span>\r\n                                                </Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                    name=\"dob\"\r\n                                                    id=\"dob\"\r\n                                                    min=\"1929-12-31\"\r\n                                                    max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                    value={testKitUserDetails.basicUserInfo.dateOfBirth}\r\n                                                    onChange={handleDobChange}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                />\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        <div className=\"form-group mb-3 col-md-3\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    Age <span style={{color: \"red\"}}> *</span>\r\n                                                </Label>\r\n                                                <input\r\n                                                    className=\"form-control\"\r\n                                                    type=\"number\"\r\n                                                    name=\"age\"\r\n                                                    id=\"age\"\r\n                                                    value={testKitUserDetails.basicUserInfo.age}\r\n                                                    disabled={ageDisabled}\r\n                                                    onChange={handleAgeChange}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                />\r\n                                            </FormGroup>\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label>\r\n                                                    Sex\r\n                                                    {/*<span style={{color: \"red\"}}> *</span> */}\r\n                                                </Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    name=\"sex\"\r\n                                                    id=\"sex\"\r\n                                                    value={testKitUserDetails.basicUserInfo.sex}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                >\r\n                                                    <option value={\"\"}></option>\r\n                                                    {sexs.map((value) => (\r\n                                                        <option key={value.id} value={value.display}>\r\n                                                            {value.display}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        {testKitUserDetails.basicUserInfo.age > 9 && (\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label>Marital Status</Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"maritalStatusId\"\r\n                                                        id=\"maritalStatusId\"\r\n                                                        value={testKitUserDetails.basicUserInfo.maritalStatusId}\r\n                                                        // onChange={handleInputChange1}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <option value={\"\"}></option>\r\n                                                        {maritalStatus.map((value) => (\r\n                                                            <option key={value.id} value={value.id}>\r\n                                                                {value.display}\r\n                                                            </option>\r\n                                                        ))}\r\n                                                    </select>\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                        )}\r\n                                        <div className=\"form-group  col-md-4\">\r\n                                            <FormGroup>\r\n                                                <Label> Type of HIV Self-Test </Label>\r\n                                                <select\r\n                                                    className=\"form-control\"\r\n                                                    name=\"typeOfHivst\"\r\n                                                    id=\"typeOfHivst\"\r\n                                                    value={testKitUserDetails.basicUserInfo.typeOfHivst}\r\n                                                    onChange={(e) => handleUserInformationInputChange(e, \"basicUserInfo\")}\r\n                                                    style={{\r\n                                                        border: \"1px solid #014D88\",\r\n                                                        borderRadius: \"0.2rem\",\r\n                                                    }}\r\n                                                >\r\n                                                    <option value={\"\"}></option>\r\n                                                    <option value=\"Assisted\">\r\n                                                        Assisted\r\n                                                    </option>\r\n                                                    <option value=\"Unassisted\">\r\n                                                        Unassisted\r\n                                                    </option>\r\n                                                </select>\r\n                                                {\r\n                                                    userInformationErrors.typeOfHivst !== \"\" ? (\r\n                                                        <span\r\n                                                            className={classes.error}>{userInformationErrors.typeOfHivst}</span>\r\n                                                    ) : (\"\")\r\n\r\n                                                }\r\n                                            </FormGroup>\r\n                                        </div>\r\n                                        {/*<div className=\"form-group mb-3 col-md-6\">*/}\r\n                                        {/*    <LabelSui*/}\r\n                                        {/*        as=\"a\"*/}\r\n                                        {/*        color=\"black\"*/}\r\n                                        {/*        // onClick={handleSubmitfamilyIndexRequestDto}*/}\r\n                                        {/*        size=\"small\"*/}\r\n                                        {/*        style={{marginTop: 35}}*/}\r\n                                        {/*    >*/}\r\n                                        {/*        <Icon name=\"plus\"/> Add*/}\r\n                                        {/*    </LabelSui>*/}\r\n                                        {/*</div>*/}\r\n                                    </div>\r\n\r\n\r\n                                </>\r\n                            )}\r\n\r\n                            {/*Checkbox to select if the User has conducted the HIVST – if checked, display the*/}\r\n                            {/*following questions, else the user should be able to save the form.*/}\r\n                            {/*<div className=\"row mb-7\">*/}\r\n                            {/*    <div className=\"form-group mb-3 col-md-4\">*/}\r\n                            {/*        <FormGroup>*/}\r\n                            {/*            <label>*/}\r\n                            {/*                <input*/}\r\n                            {/*                    type=\"checkbox\"*/}\r\n                            {/*                    checked={objValues.hasConductedHIVST}*/}\r\n                            {/*                    onChange={() => {*/}\r\n                            {/*                        setObjValues(prevState => ({*/}\r\n                            {/*                            ...prevState,*/}\r\n                            {/*                            hasConductedHIVST: !prevState.hasConductedHIVST*/}\r\n                            {/*                        }));*/}\r\n                            {/*                        // console.log(\"Has Conducted HIVST\", !objValues.hasConductedHIVST);*/}\r\n                            {/*                    }}*/}\r\n                            {/*                    style={{marginRight: \"10px\"}}*/}\r\n                            {/*                />*/}\r\n                            {/*                Have you conducted the HIVST ?*/}\r\n                            {/*            </label>*/}\r\n                            {/*        </FormGroup>*/}\r\n                            {/*    </div>*/}\r\n                            {/*</div>*/}\r\n\r\n\r\n                            {objValues && objValues.otherTestKitUserInfoAvailable === \"Yes\" &&\r\n                                <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                                    <hr style={{width: '100%'}}/>\r\n                                </div>\r\n                            }\r\n                            {objValues && selectedUsers.length > 0 &&\r\n                                <div className=\"row mb-7\">\r\n                                    <div className=\"form-group  col-md-4\">\r\n                                        <FormGroup>\r\n                                            <Label>\r\n                                                Have you conducted the HIVST ?\r\n                                                {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                            </Label>\r\n                                            <select\r\n                                                className=\"form-control\"\r\n                                                name=\"hasConductedHIVST\"\r\n                                                id=\"hasConductedHIVST\"\r\n                                                value={objValues.hasConductedHIVST}\r\n                                                onChange={handleInputChange}\r\n                                                style={{\r\n                                                    border: \"1px solid #014D88\",\r\n                                                    borderRadius: \"0.2rem\",\r\n                                                }}\r\n                                            >\r\n                                                <option value={\"\"}></option>\r\n                                                <option value=\"Yes\">YES</option>\r\n                                                <option value=\"No\">NO</option>\r\n                                            </select>\r\n                                        </FormGroup>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"row mb-7\">\r\n                                {objValues.hasConductedHIVST === \"Yes\" ? (\r\n                                    // Display the following questions if the checkbox is checked\r\n                                    <>\r\n                                        <div className=\"row center\">\r\n                                            <div\r\n                                                className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\r\n                                                style={{\r\n                                                    backgroundColor: \"green\",\r\n                                                    width: \"125%\",\r\n                                                    height: \"35px\",\r\n                                                    color: \"#fff\",\r\n                                                    fontWeight: \"bold\",\r\n                                                }}\r\n                                            >\r\n\r\n                                                Section B : HIVST Post Test Assessment\r\n                                            </div>\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label >\r\n                                                        Have you ever used HIVST kit?\r\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                    </Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"everUsedHivstKit\"\r\n                                                        id=\"everUsedHivstKitl\"\r\n                                                        // value={objValues.hasConductedHIVST ? \"Yes\" : \"No\"}\r\n                                                        value={testKitUserDetails?.postTestAssessment?.everUsedHivstKit}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <option value={\"\"}></option>\r\n                                                        <option value=\"Yes\">YES</option>\r\n                                                        <option value=\"No\">NO</option>\r\n                                                    </select>\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label >\r\n                                                        Did you use the HIVST kit for yourself or someone else?\r\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                    </Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"everUsedHivstKitForSelfOrOthers\"\r\n                                                        id=\"everUsedHivstKitForSelfOrOthers\"\r\n                                                        value={testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <option value={\"\"}></option>\r\n                                                        <option value=\"Self\">Self</option>\r\n                                                        <option value=\"Someone else\">Someone else</option>\r\n                                                    </select>\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            {testKitUserDetails.postTestAssessment.everUsedHivstKitForSelfOrOthers === \"Someone else\" &&\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label >\r\n                                                            Who did you give it to?\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"otherHivstKitUserCategory\"\r\n                                                            id=\"otherHivstKitUserCategory\"\r\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategory}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                        >\r\n                                                            <option value={\"\"}></option>\r\n                                                            {options.map(option => (\r\n                                                                <option key={option.value} value={option.value}>\r\n                                                                    {option.label}\r\n                                                                </option>\r\n                                                            ))}\r\n                                                        </select>\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            }\r\n                                            {testKitUserDetails.postTestAssessment?.otherHivstKitUserCategory === \"others\" ? (\r\n                                                <div className=\"form-group col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label>\r\n                                                            Please Specify Other Category\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <input\r\n                                                            type=\"text\"\r\n                                                            className=\"form-control\"\r\n                                                            name=\"otherHivstKitUserCategoryText\"\r\n                                                            id=\"otherHivstKitUserCategoryText\"\r\n                                                            value={testKitUserDetails.postTestAssessment.otherHivstKitUserCategoryText}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            ) : \"\"}\r\n\r\n                                            <div className=\"form-group  col-md-4\">\r\n                                                <FormGroup>\r\n                                                    <Label >\r\n                                                        What was the result of the HIVST?\r\n                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                    </Label>\r\n                                                    <select\r\n                                                        className=\"form-control\"\r\n                                                        name=\"resultOfHivstTest\"\r\n                                                        id=\"resultOfHivstTest\"\r\n                                                        value={testKitUserDetails.postTestAssessment.resultOfHivstTest}\r\n                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                        style={{\r\n                                                            border: \"1px solid #014D88\",\r\n                                                            borderRadius: \"0.2rem\",\r\n                                                        }}\r\n                                                    >\r\n                                                        <option value={\"\"}></option>\r\n                                                        <option value=\"Reactive\">Reactive</option>\r\n                                                        <option value=\"Non-Reactive\">Non Reactive</option>\r\n                                                        <option value=\"Indeterminate\">Indeterminate</option>\r\n                                                    </select>\r\n                                                </FormGroup>\r\n                                            </div>\r\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Reactive\" &&\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label >\r\n                                                            Would you like to access HIV testing to confirm my HIVST\r\n                                                            result?\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"accessConfirmatoryHts\"\r\n                                                            id=\"accessConfirmatoryHts\"\r\n                                                            value={testKitUserDetails.postTestAssessment.accessConfirmatoryHts}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                        >\r\n                                                            <option value={\"\"}></option>\r\n                                                            <option value=\"Yes\">YES</option>\r\n                                                            <option value=\"No\">NO</option>\r\n                                                        </select>\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            }\r\n                                            {testKitUserDetails?.postTestAssessment?.resultOfHivstTest === \"Non-Reactive\" &&\r\n                                                <div className=\"form-group  col-md-4\">\r\n                                                    <FormGroup>\r\n                                                        <Label >\r\n                                                            Would you like to be referred for prevention services\r\n                                                            {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                        </Label>\r\n                                                        <select\r\n                                                            className=\"form-control\"\r\n                                                            name=\"referPreventionServices\"\r\n                                                            id=\"referPreventionServices\"\r\n                                                            value={testKitUserDetails.postTestAssessment.referPreventionServices}\r\n                                                            onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                            style={{\r\n                                                                border: \"1px solid #014D88\",\r\n                                                                borderRadius: \"0.2rem\",\r\n                                                            }}\r\n                                                        >\r\n                                                            <option value={\"\"}></option>\r\n                                                            <option value=\"Yes\">YES</option>\r\n                                                            <option value=\"No\">NO</option>\r\n                                                        </select>\r\n                                                    </FormGroup>\r\n                                                </div>\r\n                                            }\r\n\r\n                                        </div>\r\n                                        {\r\n                                            testKitUserDetails.postTestAssessment\r\n                                            && testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\"\r\n                                            || testKitUserDetails.postTestAssessment.referPreventionServices === \"Yes\" ?\r\n                                                (\r\n                                                    <div className=\"row center\">\r\n                                                        <div\r\n                                                            className=\"form-group col-md-12 ml-3 text-center pt-2 mb-4\"\r\n                                                            style={{\r\n                                                                backgroundColor: \"rgba(25, 96, 176, 0.8)\",\r\n                                                                width: \"125%\",\r\n                                                                height: \"35px\",\r\n                                                                color: \"#fff\",\r\n                                                                fontWeight: \"bold\",\r\n                                                            }}\r\n                                                        >\r\n                                                            Section C : Referral Information\r\n                                                        </div>\r\n                                                        {testKitUserDetails.postTestAssessment.accessConfirmatoryHts === \"Yes\" && <div className=\"form-group  col-md-4\">\r\n                                                            <FormGroup>\r\n                                                                <Label >\r\n                                                                    Referred for Confirmatory HTS Testing\r\n                                                                    {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                </Label>\r\n                                                                <select\r\n                                                                    className=\"form-control\"\r\n                                                                    name=\"referredForConfirmatoryHts\"\r\n                                                                    id=\"referredForConfirmatoryHts\"\r\n                                                                    value={testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts}\r\n                                                                    onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                                    style={{\r\n                                                                        border: \"1px solid #014D88\",\r\n                                                                        borderRadius: \"0.2rem\",\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <option value={\"\"}></option>\r\n                                                                    <option value=\"Yes\">YES</option>\r\n                                                                    <option value=\"No\">NO</option>\r\n                                                                </select>\r\n                                                            </FormGroup>\r\n                                                        </div>}\r\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForConfirmatoryHts === \"Yes\" &&\r\n                                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                                <FormGroup>\r\n                                                                    <Label for=\"\">\r\n                                                                        Date referred for confirmatory HTS testing\r\n                                                                        field\r\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                    </Label>\r\n                                                                    <Input\r\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                                        name=\"dateReferredForConfirmatoryHts\"\r\n                                                                        id=\"dateReferredForConfirmatoryHts\"\r\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForConfirmatoryHts}\r\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n\r\n                                                                        min={objValues.dateOfVisit}\r\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                                        style={{\r\n                                                                            border: \"1px solid #014D88\",\r\n                                                                            borderRadius: \"0.25rem\",\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </FormGroup>\r\n                                                            </div>}\r\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails?.postTestAssessment?.referPreventionServices === \"Yes\" &&\r\n                                                            <div className=\"form-group  col-md-4\">\r\n                                                                <FormGroup>\r\n                                                                    <Label >\r\n                                                                        Referred for Prevention Services\r\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                    </Label>\r\n                                                                    <select\r\n                                                                        className=\"form-control\"\r\n                                                                        name=\"referredForPreventionServices\"\r\n                                                                        id=\"referredForPreventionServices\"\r\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices}\r\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n\r\n                                                                        style={{\r\n                                                                            border: \"1px solid #014D88\",\r\n                                                                            borderRadius: \"0.2rem\",\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        <option value={\"\"}></option>\r\n                                                                        <option value=\"Yes\">YES</option>\r\n                                                                        <option value=\"No\">NO</option>\r\n                                                                    </select>\r\n                                                                </FormGroup>\r\n                                                            </div>\r\n                                                        }\r\n                                                        {testKitUserDetails.postTestAssessment.referralInformation && testKitUserDetails.postTestAssessment.referralInformation.referredForPreventionServices === \"Yes\" &&\r\n                                                            <div className=\"form-group mb-3 col-md-4\">\r\n                                                                <FormGroup>\r\n                                                                    <Label for=\"\">\r\n                                                                        Date referred for prevention services\r\n                                                                        {/*<span style={{color: \"red\"}}> *</span>*/}\r\n                                                                    </Label>\r\n                                                                    <Input\r\n                                                                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                                                        name=\"dateReferredForPreventionServices\"\r\n                                                                        id=\"dateReferredForPreventionServices\"\r\n                                                                        value={testKitUserDetails.postTestAssessment.referralInformation.dateReferredForPreventionServices}\r\n                                                                        onChange={(e) => handleUserInformationInputChange(e, \"postTestAssessment\")}\r\n                                                                        min={objValues.dateOfVisit}\r\n                                                                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                                                        style={{\r\n                                                                            border: \"1px solid #014D88\",\r\n                                                                            borderRadius: \"0.25rem\",\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    {/*{errors.dateOfVisit !== \"\" ? (*/}\r\n                                                                    {/*    <span className={classes.error}>{errors.dateOfVisit}</span>*/}\r\n                                                                    {/*) : (*/}\r\n                                                                    {/*    \"\"*/}\r\n                                                                    {/*)}*/}\r\n                                                                </FormGroup>\r\n                                                            </div>\r\n                                                        }\r\n\r\n                                                    </div>) : \"\"}\r\n                                    </>\r\n                                  ) : ( \"\"\r\n                                    // Display the save form button if the checkbox is not checked\r\n                                    // <div className=\"row\">\r\n                                    //     {// if selected user  is myself only show save button and save secondary user information\r\n                                    //         selectedUsers && selectedUsers.length === 1 && selectedUsers[0] === \"myself\" &&\r\n                                    //         <div className=\"form-group mb-3 col-md-6\">\r\n                                    //             <Button\r\n                                    //                 content=\"save myself information\"\r\n                                    //                 icon=\"save\"\r\n                                    //                 labelPosition=\"right\"\r\n                                    //                 style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\r\n                                    //                 onClick={handleSubmit}\r\n                                    //                 disabled={saving}\r\n                                    //             />\r\n                                    //         </div>\r\n                                    //     }\r\n                                    //\r\n                                    // </div>\r\n                                )}\r\n                            </div>\r\n                            {selectedUsers.length > 0 && <div className=\"row\">\r\n                                <div className=\"form-group mb-3 col-md-6\">\r\n                                    <LabelSui\r\n                                        as=\"a\"\r\n                                        color=\"black\"\r\n                                        onClick={addUserInformation}\r\n                                        size=\"small\"\r\n                                        style={{marginTop: 35}}\r\n                                    >\r\n                                        <Icon name=\"plus\"/> Add\r\n                                    </LabelSui>\r\n                                </div>\r\n                            </div>\r\n                            }\r\n                            {/*added kit user */}\r\n                            {userInformationList.length > 0 ? (\r\n                                <div class=\"row\">\r\n                                    <List className=\"mb-5\">\r\n                                        <Table striped responsive>\r\n                                            <thead style={{\r\n                                                backgroundColor: \"#014D88\",\r\n                                                color: \"white\",\r\n                                                fontSize: \"10px\"\r\n                                            }}>\r\n                                            <tr>\r\n                                                <th>Client Code</th>\r\n                                                <th>HIV Self Test Type</th>\r\n                                                {/*<th>Ever used HIVST Kit</th>*/}\r\n                                                <th>User Category</th>\r\n                                                <th>Action</th>\r\n                                            </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                            {userInformationList.map((item, index) => (\r\n                                                <tr key={index}>\r\n                                                    <td>{item.basicUserInfo.clientCode}</td>\r\n                                                    <td>{item.basicUserInfo.typeOfHivst}</td>\r\n                                                    {/*<th>{item.postTestAssessment.everUsedHivstKit}</th>*/}\r\n                                                    <td>{item.basicUserInfo.userCategory}</td>\r\n                                                    <td>\r\n                                                        <IconButton\r\n                                                            aria-label=\"delete\"\r\n                                                            size=\"small\"\r\n                                                            color=\"error\"\r\n                                                            onClick={() => removeUserInformation(index)}\r\n                                                        >\r\n                                                            <DeleteIcon fontSize=\"inherit\"/>\r\n                                                        </IconButton>\r\n                                                        {/*<IconButton>*/}\r\n                                                        {/*    <EditIcon fontSize=\"inherit\"/>*/}\r\n                                                        {/*</IconButton>*/}\r\n                                                    </td>\r\n                                                </tr>\r\n                                            ))}\r\n                                            </tbody>\r\n                                        </Table>\r\n                                    </List>\r\n                                </div>\r\n                                ) : \" \"}\r\n                            {/*{selectedUsers.length > 0 &&*/}\r\n                            {/*    <div className=\"row\">*/}\r\n                            {/*        <div className=\"form-group mb-3 col-md-6\">*/}\r\n                            {/*            <Button*/}\r\n                            {/*                content=\"save\"*/}\r\n                            {/*                icon=\"save\"*/}\r\n                            {/*                labelPosition=\"right\"*/}\r\n                            {/*                style={{backgroundColor: \"#014d88\", color: \"#fff\"}}*/}\r\n                            {/*                onClick={handleSubmit}*/}\r\n                            {/*                // disabled={saving}*/}\r\n                            {/*                disabled={userInformationList.length === 0}*/}\r\n                            {/*            />*/}\r\n                            {/*        </div>*/}\r\n                            {/*    </div>*/}\r\n                            {/*}*/}\r\n\r\n                            {\r\n                                objValues?.otherTestKitUserInfoAvailable === \"No\" ?\r\n                                    (\r\n                                        <div className=\"row mb-7\">\r\n                                            <div className=\"form-group mb-3 col-md-6\">\r\n                                                <Button\r\n                                                    content=\"Save without user Info\"\r\n                                                    icon=\"save\"\r\n                                                    labelPosition=\"right\"\r\n                                                    style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\r\n                                                    onClick={handleSubmit}\r\n                                                    disabled={saving}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    ) :\r\n                                    (\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group mb-3 col-md-6\">\r\n                                                <Button\r\n                                                    content=\"Save\"\r\n                                                    icon=\"save\"\r\n                                                    labelPosition=\"right\"\r\n                                                    style={{backgroundColor: \"#014d88\", color: \"#fff\"}}\r\n                                                    onClick={handleSubmit}\r\n                                                    disabled={userInformationList.length === 0}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                            }\r\n\r\n                        </div>\r\n\r\n                    </form>\r\n                </CardBody>\r\n            </Card>\r\n\r\n            <Modal\r\n                show={open}\r\n                toggle={toggle}\r\n                className=\"fade\"\r\n                size=\"sm\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Notification!\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h4>Are you Sure of the Age entered?</h4>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        onClick={toggle}\r\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    >\r\n                        Yes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\nexport default HIVSTPatientRegistration;","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\RiskStratification.js",["1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Others.js",["1081","1082","1083","1084","1085","1086","1087","1088","1089","1090"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\r\nimport * as moment from 'moment';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\n// import {ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\n// import {token, url as baseUrl } from \"../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport {Label as LabelRibbon} from 'semantic-ui-react'\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    const handleItemClick = (page, completedMenu) => {\r\n        props.handleItemClick(page, completedMenu);\r\n     \r\n      };\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n               \r\n                <h3 >OTHERS - (Resquest {\"& \"} Result Form)</h3>\r\n               <hr/>\r\n                <br/>\r\n                    <form >\r\n                        <div className=\"row\">\r\n                        <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h5 style={{color:'#fff'}}>Syphilis Testing</h5>\r\n                        </LabelRibbon>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Syphilis test result *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"syphilisTestResult\"\r\n                                        id=\"syphilisTestResult\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Reactive</option>\r\n                                        <option value=\"No\">Non-Reactive</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <hr/>\r\n                            <br/>\r\n                            <LabelRibbon as='a' color='blue' style={{width:'106%', height:'35px'}} ribbon>\r\n                            <h5 style={{color:'#fff'}}>Hepatitis B Testing</h5>\r\n                            </LabelRibbon>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Hepatitis B virus test result *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"hepatitisBTestResult\"\r\n                                        id=\"hepatitisBTestResult\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Positive</option>\r\n                                        <option value=\"No\">Negative</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Hepatitis C virus test result *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"hepatitisCTestResult\"\r\n                                        id=\"hepatitisCTestResult\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                       <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Positive</option>\r\n                                        <option value=\"No\">Negative</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>HIV Request and Result form filled with CT Intake Form *</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"hivRequestResultCT\"\r\n                                        id=\"hivRequestResultCT\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Completed By</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"completedBy\"\r\n                                    id=\"completedBy\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Longitude</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"longitude\"\r\n                                    id=\"longitude\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Latitude</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"latitude\"\r\n                                    id=\"latitude\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group mb-3 col-md-4\">\r\n                                <FormGroup>\r\n                                <Label for=\"\">Adhoc Code</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"adhocCode\"\r\n                                    id=\"adhocCode\"\r\n                                    // value={objValues.lastViralLoad}\r\n                                    // onChange={handleInputChange}\r\n                                    style={{border: \"1px solid #014D88\", borderRadius:\"0.25rem\"}}\r\n                                   \r\n                                />\r\n                                \r\n                                </FormGroup>\r\n                            </div>\r\n                                                      \r\n                            {saving ? <Spinner /> : \"\"}\r\n                            <br />\r\n                            <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-6\">\r\n                            <MatButton\r\n                            type=\"button\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            startIcon={<SaveIcon />}\r\n                            onClick={()=>handleItemClick('basic','others')}\r\n                            style={{backgroundColor:\"#014d88\"}}\r\n                            //disabled={objValues.dateOfEac1===\"\" ? true : false}\r\n                            >\r\n                            {!saving ? (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                            ) : (\r\n                            <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                            )}\r\n                            </MatButton>\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                                 \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\RecencyTesting.js",["1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nimport { usePermissions } from \"../../../../hooks/usePermissions\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst Recency = (props) => {\r\n  const classes = useStyles();\r\n  const { hasPermission } = usePermissions();\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [hivTestDate, setHivTestDate] = useState(\"\");\r\n  let temp = { ...errors };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page, completedMenu);\r\n \r\n  };\r\n  \r\n  // const [permissions, setPermission] = useState(\r\n  //   localStorage.getItem(\"permissions\")?.split(\",\")\r\n  // );\r\n  const [objValues, setObjValues] = useState({\r\n    htsClientId: clientId,\r\n    recency: {},\r\n    personId: patientID,\r\n  });\r\n  const [recency, setRecency] = useState({\r\n    optOutRTRI:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRI\r\n        : \"\",\r\n    optOutRTRITestName:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRITestName\r\n        : \"\",\r\n    optOutRTRITestDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRITestDate\r\n        : \"\",\r\n    rencencyId:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.rencencyId\r\n        : \"\",\r\n    controlLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.controlLine\r\n        : \"\",\r\n    verififcationLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.verififcationLine\r\n        : \"\",\r\n    longTermLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.longTermLine\r\n        : \"\",\r\n    rencencyInterpretation:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.rencencyInterpretation\r\n        : \"\",\r\n    hasViralLoad:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.hasViralLoad\r\n        : \"\",\r\n    sampleCollectedDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleCollectedDate\r\n        : \"\",\r\n    sampleReferanceNumber:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleReferanceNumber\r\n        : \"\",\r\n    dateSampleSentToPCRLab:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.dateSampleSentToPCRLab\r\n        : \"\",\r\n    sampleTestDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleTestDate\r\n        : \"\",\r\n    sampleType:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleType\r\n        : \"\",\r\n    receivingPcrLab:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.receivingPcrLab\r\n        : \"\",\r\n    viralLoadResultClassification:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.viralLoadResultClassification\r\n        : \"\",\r\n    recencyResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.recencyResult\r\n        : \"\",\r\n    finalRecencyResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.finalRecencyResult\r\n        : \"\",\r\n    viralLoadConfirmationResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.viralLoadConfirmationResult\r\n        : \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (props.patientObj && props.patientObj.recency !== null) {\r\n      setRecency(props.patientObj.recency);\r\n      if (recency.optOutRTRI === \"true\") {\r\n        setRecency({\r\n          optOutRTRI:\r\n            props.patientObj && props.patientObj.recency !== null\r\n              ? props.patientObj.recency.optOutRTRI\r\n              : \"\",\r\n          optOutRTRITestName: \"\",\r\n          optOutRTRITestDate: \"\",\r\n          rencencyId: \"\",\r\n          controlLine: \"\",\r\n          verififcationLine: \"\",\r\n          longTermLine: \"\",\r\n          rencencyInterpretation: \"\",\r\n          hasViralLoad: \"\",\r\n          sampleCollectedDate: \"\",\r\n          sampleReferanceNumber: \"\",\r\n          dateSampleSentToPCRLab: \"\",\r\n          sampleTestDate: \"\",\r\n          sampleType: \"\",\r\n          receivingPcrLab: \"\",\r\n          viralLoadResultClassification: \"\",\r\n          recencyResult: \"\",\r\n          finalRecencyResult: \"\",\r\n          viralLoadConfirmationResult: \"\",\r\n        });\r\n      }\r\n    }\r\n    if (props.patientObj) {\r\n      if (\r\n        props.patientObj.confirmatoryTest2 &&\r\n        props.patientObj.confirmatoryTest2.date2 !== \"\"\r\n      ) {\r\n        setHivTestDate(props.patientObj.confirmatoryTest2.date2);\r\n      } else if (\r\n        props.patientObj.confirmatoryTest &&\r\n        props.patientObj.confirmatoryTest.date !== \"\"\r\n      ) {\r\n        setHivTestDate(props.patientObj.confirmatoryTest.date);\r\n      } else {\r\n        setHivTestDate(\"\");\r\n      }\r\n    }\r\n    if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"RTRI Long Term\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Long Term\" });\r\n    } else if (\r\n      recency.longTermLine === \"false\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"RTRI Recent\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Recent\" });\r\n      //setRecency ({...recency,  ['hasViralLoad']: 'true'});\r\n    } else if (\r\n      recency.longTermLine === \"false\" &&\r\n      recency.verififcationLine === \"false\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Negative\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Negative\" });\r\n    } else if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"false\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Invalid\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\r\n    } else if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"false\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Invalid\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\r\n    } else {\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"\" });\r\n    }\r\n  }, [\r\n    recency.longTermLine,\r\n    recency.verififcationLine,\r\n    recency.controlLine,\r\n    props.patientObj,\r\n  ]);\r\n\r\n  const handleInputChangeRecency = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"viralLoadConfirmationResult\") {\r\n      \r\n      if (e.target.value >= 1000) {\r\n        recency.viralLoadResultClassification = \">=1000\";\r\n        recency.finalRecencyResult = \"RITA Recent\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value < 1000) {\r\n        recency.viralLoadResultClassification = \"<1000\";\r\n        recency.finalRecencyResult = \"RITA Long term\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      }\r\n    }\r\n   if(e.target.name === \"optOutRTRI\"){\r\n      setRecency({\r\n        // optOutRTRI: \"false\",\r\n        optOutRTRITestName: \"\",\r\n        optOutRTRITestDate: \"\",\r\n        rencencyId: \"\",\r\n        controlLine: \"\",\r\n        verififcationLine: \"\",\r\n        longTermLine: \"\",\r\n        rencencyInterpretation: \"\",\r\n        hasViralLoad: \"\",\r\n        sampleCollectedDate: \"\",\r\n        sampleReferanceNumber: \"\",\r\n        dateSampleSentToPCRLab: \"\",\r\n        sampleTestDate: \"\",\r\n        sampleType: \"\",\r\n        receivingPcrLab: \"\",\r\n        viralLoadResultClassification: \"\",\r\n        recencyResult: \"\",\r\n        finalRecencyResult: \"\",\r\n        viralLoadConfirmationResult: \"\",\r\n         [e.target.name]: e.target.value });\r\n\r\n         setErrors({ ...temp,\r\n          optOutRTRITestName: \"\",\r\n          optOutRTRITestDate: \"\",\r\n          rencencyId: \"\",\r\n          controlLine: \"\",\r\n          verififcationLine: \"\",\r\n          longTermLine: \"\",\r\n          rencencyInterpretation: \"\",\r\n          hasViralLoad: \"\",\r\n          sampleCollectedDate: \"\",\r\n          sampleReferanceNumber: \"\",\r\n          dateSampleSentToPCRLab: \"\",\r\n          sampleTestDate: \"\",\r\n          sampleType: \"\",\r\n          receivingPcrLab: \"\",\r\n          viralLoadResultClassification: \"\",\r\n          recencyResult: \"\",\r\n          finalRecencyResult: \"\",\r\n          viralLoadConfirmationResult: \"\", [e.target.name]: \"\" });\r\n\r\n    } \r\nif(e.target.name === \"controlLine\" || e.target.name === \"verififcationLine\" ||   e.target.name === \"longTermLine\"){\r\nsetErrors({...errors, hasViralLoad: \"\"})\r\n  // hasViralLoad\r\n\r\n}\r\n\r\n\r\n    if (e.target.name === \"viralLoadResultClassification\") {\r\n      if (e.target.value === \">=1000\") {\r\n        recency.finalRecencyResult = \"RITA Recent\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"<1000\") {\r\n        recency.finalRecencyResult = \"RITA Long term\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"Failed run\") {\r\n        recency.finalRecencyResult = \"RITA Inconclusive\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"Invalid viral load result\") {\r\n        recency.finalRecencyResult = \"RITA Inconclusive\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else {\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      }\r\n    } else if (e.target.name === \"rencencyId\" && e.target.value !== \"\") {\r\n      const recencyIdNumberValue = checkRecencyLimit(e.target.value);\r\n      setRecency({ ...recency, [e.target.name]: recencyIdNumberValue });\r\n    } else {\r\n      setRecency({ ...recency, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n\r\n  const checkRecencyLimit = (e) => {\r\n    const limit = 10;\r\n    const acceptedNumber = e.slice(0, limit);\r\n    return acceptedNumber;\r\n  };\r\n\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n\r\n      recency.optOutRTRI === \"false\" &&\r\n        (temp.optOutRTRITestName = recency.optOutRTRITestName\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n    \r\n    \r\n         recency.optOutRTRI === \"false\" &&\r\n          (temp.optOutRTRITestDate = recency.optOutRTRITestDate\r\n            ? \"\"\r\n            : \"This field is required.\");\r\n\r\n      \r\n          recency.optOutRTRI === \"false\" &&\r\n            (temp.rencencyId = recency.rencencyId\r\n              ? \"\"\r\n              : \"This field is required.\");\r\n\r\n             recency.optOutRTRI === \"false\" &&\r\n              (temp.controlLine = recency.controlLine\r\n                ? \"\"\r\n                : \"This field is required.\")\r\n\r\n                \r\n      \r\n              recency.optOutRTRI === \"false\" &&\r\n              (temp.verififcationLine = recency.verififcationLine\r\n                ? \"\"\r\n                : \"This field is required.\");\r\n\r\n\r\n                recency.optOutRTRI === \"false\" &&\r\n                (temp.longTermLine = recency.longTermLine\r\n                  ? \"\"\r\n                  : \"This field is required.\")\r\n\r\n\r\n\r\n                  recency.optOutRTRI === \"false\" &&\r\n                  (temp.rencencyInterpretation = recency.rencencyInterpretation\r\n                    ? \"\"\r\n                    : \"This field is required.\")\r\n      recency.hasViralLoad == \"true\" &&\r\n        (temp.sampleReferanceNumber = recency.sampleReferanceNumber\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n    \r\n    // {  recency.sampleCollectedDate!=='' && (temp.dateSampleSentToPCRLab = recency.dateSampleSentToPCRLab ? \"\" : \"This field is required.\")}\r\n    \r\n      recency.hasViralLoad == \"true\" &&\r\n        (temp.sampleType = recency.sampleType ? \"\" : \"This field is required.\");\r\n    \r\n\r\n\r\n    recency.rencencyInterpretation === \"RTRI Recent\" &&\r\n      (temp.hasViralLoad = recency.hasViralLoad\r\n        ? \"\"\r\n        : \"This field is required.\"); \r\n        \r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let latestForm = getNextForm(\r\n      \"hiv_recency_testing\",\r\n      props.patientAge,\r\n      \"\",\r\n      props?.patientObj?.hivTestResult\r\n    );\r\n    objValues.htsClientId = clientId;\r\n    objValues.recency = recency;\r\n    objValues.personId = patientID;\r\n    if (validate()) {\r\n      setSaving(true);\r\n      axios\r\n        .put(`${baseUrl}hts/${clientId}/recency`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          props.setPatientObj(response.data);\r\n          //toast.success(\"Risk Assesment successful\");\r\n          //comment this out for release\r\n          // handleItemClick(\"fit\", \"recency-testing\");\r\n          handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n          \r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const permissions = useMemo(\r\n    () => ({\r\n      canSeeRequestAndResultForm: hasPermission(\"Request_and_Result_Form\"),\r\n      canSeeNigeriaPnsForm: hasPermission(\"Nigeria_PNS_Form\"),\r\n      canSeeRefferalForm: hasPermission(\"Referral_Form\")\r\n    }),\r\n    [hasPermission]\r\n  );\r\n  \r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2>RECENCY FORM</h2>\r\n          <form>\r\n            <div className=\"row\">\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h5 style={{ color: \"#fff\" }}>RECENCY</h5>\r\n              </LabelRibbon>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Opt Out of RTRI? <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"optOutRTRI\"\r\n                    id=\"optOutRTRI\"\r\n                    value={recency.optOutRTRI}\r\n                    onChange={handleInputChangeRecency}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-8\"></div>\r\n              {recency.optOutRTRI === \"false\" && (\r\n                <>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Test Name <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"optOutRTRITestName\"\r\n                        id=\"optOutRTRITestName\"\r\n                        value={recency.optOutRTRITestName}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"Asante\">Asante</option>\r\n                        <option value=\"Others\">Others</option>\r\n                      </select>\r\n                      {errors.optOutRTRITestName !== \"\" ? (\r\n                      <span className={classes.error}>{errors.optOutRTRITestName}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Test Date <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"date\"                  \r\n                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"optOutRTRITestDate\"\r\n                        id=\"optOutRTRITestDate\"\r\n                        value={recency.optOutRTRITestDate}\r\n                        onChange={handleInputChangeRecency}\r\n                        min={\r\n                          hivTestDate !== \"\" && hivTestDate !== null\r\n                            ? hivTestDate\r\n                            : \"\"\r\n                        }\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                      {errors.optOutRTRITestDate !== \"\" ? (\r\n                      <span className={classes.error}>{errors.optOutRTRITestDate}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Recency ID <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        className=\"form-control\"\r\n                        name=\"rencencyId\"\r\n                        id=\"rencencyId\"\r\n                        type=\"text\"\r\n                        value={recency.rencencyId}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                      {errors.rencencyId !== \"\" ? (\r\n                      <span className={classes.error}>{errors.rencencyId}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Control Line <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"controlLine\"\r\n                        id=\"controlLine\"\r\n                        value={recency.controlLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n\r\n                      {errors.controlLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.controlLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Verification Line{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"verififcationLine\"\r\n                        id=\"verififcationLine\"\r\n                        value={recency.verififcationLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.verififcationLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.verififcationLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Long Term Line <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"longTermLine\"\r\n                        id=\"longTermLine\"\r\n                        value={recency.longTermLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.longTermLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.longTermLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Recency Interpretation{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        className=\"form-control\"\r\n                        name=\"rencencyInterpretation\"\r\n                        id=\"rencencyInterpretation\"\r\n                        type=\"text\"\r\n                        value={recency.rencencyInterpretation}\r\n                        disabled\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                      {errors.rencencyInterpretation !== \"\" ? (\r\n                      <span className={classes.error}>{errors.rencencyInterpretation}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {recency.rencencyInterpretation === \"RTRI Recent\" && (\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Has Viral Load been ordered?{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"hasViralLoad\"\r\n                          id=\"hasViralLoad\"\r\n                          value={recency.hasViralLoad}\r\n                          onChange={handleInputChangeRecency}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.hasViralLoad !== \"\" ? (\r\n                      <span className={classes.error}>{errors.hasViralLoad}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                  {recency.hasViralLoad === \"true\" && (\r\n                    <>\r\n                      <div className=\"row\">\r\n                        <h4>Recency Viral Load Classification :</h4>\r\n                        <br />\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Recency Sample Collected Date</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleCollectedDate\"\r\n                              id=\"sampleCollectedDate\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              value={recency.sampleCollectedDate}\r\n                              min={recency.optOutRTRITestDate}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Sample Reference Number{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleReferanceNumber\"\r\n                              id=\"sampleReferanceNumber\"\r\n                              type=\"text\"\r\n                              value={recency.sampleReferanceNumber}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                            {errors.sampleReferanceNumber !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.sampleReferanceNumber}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Sample Type{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"sampleType\"\r\n                              id=\"sampleType\"\r\n                              value={recency.sampleType}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"DBS\">DBS</option>\r\n                              <option value=\"Plasma\">Plasma</option>\r\n                            </select>\r\n                            {errors.sampleType !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.sampleType}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Date Recency Sample Sent to PCR Lab</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"dateSampleSentToPCRLab\"\r\n                              id=\"dateSampleSentToPCRLab\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              min={recency.sampleCollectedDate}\r\n                              value={recency.dateSampleSentToPCRLab}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                            {errors.dateSampleSentToPCRLab !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.dateSampleSentToPCRLab}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Recency Sample Test Date</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleTestDate\"\r\n                              id=\"sampleTestDate\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              // min={recency.optOutRTRITestDate}\r\n                              min={recency.dateSampleSentToPCRLab}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              value={recency.sampleTestDate}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Receiving PCR Lab</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"receivingPcrLab\"\r\n                              id=\"receivingPcrLab\"\r\n                              type=\"text\"\r\n                              value={recency.receivingPcrLab}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Confirmation Result (copies/ml)\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"viralLoadConfirmationResult\"\r\n                              id=\"viralLoadConfirmationResult\"\r\n                              type=\"number\"\r\n                              value={recency.viralLoadConfirmationResult}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Result Classification and\r\n                              Result (copies/ml)\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"viralLoadResultClassification\"\r\n                              id=\"viralLoadResultClassification\"\r\n                              value={recency.viralLoadResultClassification}\r\n                              onChange={handleInputChangeRecency}\r\n                              disabled\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            >\r\n                              <option value={\"\"}>Select</option>\r\n                              <option value=\">=1000\">{\">= \"} 1000</option>\r\n                              <option value=\"<1000\">{\"< \"} 1000</option>\r\n                              <option value=\"Failed run\">Failed run</option>\r\n                              <option value=\"Invalid viral load result\">\r\n                                Invalid viral load result\r\n                              </option>\r\n                            </select>\r\n                          </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group  col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label>Result (copies/ml)</Label>\r\n                                        <Input\r\n                                            className=\"form-control\"\r\n                                            name=\"recencyResult\"\r\n                                            id=\"recencyResult\"\r\n                                            type=\"text\"\r\n                                            value={recency.recencyResult}\r\n                                            onChange={handleInputChangeRecency}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n                                        \r\n                                    </FormGroup>\r\n                                </div> */}\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Final Recency Result</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"finalRecencyResult\"\r\n                              id=\"finalRecencyResult\"\r\n                              type=\"text\"\r\n                              disabled\r\n                              value={recency.finalRecencyResult}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  {/* <Button\r\n                    content=\"Back\"\r\n                    icon=\"left arrow\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    onClick={() => handleItemClick(\"post-test\", \"post-test\")}\r\n                  /> */}\r\n                  <Button\r\n                    content=\"Save & Continue\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={\r\n                      props.patientObj?.postTestCounselingKnowledgeAssessment\r\n                        ?.hivTestResult === \"true\" && recency.optOutRTRI === \"\"\r\n                        ? true\r\n                        : false\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Recency;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\PostTest.js",["1104","1105","1106","1107","1108"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { getNextForm } from \"../../../../utility\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst PostTest = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  ///const [errors, setErrors] = useState({});\r\n  const [objValues, setObjValues] = useState({\r\n    htsClientId: clientId,\r\n    postTestCounselingKnowledgeAssessment: {},\r\n    personId: patientID,\r\n  });\r\n\r\n  const [postTest, setPostTest] = useState({\r\n    hivTestResult: \"\",\r\n    hivTestBefore:\r\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\r\n        ?.lastHivTestDone !== \"Never\" &&\r\n      props.patientObj?.riskStratificationResponseDto?.riskAssessment\r\n        ?.whatWasTheResult === \"Positive\"\r\n        ? \"Previously tested positive in HIV care\"\r\n        : \"\",\r\n    hivRequestResult: \"\",\r\n    hivRequestResultCt: \"\",\r\n    clientReceivedHivTestResult: \"\",\r\n    postTestCounseling: \"\",\r\n    riskReduction: \"\",\r\n    postTestDisclosure: \"\",\r\n    bringPartnerHivtesting: \"\",\r\n    childrenHivtesting: \"\",\r\n    informationFp: \"\",\r\n    partnerFpThanCondom: \"\",\r\n    partnerFpUseCondom: \"\",\r\n    correctCondomUse: \"\",\r\n    condomProvidedToClient: \"\",\r\n    unprotectedSexRegularPartnerLastThreeMonth: \"\",\r\n    referredToServices: \"\",\r\n    lubricantProvidedToClient: \"\",\r\n    condomProvidedToClientCount: \"\",\r\n    lubricantProvidedToClientCount: \"\",\r\n  });\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.patientObj &&\r\n      props.patientObj.postTestCounselingKnowledgeAssessment\r\n    ) {\r\n      setPostTest(props.patientObj.postTestCounselingKnowledgeAssessment);\r\n    } else {\r\n      ///setPostTest(props.patientObj && props.patientObj.postTestCounselingKnowledgeAssessment!==null ? props.patientObj.postTestCounselingKnowledgeAssessment : {})\r\n      if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult2 !== \"\" &&\r\n        props.patientObj.hivTestResult2 !== null &&\r\n        props.patientObj.hivTestResult2 === \"Positive\"\r\n      ) {\r\n        postTest.hivTestResult = \"true\";\r\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\r\n      } else if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult2 !== \"\" &&\r\n        props.patientObj.hivTestResult2 !== null &&\r\n        props.patientObj.hivTestResult2 === \"Negative\"\r\n      ) {\r\n        postTest.hivTestResult = \"false\";\r\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\r\n      } else if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult !== \"\" &&\r\n        props.patientObj.hivTestResult !== null &&\r\n        props.patientObj.hivTestResult === \"Positive\"\r\n      ) {\r\n        postTest.hivTestResult = \"true\";\r\n        setPostTest({ ...postTest, hivTestResult: \"true\" });\r\n      } else if (\r\n        postTest.hivTestResult === \"\" &&\r\n        props.patientObj.hivTestResult !== \"\" &&\r\n        props.patientObj.hivTestResult !== null &&\r\n        props.patientObj.hivTestResult === \"Negative\"\r\n      ) {\r\n        postTest.hivTestResult = \"false\";\r\n        setPostTest({ ...postTest, hivTestResult: \"false\" });\r\n      }\r\n    }\r\n  }, [props.patientObj, postTest.hivTestResult]);\r\n  const handleInputChangePostTest = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n\r\n    if (e.target.name === \"lubricantProvidedToClientCount\") {\r\n      if (e.target.value >= 0) {\r\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n      }\r\n    } else if (e.target.name === \"condomProvidedToClientCount\") {\r\n      if (e.target.value >= 0) {\r\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n      } else {\r\n        setPostTest({ ...postTest, [e.target.name]: 0 });\r\n      }\r\n    } else {\r\n      setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page, completedMenu);\r\n \r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //handleItemClick('recency-testing', 'post-test')\r\n    // if(!(Object.values(postTest).every(x => x === \"\"))){\r\n    \r\n   let latestForm = getNextForm(\r\n     \"post_test_counseling\",\r\n     props?.patientObj?.riskStratificationResponseDto?.age,\r\n     \"\",\r\n     props?.patientObj?.hivTestResult\r\n   );\r\n    setSaving(true);\r\n    objValues.htsClientId = props.patientObj.id;\r\n    objValues.postTestCounselingKnowledgeAssessment = postTest;\r\n    objValues.personId = props.patientObj.personResponseDto.id;\r\n    axios\r\n      .put(\r\n        `${baseUrl}hts/${props.patientObj.id}/post-test-counseling`,\r\n        objValues,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setSaving(false);\r\n        props.setPatientObj(response.data);\r\n        toast.success(\"Post test successful\");\r\n         handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n        // handleItemClick(\"recency-testing\", \"post-test\");\r\n      })\r\n      .catch((error) => {\r\n        setSaving(false);\r\n        if (error.response && error.response.data) {\r\n          let errorMessage =\r\n            error.response.data.apierror &&\r\n            error.response.data.apierror.message !== \"\"\r\n              ? error.response.data.apierror.message\r\n              : \"Something went wrong, please try again\";\r\n          toast.error(errorMessage);\r\n        } else {\r\n          toast.error(\"Something went wrong. Please try again...\");\r\n        }\r\n      });\r\n    // }else{\r\n    //     toast.error(\"All post test fields are required\")\r\n\r\n    // }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2>POST TEST COUNSELING</h2>\r\n          <form>\r\n            <div className=\"row\">\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\r\n              </LabelRibbon>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    HIV test result <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivTestResult\"\r\n                    id=\"hivTestResult\"\r\n                    value={postTest.hivTestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={true}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Positive</option>\r\n                    <option value=\"false\">Negative</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Have you been tested for HIV before within this year?{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivTestBefore\"\r\n                    id=\"hivTestBefore\"\r\n                    value={postTest.hivTestBefore}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"Not previously tested\">\r\n                      Not previously tested\r\n                    </option>\r\n                    <option value=\"Previously tested negative\">\r\n                      Previously tested negative\r\n                    </option>\r\n                    <option value=\"Previously tested positive in HIV care\">\r\n                      Previously tested positive in HIV care\r\n                    </option>\r\n                    <option value=\"Previously tested positive not in HIV care\">\r\n                      Previously tested positive not in HIV care\r\n                    </option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>HIV Request and Result form signed by tester </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivRequestResult\"\r\n                    id=\"hivRequestResult\"\r\n                    value={postTest.hivRequestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    HIV Request and Result form filled with CT Intake Form{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivRequestResultCt\"\r\n                    id=\"hivRequestResultCt\"\r\n                    value={postTest.hivRequestResultCt}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client received HIV test result </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"clientReceivedHivTestResult\"\r\n                    id=\"clientReceivedHivTestResult\"\r\n                    value={postTest.clientReceivedHivTestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Post test counseling done </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"postTestCounseling\"\r\n                    id=\"postTestCounseling\"\r\n                    value={postTest.postTestCounseling}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Risk reduction plan developed </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"riskReduction\"\r\n                    id=\"riskReduction\"\r\n                    value={postTest.riskReduction}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Post test disclosure plan developed </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"postTestDisclosure\"\r\n                    id=\"postTestDisclosure\"\r\n                    value={postTest.postTestDisclosure}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Will bring partner(s) for HIV testing </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"bringPartnerHivtesting\"\r\n                    id=\"bringPartnerHivtesting\"\r\n                    value={postTest.bringPartnerHivtesting}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Will bring own children {\"<5\"} years for HIV testing{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"childrenHivtesting\"\r\n                    id=\"childrenHivtesting\"\r\n                    value={postTest.childrenHivtesting}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Provided with information on FP and dual contraception{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"informationFp\"\r\n                    id=\"informationFp\"\r\n                    value={postTest.informationFp}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Client/Partner use FP methods (other than condom)\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"partnerFpThanCondom\"\r\n                    id=\"partnerFpThanCondom\"\r\n                    value={postTest.partnerFpThanCondom}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client/Partner use condoms as (one) FP method </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"partnerFpUseCondom\"\r\n                    id=\"partnerFpUseCondom\"\r\n                    value={postTest.partnerFpUseCondom}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Correct condom use demonstrated </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"correctCondomUse\"\r\n                    id=\"correctCondomUse\"\r\n                    value={postTest.correctCondomUse}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Condoms provided to client </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"condomProvidedToClient\"\r\n                    id=\"condomProvidedToClient\"\r\n                    value={postTest.condomProvidedToClient}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              {postTest.condomProvidedToClient !== null &&\r\n                postTest.condomProvidedToClient === \"true\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>How many condoms were provided to client </Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"condomProvidedToClientCount\"\r\n                        id=\"condomProvidedToClientCount\"\r\n                        value={postTest.condomProvidedToClientCount}\r\n                        onChange={handleInputChangePostTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Lubricant were provided to client </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"lubricantProvidedToClient\"\r\n                    id=\"lubricantProvidedToClient\"\r\n                    value={postTest.lubricantProvidedToClient}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              {postTest.lubricantProvidedToClient !== null &&\r\n                postTest.lubricantProvidedToClient === \"true\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>How many lubricant provided to client </Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"lubricantProvidedToClientCount\"\r\n                        id=\"lubricantProvidedToClientCount\"\r\n                        value={postTest.lubricantProvidedToClientCount}\r\n                        onChange={handleInputChangePostTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n              {/* <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedSexRegularPartnerLastThreeMonth\"\r\n                                        id=\"unprotectedSexRegularPartnerLastThreeMonth\"\r\n                                        value={postTest.unprotectedSexRegularPartnerLastThreeMonth}\r\n                                        onChange={handleInputChangePostTest}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div> */}\r\n              {/* <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with regular particular in the last 3 months</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sex\"\r\n                                        id=\"sex\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div> */}\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client referred to other services </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"referredToServices\"\r\n                    id=\"referredToServices\"\r\n                    value={postTest.referredToServices}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <Message success>\r\n                <h4>\r\n                  If client tests HIV negative, and HIV Risk Assessment Score{\" \"}\r\n                  {\">0\"} or there is evidence for a STI syndrome, recommend\r\n                  re-testing after 3 months\r\n                </h4>\r\n              </Message>\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  {/* <Button\r\n                    content=\"Back\"\r\n                    icon=\"left arrow\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    onClick={() => handleItemClick(\"hiv-test\", \"hiv-test\")}\r\n                  /> */}\r\n                  {/*{postTest.hivTestResult === \"true\" && (*/}\r\n                  {/*  <Button*/}\r\n                  {/*    content=\"Save & Continue\"*/}\r\n                  {/*    icon=\"right arrow\"*/}\r\n                  {/*    labelPosition=\"right\"*/}\r\n                  {/*    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}*/}\r\n                  {/*    onClick={handleSubmit}*/}\r\n                  {/*  />*/}\r\n                  {/*)}*/}\r\n                  {/*{postTest.hivTestResult === \"false\" && (*/}\r\n                  {/*  <Button*/}\r\n                  {/*    content=\"Save & Finish\"*/}\r\n                  {/*    icon=\"right arrow\"*/}\r\n                  {/*    labelPosition=\"right\"*/}\r\n                  {/*    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}*/}\r\n                  {/*    onClick={handleSubmit}*/}\r\n                  {/*  />*/}\r\n                  {/*)}*/}\r\n                  <Button\r\n                    content=\"Save & Continue\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostTest;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Elicitation\\Index.js",["1109","1110","1111","1112"],"import React, {useState, Fragment } from \"react\";\r\n\r\nimport { Row, Col, Card, } from \"react-bootstrap\";\r\nimport AddIndexContact from './AddIndexContact';\r\nimport IndexContactList from './IndexContactList'\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport { Link } from 'react-router-dom';\r\n//import Button from '@material-ui/core/Button';\r\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\n\r\nconst Elicitation = (props) => {\r\n  \r\n    const [activePage, setActivePage]= useState('list')\r\n    const handleIClickPage =(activeItem)=>{\r\n        setActivePage(activeItem)\r\n    }\r\n    const handleItemClick = (page, completedMenu) => {\r\n      props.handleItemClick(page, completedMenu);\r\n   \r\n    };\r\n    const handleDone=()=>{\r\n      //window.location.reload(false);\r\n      props.setActivePage({...props.activePage, activePage:\"home\"})\r\n     \r\n    }\r\n\r\n\r\n  return (\r\n    <Fragment>  \r\n     \r\n      <Row>       \r\n        <Col md={12}>\r\n            {activePage==='list' &&\r\n                (\r\n                    <IndexContactList activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>\r\n                )\r\n            }\r\n            {activePage==='add' && (\r\n                  <AddIndexContact activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>        \r\n            )}\r\n            <br />\r\n                <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('recency-testing','recency-testing')}/>\r\n                <Button content='Done' icon='list' labelPosition='left' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={()=>handleDone()}/>\r\n                \r\n                </div>\r\n                </div>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Elicitation;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\BasicInfo.js",["1113","1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\PreTest.js",["1137","1138","1139","1140","1141","1142","1143"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport { checkPregnantPatient } from \"../../../../utility\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport {Label as LabelRibbon, Button, Message} from 'semantic-ui-react'\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nimport { getCheckModality } from \"../../../../utility\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\r\n    const sex= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.sex : \"\";\r\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n\r\n\r\n    let temp = { ...errors }\r\n    const [riskAssessmentPartner, setRiskAssessmentPartner]= useState(\r\n        {\r\n            sexPartnerHivPositive:\"\",\r\n            newDiagnosedHivlastThreeMonths:\"\",\r\n            currentlyArvForPmtct :\"\",\r\n            knowHivPositiveOnArv :\"\",\r\n            knowHivPositiveAfterLostToFollowUp:\"\", \r\n            uprotectedAnalSex  :\"\",\r\n        }\r\n    )\r\n    const [objValues, setObjValues]= useState(\r\n        {\r\n            htsClientId: clientId,\r\n            knowledgeAssessment: {},\r\n            personId: patientID,\r\n            riskAssessment: {},\r\n            stiScreening: {},\r\n            tbScreening: {},\r\n            sexPartnerRiskAssessment:{}\r\n        }\r\n    )\r\n    const [knowledgeAssessment, setKnowledgeAssessment]= useState(\r\n        {\r\n            previousTestedHIVNegative:\"\",\r\n            timeLastHIVNegativeTestResult:\"\",\r\n            clientPregnant:\"\",\r\n            clientInformHivTransRoutes:\"\",\r\n            clientInformRiskkHivTrans:\"\",\r\n            clientInformPreventingsHivTrans:\"\", \r\n            clientInformPossibleTestResult:\"\",\r\n            informConsentHivTest:\"\",\r\n        }\r\n    )\r\n    const [riskAssessment, setRiskAssessment]= useState(\r\n        {\r\n            everHadSexualIntercourse:\"\",\r\n            bloodtransInlastThreeMonths:\"\",\r\n            uprotectedSexWithCasualLastThreeMonths:\"\",\r\n            uprotectedSexWithRegularPartnerLastThreeMonths:\"\", \r\n            unprotectedVaginalSex:\"\",  \r\n            uprotectedAnalSex:\"\",   \r\n            stiLastThreeMonths:\"\",\r\n            sexUnderInfluence :\"\",\r\n            moreThanOneSexPartnerLastThreeMonths:\"\",\r\n            experiencePain:\"\",\r\n            haveSexWithoutCondom:\"\",\r\n            abuseDrug:\"\",\r\n            bloodTransfusion:\"\",\r\n            consistentWeightFeverNightCough:\"\",\r\n            soldPaidVaginalSex:\"\",\r\n        }\r\n    )\r\n    const [stiScreening, setStiScreening]= useState(\r\n        {\r\n            vaginalDischarge:\"\",\r\n            lowerAbdominalPains :\"\",\r\n            urethralDischarge :\"\",\r\n            complaintsOfScrotal:\"\", \r\n            complaintsGenitalSore  :\"\",\r\n                \r\n        }\r\n    )\r\n    const [tbScreening, setTbScreening]= useState(\r\n        {\r\n            currentCough :\"\",\r\n            weightLoss  :\"\",\r\n            lymphadenopathy :\"\", \r\n            fever :\"\",  \r\n            nightSweats :\"\",\r\n        }\r\n    )\r\n\r\n\r\n\r\n  \r\n    useEffect(() => { \r\n\r\n        if(props.patientObj){\r\n            let knowledgeAsses = props?.patientObj?.knowledgeAssessment\r\n\r\n          setKnowledgeAssessment(\r\n            props.patientObj.knowledgeAssessment &&\r\n              props.patientObj.knowledgeAssessment !== null\r\n              ? props.patientObj.knowledgeAssessment\r\n              : {}\r\n          );\r\n\r\n          if (props?.patientObj?.pregnant) {\r\n            checkPregnantPatient(props.patientObj.pregnant).then((res) => {\r\n              setKnowledgeAssessment({\r\n                ...knowledgeAsses,\r\n                clientPregnant: res ? \"true\" : \"false\",\r\n              });\r\n            });  \r\n         }\r\n\r\n          setRiskAssessment(\r\n            props.patientObj.riskAssessment &&\r\n              props.patientObj.riskAssessment !== null\r\n              ? props.patientObj.riskAssessment\r\n              : {}\r\n          );\r\n          setRiskAssessmentPartner(\r\n            props.patientObj.sexPartnerRiskAssessment &&\r\n              props.patientObj.sexPartnerRiskAssessment !== null\r\n              ? props.patientObj.sexPartnerRiskAssessment\r\n              : {}\r\n          );\r\n          setStiScreening(\r\n            props.patientObj.stiScreening &&\r\n              props.patientObj.stiScreening !== null\r\n              ? props.patientObj.stiScreening\r\n              : {}\r\n          );\r\n          setTbScreening(\r\n            props.patientObj.tbScreening &&\r\n              props.patientObj.tbScreening !== null\r\n              ? props.patientObj.tbScreening\r\n              : {}\r\n          );\r\n          //patientAge=calculate_age(moment(props.patientObj.personResponseDto.dateOfBirth).format(\"DD-MM-YYYY\"))\r\n          \r\n\r\n          if (\r\n            props.patientObj.riskStratificationResponseDto &&\r\n            Object.keys(\r\n              props.patientObj.riskStratificationResponseDto.riskAssessment\r\n            ).length !== 0 &&\r\n            props.patientObj.riskAssessment === null\r\n          ) {\r\n            //setRiskAssessment({...riskAssessment, ...props.patientObj.riskStratificationResponseDto.riskAssessment})\r\n            props.patientObj.riskStratificationResponseDto.riskAssessment\r\n              .whatWasTheResult !== \"\" &&\r\n            props.patientObj.riskStratificationResponseDto.riskAssessment\r\n              .whatWasTheResult === \"Positive\"\r\n              ? (knowledgeAssessment.previousTestedHIVNegative = \"false\")\r\n              : (knowledgeAssessment.previousTestedHIVNegative = \"true\");\r\n          } else {\r\n            setRiskAssessment({\r\n              ...riskAssessment,\r\n              ...props.patientObj.riskAssessment,\r\n            });\r\n          }\r\n       \r\n        }\r\n    }, [props.patientObj]);\r\n    const handleItemClick = (page, completedMenu) => {\r\n        props.handleItemClick(page, completedMenu);\r\n     \r\n      };\r\n    const handleInputChangeKnowledgeAssessment = e => { \r\n        //setErrors({...temp, [e.target.name]:\"\"})\r\n        \r\n        setKnowledgeAssessment ({...knowledgeAssessment,  [e.target.name]: e.target.value}); \r\n          \r\n    }\r\n    \r\n    const handleInputChangeRiskAssessment = e => { \r\n        setErrors({...temp, [e.target.name]:\"\"}) \r\n        setRiskAssessment ({...riskAssessment,  [e.target.name]: e.target.value});                  \r\n    }\r\n    // Getting the number count of riskAssessment True\r\n    const actualRiskCountTrue=Object.values(riskAssessment)\r\n    const riskCount=actualRiskCountTrue.filter((x)=> x==='true')\r\n   \r\n    const handleInputChangeRiskAssessmentPartner = e => { \r\n        //setErrors({...temp, [e.target.name]:\"\"}) \r\n        setRiskAssessmentPartner ({...riskAssessmentPartner,  [e.target.name]: e.target.value});                       \r\n    }\r\n    // Getting the number count of sexPartRiskCount True\r\n    const actualSexPartRiskCountTrue=Object.values(riskAssessmentPartner)\r\n    const sexPartRiskCount=actualSexPartRiskCountTrue.filter((x)=> x==='true')\r\n\r\n    const handleInputChangeStiScreening = e => { \r\n        //setErrors({...temp, [e.target.name]:\"\"}) \r\n        setStiScreening ({...stiScreening,  [e.target.name]: e.target.value});            \r\n    }\r\n    // Getting the number count of STI True\r\n    const actualStiTrue=Object.values(stiScreening)\r\n    const stiCount=actualStiTrue.filter((x)=> x==='true')\r\n    \r\n    const [tbCount, settbCount] = useState(0);\r\n    const handleInputChangeTbScreening = e => { \r\n        //setErrors({...temp, [e.target.name]:\"\"}) \r\n        \r\n        if(e.target.value==='true') {\r\n            const newcount = tbCount +1\r\n            if(newcount>=0 && newcount <=5){\r\n                settbCount(newcount)\r\n            }\r\n        }\r\n        if(e.target.value==='false') {\r\n            const newcount = tbCount -1\r\n            //settbCount(newcount)\r\n            if(newcount <=0 ){\r\n                \r\n                settbCount(0)\r\n            }else{\r\n                settbCount(newcount)\r\n            }\r\n        } \r\n        setTbScreening ({...tbScreening,  [e.target.name]: e.target.value});          \r\n    }\r\n     /*****  Validation  */\r\n     /*****  Validation  */\r\n     const validate = () => {\r\n        //HTS FORM VALIDATION\r\n           //temp.previousTestedHIVNegative = knowledgeAssessment.previousTestedHIVNegative ? \"\" : \"This field is required.\"\r\n        //    {knowledgeAssessment.previousTestedHIVNegative==='true' && ( temp.timeLastHIVNegativeTestResult = knowledgeAssessment.timeLastHIVNegativeTestResult ? \"\" : \"This field is required.\")}\r\n        //    temp.clientPregnant = knowledgeAssessment.clientPregnant ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformHivTransRoutes = knowledgeAssessment.clientInformHivTransRoutes ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformRiskkHivTrans = knowledgeAssessment.clientInformRiskkHivTrans ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformPreventingsHivTrans = knowledgeAssessment.clientInformPreventingsHivTrans ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformPossibleTestResult = knowledgeAssessment.clientInformPossibleTestResult ? \"\" : \"This field is required.\"\r\n        //    temp.informConsentHivTest = knowledgeAssessment.informConsentHivTest ? \"\" : \"This field is required.\"  \r\n\r\n        //     temp.currentCough = tbScreening.currentCough ? \"\" : \"This field is required.\"\r\n        //     temp.weightLoss = tbScreening.weightLoss ? \"\" : \"This field is required.\"\r\n        //     temp.lymphadenopathy = tbScreening.lymphadenopathy ? \"\" : \"This field is required.\"\r\n        //     temp.fever = tbScreening.fever ? \"\" : \"This field is required.\"\r\n        //     temp.nightSweats = tbScreening.nightSweats ? \"\" : \"This field is required.\"\r\n\r\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.vaginalDischarge = stiScreening.vaginalDischarge ? \"\" : \"This field is required.\" )\r\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.lowerAbdominalPains = stiScreening.lowerAbdominalPains ? \"\" : \"This field is required.\")\r\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.urethralDischarge = stiScreening.urethralDischarge ? \"\" : \"This field is required.\")\r\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsOfScrotal = stiScreening.complaintsOfScrotal ? \"\" : \"This field is required.\")\r\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsGenitalSore = stiScreening.complaintsGenitalSore ? \"\" : \"This field is required.\")\r\n \r\n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.everHadSexualIntercourse = riskAssessment.everHadSexualIntercourse ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.bloodtransInlastThreeMonths = riskAssessment.bloodtransInlastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithRegularPartnerLastThreeMonths = riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.unprotectedVaginalSex = riskAssessment.unprotectedVaginalSex ? \"\" : \"This field is required.\")\r\n\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedAnalSex = riskAssessment.uprotectedAnalSex ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.sexUnderInfluence = riskAssessment.sexUnderInfluence ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.moreThanOneSexPartnerLastThreeMonths = riskAssessment.moreThanOneSexPartnerLastThreeMonths ? \"\" : \"This field is required.\")\r\n            \r\n            \r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.experiencePain = riskAssessment.experiencePain ? \"\" : \"This field is required.\")\r\n\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.haveSexWithoutCondom = riskAssessment.haveSexWithoutCondom ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.abuseDrug = riskAssessment.abuseDrug ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.bloodTransfusion = riskAssessment.bloodTransfusion ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.consistentWeightFeverNightCough = riskAssessment.consistentWeightFeverNightCough ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.soldPaidVaginalSex = riskAssessment.soldPaidVaginalSex ? \"\" : \"This field is required.\")\r\n\r\n            // temp.sexPartnerHivPositive = tbScreening.sexPartnerHivPositive ? \"\" : \"This field is required.\"\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.newDiagnosedHivlastThreeMonths = tbScreening.newDiagnosedHivlastThreeMonths ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.currentlyArvForPmtct = tbScreening.currentlyArvForPmtct ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && ( temp.knowHivPositiveOnArv = tbScreening.knowHivPositiveOnArv ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.knowHivPositiveAfterLostToFollowUp = tbScreening.knowHivPositiveAfterLostToFollowUp ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.uprotectedAnalSex = tbScreening.uprotectedAnalSex ? \"\" : \"This field is required.\")}\r\n            \r\n            setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        let modality = getCheckModality(\r\n          props.patientObj?.riskStratificationResponseDto?.testingSetting\r\n        );\r\n              let latestForm = getNextForm(\r\n                \"pre_test_counseling\",\r\n                props.patientAge,\r\n                modality,\r\n                \"unknown\"\r\n              );\r\n        if(validate()){\r\n            setSaving(true);\r\n            objValues.htsClientId= clientId\r\n            objValues.knowledgeAssessment= knowledgeAssessment\r\n            objValues.personId= patientID\r\n            objValues.riskAssessment= riskAssessment\r\n            objValues.stiScreening=stiScreening\r\n            objValues.tbScreening=tbScreening\r\n            objValues.sexPartnerRiskAssessment=riskAssessmentPartner\r\n            axios.put(`${baseUrl}hts/${clientId}/pre-test-counseling`,objValues,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n            \r\n            )\r\n            .then(response => {\r\n                setSaving(false);\r\n                props.setPatientObj({...props.patientObj, \r\n                    knowledgeAssessment: response.data.knowledgeAssessment,\r\n                    riskAssessment: response.data.riskAssessment,\r\n                    stiScreening: response.data.stiScreening,\r\n                    tbScreening: response.data.tbScreening,\r\n                    sexPartnerRiskAssessment: response.data.sexPartnerRiskAssessment,\r\n                  }\r\n                  );             \r\n                     //toast.success(\"Risk Assesment successful\");\r\n                handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                }\r\n                else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n            });\r\n        }else{\r\n            toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n                \r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardBody>\r\n               \r\n                <h2>PRE TEST COUNSELING</h2>\r\n                    <form >\r\n                        <div className=\"row\">\r\n\r\n                        <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'rgb(0,181,173)', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Knowledge Assessment</div>\r\n                     \r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Previously tested HIV negative <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"previousTestedHIVNegative\"\r\n                                        id=\"previousTestedHIVNegative\"\r\n                                        value={knowledgeAssessment.previousTestedHIVNegative}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.previousTestedHIVNegative !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.previousTestedHIVNegative}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            {knowledgeAssessment.previousTestedHIVNegative==='true' && (\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Time of last HIV Negative test Result</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"timeLastHIVNegativeTestResult\"\r\n                                        id=\"timeLastHIVNegativeTestResult\"\r\n                                        value={knowledgeAssessment.timeLastHIVNegativeTestResult}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"<1\"> {\"< 1\"} month</option>\r\n                                        <option value=\"1-3 Months\">1-3 Months</option>\r\n                                        <option value=\"4-6 Months\">4-6 Months</option>\r\n                                        <option value=\">6 Months\"> {\">6\"} Months</option>\r\n                                        {\r\n                                            knowledgeAssessment.previousTestedHIVNegative !== \"true\" && <option value=\"Never\"> Never</option>\r\n                                        }\r\n                                        \r\n                                    </select>\r\n                                    {errors.timeLastHIVNegativeTestResult !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.timeLastHIVNegativeTestResult}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            {sex ==='Female' && (\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Client pregnant </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"clientPregnant\"\r\n                                        id=\"clientPregnant\"\r\n                                        value={knowledgeAssessment.clientPregnant}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        disabled={true}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.clientPregnant !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.clientPregnant}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                             )}\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Client informed about HIV transmission routes </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"clientInformHivTransRoutes\"\r\n                                        id=\"clientInformHivTransRoutes\"\r\n                                        value={knowledgeAssessment.clientInformHivTransRoutes}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.clientInformHivTransRoutes !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.clientInformHivTransRoutes}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Client informed about risk factors for HIV transmission </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"clientInformRiskkHivTrans\"\r\n                                        id=\"clientInformRiskkHivTrans\"\r\n                                        value={knowledgeAssessment.clientInformRiskkHivTrans}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.clientInformRiskkHivTrans !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.clientInformRiskkHivTrans}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Client informed on preventing HIV transmission methods </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"clientInformPreventingsHivTrans\"\r\n                                        id=\"clientInformPreventingsHivTrans\"\r\n                                        value={knowledgeAssessment.clientInformPreventingsHivTrans}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.clientInformPreventingsHivTrans !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.clientInformPreventingsHivTrans}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Client informed about possible test results </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"clientInformPossibleTestResult\"\r\n                                        id=\"clientInformPossibleTestResult\"\r\n                                        value={knowledgeAssessment.clientInformPossibleTestResult}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.clientInformPossibleTestResult !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.clientInformPossibleTestResult}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Informed consent for HIV testing given </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"informConsentHivTest\"\r\n                                        id=\"informConsentHivTest\"\r\n                                        value={knowledgeAssessment.informConsentHivTest}\r\n                                        onChange={handleInputChangeKnowledgeAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.informConsentHivTest !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.informConsentHivTest}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <hr/>\r\n                            <br/>\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#000', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Clinical TB screening</div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Current cough </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"currentCough\"\r\n                                        id=\"currentCough\"\r\n                                        value={tbScreening.currentCough}\r\n                                        onChange={handleInputChangeTbScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.currentCough !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.currentCough}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Weight loss </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"weightLoss\"\r\n                                        id=\"weightLoss\"\r\n                                        value={tbScreening.weightLoss}\r\n                                        onChange={handleInputChangeTbScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.weightLoss !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.weightLoss}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Lymphadenopathy (swelling of the lymph nodes) </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"lymphadenopathy\"\r\n                                        id=\"lymphadenopathy\"\r\n                                        value={tbScreening.lymphadenopathy}\r\n                                        onChange={handleInputChangeTbScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.lymphadenopathy !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.lymphadenopathy}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Fever </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"fever\"\r\n                                        id=\"fever\"\r\n                                        value={tbScreening.fever}\r\n                                        onChange={handleInputChangeTbScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.fever !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.fever}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div> \r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Night sweats</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"nightSweats\"\r\n                                        id=\"nightSweats\"\r\n                                        value={tbScreening.nightSweats}\r\n                                        onChange={handleInputChangeTbScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.nightSweats !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.nightSweats}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div> \r\n                            <Message warning>\r\n                                <h4>TB Screening score (calculate the sum of the TB assessment) If score {\">= 1\"}, test for Xper MTB RIF or refer to TB service </h4>\r\n                                <b>Score : {tbCount}</b>\r\n                            </Message>\r\n                            <hr/>\r\n                            <br/>\r\n                           {props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && ( <>\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Ever had sexual intercourse <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"everHadSexualIntercourse\"\r\n                                        id=\"everHadSexualIntercourse\"\r\n                                        value={riskAssessment.everHadSexualIntercourse}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.everHadSexualIntercourse !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.everHadSexualIntercourse}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Blood transfusion in last 3 months <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"bloodtransInlastThreeMonths\"\r\n                                        id=\"bloodtransInlastThreeMonths\"\r\n                                        value={riskAssessment.bloodtransInlastThreeMonths}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.bloodtransInlastThreeMonths !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.bloodtransInlastThreeMonths}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with casual partner in last 3 months <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"uprotectedSexWithCasualLastThreeMonths\"\r\n                                        id=\"uprotectedSexWithCasualLastThreeMonths\"\r\n                                        value={riskAssessment.uprotectedSexWithCasualLastThreeMonths}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.uprotectedSexWithCasualLastThreeMonths !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uprotectedSexWithCasualLastThreeMonths}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with regular partner in the last 3months <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\r\n                                        id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\r\n                                        value={riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uprotectedSexWithRegularPartnerLastThreeMonths}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected vaginal sex <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedVaginalSex\"\r\n                                        id=\"unprotectedVaginalSex\"\r\n                                        value={riskAssessment.unprotectedVaginalSex}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.unprotectedVaginalSex !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.unprotectedVaginalSex}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected Anal sex <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"uprotectedAnalSex\"\r\n                                        id=\"uprotectedAnalSex\"\r\n                                        value={riskAssessment.uprotectedAnalSex}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.uprotectedAnalSex !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uprotectedAnalSex}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div> \r\n                            )}\r\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>STI in last 3 months <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"stiLastThreeMonths\"\r\n                                        id=\"stiLastThreeMonths\"\r\n                                        value={riskAssessment.stiLastThreeMonths}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.stiLastThreeMonths !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.stiLastThreeMonths}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\r\n                                <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Sex under the influence of drugs or alcohol <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sexUnderInfluence\"\r\n                                        id=\"sexUnderInfluence\"\r\n                                        value={riskAssessment.sexUnderInfluence}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.sexUnderInfluence !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sexUnderInfluence}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            )}\r\n                            {riskAssessment.everHadSexualIntercourse!==\"\" && riskAssessment.everHadSexualIntercourse==='true' && (\r\n                                 <div className=\"form-group  col-md-4\">\r\n                                 <FormGroup>\r\n                                     <Label>More than 1 sex partner during last 3 months <span style={{ color:\"red\"}}> *</span></Label>\r\n                                     <select\r\n                                         className=\"form-control\"\r\n                                         name=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                                         id=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                                         value={riskAssessment.moreThanOneSexPartnerLastThreeMonths}\r\n                                         onChange={handleInputChangeRiskAssessment}\r\n                                         style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                     >\r\n                                         <option value={\"\"}></option>\r\n                                         <option value=\"true\">Yes</option>\r\n                                         <option value=\"false\">No</option>\r\n                                         \r\n                                     </select>\r\n                                     {errors.moreThanOneSexPartnerLastThreeMonths !==\"\" ? (\r\n                                     <span className={classes.error}>{errors.moreThanOneSexPartnerLastThreeMonths}</span>\r\n                                     ) : \"\" }\r\n                                 </FormGroup>\r\n                             </div>\r\n                            )}\r\n                            <Message warning>\r\n                                <h4>  Risk assessment score (sum of all 7 answers)</h4>\r\n                                <b>Score : {riskCount.length}</b>\r\n                            </Message>\r\n                            <hr/>\r\n                            <br/>\r\n                            </>)}\r\n                            {props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && ( <>\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >HIV Risk Assessment  (Last 3 months)</div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Have you/your partner experienced lower abdominal pain, smelly discharge, blisters and wounds around you/partner vagina, penis anus or mouth? <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"experiencePain\"\r\n                                        id=\"experiencePain\"\r\n                                        value={riskAssessment.experiencePain}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.experiencePain !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.experiencePain}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Have you/partner had sex without a condom with someone of unknown HIV status, or you/partner raped by person with unknown HIV status? <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveSexWithoutCondom\"\r\n                                        id=\"haveSexWithoutCondom\"\r\n                                        value={riskAssessment.haveSexWithoutCondom}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.haveSexWithoutCondom !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.haveSexWithoutCondom}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Have you had a condom burst with your partner during sexual intercourse? <span style={{ color:\"red\"}}> *</span> </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"haveCondomBurst\"\r\n                                        id=\"haveCondomBurst\"\r\n                                        value={riskAssessment.haveCondomBurst}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.haveCondomBurst !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.haveCondomBurst}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Do you/partner share needles/syringes, other sharp objects or used abuse drug substances of any kind? <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"abuseDrug\"\r\n                                        id=\"abuseDrug\"\r\n                                        value={riskAssessment.abuseDrug}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.abuseDrug !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.abuseDrug}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Have you/partner had any blood or blood product transfusion? <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"bloodTransfusion\"\r\n                                        id=\"bloodTransfusion\"\r\n                                        value={riskAssessment.bloodTransfusion}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.bloodTransfusion !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.bloodTransfusion}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Have you/partner experienced coughing, weight loss, fever, night sweats consistently? <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"consistentWeightFeverNightCough\"\r\n                                        id=\"consistentWeightFeverNightCough\"\r\n                                        value={riskAssessment.consistentWeightFeverNightCough}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.consistentWeightFeverNightCough !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.consistentWeightFeverNightCough}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>            \r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Have you/partner paid or sold vaginal, anal or oral sex? <span style={{ color:\"red\"}}> *</span></Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"soldPaidVaginalSex\"\r\n                                        id=\"soldPaidVaginalSex\"\r\n                                        value={riskAssessment.soldPaidVaginalSex}\r\n                                        onChange={handleInputChangeRiskAssessment}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.soldPaidVaginalSex !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.soldPaidVaginalSex}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <Message warning>\r\n                                <h4>  Risk assessment score (sum of all 7 answers)</h4>\r\n                                <b>Score :{riskCount.length}</b>\r\n                            </Message>\r\n                            <hr/>\r\n                            <br/>\r\n                            </>)}\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#992E62', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Sex Partner Risk Assessment (Last 3 months)</div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Have you had sex with a partner who is HIV positive? </Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sexPartnerHivPositive\"\r\n                                        id=\"sexPartnerHivPositive\"\r\n                                        value={riskAssessmentPartner.sexPartnerHivPositive}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.sexPartnerHivPositive !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.sexPartnerHivPositive}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            {riskAssessmentPartner.sexPartnerHivPositive==='true' && (<>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Is sex partner newly diagnosed with HIV and started treatment less than 3-6 months ago?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"newDiagnosedHivlastThreeMonths\"\r\n                                        id=\"newDiagnosedHivlastThreeMonths\"\r\n                                        value={riskAssessmentPartner.newDiagnosedHivlastThreeMonths}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.newDiagnosedHivlastThreeMonths !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.newDiagnosedHivlastThreeMonths}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Is sex partner pregnant and currently receiving ARV for PMTCT?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"currentlyArvForPmtct\"\r\n                                        id=\"currentlyArvForPmtct\"\r\n                                        value={riskAssessmentPartner.currentlyArvForPmtct}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.currentlyArvForPmtct !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.currentlyArvForPmtct}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Known HIV positive partner on ARV with an unsurpressed VL</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"knowHivPositiveOnArv\"\r\n                                        id=\"knowHivPositiveOnArv\"\r\n                                        value={riskAssessmentPartner.knowHivPositiveOnArv}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.knowHivPositiveOnArv !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.knowHivPositiveOnArv}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Known HIV positive recently returned to treatment after being lost to follow up</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"knowHivPositiveAfterLostToFollowUp\"\r\n                                        id=\"knowHivPositiveAfterLostToFollowUp\"\r\n                                        value={riskAssessmentPartner.knowHivPositiveAfterLostToFollowUp}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.knowHivPositiveAfterLostToFollowUp !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.knowHivPositiveAfterLostToFollowUp}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected Anal sex</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"uprotectedAnalSex\"\r\n                                        id=\"uprotectedAnalSex\"\r\n                                        value={riskAssessmentPartner.uprotectedAnalSex}\r\n                                        onChange={handleInputChangeRiskAssessmentPartner}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.uprotectedAnalSex !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.uprotectedAnalSex}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            </>)}\r\n                            <Message warning>\r\n                                <h4>Sex Partner Risk Assessment score (sum of all 6 answers)</h4>\r\n                                <b>Score :{sexPartRiskCount.length}</b>\r\n                            </Message>        \r\n                            \r\n                            <hr/>\r\n                            <br/>\r\n                            <div className=\"form-group  col-md-12 text-center pt-2 mb-4\" style={{backgroundColor:'#014D88', width:'125%', height:'35px', color:'#fff', fontWeight:'bold'}} >Syndromic STI Screening</div>\r\n                            {props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (\r\n                            <>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Complaints of vaginal discharge or burning when urinating?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"vaginalDischarge\"\r\n                                        id=\"vaginalDischarge\"\r\n                                        value={stiScreening.vaginalDischarge}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.vaginalDischarge !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.vaginalDischarge}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            \r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Complaints of lower abdominal pains with or without vaginal discharge?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"lowerAbdominalPains\"\r\n                                        id=\"lowerAbdominalPains\"\r\n                                        value={stiScreening.lowerAbdominalPains}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.lowerAbdominalPains !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.lowerAbdominalPains}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            </>)}\r\n                            {props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (\r\n                            <>\r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Complaints of urethral discharge or burning when urinating?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"urethralDischarge\"\r\n                                        id=\"urethralDischarge\"\r\n                                        value={stiScreening.urethralDischarge}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.urethralDischarge !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.urethralDischarge}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div> \r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Complaints of scrotal swelling and pain</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"complaintsOfScrotal\"\r\n                                        id=\"complaintsOfScrotal\"\r\n                                        value={stiScreening.complaintsOfScrotal}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.complaintsOfScrotal !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.complaintsOfScrotal}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div> \r\n                            <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Complaints of genital sore(s) or swollen inguinal lymph nodes with or without pains?</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"complaintsGenitalSore\"\r\n                                        id=\"complaintsGenitalSore\"\r\n                                        value={stiScreening.complaintsGenitalSore}\r\n                                        onChange={handleInputChangeStiScreening}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    {errors.complaintsGenitalSore !==\"\" ? (\r\n                                    <span className={classes.error}>{errors.complaintsGenitalSore}</span>\r\n                                    ) : \"\" }\r\n                                </FormGroup>\r\n                            </div>\r\n                            </>)} \r\n                            <Message warning>\r\n                                <h4>Calculate the sum of the STI screening. If {\">= \"}1, should be referred for STI test </h4>\r\n                                <b>Score :{stiCount.length}</b>\r\n                            </Message>\r\n                           \r\n                            {saving ? <Spinner /> : \"\"}\r\n                            <br />\r\n                            <div className=\"row\">\r\n                            <div className=\"form-group mb-3 col-md-12\">\r\n                            {/* <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('basic','basic')}/> */}\r\n                            <Button content='Save & Continue' icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit} disabled={saving}/>\r\n                            </div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </CardBody>\r\n            </Card>                                 \r\n        </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\HivTestResult.js",["1144","1145","1146","1147","1148","1149"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\ClientReferral\\ReferralUnit.js",["1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177"],"import { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as moment from \"moment\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport Select from \"react-select\";\r\n// import { getAcount } from \"../../../../utility\";\r\nimport Cookies from \"js-cookie\";\r\nimport {\r\n  getAllGenders,\r\n  alphabetOnly,\r\n  getAllProvinces,\r\n  getAllCountry,\r\n  getAllStateByCountryId,\r\n} from \"../../../../../utility\";\r\n// import {calculate_age} from \"../../utils\";\r\nimport { calculate_age } from \"../../.././utils\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { CardBody, FormGroup, Input, Label } from \"reactstrap\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst ReferralUnit = (props) => {\r\n  const patientObj = props.patientObj;\r\n  const classes = useStyles();\r\n  const [errors, setErrors] = useState({});\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  let temp = { ...errors };\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [setting, setSetting] = useState([]);\r\n  const [hospitalNumStatus, setHospitalNumStatus] = useState(false);\r\n  const [countries, setCountries] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n\r\n  const [states, setStates] = useState([]);\r\n  const [genders, setGenders] = useState([]);\r\n  const [hivStatus, setHivStatus] = useState([]);\r\n  const [serviceNeeded, setServiceNeeded] = useState([]);\r\n\r\n  const [facilityName, setFacilityName] = useState(Cookies.get(\"facilityName\"));\r\n  const [allFacilities, setAllFacilities] = useState([]);\r\n\r\n  const [statesOfTheReceivingFacility, setStateOfTheReceivingFacility] =\r\n    useState([]);\r\n  const [lgasOfTheReceivingFacility, setLgasOfTheReceivingFacility] = useState(\r\n    []\r\n  );\r\n  const [receivingFacilities, setReceivingFacilities] = useState([]);\r\n  const [receivingFacility, setReceivingFacility] = useState([]);\r\n  const [selectedReceivingState, setSelectedReceivingState] = useState({});\r\n  const [selectedReceivingFacility, setSelectedReceivingFacility] = useState(\r\n    {}\r\n  );\r\n  const [selectedReceivingLga, setSelectedReceivingLga] = useState({});\r\n  const history = useHistory();\r\n\r\n  const [payload, setPayload] = useState({\r\n    dateVisit: \"\",\r\n    firstName: props?.patientObj?.personResponseDto?.firstName,\r\n    middleName: props?.patientObj?.personResponseDto?.otherName,\r\n    lastName: props?.patientObj?.personResponseDto?.surname,\r\n    hospitalNumber:\r\n      props.patientObj?.personResponseDto?.identifier?.identifier[0]?.value,\r\n    countryId: \"1\",\r\n    stateId: props?.patientObj?.personResponseDto?.address?.address[0]?.stateId,\r\n    province: Number(\r\n      props?.patientObj?.personResponseDto?.address?.address[0]?.district\r\n    ),\r\n    address: props?.patientObj?.personResponseDto?.address?.address[0]?.city,\r\n    landmark: \"\",\r\n    phoneNumber:\r\n      props?.patientObj?.personResponseDto?.contactPoint?.contactPoint[0]\r\n        ?.value,\r\n    sexId: props?.patientObj?.personResponseDto?.gender?.id,\r\n    dob: props?.patientObj.personResponseDto?.dateOfBirth,\r\n    age: \"\",\r\n    dateOfBirth: props?.patientObj.personResponseDto?.dateOfBirth,\r\n    hivStatus: props?.patientObj?.hivTestResult2\r\n      ? props?.patientObj?.hivTestResult2\r\n      : props?.patientObj?.hivTestResult\r\n      ? props?.patientObj?.hivTestResult\r\n      : \"\",\r\n    referredFromFacility: \"\",\r\n    nameOfPersonReferringClient: \"\",\r\n    nameOfReferringFacility: Cookies.get(\"facilityName\"),\r\n    addressOfReferringFacility: \"\",\r\n    phoneNoOfReferringFacility: \"\",\r\n    referredTo: \"\",\r\n    nameOfContactPerson: \"\",\r\n    nameOfReceivingFacility: \"\",\r\n    addressOfReceivingFacility: \"\",\r\n    phoneNoOfReceivingFacility: \"\",\r\n    isDateOfBirthEstimated: false,\r\n    serviceNeeded: \"\",\r\n    comments: \"\",\r\n    receivingFacilityStateName: \"\",\r\n    receivingFacilityLgaNam: \"\",\r\n    htsClientId: props && props.patientObj ? props.patientObj?.id : \"\",\r\n    htsClientUuid: props && props.patientObj ? props.patientObj?.uuid : \"\",\r\n  });\r\n\r\n\r\n  const getProvincesWithId = (id) => {\r\n    getAllProvinces(id)\r\n      .then((res) => {\r\n        setProvinces(res);\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n \r\n  const loadGenders = useCallback(async () => {\r\n    getAllGenders()\r\n      .then((response) => {\r\n        setGenders(response);\r\n      })\r\n      .catch(() => {});\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadGenders();\r\n    getCountry();\r\n    getStateByCountryId();\r\n    if (props?.patientObj?.personResponseDto?.address?.address[0]?.stateId) {\r\n      getProvincesWithId(\r\n        props?.patientObj?.personResponseDto?.address?.address[0]?.stateId\r\n      );\r\n    }\r\n  }, []);\r\n \r\n  //Get list of State\r\n  const getStateByCountryId = () => {\r\n    getAllStateByCountryId()\r\n      .then((res) => {\r\n        setStates(res);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    if (e) {\r\n      setErrors({ ...errors, phoneNumber: \"\" });\r\n    }\r\n    const limit = 10;\r\n\r\n    if (inputName === \"phoneNumber\") {\r\n      setPayload({ ...payload, phoneNumber: e.slice(0, limit) });\r\n    } else if (inputName === \"phoneNoOfReferringFacility\") {\r\n      setPayload({\r\n        ...payload,\r\n        phoneNoOfReferringFacility: e.slice(0, limit),\r\n      });\r\n    } else if (inputName === \"phoneNoOfReceivingFacility\") {\r\n      setPayload({ ...payload, phoneNoOfReceivingFacility: e.slice(0, limit) });\r\n    }\r\n  };\r\n\r\n  // handle Facility Name to slect drop down\r\n  const handleInputChangeObject = (e) => {\r\n   \r\n    setPayload({\r\n      ...payload,\r\n      nameOfReceivingFacility: e.name,\r\n      addressOfReceivingFacility: e.parentParentOrganisationUnitName,\r\n      // lgaTransferTo: e.parentOrganisationUnitName,\r\n    });\r\n    setErrors({ ...errors, nameOfReceivingFacility: \"\" });\r\n    // setSelectedState(e.parentParentOrganisationUnitName);\r\n    // setSelectedLga(e.parentOrganisationUnitName);\r\n  };\r\n\r\n  //fetch province\r\n  const getProvinces = (e) => {\r\n    const stateId = e.target.value;\r\n    if (e.target.value) {\r\n      setErrors({ ...errors, stateId: \"\" });\r\n    }\r\n    setPayload({ ...payload, stateId: e.target.value });\r\n    getAllProvinces(stateId)\r\n      .then((res) => {\r\n        setProvinces(res);\r\n      })\r\n      .catch((e) => {});\r\n  };\r\n  const getCountry = () => {\r\n    getAllCountry()\r\n      .then((res) => {\r\n        setCountries(res);\r\n      })\r\n      .catch((e) => {\r\n     \r\n      });\r\n\r\n    \r\n  };\r\n\r\n  const checkNumberLimit = (e) => {\r\n    const limit = 11;\r\n    const acceptedNumber = e.slice(0, limit);\r\n    return acceptedNumber;\r\n  };\r\n  const handleInputChangePhoneNumber = (e, inputName) => {\r\n    const limit = 11;\r\n    const NumberValue = checkNumberLimit(e.target.value.replace(/\\D/g, \"\"));\r\n    setPayload({ ...payload, [inputName]: NumberValue });\r\n  };\r\n\r\n  // ########################################################################\r\n  const loadStates = () => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/1`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setStateOfTheReceivingFacility(response.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n       \r\n      });\r\n  };\r\n\r\n  const loadLGA = (id) => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setLgasOfTheReceivingFacility(response.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        \r\n      });\r\n  };\r\n\r\n  const loadFacilities = (id) => {\r\n    axios\r\n      .get(`${baseUrl}organisation-units/parent-organisation-units/${id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setReceivingFacilities(response.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n      \r\n      });\r\n  };\r\n\r\n  const SERVICE_NEEDED = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SERVICE_PROVIDED`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        if (response.data) {\r\n          setServiceNeeded(response.data);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        \r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadStates();\r\n    SERVICE_NEEDED();\r\n  }, []);\r\n\r\n  // ###########################################################################\r\n  //Get list of HIV STATUS ENROLLMENT\r\n\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n\r\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"lastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"middleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (\r\n      e.target.name === \"nameOfContactPerson\" &&\r\n      e.target.value !== \"\"\r\n    ) {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (\r\n      e.target.name === \"nameOfPersonReferringClient\" &&\r\n      e.target.value !== \"\"\r\n    ) {\r\n      const name = alphabetOnly(e.target.value);\r\n      setPayload({ ...payload, [e.target.name]: name });\r\n    } else if (e.target.name === \"hospitalNumber\" && e.target.value !== \"\") {\r\n      async function getHosiptalNumber() {\r\n        const hosiptalNumber = e.target.value;\r\n        const response = await axios.post(\r\n          `${baseUrl}patient/exist/hospital-number`,\r\n          hosiptalNumber,\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n              \"Content-Type\": \"text/plain\",\r\n            },\r\n          }\r\n        );\r\n        if (response.data !== true) {\r\n          setHospitalNumStatus(false);\r\n          errors.hospitalNumber = \"\";\r\n        } else {\r\n          errors.hospitalNumber = \"\";\r\n          toast.error(\"Error! Hosiptal Number already exist\");\r\n          setHospitalNumStatus(true);\r\n        }\r\n      }\r\n\r\n      getHosiptalNumber();\r\n    } else {\r\n      setPayload({ ...payload, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      if (age_now <= 0 && m < 0 && today.getDate() < birthDate.getDate()) {\r\n        age_now--;\r\n      }\r\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      //   age_now--;\r\n      // }\r\n      payload.age = age_now;\r\n\r\n      //setpayload({...payload, age: age_now});\r\n    } else {\r\n      setPayload({ ...payload, age: \"\" });\r\n    }\r\n    setPayload({ ...payload, [e.target.name]: e.target.value });\r\n\r\n    setPayload({ ...payload, dob: e.target.value });\r\n    if (payload.age !== \"\" && payload.age <= 15) {\r\n      // props.setHideOtherMenu(true);\r\n    } else if (payload.age !== \"\" && payload.age > 15) {\r\n      // props.setHideOtherMenu(true);\r\n    } else {\r\n      // props.setHideOtherMenu(true);\r\n    }\r\n\r\n    if (payload.age !== \"\" && payload.age >= 85) {\r\n      toggle();\r\n    }\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      payload.isDateOfBirthEstimated = false;\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      payload.isDateOfBirthEstimated = true;\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      if (e.target.value !== \"\" && e.target.value >= 85) {\r\n        toggle();\r\n      }\r\n      if (e.target.value !== \"\" && e.target.value <= 15) {\r\n        props.setHideOtherMenu(false);\r\n      } else if (e.target.value !== \"\" && e.target.value > 15) {\r\n        props.setHideOtherMenu(true);\r\n      } else {\r\n        props.setHideOtherMenu(true);\r\n      }\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      setPayload({ ...payload, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n      payload.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setPayload({ ...payload, age: e.target.value });\r\n  };\r\n\r\n  //End of Date of Birth and Age handling\r\n  /*****  Validation  */\r\n\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n\r\n    temp.dateVisit = payload.dateVisit ? \"\" : \"This field is required.\";\r\n    temp.firstName = payload.firstName ? \"\" : \"This field is required.\";\r\n    temp.lastName = payload.lastName ? \"\" : \"This field is required.\";\r\n    temp.stateId = payload.stateId ? \"\" : \"This field is required.\";\r\n    temp.province = payload.province ? \"\" : \"This field is required.\";\r\n    // temp.address = payload.address ? \"\" : \"This field is required.\";\r\n    temp.phoneNumber = payload.phoneNumber ? \"\" : \"This field is required.\";\r\n    temp.sexId = payload.sexId ? \"\" : \"This field is required.\";\r\n    temp.dob = payload.dob ? \"\" : \"This field is required.\";\r\n    // temp.age = payload.age ? \"\" : \"This field is required.\";\r\n    temp.hivStatus = payload.hivStatus ? \"\" : \"This field is required.\";\r\n    // temp.stateTransferTo = payload.receivingStateFacility? \"\" : \"This field is required.\";\r\n    temp.receivingFacilityLgaName = payload.receivingFacilityLgaName\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.receivingFacilityStateName = payload.receivingFacilityStateName\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    // temp.referredFromFacility = payload.referredFromFacility\r\n    //     ? \"\"\r\n    //     : \"This field is required.\";\r\n    temp.nameOfPersonReferringClient = payload.nameOfPersonReferringClient\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n\r\n    temp.nameOfReferringFacility = payload.nameOfReferringFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.addressOfReferringFacility = payload.addressOfReferringFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.phoneNoOfReferringFacility = payload.phoneNoOfReferringFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.nameOfContactPerson = payload.nameOfContactPerson\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.nameOfReceivingFacility = payload.nameOfReceivingFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.addressOfReceivingFacility = payload.addressOfReceivingFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.phoneNoOfReceivingFacility = payload.phoneNoOfReceivingFacility\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    temp.serviceNeeded = payload.serviceNeeded ? \"\" : \"This field is required.\";\r\n\r\n    // temp.referredTo = payload.referredTo ? \"\" : \"This field is required.\";\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      try {\r\n        setSaving(true);\r\n        await axios.post(`${baseUrl}hts-client-referral`, payload, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        });\r\n        setSaving(false);\r\n        toast.success(\"Record saved successfully\", {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        // props.handleItemClick(\"refferal-history\");\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        setSaving(false);\r\n        const errorMessage =\r\n          error.response?.data?.apierror?.message ||\r\n          \"Something went wrong, please try again\";\r\n        toast.error(errorMessage, { position: toast.POSITION.BOTTOM_CENTER });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>Client Referral Form </h2>\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"#992E62\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Referral Form For Referring Unit\r\n              </div>\r\n            \r\n              <p style={{ color: \"black\", marginBottom: \"20px\" }}>\r\n                <i>\r\n                  Note: This form is to be filed by the organization making the\r\n                  referal (Referring unit or organization)\r\n                </i>\r\n              </p>\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"\">\r\n                      Date <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                      name=\"dateVisit\"\r\n                      id=\"dateVisit\"\r\n                      value={payload.dateVisit}\r\n                      onChange={handleInputChange}\r\n                      min=\"1929-12-31\"\r\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                      // disabled\r\n                    />\r\n                    {errors.dateVisit !== \"\" ? (\r\n                      <span className={classes.error}>{errors.dateVisit}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      First Name <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"firstName\"\r\n                      id=\"firstName\"\r\n                      value={payload.firstName}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                    />\r\n                    {errors.firstName !== \"\" ? (\r\n                      <span className={classes.error}>{errors.firstName}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Middle Name</Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"middleName\"\r\n                      id=\"middleName\"\r\n                      value={payload.middleName}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Last Name <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"lastName\"\r\n                      id=\"lastName\"\r\n                      value={payload.lastName}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                    />\r\n                    {errors.lastName !== \"\" ? (\r\n                      <span className={classes.error}>{errors.lastName}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"patientId\">\r\n                      Hospital Number <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                    </Label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"hospitalNumber\"\r\n                      id=\"hospitalNumber\"\r\n                      value={payload.hospitalNumber}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                    />\r\n                    {errors.hospitalNumber !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.hospitalNumber}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {hospitalNumStatus === true ? (\r\n                      <span className={classes.error}>\r\n                        {\"Hospital number already exist\"}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    {/* {hospitalNumStatus2===true ? (\r\n                                                        <span className={classes.success}>{\"Hospital number is OK.\"}</span>\r\n                                                    ) :\"\"} */}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Country <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"countryId\"\r\n                      id=\"countryId\"\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      value={payload.countryId}\r\n                      disabled\r\n                      //onChange={getStates}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {countries.map((value, index) => (\r\n                        <option key={index} value={value.id}>\r\n                          {value.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      State <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"stateId\"\r\n                      id=\"stateId\"\r\n                      value={payload.stateId}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      onChange={getProvinces}\r\n                      disabled\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {states.map((value, index) => (\r\n                        <option key={index} value={value.id}>\r\n                          {value.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.stateId !== \"\" ? (\r\n                      <span className={classes.error}>{errors.stateId}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Province/District/LGA{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"province\"\r\n                      id=\"province\"\r\n                      value={payload.province}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">Select</option>\r\n                      {provinces.map((value, index) => (\r\n                        <option key={index} value={value.id}>\r\n                          {value.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.province !== \"\" ? (\r\n                      <span className={classes.error}>{errors.province}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Street Address <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"address\"\r\n                      id=\"address\"\r\n                      value={payload.address}\r\n                      disabled\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                    {errors.address !== \"\" ? (\r\n                      <span className={classes.error}>{errors.address}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Landmark</Label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"landmark\"\r\n                      id=\"landmark\"\r\n                      value={payload.landmark}\r\n                      disabled\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                {/*          <div className=\"form-group  col-md-4\">*/}\r\n                {/*              <FormGroup>*/}\r\n                {/*                  <Label>*/}\r\n                {/*                      Phone Number <span style={{color: \"red\"}}> *</span>*/}\r\n                {/*                  </Label>*/}\r\n                {/*                  <PhoneInput*/}\r\n                {/*                      disabled={true}*/}\r\n                {/*                      containerStyle={{*/}\r\n                {/*                          width: \"100%\",*/}\r\n                {/*                          border: \"1px solid #014D88\",*/}\r\n                {/*                      }}*/}\r\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\r\n                {/*                      country={\"ng\"}*/}\r\n                {/*                      placeholder=\"(234)7099999999\"*/}\r\n                {/*                      maxLength={5}*/}\r\n                {/*                      name=\"phoneNumber\"*/}\r\n                {/*                      id=\"phoneNumber\"*/}\r\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\r\n                {/*                      value={payload.phoneNumber}*/}\r\n                {/*                      onChange={(e) => {*/}\r\n                {/*                          checkPhoneNumberBasic(e, \"phoneNumber\");*/}\r\n                {/*                      }}*/}\r\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\r\n                {/*                  />*/}\r\n\r\n                {/*                  {errors.phoneNumber !== \"\" ? (*/}\r\n                {/*                      <span className={classes.error}>*/}\r\n                {/*  {errors.phoneNumber}*/}\r\n                {/*</span>*/}\r\n                {/*                  ) : (*/}\r\n                {/*                      \"\"*/}\r\n                {/*                  )}*/}\r\n                {/*              </FormGroup>*/}\r\n                {/*          </div>*/}\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Phone Number <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"phoneNumber\"\r\n                      id=\"phoneNumber\"\r\n                      onChange={(e) => {\r\n                        handleInputChangePhoneNumber(e, \"phoneNumber\");\r\n                      }}\r\n                      value={payload.phoneNumber}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                      // required\r\n                    />\r\n                    {errors.phoneNumber !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.phoneNumber}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Sex <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"sexId\"\r\n                      id=\"sexId\"\r\n                      onChange={handleInputChange}\r\n                      value={payload.sexId}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {genders &&\r\n                        genders.map((gender, index) => (\r\n                          <option key={gender.id} value={gender.id}>\r\n                            {gender.display}\r\n                          </option>\r\n                        ))}\r\n                    </select>\r\n                    {errors.sexId !== \"\" ? (\r\n                      <span className={classes.error}>{errors.sexId}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Date Of Birth<span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                      name=\"dob\"\r\n                      id=\"dob\"\r\n                      min=\"1929-12-31\"\r\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      value={payload.dob}\r\n                      onChange={handleDobChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                    />\r\n                    {errors.dob !== \"\" ? (\r\n                      <span className={classes.error}>{errors.dob}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Age <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      type=\"number\"\r\n                      name=\"age\"\r\n                      id=\"age\"\r\n                      disabled={ageDisabled}\r\n                      onChange={payload.age}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      value={calculate_age(\r\n                        props?.patientObj.personResponseDto?.dateOfBirth\r\n                          ? props?.patientObj?.personResponseDto?.dateOfBirth\r\n                          : props?.patientObj?.personResponseDto?.dateOfBirth\r\n                      )}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      HIV Status<span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"hivStatus\"\r\n                      id=\"hivStatus\"\r\n                      value={payload.hivStatus}\r\n                      disabled={ageDisabled}\r\n                      onChange={handleAgeChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                    {/*<select*/}\r\n                    {/*  className=\"form-control\"*/}\r\n                    {/*  name=\"hivStatus\"*/}\r\n                    {/*  id=\"hivStatus\"*/}\r\n                    {/*  onChange={handleInputChange}*/}\r\n                    {/*  value={payload.hivStatus}*/}\r\n                    {/*  style={{*/}\r\n                    {/*    border: \"1px solid #014D88\",*/}\r\n                    {/*    borderRadius: \"0.2rem\",*/}\r\n                    {/*  }}*/}\r\n                    {/*>*/}\r\n                    {/*<option value={\"\"}>Select</option>*/}\r\n                    {/*{hivStatus.map((gender, index) => (*/}\r\n                    {/*  <option key={gender.id} value={gender.id}>*/}\r\n                    {/*    {gender.display}*/}\r\n                    {/*  </option>*/}\r\n                    {/*))}*/}\r\n                    {/*</select>*/}\r\n                    {errors.hivStatus !== \"\" ? (\r\n                      <span className={classes.error}>{errors.hivStatus}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Referred from (Department):\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      name=\"referredFromFacility\"\r\n                      id=\"referredFromFacility\"\r\n                      value={payload.referredFromFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n\r\n                    {errors.referredFromFacility !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.referredFromFacility}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Name of Person Referring Client\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"nameOfPersonReferringClient\"\r\n                      id=\"nameOfPersonReferringClient\"\r\n                      value={payload.nameOfPersonReferringClient}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                    {errors.nameOfPersonReferringClient !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.nameOfPersonReferringClient}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      <span style={{ color: \"red\" }}> *</span>Name of Referring\r\n                      Facility\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"nameOfReferringFacility\"\r\n                      id=\"nameOfReferringFacility\"\r\n                      value={payload.nameOfReferringFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled\r\n                    />\r\n                    {errors.nameOfReferringFacility !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.nameOfReferringFacility}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Address of Referring Facility\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"addressOfReferringFacility\"\r\n                      id=\"addressOfReferringFacility\"\r\n                      value={payload.addressOfReferringFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      // disabled\r\n                    />\r\n                    {errors.addressOfReferringFacility !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.addressOfReferringFacility}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {/*          <div className=\"form-group mb-3 col-md-4\">*/}\r\n                {/*              <FormGroup>*/}\r\n                {/*                  <Label for=\"firstName\">*/}\r\n                {/*                      Phone Number of Referring Facility*/}\r\n                {/*                      /!* <span style={{ color: \"red\" }}> *</span> *!/*/}\r\n                {/*                  </Label>*/}\r\n                {/*                  <PhoneInput*/}\r\n                {/*                      containerStyle={{*/}\r\n                {/*                          width: \"100%\",*/}\r\n                {/*                          border: \"1px solid #014D88\",*/}\r\n                {/*                      }}*/}\r\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\r\n                {/*                      country={\"ng\"}*/}\r\n                {/*                      placeholder=\"(234)7099999999\"*/}\r\n                {/*                      maxLength={5}*/}\r\n                {/*                      name=\"phoneNoOfReferringFacility\"*/}\r\n                {/*                      id=\"phoneNoOfReferringFacility\"*/}\r\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\r\n                {/*                      value={payload.phoneNoOfReferringFacility}*/}\r\n                {/*                      onChange={(e) => {*/}\r\n                {/*                          checkPhoneNumberBasic(e, \"phoneNoOfReferringFacility\");*/}\r\n                {/*                      }}*/}\r\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\r\n                {/*                  />*/}\r\n\r\n                {/*                  {errors.phoneNoOfReferringFacility !== \"\" ? (*/}\r\n                {/*                      <span className={classes.error}>*/}\r\n                {/*  {errors.phoneNoOfReferringFacility}*/}\r\n                {/*</span>*/}\r\n                {/*                  ) : (*/}\r\n                {/*                      \"\"*/}\r\n                {/*                  )}*/}\r\n                {/*              </FormGroup>*/}\r\n                {/*          </div>*/}\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Phone Number of Referring Facility{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"phoneNoOfReferringFacility\"\r\n                      id=\"phoneNoOfReferringFacility\"\r\n                      onChange={(e) => {\r\n                        handleInputChangePhoneNumber(\r\n                          e,\r\n                          \"phoneNoOfReferringFacility\"\r\n                        );\r\n                      }}\r\n                      value={payload.phoneNoOfReferringFacility}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                    {errors.phoneNoOfReferringFacility !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.phoneNoOfReferringFacility}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">Referred to (Department)</Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"referredTo\"\r\n                      id=\"referredTo\"\r\n                      value={payload.referredTo}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Name of Contact Person:\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"nameOfContactPerson\"\r\n                      id=\"nameOfContactPerson\"\r\n                      value={payload.nameOfContactPerson}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                    {errors.nameOfContactPerson !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.nameOfContactPerson}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label\r\n                      for=\"\"\r\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\r\n                    >\r\n                      Receiving Facility State{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"stateId\"\r\n                      style={{\r\n                        height: \"40px\",\r\n                        border: \"solid 1px #014d88\",\r\n                        borderRadius: \"5px\",\r\n                        fontWeight: \"bolder\",\r\n                        appearance: \"auto\",\r\n                      }}\r\n                      required\r\n                      // onChange={loadLGA1}\r\n                      onChange={(e) => {\r\n                        if (e.target.value !== \"\") {\r\n                          const filterState =\r\n                            statesOfTheReceivingFacility.filter((st) => {\r\n                              return Number(st.id) === Number(e.target.value);\r\n                            });\r\n                          setSelectedReceivingState(filterState);\r\n\r\n                          setPayload((prevPayload) => ({\r\n                            ...prevPayload,\r\n                            receivingFacilityStateName: filterState[0].name,\r\n                          }));\r\n                        }\r\n                        loadLGA(e.target.value);\r\n                      }}\r\n                    >\r\n                      <option>Select State</option>\r\n                      {states.map((state) => (\r\n                        <option key={state.id} value={state.id}>\r\n                          {state.name}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                    {errors.receivingFacilityStateName !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.receivingFacilityStateName}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label\r\n                      for=\"\"\r\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\r\n                    >\r\n                      {\" \"}\r\n                      Receiving Facility LGA{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"lgaId\"\r\n                      style={{\r\n                        height: \"40px\",\r\n                        border: \"solid 1px #014d88\",\r\n                        borderRadius: \"5px\",\r\n                        fontWeight: \"bolder\",\r\n                        appearance: \"auto\",\r\n                      }}\r\n                      required\r\n                      // onChange={loadFacilities1}\r\n                      onChange={(e) => {\r\n                        if (e.target.value !== \"\") {\r\n                          const filterlga = lgasOfTheReceivingFacility.filter(\r\n                            (lg) => {\r\n                              return Number(lg.id) === Number(e.target.value);\r\n                            }\r\n                          );\r\n                          setSelectedReceivingLga(filterlga);\r\n                          setPayload((prevPayload) => ({\r\n                            ...prevPayload,\r\n                            receivingFacilityLgaName: filterlga[0].name,\r\n                          }));\r\n                        }\r\n                        loadFacilities(e.target.value);\r\n                      }}\r\n                    >\r\n                      <option>Select LGA</option>\r\n                      {lgasOfTheReceivingFacility.map((lga) => (\r\n                        <option key={lga.id} value={lga.id}>\r\n                          {lga.name}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                    {errors.receivingFacilityLgaName !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.receivingFacilityLgaName}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label\r\n                      for=\"\"\r\n                      style={{ color: \"#014d88\", fontWeight: \"bolder\" }}\r\n                    >\r\n                      Name of Receiving Facility\r\n                      <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"select\"\r\n                      name=\"nameOfReceivingFacility\"\r\n                      style={{\r\n                        height: \"40px\",\r\n                        border: \"solid 1px #014d88\",\r\n                        borderRadius: \"5px\",\r\n                        fontWeight: \"bolder\",\r\n                        appearance: \"auto\",\r\n                      }}\r\n                      required\r\n                      onChange={(e) => {\r\n                        // setPayload(prevPayload => ({ ...prevPayload, facilityTransferTo: e.target.value }));\r\n                        if (e.target.value !== \"\") {\r\n                          const filterFacility = receivingFacilities.filter(\r\n                            (fa) => {\r\n                              return Number(fa.id) === Number(e.target.value);\r\n                            }\r\n                          );\r\n                          setSelectedReceivingFacility(filterFacility);\r\n                          setPayload((prevPayload) => ({\r\n                            ...prevPayload,\r\n                            nameOfReceivingFacility: filterFacility[0].name,\r\n                          }));\r\n                        }\r\n                      }}\r\n                    >\r\n                      <option>Select Facility</option>\r\n                      {receivingFacilities.map((facility) => (\r\n                        <option key={facility.id} value={facility.id}>\r\n                          {facility.name}\r\n                        </option>\r\n                      ))}\r\n                    </Input>\r\n                    {errors.nameOfReceivingFacility !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.nameOfReceivingFacility}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Address of the Receiving Facility\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"text\"\r\n                      name=\"addressOfReceivingFacility\"\r\n                      id=\"addressOfReceivingFacility\"\r\n                      value={payload.addressOfReceivingFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n                {/*          <div className=\"form-group mb-3 col-md-4\">*/}\r\n                {/*              <FormGroup>*/}\r\n                {/*                  <Label for=\"firstName\">*/}\r\n                {/*                      Phone No of Receiving Facility*/}\r\n                {/*                      <span style={{color: \"red\"}}> *</span>*/}\r\n                {/*                  </Label>*/}\r\n                {/*                  <PhoneInput*/}\r\n                {/*                      containerStyle={{*/}\r\n                {/*                          width: \"100%\",*/}\r\n                {/*                          border: \"1px solid #014D88\",*/}\r\n                {/*                      }}*/}\r\n                {/*                      inputStyle={{width: \"100%\", borderRadius: \"0px\"}}*/}\r\n                {/*                      country={\"ng\"}*/}\r\n                {/*                      placeholder=\"(234)7099999999\"*/}\r\n                {/*                      maxLength={5}*/}\r\n                {/*                      name=\"phoneNoOfReceivingFacility\"*/}\r\n                {/*                      id=\"phoneNoOfReceivingFacility\"*/}\r\n                {/*                      masks={{ng: \"...-...-....\", at: \"(....) ...-....\"}}*/}\r\n                {/*                      value={payload.phoneNoOfReceivingFacility}*/}\r\n                {/*                      onChange={(e) => {*/}\r\n                {/*                          checkPhoneNumberBasic(e, \"phoneNoOfReceivingFacility\");*/}\r\n                {/*                      }}*/}\r\n                {/*                      //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}*/}\r\n                {/*                  />*/}\r\n\r\n                {/*                  {errors.phoneNoOfReceivingFacility !== \"\" ? (*/}\r\n                {/*                      <span className={classes.error}>*/}\r\n                {/*  {errors.phoneNoOfReceivingFacility}*/}\r\n                {/*</span>*/}\r\n                {/*                  ) : (*/}\r\n                {/*                      \"\"*/}\r\n                {/*                  )}*/}\r\n                {/*              </FormGroup>*/}\r\n                {/*          </div>*/}\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Phone No of Receiving Facility\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"phoneNoOfReceivingFacility\"\r\n                      id=\"phoneNoOfReceivingFacility\"\r\n                      onChange={(e) => {\r\n                        handleInputChangePhoneNumber(\r\n                          e,\r\n                          \"phoneNoOfReceivingFacility\"\r\n                        );\r\n                      }}\r\n                      value={payload.phoneNoOfReceivingFacility}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    />\r\n                    {errors.phoneNoOfReceivingFacility !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.phoneNoOfReceivingFacility}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-4\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Services needed\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"serviceNeeded\"\r\n                      id=\"serviceNeeded\"\r\n                      onChange={handleInputChange}\r\n                      value={payload.serviceNeeded}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}>Select Service</option>\r\n                      {serviceNeeded.map((value, index) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n\r\n                    {errors.serviceNeeded !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.serviceNeeded}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  <FormGroup>\r\n                    <Label for=\"firstName\">\r\n                      Comments\r\n                      {/* <span style={{ color: \"red\" }}> *</span> */}\r\n                    </Label>\r\n                    <Input\r\n                      className=\"form-control\"\r\n                      type=\"textarea\"\r\n                      rows=\"4\"\r\n                      cols=\"7\"\r\n                      name=\"comments\"\r\n                      id=\"comments\"\r\n                      value={payload.comments}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                        height: \"100px\",\r\n                      }}\r\n                    />\r\n                  </FormGroup>\r\n                </div>\r\n              </div>\r\n              <br />\r\n              <br />\r\n              {/* <hr /> */}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  <Button\r\n                    content=\"Submit\"\r\n                    type=\"submit\"\r\n                    // icon=\"right arrow\"\r\n                    // labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n        {/* <CardBody>\r\n          <ServicesProvided />\r\n        </CardBody> */}\r\n\r\n        {/* recieving facility  */}\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReferralUnit;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\ContinuesHTSEnrollment\\Elicitation\\IndexContactList.js",["1178","1179","1180","1181","1182","1183","1184","1185"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../../../api\";\r\n//import { token as token } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst PatientnHistory = (props) => {\r\n  const [indexClientList, setIndexClientList] = useState([]);\r\n  //const [patientObj, setpatientObj] = useState([])\r\n  const patientId =\r\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\r\n  //const [key, setKey] = useState('home');\r\n\r\n  useEffect(() => {\r\n    patients();\r\n  }, []);\r\n  ///GET LIST OF Patients\r\n  async function patients() {\r\n    axios\r\n      .get(`${baseUrl}hts/${props.patientObj.id}/index-elicitation`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setIndexClientList(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n  const handleItemClickPage = (page) => {\r\n    props.handleIClickPage(page);\r\n  };\r\n  const handleIEditIndex = (page, activePage) => {\r\n   \r\n    //props.setActivePage({...props.activePage, activePage:\"activePage\", activeObject:row, actionType:actionType})\r\n    //props.handleIClickPage(page)\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-end  mr-2 mt-2\"\r\n        onClick={() => handleItemClickPage(\"add\")}\r\n        //startIcon={<FaUserPlus size=\"10\"/>}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>New Index Client </span>\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"List of  client contact\"\r\n        columns={[\r\n          { title: \"Name\", field: \"name\" },\r\n          { title: \"Age\", field: \"age\" },\r\n          { title: \"Phone Number\", field: \"phone\" },\r\n          { title: \"Adress\", field: \"address\" },\r\n          //{ title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={indexClientList\r\n          .filter((b) => b.firstName !== \"\")\r\n          .map((row) => ({\r\n            name: row.firstName + \" \" + row.lastName,\r\n            age: calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n            phone: row.phoneNumber,\r\n            address: row.address,\r\n            actions: (\r\n              <>\r\n                {/* <Menu.Menu position='right'  >\r\n                            <Menu.Item >\r\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                <Dropdown item text='Action'>\r\n\r\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                \r\n                                <Dropdown.Item  \r\n                                //onClick={()=>handleIEditIndex(row, 'update')}\r\n                                >\r\n                                    <Icon name='edit' />Edit</Dropdown.Item>\r\n                                <Dropdown.Item  \r\n                                //onClick={()=>LoadDeletePage(row, 'delete')}\r\n                                > <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                                </Button>\r\n                            </Menu.Item>\r\n                        </Menu.Menu> */}\r\n              </>\r\n            ),\r\n          }))}\r\n        options={{\r\n          headerStyle: {\r\n            //backgroundColor: \"#9F9FA5\",\r\n            color: \"#000\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientnHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistration\\FeedbackModal.js",["1186","1187","1188","1189","1190","1191"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst styles = {\r\n  color: \"#f85032\",\r\n  fontSize: \"11px\",\r\n};\r\n\r\nconst FeedbackModal = ({\r\n  openModal,\r\n  toggleModal,\r\n  setOpenModal,\r\n  predictionValue,\r\n  clientId,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  let temp = { ...errors };\r\n\r\n  const [payload, setPayload] = useState({\r\n    facilityId: 0,\r\n    patientId: clientId,\r\n    primaryBasisToTest: \"\",\r\n    clientTestedDespiteLowRiskScore: \"\",\r\n    reasonForTestingDespiteLowRiskScore: \"\",\r\n    clientTestedDespiteHighRiskScore: \"\",\r\n    mainReasonForTestingThisClient: \"\",\r\n    optionMainReasonForTestingThisClient: \"\",\r\n    mainReasonForNotTestingThisClient: \"\",\r\n    optionMainReasonForNotTestingThisClient: \"\",\r\n    riskScoreContributeToTheClinicalDecision: \"\",\r\n  });\r\n\r\n  const validate = () => {\r\n    const temp = { ...errors };\r\n\r\n    temp.primaryBasisToTest = payload.primaryBasisToTest\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n\r\n    temp.clientTestedDespiteLowRiskScore =\r\n      payload.clientTestedDespiteLowRiskScore ? \"\" : \"This field is required.\";\r\n\r\n    temp.reasonForTestingDespiteLowRiskScore =\r\n      payload.reasonForTestingDespiteLowRiskScore\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n    temp.creasonForTestingDespiteLowRiskScore =\r\n      payload.reasonForTestingDespiteLowRiskScore\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n    temp.clientTestedDespiteHighRiskScore =\r\n      payload.clientTestedDespiteHighRiskScore ? \"\" : \"This field is required.\";\r\n\r\n    temp.mainReasonForTestingThisClient = payload.mainReasonForTestingThisClient\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n\r\n    temp.optionMainReasonForTestingThisClient =\r\n      payload.optionMainReasonForTestingThisClient\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n    temp.mainReasonForNotTestingThisClient =\r\n      payload.mainReasonForNotTestingThisClient\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n    temp.optionMainReasonForNotTestingThisClient =\r\n      payload.optionMainReasonForNotTestingThisClient\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n    temp.riskScoreContributeToTheClinicalDecision =\r\n      payload.riskScoreContributeToTheClinicalDecision\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const handlePayload = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n\r\n    e.preventDefault();\r\n    setPayload({\r\n      ...payload,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n    if (e.target.name === \"primaryBasisToTest\") {\r\n      setErrors({\r\n        ...temp,\r\n        clientTestedDespiteLowRiskScore: \"\",\r\n        reasonForTestingDespiteLowRiskScore: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmitFeedback = (e) => {\r\n    e.preventDefault();\r\n\r\n    //if (validate()) {\r\n    setSaving(true);\r\n    axios\r\n      .post(`${baseUrl}feedback`, payload, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((resp) => {\r\n     \r\n        toast.success(`HTS ML Feedback Submitted Sucessfully`, {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n          duration: 3000,\r\n        });\r\n        setSaving(false);\r\n        setOpenModal(!openModal);\r\n      })\r\n      .catch((err) => {\r\n        toast.error(`Something went wrong. Please try again...${err}`, {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n        setSaving(false);\r\n      });\r\n    //}\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={openModal}\r\n        toggle={toggleModal}\r\n        className=\"fade\"\r\n        size=\"xl\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Body>\r\n          <Card className={classes.root}>\r\n            <CardBody>\r\n              <h2 style={{ color: \"#000\" }}>HTS ML FEEDBACK QUESTIONS</h2>\r\n              <br />\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              ></LabelRibbon>\r\n              <form>\r\n                <div className=\"row mt-5\">\r\n                  <div className=\"form-group col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"primaryBasisToTest? \">\r\n                        What was the primary basis for your decision to test or\r\n                        not test this client?{\" \"}\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        id=\"primaryBasisToTest\"\r\n                        name=\"primaryBasisToTest\"\r\n                        onChange={handlePayload}\r\n                        value={payload?.primaryBasisToTest}\r\n                      >\r\n                        <option value=\"\">Select</option>\r\n                        <option value=\"ML risk score\">ML risk score</option>\r\n                        <option value=\"Clinical judgment\">\r\n                          Clinical judgment\r\n                        </option>\r\n                        <option value=\"Client history\">Client history</option>\r\n                        <option value=\"External factors\">\r\n                          External factors\r\n                        </option>\r\n                      </select>\r\n                      {errors.primaryBasisToTest !== \"\" ? (\r\n                        <span style={styles}>{errors.primaryBasisToTest}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  {parseFloat(predictionValue) < 0.005575358 && (\r\n                    <>\r\n                      <div className=\"form-group col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"clientTestedDespiteLowRiskScore ? \">\r\n                            Was the client tested despite a low-risk score{\" \"}\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            id=\"clientTestedDespiteLowRiskScore\"\r\n                            name=\"clientTestedDespiteLowRiskScore\"\r\n                            onChange={handlePayload}\r\n                            value={payload?.clientTestedDespiteLowRiskScore}\r\n                          >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                          </select>\r\n                          {errors.clientTestedDespiteLowRiskScore !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.clientTestedDespiteLowRiskScore}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      {payload?.clientTestedDespiteLowRiskScore === \"Yes\" && (\r\n                        <div className=\"form-group col-md-4\">\r\n                          <FormGroup>\r\n                            <Label for=\"reasonForTestingDespiteLowRiskScore\">\r\n                              What was the main reason for testing despite a\r\n                              low-risk score?\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              id=\"reasonForTestingDespiteLowRiskScore\"\r\n                              name=\"reasonForTestingDespiteLowRiskScore\"\r\n                              onChange={handlePayload}\r\n                              value={\r\n                                payload?.reasonForTestingDespiteLowRiskScore\r\n                              }\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Clinical symptoms\">\r\n                                Clinical symptoms\r\n                              </option>\r\n                              <option value=\"Client’s request\">\r\n                                Client’s request\r\n                              </option>\r\n                              <option value=\"High exposure risk\">\r\n                                High exposure risk\r\n                              </option>\r\n                              <option value=\"Others – Free text to specify\">\r\n                                Others – Free text to specify\r\n                              </option>\r\n                            </select>\r\n                            {errors.reasonForTestingDespiteLowRiskScore !==\r\n                            \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.reasonForTestingDespiteLowRiskScore}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                      {payload?.clientTestedDespiteLowRiskScore === \"Yes\" &&\r\n                        payload?.reasonForTestingDespiteLowRiskScore ===\r\n                          \"Others – Free text to specify\" && (\r\n                          <div className=\"form-group col-md-4\">\r\n                            <FormGroup>\r\n                              <Label for=\"optionMainReasonForTestingThisClient \">\r\n                                Free text to specify?{\" \"}\r\n                              </Label>\r\n                              <input\r\n                                className=\"form-control\"\r\n                                type=\"text\"\r\n                                id=\"optionMainReasonForTestingThisClient?\"\r\n                                name=\"optionMainReasonForTestingThisClient\"\r\n                                onChange={handlePayload}\r\n                                value={\r\n                                  payload?.optionMainReasonForTestingThisClient\r\n                                }\r\n                              />\r\n\r\n                              {errors.optionMainReasonForTestingThisClient !==\r\n                              \"\" ? (\r\n                                <span style={styles}>\r\n                                  {errors.optionMainReasonForTestingThisClient}\r\n                                </span>\r\n                              ) : (\r\n                                \"\"\r\n                              )}\r\n                            </FormGroup>\r\n                          </div>\r\n                        )}\r\n                    </>\r\n                  )}\r\n                  {parseFloat(predictionValue) > 0.02719647 && (\r\n                    <>\r\n                      <div className=\"form-group col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"clientTestedDespiteHighRiskScore \">\r\n                            Was the client Tested with a high-risk score?{\" \"}\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            id=\"clientTestedDespiteHighRiskScore\"\r\n                            name=\"clientTestedDespiteHighRiskScore\"\r\n                            onChange={handlePayload}\r\n                            value={payload?.clientTestedDespiteHighRiskScore}\r\n                          >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                          </select>\r\n                          {errors.clientTestedDespiteHighRiskScore !== \"\" ? (\r\n                            <span style={styles}>\r\n                              {errors.clientTestedDespiteHighRiskScore}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      {payload?.clientTestedDespiteHighRiskScore === \"Yes\" && (\r\n                        <div className=\"form-group col-md-4\">\r\n                          <FormGroup>\r\n                            <Label for=\"mainReasonForTestingThisClient \">\r\n                              What was the main reason for testing this client?{\" \"}\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              id=\" mainReasonForTestingThisClient?\"\r\n                              name=\"mainReasonForTestingThisClient\"\r\n                              onChange={handlePayload}\r\n                              value={payload?.mainReasonForTestingThisClient}\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Trust in the ML score\">\r\n                                Trust in the ML score\r\n                              </option>\r\n                              <option value=\"Symptoms\">Symptoms</option>\r\n                              <option value=\"Client Choice\">\r\n                                Client Choice\r\n                              </option>\r\n                              <option value=\"Health-care provider’s decision\">\r\n                                Health-care provider’s decision\r\n                              </option>\r\n                              <option value=\"Other priorities\">\r\n                                Other priorities\r\n                              </option>\r\n                            </select>\r\n                            {errors.mainReasonForTestingThisClient !== \"\" ? (\r\n                              <span style={styles}>\r\n                                {errors.mainReasonForTestingThisClient}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                      {(payload?.mainReasonForTestingThisClient ===\r\n                        \"Health-care provider’s decision\" ||\r\n                        payload?.mainReasonForTestingThisClient ===\r\n                          \"Other priorities\") && (\r\n                        <div className=\"form-group col-md-4\">\r\n                          <FormGroup>\r\n                            <Label for=\"optionMainReasonForTestingThisClient \">\r\n                              optional main reason?{\" \"}\r\n                            </Label>\r\n                            <input\r\n                              className=\"form-control\"\r\n                              type=\"text\"\r\n                              id=\"optionMainReasonForTestingThisClient?\"\r\n                              name=\"optionMainReasonForTestingThisClient\"\r\n                              onChange={handlePayload}\r\n                              value={\r\n                                payload?.optionMainReasonForTestingThisClient\r\n                              }\r\n                            />\r\n\r\n                            {errors.optionMainReasonForTestingThisClient !==\r\n                            \"\" ? (\r\n                              <span style={styles}>\r\n                                {errors.optionMainReasonForTestingThisClient}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                      {payload?.clientTestedDespiteHighRiskScore === \"No\" && (\r\n                        <div className=\"form-group col-md-4\">\r\n                          <FormGroup>\r\n                            <Label for=\"mainReasonForNotTestingThisClient \">\r\n                              {\" \"}\r\n                              What was the main reason for not testing this\r\n                              client?\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              id=\"mainReasonForNotTestingThisClient?\"\r\n                              name=\"mainReasonForNotTestingThisClient\"\r\n                              onChange={handlePayload}\r\n                              value={payload?.mainReasonForNotTestingThisClient}\r\n                            >\r\n                              <option value=\"\">Select</option>\r\n                              <option value=\"Lack of trust in the ML score\">\r\n                                Lack of trust in the ML score\r\n                              </option>\r\n                              <option value=\"No noticeable symptoms\">\r\n                                No noticeable symptoms\r\n                              </option>\r\n                              <option value=\"Client refusal\">\r\n                                Client refusal\r\n                              </option>\r\n                              <option value=\"Health-care provider’s decision\">\r\n                                {\" \"}\r\n                                Health-care provider’s decision\r\n                              </option>\r\n                            </select>\r\n                            {errors.mainReasonForNotTestingThisClient !== \"\" ? (\r\n                              <span style={styles}>\r\n                                {errors.mainReasonForNotTestingThisClient}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                      {payload?.mainReasonForNotTestingThisClient ===\r\n                        \"Health-care provider’s decision\" && (\r\n                        <div className=\"form-group col-md-4\">\r\n                          <FormGroup>\r\n                            <Label for=\"optionMainReasonForNotTestingThisClient \">\r\n                              optional Reason For Not Testing?\r\n                            </Label>\r\n                            <input\r\n                              className=\"form-control\"\r\n                              type=\"text\"\r\n                              id=\"optionMainReasonForNotTestingThisClient?\"\r\n                              name=\"optionMainReasonForNotTestingThisClient\"\r\n                              onChange={handlePayload}\r\n                              value={\r\n                                payload?.optionMainReasonForNotTestingThisClient\r\n                              }\r\n                            />\r\n                            {errors.optionMainReasonForNotTestingThisClient !==\r\n                            \"\" ? (\r\n                              <span style={styles}>\r\n                                {errors.optionMainReasonForNotTestingThisClient}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  )}\r\n\r\n                  {payload?.clientTestedDespiteLowRiskScore === \"No\" && (\r\n                    <div className=\"form-group col-md-4\">\r\n                      <FormGroup>\r\n                        <Label for=\"riskScoreContributeToTheClinicalDecision \">\r\n                          Did the ML model's risk score contribute to the\r\n                          clinical decision-making regarding testing for this\r\n                          client?\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          id=\"riskScoreContributeToTheClinicalDecision?\"\r\n                          name=\"riskScoreContributeToTheClinicalDecision\"\r\n                          onChange={handlePayload}\r\n                          value={\r\n                            payload?.riskScoreContributeToTheClinicalDecision\r\n                          }\r\n                        >\r\n                          <option value=\"\">Select</option>\r\n                          <option value=\"Yes, significantly\">\r\n                            Yes, significantly\r\n                          </option>\r\n                          <option value=\"Yes, slightly \">Yes, slightly</option>\r\n                          <option value=\"No change\">No change</option>\r\n                          <option value=\"Caused doubt\">Caused doubt</option>\r\n                        </select>\r\n                        {errors.riskScoreContributeToTheClinicalDecision !==\r\n                        \"\" ? (\r\n                          <span style={styles}>\r\n                            {errors.riskScoreContributeToTheClinicalDecision}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n\r\n                  <br />\r\n\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-6 mt-5\">\r\n                      <Button\r\n                        content=\"Cancel\"\r\n                        type=\"reset\"\r\n                        icon=\"cancel\"\r\n                        labelPosition=\"right\"\r\n                        style={{\r\n                          backgroundColor: \"rgb(153, 46, 98)\",\r\n                          color: \"#fff\",\r\n                        }}\r\n                        onClick={() => {\r\n                          setOpenModal(!openModal);\r\n                        }}\r\n                        disabled={saving}\r\n                      />\r\n                      <Button\r\n                        content=\"Save\"\r\n                        type=\"submit\"\r\n                        icon=\"save\"\r\n                        labelPosition=\"right\"\r\n                        style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                        onClick={handleSubmitFeedback}\r\n                        disabled={saving}\r\n                      />\r\n                      {saving && <Spinner animation=\"border\" />}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </CardBody>\r\n          </Card>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FeedbackModal;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\RecencyTesting.js",["1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst Recency = (props) => {\r\n  console.log(\"data1\", props.patientObj);\r\n  const classes = useStyles();\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [saving, setSaving] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n  const [hivTestDate, setHivTestDate] = useState(\"\");\r\n  let temp = { ...errors };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    htsClientId: clientId,\r\n    recency: {},\r\n    personId: patientID,\r\n  });\r\n  const [recency, setRecency] = useState({\r\n    optOutRTRI:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRI\r\n        : \"\",\r\n    optOutRTRITestName:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRITestName\r\n        : \"\",\r\n    optOutRTRITestDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.optOutRTRITestDate\r\n        : \"\",\r\n    rencencyId:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.rencencyId\r\n        : \"\",\r\n    controlLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.controlLine\r\n        : \"\",\r\n    verififcationLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.verififcationLine\r\n        : \"\",\r\n    longTermLine:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.longTermLine\r\n        : \"\",\r\n    rencencyInterpretation:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.rencencyInterpretation\r\n        : \"\",\r\n    hasViralLoad:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.hasViralLoad\r\n        : \"\",\r\n    sampleCollectedDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleCollectedDate\r\n        : \"\",\r\n    sampleReferanceNumber:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleReferanceNumber\r\n        : \"\",\r\n    dateSampleSentToPCRLab:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.dateSampleSentToPCRLab\r\n        : \"\",\r\n    sampleTestDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleTestDate\r\n        : \"\",\r\n    sampleType:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.sampleType\r\n        : \"\",\r\n    receivingPcrLab:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.receivingPcrLab\r\n        : \"\",\r\n    viralLoadResultClassification:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.viralLoadResultClassification\r\n        : \"\",\r\n    recencyResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.recencyResult\r\n        : \"\",\r\n    finalRecencyResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.finalRecencyResult\r\n        : \"\",\r\n    viralLoadConfirmationResult:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.viralLoadConfirmationResult\r\n        : \"\",\r\n    receivedResultDate:\r\n      props.patientObj && props.patientObj.recency !== null\r\n        ? props.patientObj.recency.receivedResultDate\r\n        : \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (props.patientObj && props.patientObj.recency !== null) {\r\n      // console.log(props.patientObj.recency);\r\n      setRecency(props.patientObj.recency);\r\n    }\r\n    if (props.patientObj) {\r\n      if (\r\n        props.patientObj.confirmatoryTest2 &&\r\n        props.patientObj.confirmatoryTest2.date2 !== \"\"\r\n      ) {\r\n        setHivTestDate(props.patientObj.confirmatoryTest2.date2);\r\n      } else if (\r\n        props.patientObj.confirmatoryTest &&\r\n        props.patientObj.confirmatoryTest.date !== \"\"\r\n      ) {\r\n        setHivTestDate(props.patientObj.confirmatoryTest.date);\r\n      } else {\r\n        setHivTestDate(\"\");\r\n      }\r\n    }\r\n    if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"RTRI Long Term\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Long Term\" });\r\n    } else if (\r\n      recency.longTermLine === \"false\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"RTRI Recent\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"RTRI Recent\" });\r\n      //setRecency ({...recency,  ['hasViralLoad']: 'true'});\r\n    } else if (\r\n      recency.longTermLine === \"false\" &&\r\n      recency.verififcationLine === \"false\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Negative\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Negative\" });\r\n    } else if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"true\" &&\r\n      recency.controlLine === \"false\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Invalid\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\r\n    } else if (\r\n      recency.longTermLine === \"true\" &&\r\n      recency.verififcationLine === \"false\" &&\r\n      recency.controlLine === \"true\"\r\n    ) {\r\n      recency.rencencyInterpretation = \"Invalid\";\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"Invalid\" });\r\n    } else {\r\n      setRecency({ ...recency, [\"rencencyInterpretation\"]: \"\" });\r\n    }\r\n    if (recency.optOutRTRI === \"true\") {\r\n      setRecency({\r\n        optOutRTRI:\r\n          props.patientObj && props.patientObj.recency !== null\r\n            ? props.patientObj.recency.optOutRTRI\r\n            : \"\",\r\n        optOutRTRITestName: \"\",\r\n        optOutRTRITestDate: \"\",\r\n        rencencyId: \"\",\r\n        controlLine: \"\",\r\n        verififcationLine: \"\",\r\n        longTermLine: \"\",\r\n        rencencyInterpretation: \"\",\r\n        hasViralLoad: \"\",\r\n        sampleCollectedDate: \"\",\r\n        sampleReferanceNumber: \"\",\r\n        dateSampleSentToPCRLab: \"\",\r\n        sampleTestDate: \"\",\r\n        sampleType: \"\",\r\n        receivingPcrLab: \"\",\r\n        viralLoadResultClassification: \"\",\r\n\r\n        recencyResult: \"\",\r\n        finalRecencyResult: \"\",\r\n        viralLoadConfirmationResult: \"\",\r\n        receivedResultDate: \"\",\r\n      });\r\n    }\r\n  }, [\r\n    recency.longTermLine,\r\n    recency.verififcationLine,\r\n    recency.controlLine,\r\n    props.patientObj,\r\n  ]);\r\n\r\n  const handleInputChangeRecency = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"viralLoadConfirmationResult\") {\r\n      if (e.target.value >= 1000) {\r\n        recency.viralLoadResultClassification = \">=1000\";\r\n        recency.finalRecencyResult = \"RITA Recent\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value < 1000) {\r\n        recency.viralLoadResultClassification = \"<1000\";\r\n        recency.finalRecencyResult = \"RITA Long term\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      }\r\n    }\r\n\r\n    if(e.target.name === \"controlLine\" || e.target.name === \"verififcationLine\" ||   e.target.name === \"longTermLine\"){\r\n      setErrors({...errors, hasViralLoad: \"\"})\r\n        // hasViralLoad\r\n      \r\n      }\r\n      \r\n    if (e.target.name === \"viralLoadResultClassification\") {\r\n      if (e.target.value === \">=1000\") {\r\n        recency.finalRecencyResult = \"RITA Recent\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"<1000\") {\r\n        recency.finalRecencyResult = \"RITA Long term\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"Failed run\") {\r\n        recency.finalRecencyResult = \"RITA Inconclusive\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else if (e.target.value === \"Invalid viral load result\") {\r\n        recency.finalRecencyResult = \"RITA Inconclusive\";\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      } else {\r\n        setRecency({ ...recency, [e.target.name]: e.target.value });\r\n      }\r\n    } else if (e.target.name === \"rencencyId\" && e.target.value !== \"\") {\r\n      const recencyIdNumberValue = checkRecencyLimit(e.target.value);\r\n      setRecency({ ...recency, [e.target.name]: recencyIdNumberValue });\r\n    }else if(e.target.name === \"optOutRTRI\"){\r\n      setRecency({\r\n        // optOutRTRI: \"false\",\r\n        optOutRTRITestName: \"\",\r\n        optOutRTRITestDate: \"\",\r\n        rencencyId: \"\",\r\n        controlLine: \"\",\r\n        verififcationLine: \"\",\r\n        longTermLine: \"\",\r\n        rencencyInterpretation: \"\",\r\n        hasViralLoad: \"\",\r\n        sampleCollectedDate: \"\",\r\n        sampleReferanceNumber: \"\",\r\n        dateSampleSentToPCRLab: \"\",\r\n        sampleTestDate: \"\",\r\n        sampleType: \"\",\r\n        receivingPcrLab: \"\",\r\n        viralLoadResultClassification: \"\",\r\n        recencyResult: \"\",\r\n        finalRecencyResult: \"\",\r\n        viralLoadConfirmationResult: \"\",\r\n         [e.target.name]: e.target.value });\r\n\r\n         setErrors({ ...temp,\r\n          optOutRTRITestName: \"\",\r\n          optOutRTRITestDate: \"\",\r\n          rencencyId: \"\",\r\n          controlLine: \"\",\r\n          verififcationLine: \"\",\r\n          longTermLine: \"\",\r\n          rencencyInterpretation: \"\",\r\n          hasViralLoad: \"\",\r\n          sampleCollectedDate: \"\",\r\n          sampleReferanceNumber: \"\",\r\n          dateSampleSentToPCRLab: \"\",\r\n          sampleTestDate: \"\",\r\n          sampleType: \"\",\r\n          receivingPcrLab: \"\",\r\n          viralLoadResultClassification: \"\",\r\n          recencyResult: \"\",\r\n          finalRecencyResult: \"\",\r\n          viralLoadConfirmationResult: \"\", [e.target.name]: \"\" });\r\n\r\n    } else if (e.target.name === \"receivedResultDate\") {\r\n      setRecency({ ...recency, [e.target.name]: e.target.value });\r\n    } else {\r\n      setRecency({ ...recency, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n  const checkRecencyLimit = (e) => {\r\n    const limit = 10;\r\n    const acceptedNumber = e.slice(0, limit);\r\n    return acceptedNumber;\r\n  };\r\n\r\n  /*****  Validation  */\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n    recency.optOutRTRI === \"false\" &&\r\n    (temp.optOutRTRITestName = recency.optOutRTRITestName\r\n      ? \"\"\r\n      : \"This field is required.\");\r\n\r\n\r\n     recency.optOutRTRI === \"false\" &&\r\n      (temp.optOutRTRITestDate = recency.optOutRTRITestDate\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n  \r\n      recency.optOutRTRI === \"false\" &&\r\n        (temp.rencencyId = recency.rencencyId\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n         recency.optOutRTRI === \"false\" &&\r\n          (temp.controlLine = recency.controlLine\r\n            ? \"\"\r\n            : \"This field is required.\")\r\n\r\n            \r\n  \r\n          recency.optOutRTRI === \"false\" &&\r\n          (temp.verififcationLine = recency.verififcationLine\r\n            ? \"\"\r\n            : \"This field is required.\");\r\n\r\n\r\n            recency.optOutRTRI === \"false\" &&\r\n            (temp.longTermLine = recency.longTermLine\r\n              ? \"\"\r\n              : \"This field is required.\")\r\n\r\n\r\n\r\n              recency.optOutRTRI === \"false\" &&\r\n              (temp.rencencyInterpretation = recency.rencencyInterpretation\r\n                ? \"\"\r\n                : \"This field is required.\")\r\n\r\n      recency.hasViralLoad == \"true\" &&\r\n        (temp.sampleReferanceNumber = recency.sampleReferanceNumber\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n    // {  recency.sampleCollectedDate!=='' && (temp.dateSampleSentToPCRLab = recency.dateSampleSentToPCRLab ? \"\" : \"This field is required.\")}\r\n\r\n      recency.hasViralLoad == \"true\" &&\r\n        (temp.sampleType = recency.sampleType ? \"\" : \"This field is required.\");\r\n\r\n\r\n          recency.rencencyInterpretation === \"RTRI Recent\" &&\r\n            (temp.hasViralLoad = recency.hasViralLoad\r\n              ? \"\"\r\n              : \"This field is required.\");\r\n \r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n      let latestForm = getNextForm(\r\n        \"hiv_recency_testing\",\r\n        props.patientAge,\r\n        \"\",\r\n        props?.patientObj?.hivTestResult\r\n      );\r\n    objValues.htsClientId = clientId;\r\n    objValues.recency = recency;\r\n    objValues.personId = patientID;\r\n  \r\n    if (validate() ) {\r\n      setSaving(true);\r\n      axios\r\n        .put(`${baseUrl}hts/${clientId}/recency`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          props.setPatientObj(response.data);\r\n          //toast.success(\"Risk Assesment successful\");\r\n          //comment this out for release\r\n          // handleItemClick(\"fit-history\", \"recency-testing\");\r\n          if (\r\n            props?.patientObj?.hivTestResult && props?.patientObj?.hivTestResult.toLowerCase() ===\r\n            \"positive\"\r\n          ) {\r\n            handleItemClick(\"pns-history\", \"recency-testing\");\r\n          }\r\n\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2>RECENCY FORM</h2>\r\n          <form>\r\n            <div className=\"row\">\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                <h5 style={{ color: \"#fff\" }}>RECENCY</h5>\r\n              </LabelRibbon>\r\n              <br />\r\n              <br />\r\n\r\n              \r\n              <br />\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Opt Out of RTRI? <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"optOutRTRI\"\r\n                    id=\"optOutRTRI\"\r\n                    value={recency.optOutRTRI}\r\n                    onChange={handleInputChangeRecency}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-8\"></div>\r\n              {recency.optOutRTRI === \"false\" && (\r\n                <>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Test Name <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"optOutRTRITestName\"\r\n                        id=\"optOutRTRITestName\"\r\n                        value={recency.optOutRTRITestName}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"Asante\">Asante</option>\r\n                        <option value=\"Others\">Others</option>\r\n                      </select>\r\n                      {errors.optOutRTRITestName !== \"\" ? (\r\n                      <span className={classes.error}>{errors.optOutRTRITestName}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Test Date <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"date\"                      \r\n                         onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"optOutRTRITestDate\"\r\n                        id=\"optOutRTRITestDate\"\r\n                        value={recency.optOutRTRITestDate}\r\n                        onChange={handleInputChangeRecency}\r\n                        min={\r\n                          hivTestDate !== \"\" && hivTestDate !== null\r\n                            ? hivTestDate\r\n                            : \"\"\r\n                        }\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        readOnly={props.activePage.actionType === \"view\"}\r\n                      />\r\n                      {errors.optOutRTRITestDate !== \"\" ? (\r\n                      <span className={classes.error}>{errors.optOutRTRITestDate}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Recency ID <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        className=\"form-control\"\r\n                        name=\"rencencyId\"\r\n                        id=\"rencencyId\"\r\n                        type=\"text\"\r\n                        value={recency.rencencyId}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        readOnly={props.activePage.actionType === \"view\"}\r\n                      />\r\n                  {errors.rencencyId !== \"\" ? (\r\n                      <span className={classes.error}>{errors.rencencyId}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Control Line <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"controlLine\"\r\n                        id=\"controlLine\"\r\n                        value={recency.controlLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.controlLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.controlLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Verification Line{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"verififcationLine\"\r\n                        id=\"verififcationLine\"\r\n                        value={recency.verififcationLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.verififcationLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.verififcationLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Long Term Line <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"longTermLine\"\r\n                        id=\"longTermLine\"\r\n                        value={recency.longTermLine}\r\n                        onChange={handleInputChangeRecency}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.longTermLine !== \"\" ? (\r\n                      <span className={classes.error}>{errors.longTermLine}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Recency Interpretation{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        className=\"form-control\"\r\n                        name=\"rencencyInterpretation\"\r\n                        id=\"rencencyInterpretation\"\r\n                        type=\"text\"\r\n                        value={recency.rencencyInterpretation}\r\n                        disabled\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        readOnly={props.activePage.actionType === \"view\"}\r\n                      />\r\n                      {errors.rencencyInterpretation !== \"\" ? (\r\n                      <span className={classes.error}>{errors.rencencyInterpretation}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n\r\n                    </FormGroup>\r\n                  </div>\r\n                  {recency.rencencyInterpretation === \"RTRI Recent\" && (\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Has Viral Load been ordered? <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"hasViralLoad\"\r\n                          id=\"hasViralLoad\"\r\n                          value={recency.hasViralLoad}\r\n                          onChange={handleInputChangeRecency}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.hasViralLoad !== \"\" ? (\r\n                      <span className={classes.error}>{errors.hasViralLoad}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  )}\r\n                  {recency.hasViralLoad === \"true\" && (\r\n                    <>\r\n                      <div className=\"row\">\r\n                        <h4>Recency Viral Load Classification :</h4>\r\n                        <br />\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Recency Sample Collected Date</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleCollectedDate\"\r\n                              id=\"sampleCollectedDate\"\r\n                              type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                              value={recency.sampleCollectedDate}\r\n                              min={recency.optOutRTRITestDate}\r\n                              max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              readOnly={props.activePage.actionType === \"view\"}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Sample Reference Number{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"sampleReferanceNumber\"\r\n                              id=\"sampleReferanceNumber\"\r\n                              type=\"text\"\r\n                              value={recency.sampleReferanceNumber}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            />\r\n                            {errors.sampleReferanceNumber !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.sampleReferanceNumber}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Sample Type{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"sampleType\"\r\n                              id=\"sampleType\"\r\n                              value={recency.sampleType}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"DBS\">DBS</option>\r\n                              <option value=\"Plasma\">Plasma</option>\r\n                            </select>\r\n                            {errors.sampleType !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.sampleType}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Date Recency Sample Sent to PCR Lab</Label>\r\n                            <Input\r\n                                className=\"form-control\"\r\n                                name=\"dateSampleSentToPCRLab\"\r\n                                id=\"dateSampleSentToPCRLab\"\r\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                // min={recency.optOutRTRITestDate}\r\n                                min={recency.sampleCollectedDate}\r\n                                value={recency.dateSampleSentToPCRLab}\r\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                onChange={handleInputChangeRecency}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                                readOnly={props.activePage.actionType === \"view\"}\r\n                            />\r\n                            {errors.dateSampleSentToPCRLab !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.dateSampleSentToPCRLab}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Recency Sample Test Date</Label>\r\n                            <Input\r\n                                className=\"form-control\"\r\n                                name=\"sampleTestDate\"\r\n                                id=\"sampleTestDate\"\r\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                // min={recency.optOutRTRITestDate}\r\n                                min={recency.dateSampleSentToPCRLab}\r\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                value={recency.sampleTestDate}\r\n                                onChange={handleInputChangeRecency}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                                readOnly={props.activePage.actionType === \"view\"}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Receiving PCR Lab</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"receivingPcrLab\"\r\n                              id=\"receivingPcrLab\"\r\n                              type=\"text\"\r\n                              value={recency.receivingPcrLab}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              readOnly={props.activePage.actionType === \"view\"}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Confirmation Result (copies/ml)\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"viralLoadConfirmationResult\"\r\n                              id=\"viralLoadConfirmationResult\"\r\n                              type=\"number\"\r\n                              value={recency.viralLoadConfirmationResult}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Result Received Date\r\n                            </Label>\r\n                            <Input\r\n                                className=\"form-control\"\r\n                                name=\"receivedResultDate\"\r\n                                id=\"receivedResultDate\"\r\n                                type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                                // min={recency.optOutRTRITestDate}\r\n                                min={recency.sampleTestDate}\r\n                                max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                                value={recency.receivedResultDate}\r\n                                onChange={handleInputChangeRecency}\r\n                                style={{\r\n                                  border: \"1px solid #014D88\",\r\n                                  borderRadius: \"0.2rem\",\r\n                                }}\r\n                                readOnly={props.activePage.actionType === \"view\"}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Recency Viral Load Result Classification and\r\n                              Result (copies/ml)\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"viralLoadResultClassification\"\r\n                              id=\"viralLoadResultClassification\"\r\n                              value={recency.viralLoadResultClassification}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}>Select</option>\r\n                              <option value=\">=1000\">{\">= \"} 1000</option>\r\n                              <option value=\"<1000\">{\"< \"} 1000</option>\r\n                              <option value=\"Failed run\">Failed run</option>\r\n                              <option value=\"Invalid viral load result\">\r\n                                Invalid viral load result\r\n                              </option>\r\n                            </select>\r\n                          </FormGroup>\r\n                        </div>\r\n                        {/* <div className=\"form-group  col-md-4\">\r\n                                    <FormGroup>\r\n                                        <Label>Result (copies/ml)</Label>\r\n                                        <Input\r\n                                            className=\"form-control\"\r\n                                            name=\"recencyResult\"\r\n                                            id=\"recencyResult\"\r\n                                            type=\"text\"\r\n                                            value={recency.recencyResult}\r\n                                            onChange={handleInputChangeRecency}\r\n                                            style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                        />\r\n\r\n                                    </FormGroup>\r\n                                </div> */}\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>Final Recency Result</Label>\r\n                            <Input\r\n                              className=\"form-control\"\r\n                              name=\"finalRecencyResult\"\r\n                              id=\"finalRecencyResult\"\r\n                              type=\"text\"\r\n                              disabled\r\n                              value={recency.finalRecencyResult}\r\n                              onChange={handleInputChangeRecency}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              readOnly={props.activePage.actionType === \"view\"}\r\n                            />\r\n                          </FormGroup>\r\n                        </div>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  {/* <Button\r\n                    content=\"Back\"\r\n                    icon=\"left arrow\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    onClick={() => handleItemClick(\"post-test\", \"post-test\")}\r\n                  /> */}\r\n                  <Button\r\n                    content=\"Save & Continue\"\r\n                    icon=\"right arrow\"\r\n                    labelPosition=\"right\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={\r\n                      props.patientObj?.postTestCounselingKnowledgeAssessment\r\n                        ?.hivTestResult === \"true\" && recency.optOutRTRI === \"\"\r\n                        ? true\r\n                        : false\r\n                    }\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Recency;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\PostTest.js",["1207","1208","1209","1210","1211"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Label as LabelRibbon, Button, Message } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { getNextForm } from \"../../../../utility\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst PostTest = (props) => {\r\n  console.log(\"post\", props);\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const patientID =\r\n    props.patientObj && props.patientObj.personResponseDto\r\n      ? props.patientObj.personResponseDto.id\r\n      : \"\";\r\n  const clientId =\r\n    props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n  const [saving, setSaving] = useState(false);\r\n  const { postTestCounselingKnowledgeAssessment } = props.patientObj;\r\n\r\n  ///const [errors, setErrors] = useState({});\r\n  const [objValues, setObjValues] = useState({\r\n    htsClientId: clientId,\r\n    postTestCounselingKnowledgeAssessment: {},\r\n    personId: patientID,\r\n  });\r\n\r\n  const [postTest, setPostTest] = useState({\r\n    hivTestResult: \"\",\r\n    hivTestBefore:\r\n      props.activePage.activeObject?.riskStratificationResponseDto\r\n        ?.riskAssessment?.lastHivTestDone !== \"Never\" &&\r\n      props.activePage.activeObject?.riskStratificationResponseDto\r\n        ?.riskAssessment?.whatWasTheResult === \"Positive\"\r\n        ? \"Previously tested positive in HIV care\"\r\n        : postTestCounselingKnowledgeAssessment?.hivTestBefore,\r\n    hivRequestResult: postTestCounselingKnowledgeAssessment?.hivRequestResult,\r\n    hivRequestResultCt:\r\n      postTestCounselingKnowledgeAssessment?.hivRequestResultCt,\r\n    clientReceivedHivTestResult:\r\n      postTestCounselingKnowledgeAssessment?.clientReceivedHivTestResult,\r\n    postTestCounseling:\r\n      postTestCounselingKnowledgeAssessment?.postTestCounseling,\r\n    riskReduction: postTestCounselingKnowledgeAssessment?.riskReduction,\r\n    postTestDisclosure:\r\n      postTestCounselingKnowledgeAssessment?.postTestDisclosure,\r\n    bringPartnerHivtesting:\r\n      postTestCounselingKnowledgeAssessment?.bringPartnerHivtesting,\r\n    childrenHivtesting:\r\n      postTestCounselingKnowledgeAssessment?.childrenHivtesting,\r\n    informationFp: postTestCounselingKnowledgeAssessment?.informationFp,\r\n    partnerFpThanCondom:\r\n      postTestCounselingKnowledgeAssessment?.partnerFpThanCondom,\r\n    partnerFpUseCondom:\r\n      postTestCounselingKnowledgeAssessment?.partnerFpUseCondom,\r\n    correctCondomUse: postTestCounselingKnowledgeAssessment?.correctCondomUse,\r\n    condomProvidedToClient:\r\n      postTestCounselingKnowledgeAssessment?.condomProvidedToClient,\r\n    unprotectedSexRegularPartnerLastThreeMonth:\r\n      postTestCounselingKnowledgeAssessment?.unprotectedSexRegularPartnerLastThreeMonth,\r\n    referredToServices:\r\n      postTestCounselingKnowledgeAssessment?.referredToServices,\r\n    lubricantProvidedToClient:\r\n      postTestCounselingKnowledgeAssessment?.lubricantProvidedToClient,\r\n    condomProvidedToClientCount:\r\n      postTestCounselingKnowledgeAssessment?.condomProvidedToClientCount,\r\n    lubricantProvidedToClientCount:\r\n      postTestCounselingKnowledgeAssessment?.lubricantProvidedToClientCount,\r\n  });\r\n  const handleInputChangePostTest = (e) => {\r\n    if (e.target.name === \"lubricantProvidedToClientCount\") {\r\n      if (e.target.value >= 0) {\r\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n      }\r\n    }else if (e.target.name === \"condomProvidedToClientCount\") {\r\n      if (e.target.value >= 0) {\r\n        setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n      } else {\r\n        setPostTest({ ...postTest, [e.target.name]: 0 });\r\n      }\r\n    } else {\r\n      setPostTest({ ...postTest, [e.target.name]: e.target.value });\r\n    }\r\n  };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n  \r\n    setPostTest({\r\n      ...postTest,\r\n      ...props.patientObj.postTestCounselingKnowledgeAssessment,\r\n    });\r\n\r\n    if (\r\n      props.patientObj?.hivTestResult2?.length > 0 &&\r\n      props.patientObj.hivTestResult2 === \"Positive\"\r\n    ) {\r\n      postTest.hivTestResult = \"true\";\r\n      setPostTest({ ...postTest, hivTestResult: \"true\" });\r\n    } else if (\r\n      props.patientObj?.hivTestResult2?.length > 0 &&\r\n      props.patientObj.hivTestResult2 === \"Negative\"\r\n    ) {\r\n      postTest.hivTestResult = \"false\";\r\n      setPostTest({ ...postTest, hivTestResult: \"false\" });\r\n    } else if (\r\n      props.patientObj?.hivTestResult?.length > 0 &&\r\n      props.patientObj.hivTestResult === \"Positive\"\r\n    ) {\r\n      postTest.hivTestResult = \"true\";\r\n      setPostTest({ ...postTest, hivTestResult: \"true\" });\r\n    } else if (\r\n      props.patientObj?.hivTestResult?.length > 0 &&\r\n      props.patientObj.hivTestResult === \"Negative\"\r\n    ) {\r\n      postTest.hivTestResult = \"false\";\r\n      setPostTest({ ...postTest, hivTestResult: \"false\" });\r\n    }\r\n  }, [props.patientObj]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n      let latestForm = getNextForm(\r\n        \"post_test_counseling\",\r\n        props?.patientAge,\r\n        \"\",\r\n        props?.patientObj?.hivTestResult\r\n      );\r\n\r\n    if (props.activePage.actionType === \"view\") {\r\n      //e.preventDefault();\r\n         handleItemClick(latestForm[0], latestForm[1]);\r\n    }\r\n    if (props.activePage.actionType === \"update\") {\r\n      setSaving(true);\r\n      //e.preventDefault();\r\n\r\n      objValues.htsClientId = clientId;\r\n      objValues.postTestCounselingKnowledgeAssessment = postTest;\r\n      objValues.personId = patientID;\r\n      axios\r\n        .put(`${baseUrl}hts/${clientId}/post-test-counseling`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n\r\n          props.setPatientObj(response.data);\r\n          toast.success(\"Post Test Assesment successful\");\r\n          handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2>POST TEST COUNSELING</h2>\r\n          <form>\r\n            <div className=\"row\">\r\n              <LabelRibbon\r\n                as=\"a\"\r\n                color=\"blue\"\r\n                style={{ width: \"106%\", height: \"35px\" }}\r\n                ribbon\r\n              >\r\n                {/* <h5 style={{color:'#fff'}}>Knowledge Assessment</h5> */}\r\n              </LabelRibbon>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    HIV test result <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivTestResult\"\r\n                    id=\"hivTestResult\"\r\n                    value={postTest.hivTestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    // disabled={props.activePage.actionType === \"view\"}\r\n                    disabled={true}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Positive</option>\r\n                    <option value=\"false\">Negative</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Have you been tested for HIV before within this year?{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivTestBefore\"\r\n                    id=\"hivTestBefore\"\r\n                    value={postTest.hivTestBefore}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"Not previously tested\">\r\n                      Not previously tested\r\n                    </option>\r\n                    <option value=\"Previously tested negative\">\r\n                      Previously tested negative\r\n                    </option>\r\n                    <option value=\"Previously tested positive in HIV care\">\r\n                      Previously tested positive in HIV care\r\n                    </option>\r\n                    <option value=\"Previously tested positive not in HIV care\">\r\n                      Previously tested positive not in HIV care\r\n                    </option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>HIV Request and Result form signed by tester </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivRequestResult\"\r\n                    id=\"hivRequestResult\"\r\n                    value={postTest.hivRequestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    HIV Request and Result form filled with CT Intake Form{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"hivRequestResultCt\"\r\n                    id=\"hivRequestResultCt\"\r\n                    value={postTest.hivRequestResultCt}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client received HIV test result </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"clientReceivedHivTestResult\"\r\n                    id=\"clientReceivedHivTestResult\"\r\n                    value={postTest.clientReceivedHivTestResult}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Post test counseling done </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"postTestCounseling\"\r\n                    id=\"postTestCounseling\"\r\n                    value={postTest.postTestCounseling}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Risk reduction plan developed </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"riskReduction\"\r\n                    id=\"riskReduction\"\r\n                    value={postTest.riskReduction}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Post test disclosure plan developed </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"postTestDisclosure\"\r\n                    id=\"postTestDisclosure\"\r\n                    value={postTest.postTestDisclosure}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Will bring partner(s) for HIV testing </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"bringPartnerHivtesting\"\r\n                    id=\"bringPartnerHivtesting\"\r\n                    value={postTest.bringPartnerHivtesting}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Will bring own children {\"<5\"} years for HIV testing{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"childrenHivtesting\"\r\n                    id=\"childrenHivtesting\"\r\n                    value={postTest.childrenHivtesting}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Provided with information on FP and dual contraception{\" \"}\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"informationFp\"\r\n                    id=\"informationFp\"\r\n                    value={postTest.informationFp}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Client/Partner use FP methods (other than condom)\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"partnerFpThanCondom\"\r\n                    id=\"partnerFpThanCondom\"\r\n                    value={postTest.partnerFpThanCondom}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client/Partner use condoms as (one) FP method </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"partnerFpUseCondom\"\r\n                    id=\"partnerFpUseCondom\"\r\n                    value={postTest.partnerFpUseCondom}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Correct condom use demonstrated </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"correctCondomUse\"\r\n                    id=\"correctCondomUse\"\r\n                    value={postTest.correctCondomUse}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Condoms provided to client </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"condomProvidedToClient\"\r\n                    id=\"condomProvidedToClient\"\r\n                    value={postTest.condomProvidedToClient}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              {postTest.condomProvidedToClient !== null &&\r\n                postTest.condomProvidedToClient === \"true\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>How many condoms were provided to client </Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"condomProvidedToClientCount\"\r\n                        id=\"condomProvidedToClientCount\"\r\n                        value={postTest.condomProvidedToClientCount}\r\n                        onChange={handleInputChangePostTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        readOnly={props.activePage.actionType === \"view\"}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Lubricant were provided to client </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"lubricantProvidedToClient\"\r\n                    id=\"lubricantProvidedToClient\"\r\n                    value={postTest.lubricantProvidedToClient}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              {postTest.lubricantProvidedToClient !== null &&\r\n                postTest.lubricantProvidedToClient === \"true\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>How many lubricant provided to client </Label>\r\n                      <Input\r\n                        type=\"number\"\r\n                        name=\"lubricantProvidedToClientCount\"\r\n                        id=\"lubricantProvidedToClientCount\"\r\n                        value={postTest.lubricantProvidedToClientCount}\r\n                        onChange={handleInputChangePostTest}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                        readOnly={props.activePage.actionType === \"view\"}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n\r\n              {/* <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with regular partner in the last 3months</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"unprotectedSexRegularPartnerLastThreeMonth\"\r\n                                        id=\"unprotectedSexRegularPartnerLastThreeMonth\"\r\n                                        value={postTest.unprotectedSexRegularPartnerLastThreeMonth}\r\n                                        onChange={handleInputChangePostTest}\r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"true\">Yes</option>\r\n                                        <option value=\"false\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div> */}\r\n              {/* <div className=\"form-group  col-md-4\">\r\n                                <FormGroup>\r\n                                    <Label>Unprotected sex with regular particular in the last 3 months</Label>\r\n                                    <select\r\n                                        className=\"form-control\"\r\n                                        name=\"sex\"\r\n                                        id=\"sex\"\r\n                                        \r\n                                        style={{border: \"1px solid #014D88\", borderRadius:\"0.2rem\"}}\r\n                                    >\r\n                                        <option value={\"\"}></option>\r\n                                        <option value=\"Yes\">Yes</option>\r\n                                        <option value=\"No\">No</option>\r\n                                        \r\n                                    </select>\r\n                                    \r\n                                </FormGroup>\r\n                            </div> */}\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>Client referred to other services </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"referredToServices\"\r\n                    id=\"referredToServices\"\r\n                    value={postTest.referredToServices}\r\n                    onChange={handleInputChangePostTest}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                    disabled={props.activePage.actionType === \"view\"}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    <option value=\"true\">Yes</option>\r\n                    <option value=\"false\">No</option>\r\n                  </select>\r\n                </FormGroup>\r\n              </div>\r\n              <Message success>\r\n                <h4>\r\n                  If client tests HIV negative, and HIV Risk Assessment Score{\" \"}\r\n                  {\">0\"} or there is evidence for a STI syndrome, recommend\r\n                  re-testing after 3 months\r\n                </h4>\r\n              </Message>\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                  {/* <Button\r\n                    content=\"Back\"\r\n                    icon=\"left arrow\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#992E62\", color: \"#fff\" }}\r\n                    onClick={() => handleItemClick(\"hiv-test\", \"hiv-test\")}\r\n                  /> */}\r\n\r\n                  {props.activePage.actionType === \"update\" && (\r\n                    <Button\r\n                      content=\"Update & Continue\"\r\n                      icon=\"right arrow\"\r\n                      labelPosition=\"right\"\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                      onClick={handleSubmit}\r\n                      // disabled={saving}\r\n                    />\r\n                  )}\r\n                  {props.activePage.actionType === \"view\" && (\r\n                    <Button\r\n                      content=\"Next\"\r\n                      icon=\"right arrow\"\r\n                      labelPosition=\"right\"\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostTest;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\RiskStratification.js",["1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224"],"import React, { useEffect, useState } from \"react\"\r\nimport axios from \"axios\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card } from \"@material-ui/core\";\r\n//import SaveIcon from \"@material-ui/icons/Save\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport { token, url as baseUrl } from \"../../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n//import PhoneInput from 'react-phone-input-2'\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Label as LabelRibbon, Message } from \"semantic-ui-react\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nimport Cookies from \"js-cookie\";\r\nimport { useGetCodesets } from \"../../../hooks/useGetCodesets.hook\";\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n  success: {\r\n    color: \"green\",\r\n    fontSize: \"12.8px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n}));\r\n\r\nconst RiskStratification = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [entryPointSetting, setEntryPointSetting] = useState([]);\r\n\r\n\r\n  const [enrollSetting, setEnrollSetting] = useState([]);\r\n  const [entryPoint, setEntryPoint] = useState([]);\r\n  const [entryPointCommunity, setEntryPointCommunity] = useState([]);\r\n  let riskCountQuestion = [];\r\n  const [kP, setKP] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n  let temp = { ...errors };\r\n  const [open, setOpen] = React.useState(false);\r\n  const toggle = () => setOpen(!open);\r\n  const [setting, setSetting] = useState([]);\r\n  const [riskCount, setRiskCount] = useState(0);\r\n  const [isPMTCTModality, setIsPMTCTModality] = useState(false);\r\n  const [showRiskAssessment, setShowRiskAssessment] = useState(false);\r\n  let communitySpokeList = [\"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\", \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\", \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\", \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\"]\r\n  const [codesets, setCodsets] = useState({})\r\n  const [spokeFacList, setSpokeFacList] = useState([]);\r\n  const [showHealthFacility, setShowHealthFacility] = useState(communitySpokeList.includes(props?.activePage?.activeObject?.riskStratificationResponseDto.testingSetting) ? true : false);\r\n\r\n  const [objValues, setObjValues] = useState({\r\n    age: props.patientAge,\r\n    dob: props.patientObj.dateOfBirth ? props.patientObj.dateOfBirth : props?.personInfopersonResponseDto?.dateOfBirth,\r\n    visitDate: \"\",\r\n    dateOfBirth: props.patientObj.dateOfBirth ? props.patientObj.dateOfBirth : props?.personInfopersonResponseDto?.dateOfBirth,\r\n    dateOfRegistration: \"\", //props.patientObj.dateOfRegistration,\r\n    isDateOfBirthEstimated: \"\", //props.patientObj.personResponseDto.isDateOfBirthEstimated\r\n    targetGroup: \"\",\r\n    testingSetting: \"\", //\r\n    modality: \"\", //\r\n    code: \"\",\r\n    id: \"\",\r\n    personId: props.patientObj.id,\r\n    riskAssessment: {},\r\n    entryPoint: \"\",\r\n    careProvider: \"\",\r\n    communityEntryPoint: \"\",\r\n    spokeFacility: \"\",\r\n    healthFacility: \"\"\r\n  });\r\n\r\n  const [riskAssessment, setRiskAssessment] = useState({\r\n    lastHivTestForceToHaveSex: \"\",\r\n    lastHivTestHadAnal: \"\",\r\n    lastHivTestInjectedDrugs: \"\",\r\n    whatWasTheResult: \"\",\r\n    lastHivTestDone: \"\",\r\n    diagnosedWithTb: \"\",\r\n    lastHivTestPainfulUrination: \"\",\r\n    lastHivTestBloodTransfusion: \"\",\r\n    lastHivTestVaginalOral: \"\",\r\n    lastHivTestBasedOnRequest: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    KP();\r\n\r\n    if (props.activePage.activeObject.riskStratificationResponseDto !== null) {\r\n\r\n      if (props.activePage.activeObject.riskStratificationResponseDto.entryPoint === \"HTS_ENTRY_POINT_COMMUNITY\") {\r\n        HTS_ENTRY_POINT_COMMUNITY()\r\n      } else if (props.activePage.activeObject.riskStratificationResponseDto.entryPoint === \"HTS_ENTRY_POINT_FACILITY\") {\r\n\r\n        HTS_ENTRY_POINT_FACILITY()\r\n      }\r\n      setObjValues(props.activePage.activeObject.riskStratificationResponseDto);\r\n\r\n      SettingModality(\r\n        props.activePage.activeObject.riskStratificationResponseDto\r\n          .testingSetting\r\n      );\r\n      setRiskAssessment(\r\n        props.activePage.activeObject.riskStratificationResponseDto &&\r\n        props.activePage.activeObject.riskStratificationResponseDto\r\n          .riskAssessment\r\n      );\r\n    }\r\n  }, [props.patientObj]);\r\n  //Get list of HIV STATUS ENROLLMENT\\\r\n\r\n\r\n\r\n\r\n  const getSpokeFaclityByHubSite = () => {\r\n    let facility = Cookies.get(\"facilityName\")\r\n    axios\r\n      .get(`${baseUrl}hts/spoke-site?hubSite=${facility}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSpokeFacList(response.data)\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n  //Get list of KP\r\n  const KP = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/TARGET_GROUP`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        if (props.patientObject.gender) {\r\n          let kpList = []\r\n          let gender = props.patientObject.gender.toLowerCase()\r\n          if (gender === \"female\") {\r\n\r\n            response.data.map((each, index) => {\r\n\r\n              if (each.code !== \"TARGET_GROUP_MSM\") {\r\n                kpList.push(each)\r\n              }\r\n\r\n            })\r\n\r\n          } else if (gender === \"male\") {\r\n            response.data.map((each, index) => {\r\n              if (each.code !== \"TARGET_GROUP_FSW\") {\r\n                kpList.push(each)\r\n              }\r\n\r\n            })\r\n          }\r\n\r\n          setKP(kpList)\r\n\r\n        } else {\r\n          setKP(response.data);\r\n\r\n        }\r\n\r\n\r\n      })\r\n      .catch((error) => {\r\n      });\r\n  };\r\n\r\n  //Set HTS menu registration\r\n  const getMenuLogic = () => {\r\n    props.setHideOtherMenu(false);\r\n  };\r\n\r\n  const HTS_ENTRY_POINT_FACILITY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/FACILITY_HTS_TEST_SETTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setEntryPointSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n\r\n  const HTS_ENTRY_POINT_COMMUNITY = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/COMMUNITY_HTS_TEST_SETTING\r\n `, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n\r\n        setEntryPointSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n  const checkPMTCTModality = (modality) => {\r\n    if (\r\n      setting === \"FACILITY_HTS_TEST_SETTING_ANC\" ||\r\n      setting === \"FACILITY_HTS_TEST_SETTING_L&D\" ||\r\n      setting === \"FACILITY_HTS_TEST_SETTING_POST_NATAL_WARD_BREASTFEEDING\"\r\n    ) {\r\n      setIsPMTCTModality(true);\r\n      setErrors({\r\n        ...errors,\r\n        lastHivTestDone: \"\",\r\n        whatWasTheResult: \"\",\r\n        lastHivTestVaginalOral: \"\",\r\n        lastHivTestBloodTransfusion: \"\",\r\n        lastHivTestPainfulUrination: \"\",\r\n        diagnosedWithTb: \"\",\r\n        lastHivTestInjectedDrugs: \"\",\r\n        lastHivTestHadAnal: \"\",\r\n        lastHivTestForceToHaveSex: \"\",\r\n      })\r\n      return true;\r\n    } else {\r\n\r\n      setIsPMTCTModality(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    if (e.target.name === \"testingSetting\" && e.target.value !== \"\") {\r\n      setErrors({ ...temp, spokeFacility: \"\", healthFacility: \"\" });\r\n\r\n      SettingModality(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n      let ans = checkPMTCTModality(e.target.value);\r\n\r\n      if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\") {\r\n        setShowHealthFacility(true)\r\n      } else {\r\n        setShowHealthFacility(false)\r\n\r\n      }\r\n\r\n      displayRiskAssessment(\r\n        riskAssessment.lastHivTestBasedOnRequest,\r\n        objValues.age,\r\n        ans\r\n      );\r\n\r\n\r\n      //get spoke sites\r\n      if (e.target.value === \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CONGREGATIONAL_SETTING\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_DELIVERY_HOMES\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_ORTHODOX\" || e.target.value === \"COMMUNITY_HTS_TEST_SETTING_TBA_RT-HCW\") {\r\n\r\n        getSpokeFaclityByHubSite();\r\n      }\r\n\r\n      //set risk count\r\n      if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_STANDALONE_HTS\" || e.target.value === \"FACILITY_HTS_TEST_SETTING_STANDALONE_HTS\") {\r\n        setRiskCount(1);\r\n      } else if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_CT\" || e.target.value === \"FACILITY_HTS_TEST_SETTING_CT\") {\r\n        setRiskCount(1);\r\n      } else if (e.target.value === \"FACILITY_HTS_TEST_SETTING_TB\") {\r\n        setRiskCount(1);\r\n      } else if (e.target.value === \"FACILITY_HTS_TEST_SETTING_STI\") {\r\n        setRiskCount(1);\r\n      } else if (e.target.value === \"COMMUNITY_HTS_TEST_SETTING_OUTREACH\") {\r\n        setRiskCount(1);\r\n      } else {\r\n        setRiskCount(0);\r\n      }\r\n    }\r\n\r\n    if (e.target.name === \"entryPoint\") {\r\n\r\n      if (e.target.value === \"HTS_ENTRY_POINT_COMMUNITY\") {\r\n        HTS_ENTRY_POINT_COMMUNITY()\r\n      } else if (e.target.value === \"HTS_ENTRY_POINT_FACILITY\") {\r\n        HTS_ENTRY_POINT_FACILITY()\r\n      }\r\n    }\r\n\r\n\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const displayRiskAssessment = (lastVisit, age, isPMTCTModalityValue) => {\r\n    let SecAge = age !== \"\" ? age : 0;\r\n    let ans;\r\n\r\n    // for the section to show\r\n    //  Conditions are : age > 15, riskAssessment.lastHivTestBasedOnRequest === \"false\" and PMTCT Modality === true\r\n  \r\n    if (lastVisit === \"false\") {\r\n      if (SecAge < 15 || isPMTCTModalityValue) {\r\n        setShowRiskAssessment(false);\r\n        ans = false;\r\n\r\n       // \r\n       if( age !== \"\"){\r\n        setRiskAssessment({...riskAssessment,\r\n          lastHivTestForceToHaveSex: \"\",\r\n          lastHivTestHadAnal: \"\",\r\n          lastHivTestInjectedDrugs: \"\",\r\n          whatWasTheResult: \"\",\r\n          lastHivTestDone: \"\",\r\n          diagnosedWithTb: \"\",\r\n          lastHivTestPainfulUrination: \"\",\r\n          lastHivTestBloodTransfusion: \"\",\r\n          lastHivTestVaginalOral: \"\",\r\n        })\r\n      }\r\n\r\n        // \r\n      } else if (SecAge > 15 ) {\r\n        setShowRiskAssessment(true);\r\n        ans = true;\r\n\r\n       \r\n      }else if(lastVisit === \"false\"){\r\n        setShowRiskAssessment(true);\r\n        ans = true;\r\n\r\n      } else {\r\n        setShowRiskAssessment(false);\r\n        ans = false;\r\n      }\r\n    } else {\r\n      setShowRiskAssessment(false);\r\n      ans = false;\r\n    }\r\n\r\n  };\r\n\r\n\r\n  function SettingModality(settingId) {\r\n    const setting = settingId;\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/${setting}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setSetting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n    temp.dateVisit = objValues.visitDate ? \"\" : \"This field is required.\";\r\n    temp.entryPoint = objValues.entryPoint ? \"\" : \"This field is required.\";\r\n    temp.testingSetting = objValues.testingSetting\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n    // temp.modality = objValues.modality ? \"\" : \"This field is required.\";\r\n    temp.lastHivTestBasedOnRequest = riskAssessment.lastHivTestBasedOnRequest\r\n      ? \"\"\r\n      : \"This field is required.\";\r\n\r\n\r\n\r\n    props.patientAge > 15 &&\r\n      (temp.targetGroup = objValues.targetGroup\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n\r\n    objValues.testingSetting === \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" &&\r\n      (temp.spokeFacility = objValues.spokeFacility\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n\r\n    showHealthFacility &&\r\n      (temp.healthFacility = objValues.healthFacility\r\n        ? \"\"\r\n        : \"This field is required.\");\r\n    //objValues.age>15 && riskAssessment.lastHivTestBasedOnRequest==='false' && riskAssessment.lastHivTestDone!==\"\" && riskAssessment.lastHivTestDone!=='Never' && (temp.whatWasTheResult = riskAssessment.whatWasTheResult ? \"\" : \"This field is required.\" )\r\n\r\n\r\n    //Risk Assement section\r\n    if (\r\n      objValues.age > 15 &&\r\n      riskAssessment.lastHivTestBasedOnRequest === \"false\" &&\r\n      showRiskAssessment\r\n    ) {\r\n      temp.lastHivTestDone = riskAssessment.lastHivTestDone\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n      riskAssessment.lastHivTestDone !== \"\" &&\r\n        riskAssessment.lastHivTestDone !== \"Never\" &&\r\n        (temp.whatWasTheResult = riskAssessment.whatWasTheResult\r\n          ? \"\"\r\n          : \"This field is required.\");\r\n\r\n      temp.lastHivTestVaginalOral = riskAssessment.lastHivTestVaginalOral\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestBloodTransfusion =\r\n        riskAssessment.lastHivTestBloodTransfusion\r\n          ? \"\"\r\n          : \"This field is required.\";\r\n\r\n      temp.lastHivTestPainfulUrination =\r\n        riskAssessment.lastHivTestPainfulUrination\r\n          ? \"\"\r\n          : \"This field is required.\";\r\n\r\n      temp.diagnosedWithTb = riskAssessment.diagnosedWithTb\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestInjectedDrugs = riskAssessment.lastHivTestInjectedDrugs\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestHadAnal = riskAssessment.lastHivTestHadAnal\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n\r\n      temp.lastHivTestForceToHaveSex = riskAssessment.lastHivTestForceToHaveSex\r\n        ? \"\"\r\n        : \"This field is required.\";\r\n    }\r\n    //targetGroup\r\n\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  // Getting the number count of riskAssessment True\r\n  const actualRiskCountTrue = Object.values(riskAssessment);\r\n  riskCountQuestion = actualRiskCountTrue.filter((x) => x === \"true\");\r\n\r\n\r\n\r\n  const handleInputChangeRiskAssessment = (e) => {\r\n \r\n    setErrors({ ...temp, [e.target.name]: \"\" });\r\n    setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\r\n  \r\n    if(e.target.name === \"lastHivTestBasedOnRequest\"){\r\n      displayRiskAssessment(e.target.value, objValues.age, isPMTCTModality);\r\n      setRiskAssessment({ ...riskAssessment, [e.target.name]: e.target.value });\r\n\r\n      }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    getMenuLogic(objValues);\r\n    let newModality = isPMTCTModality ? \"skip\" : \"fill\";\r\n\r\n\r\n    let latestForm = getNextForm(\r\n      \"risk_stratification\",\r\n      objValues.age,\r\n      newModality,\r\n      \"unknown\"\r\n    );\r\n\r\n    props.patientObj.targetGroup = objValues.targetGroup;\r\n    props.patientObj.testingSetting = objValues.testingSetting;\r\n    props.patientObj.dateVisit = objValues.visitDate;\r\n    props.patientObj.modality = objValues.modality;\r\n    props.patientObj.riskStratificationResponseDto = objValues;\r\n    //props.patientObj.riskAssessment =riskAssessment\r\n\r\n    objValues.riskAssessment = riskAssessment;\r\n    if (\r\n      props.patientObj.riskStratificationResponseDto &&\r\n      props.patientObj.riskStratificationResponseDto !== null &&\r\n      props.patientObj.personId !== \"\" &&\r\n      props.patientObj.riskStratificationResponseDto.code !== \"\"\r\n    ) {\r\n      if (validate()) {\r\n        setSaving(true);\r\n        handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n        props.setHideOtherMenu(false);\r\n        axios\r\n          .put(\r\n            `${baseUrl}risk-stratification/${props.patientObj.riskStratificationResponseDto.id}`,\r\n            objValues,\r\n            { headers: { Authorization: `Bearer ${token}` } }\r\n          )\r\n          .then((response) => {\r\n            setSaving(false);\r\n            props.patientObj.riskStratificationResponseDto = response.data;\r\n            objValues.code = response.data.code;\r\n            props.setExtra(objValues);\r\n            //toast.success(\"Risk stratification save succesfully!\");\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                  error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              toast.error(errorMessage, {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            } else {\r\n              toast.error(\"Something went wrong. Please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          });\r\n      }\r\n    } else {\r\n\r\n      if (validate()) {\r\n        setSaving(true);\r\n        objValues.dob = props.patientObj.dateOfBirth ? props.patientObj.dateOfBirth : props?.personInfopersonResponseDto?.dateOfBirth\r\n\r\n        axios\r\n          .post(`${baseUrl}risk-stratification`, objValues, {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          })\r\n          .then((response) => {\r\n            setSaving(false);\r\n            objValues.code = response.data.code;\r\n            props.setExtra(objValues);\r\n            handleItemClick(latestForm[0], latestForm[1]);\r\n            props.setHideOtherMenu(false);\r\n            //toast.success(\"Risk stratification save succesfully!\");\r\n          })\r\n          .catch((error) => {\r\n            setSaving(false);\r\n            if (error.response && error.response.data) {\r\n              let errorMessage =\r\n                error.response.data.apierror &&\r\n                  error.response.data.apierror.message !== \"\"\r\n                  ? error.response.data.apierror.message\r\n                  : \"Something went wrong, please try again\";\r\n              toast.error(errorMessage, {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            } else {\r\n              toast.error(\"Something went wrong. Please try again...\", {\r\n                position: toast.POSITION.BOTTOM_CENTER,\r\n              });\r\n            }\r\n          });\r\n      } else {\r\n        toast.error(\"All fields are required\", {\r\n          position: toast.POSITION.BOTTOM_CENTER,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const loadCodesets = (data) => {\r\n    setCodsets(data)\r\n    setEnrollSetting(data[\"TEST_SETTING\"]);\r\n    setEntryPoint(data[\"HTS_ENTRY_POINT\"])\r\n    \r\n  }\r\n\r\n  useGetCodesets({\r\n    codesetsKeys: [\r\n      \"TEST_SETTING\",\r\n      \"HTS_ENTRY_POINT\",\r\n      \"FACILITY_HTS_TEST_SETTING\",\r\n      \"COMMUNITY_HTS_TEST_SETTING\"\r\n    ],\r\n    patientId: props.patientObj?.id,\r\n    onSuccess: loadCodesets\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>RISK STRATIFICATION</h2>\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div\r\n                className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                style={{\r\n                  backgroundColor: \"#992E62\",\r\n                  width: \"125%\",\r\n                  height: \"35px\",\r\n                  color: \"#fff\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Modality\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Entry Point <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"entryPoint\"\r\n                      id=\"entryPoint\"\r\n                      value={objValues.entryPoint}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {entryPoint.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.entryPoint !== \"\" ? (\r\n                      <span className={classes.error}>{errors.entryPoint}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n               \r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <FormGroup>\r\n                    <Label for=\"\">\r\n                      Visit Date <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"date\" onKeyPress={(e) => { e.preventDefault() }}\r\n\r\n                      name=\"visitDate\"\r\n                      id=\"visitDate\"\r\n                      value={objValues.visitDate}\r\n                      onChange={handleInputChange}\r\n                      min=\"1929-12-31\"\r\n                      max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                      readOnly={props.activePage.actionType === \"view\"}\r\n                    />\r\n                    {errors.dateVisit !== \"\" ? (\r\n                      <span className={classes.error}>{errors.dateVisit}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Setting <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"testingSetting\"\r\n                      id=\"testingSetting\"\r\n                      value={objValues.testingSetting}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {entryPointSetting && entryPointSetting.map((value) =>\r\n\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n\r\n                      )\r\n                      }\r\n\r\n                      {/* <option value=\"TEST_SETTING_CT\">CT</option>\r\n                                        <option value=\"TEST_SETTING_TB\">TB</option>\r\n                                        <option value=\"TEST_SETTING_STI\">STI</option>\r\n                                        <option value=\"TEST_SETTING_OPD\">OPD</option>\r\n                                        <option value=\"TEST_SETTING_WARD\">WARD</option>\r\n                                        <option value=\"TEST_SETTING_STANDALONE_HTS\">STANDALONE HTS</option>\r\n                                        \r\n                                        <option value=\"TEST_SETTING_FP\">FP</option>\r\n                                        <option value=\"TEST_SETTING_OUTREACH\">OUTREACH</option>\r\n                                        <option value=\"TEST_SETTING_OTHERS\">OTHERS</option> */}\r\n                    </select>\r\n                    {errors.testingSetting !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.testingSetting}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {/* <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Modality <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"modality\"\r\n                      id=\"modality\"\r\n                      value={objValues.modality}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {setting.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.modality !== \"\" ? (\r\n                      <span className={classes.error}>{errors.modality}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div> */}\r\n\r\n                {objValues.testingSetting === \"FACILITY_HTS_TEST_SETTING_SPOKE_HEALTH_FACILITY\" && <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Spoke Health Facility <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n\r\n\r\n                    {spokeFacList.length > 0 ? <> <select\r\n                      className=\"form-control\"\r\n                      name=\"spokeFacility\"\r\n                      id=\"spokeFacility\"\r\n                      value={objValues.spokeFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                        textTransform: \"capitalize  !important\"\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {spokeFacList.map((value) => (\r\n                        <option key={value.id} value={value.spokeSite}\r\n                        >\r\n                          {value.spokeSite}\r\n                        </option>\r\n                      ))}\r\n                    </select></> : <Input\r\n                      type=\"text\"\r\n                      name=\"spokeFacility\"\r\n                      id=\"spokeFacility\"\r\n                      value={objValues.spokeFacility}\r\n                      //value={Math.floor(Math.random() * 1093328)}\r\n                      // onBlur={checkClientCode}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                    />}\r\n                    {errors.spokeFacility !== \"\" ? (\r\n                      <span className={classes.error}>{errors.spokeFacility}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>}\r\n\r\n\r\n                {showHealthFacility && <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Health Facility <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    {spokeFacList.length > 0 ? <select\r\n                      className=\"form-control\"\r\n                      name=\"healthFacility\"\r\n                      id=\"healthFacility\"\r\n                      value={objValues.healthFacility}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                        textTransform: \"capitalize  !important\"\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      {spokeFacList.map((value) => (\r\n                        <option key={value.id} value={value.spokeSite}\r\n                        >\r\n                          {value.spokeSite}\r\n                        </option>\r\n                      ))}\r\n                    </select> : <Input\r\n                      type=\"text\"\r\n                      name=\"healthFacility\"\r\n                      id=\"healthFacility\"\r\n                      value={objValues.healthFacility}\r\n                      //value={Math.floor(Math.random() * 1093328)}\r\n                      // onBlur={checkClientCode}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.25rem\",\r\n                      }}\r\n                    />}\r\n                    {errors.healthFacility !== \"\" ? (\r\n                      <span className={classes.error}>{errors.healthFacility}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>}\r\n\r\n                <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Target Group <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"targetGroup\"\r\n                      id=\"targetGroup\"\r\n                      onChange={handleInputChange}\r\n                      value={objValues.targetGroup}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n\r\n                      <option value={\"\"}></option>\r\n                      {kP.map((value) => (\r\n                        <option key={value.id} value={value.code}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {errors.targetGroup !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.targetGroup}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              </div>\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group  col-md-6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Is this HIV test based on a Clinician/Doctor/Health Care\r\n                      Provider's request ?{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"lastHivTestBasedOnRequest\"\r\n                      id=\"lastHivTestBasedOnRequest\"\r\n                      value={riskAssessment.lastHivTestBasedOnRequest}\r\n                      onChange={handleInputChangeRiskAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}>Select</option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.lastHivTestBasedOnRequest !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.lastHivTestBasedOnRequest}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n              </div>\r\n              <br />\r\n              {showRiskAssessment && (\r\n                <>\r\n                  <div\r\n                    className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                    style={{\r\n                      backgroundColor: \"#992E62\",\r\n                      width: \"125%\",\r\n                      height: \"35px\",\r\n                      color: \"#fff\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    HIV Risk Assessment (Last 3 months)\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        When was your last HIV test done?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestDone\"\r\n                        id=\"lastHivTestDone\"\r\n                        value={riskAssessment.lastHivTestDone}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"<1\"> {\"< 1\"} month</option>\r\n                        <option value=\"1-3 Months\">1-3 Months</option>\r\n                        <option value=\"4-6 Months\">4-6 Months</option>\r\n                        <option value=\">6 Months\"> {\">6\"} Months</option>\r\n                        <option value=\"Never\"> Never</option>\r\n                      </select>\r\n                      {errors.lastHivTestDone !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestDone}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  {riskAssessment.lastHivTestDone !== \"\" &&\r\n                    riskAssessment.lastHivTestDone !== \"Never\" && (\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            What was the result?{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"whatWasTheResult\"\r\n                            id=\"whatWasTheResult\"\r\n                            value={riskAssessment.whatWasTheResult}\r\n                            onChange={handleInputChangeRiskAssessment}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                            disabled={props.activePage.actionType === \"view\"}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"Positive\">Positive</option>\r\n                            <option value=\"Negative\">Negative</option>\r\n                          </select>\r\n                          {errors.whatWasTheResult !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.whatWasTheResult}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you had anal or vaginal\r\n                        or oral sex without a condom with someone who was HIV\r\n                        positive or unaware of their HIV status?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestVaginalOral\"\r\n                        id=\"lastHivTestVaginalOral\"\r\n                        value={riskAssessment.lastHivTestVaginalOral}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestVaginalOral !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestVaginalOral}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you had a blood or\r\n                        blood product transfusion?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestBloodTransfusion\"\r\n                        id=\"lastHivTestBloodTransfusion\"\r\n                        value={riskAssessment.lastHivTestBloodTransfusion}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestBloodTransfusion !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestBloodTransfusion}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you experienced painful\r\n                        urination, lower abdominal pain, vaginal or penile\r\n                        discharge, pain during sexual intercourse, thick,\r\n                        cloudy, or foul smelling discharge and/or small bumps\r\n                        or blisters near the mouth, penis, vagina, or anal\r\n                        areas? <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestPainfulUrination\"\r\n                        id=\"lastHivTestPainfulUrination\"\r\n                        value={riskAssessment.lastHivTestPainfulUrination}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestPainfulUrination !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestPainfulUrination}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Have you been diagnosed with TB or currently have any\r\n                        of the following symptoms : cough, fever, weight loss,\r\n                        night sweats? <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"diagnosedWithTb\"\r\n                        id=\"diagnosedWithTb\"\r\n                        value={riskAssessment.diagnosedWithTb}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.diagnosedWithTb !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.diagnosedWithTb}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you ever injected\r\n                        drugs, shared needles or other sharp objects with\r\n                        someone known to be HIV positive or who you didn’t\r\n                        know their HIV status?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestInjectedDrugs\"\r\n                        id=\"sexUnderInfluence\"\r\n                        value={riskAssessment.lastHivTestInjectedDrugs}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestInjectedDrugs !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestInjectedDrugs}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you had anal, oral or\r\n                        vaginal sex in exchange for money or other benefits?\r\n                        <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestHadAnal\"\r\n                        id=\"lastHivTestHadAnal\"\r\n                        value={riskAssessment.lastHivTestHadAnal}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestHadAnal !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestHadAnal}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Since your last HIV test, have you been forced to have\r\n                        sex? <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lastHivTestForceToHaveSex\"\r\n                        id=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                        value={riskAssessment.lastHivTestForceToHaveSex}\r\n                        onChange={handleInputChangeRiskAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.lastHivTestForceToHaveSex !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.lastHivTestForceToHaveSex}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <br />\r\n                </>\r\n              )}\r\n\r\n              <br />\r\n              <Message warning>\r\n                <h4> Risk assessment score </h4>\r\n                <b>\r\n                  Score :\r\n                  {riskCount +\r\n                    (props.patientAge > 15 ? riskCountQuestion.length : 0)}\r\n                </b>\r\n              </Message>\r\n              <hr />\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  {props.activePage.actionType === \"update\" && (\r\n                    <Button\r\n                      content=\"Update & Continue\"\r\n                      icon=\"right arrow\"\r\n                      labelPosition=\"right\"\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    />\r\n                  )}\r\n                  {props.activePage.actionType === \"view\" && (\r\n                    <Button\r\n                      content=\"Next\"\r\n                      icon=\"right arrow\"\r\n                      labelPosition=\"right\"\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    />\r\n                  )}\r\n\r\n                  {/* <Button content='Save ' type=\"submit\" icon='right arrow' labelPosition='right' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={handleSubmit} disabled={saving}/> */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n      <Modal\r\n        show={open}\r\n        toggle={toggle}\r\n        className=\"fade\"\r\n        size=\"sm\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Notification!\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <h4>Are you Sure of the Age entered?</h4>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            onClick={toggle}\r\n            style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n          >\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RiskStratification;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Others.js",["1225","1226","1227","1228","1229","1230","1231","1232","1233","1234"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\HivTestResult.js",["1235","1236","1237","1238","1239","1240","1241"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\PreTest.js",["1242","1243","1244","1245","1246","1247","1248","1249"],"import React, {useCallback, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {FormGroup, Label , CardBody, Spinner,Input,Form} from \"reactstrap\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport { checkPregnantPatient } from \"../../../../utility\";\r\nimport {Card, CardContent} from \"@material-ui/core\";\r\n// import AddIcon from \"@material-ui/icons/Add\";\r\n// import CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport {toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { getPregnantCodeSet } from \"../../../../utility\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\nimport {token, url as baseUrl } from \"../../../../api\";\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport {Label as LabelRibbon, Button, Message} from 'semantic-ui-react'\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { getNextForm } from \"../../../../utility\";\r\nimport { getCheckModality } from \"../../../../utility\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    form: {\r\n        width: \"100%\", // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20,\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 300,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        },\r\n        \"& .card-title\":{\r\n            color:'#fff',\r\n            fontWeight:'bold'\r\n        },\r\n        \"& .form-control\":{\r\n            borderRadius:'0.25rem',\r\n            height:'41px'\r\n        },\r\n        \"& .card-header:first-child\": {\r\n            borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\"\r\n        },\r\n        \"& .dropdown-toggle::after\": {\r\n            display: \" block !important\"\r\n        },\r\n        \"& select\":{\r\n            \"-webkit-appearance\": \"listbox !important\"\r\n        },\r\n        \"& p\":{\r\n            color:'red'\r\n        },\r\n        \"& label\":{\r\n            fontSize:'14px',\r\n            color:'#014d88',\r\n            fontWeight:'bold'\r\n        }\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.default,\r\n    },\r\n    inline: {\r\n        display: \"inline\",\r\n    },\r\n    error:{\r\n        color: '#f85032',\r\n        fontSize: '12.8px'\r\n    }\r\n}));\r\n\r\nconst BasicInfo = (props) => {\r\n    const classes = useStyles();\r\n    const patientID= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.id : \"\";\r\n    const sex= props.patientObj && props.patientObj.personResponseDto ? props.patientObj.personResponseDto.sex : \"\";\r\n    const clientId = props.patientObj && props.patientObj ? props.patientObj.id : \"\";\r\n    const [saving, setSaving] = useState(false);\r\n    const [errors, setErrors] = useState({});\r\n    let temp = { ...errors }\r\n    const [riskAssessmentPartner, setRiskAssessmentPartner]= useState(\r\n        {\r\n            sexPartnerHivPositive:\"\",\r\n            newDiagnosedHivlastThreeMonths:\"\",\r\n            currentlyArvForPmtct :\"\",\r\n            knowHivPositiveOnArv :\"\",\r\n            knowHivPositiveAfterLostToFollowUp:\"\",\r\n            uprotectedAnalSex  :\"\",\r\n        }\r\n    )\r\n    const [objValues, setObjValues]= useState(\r\n        {\r\n            htsClientId: clientId,\r\n            knowledgeAssessment: {},\r\n            personId: patientID,\r\n            riskAssessment: {},\r\n            stiScreening: {},\r\n            tbScreening: {},\r\n            sexPartnerRiskAssessment:{}\r\n        }\r\n    )\r\n    const [knowledgeAssessment, setKnowledgeAssessment] = useState({\r\n      previousTestedHIVNegative: \"\",\r\n      timeLastHIVNegativeTestResult: \"\",\r\n      clientPregnant:'',\r\n      clientInformHivTransRoutes: \"\",\r\n      clientInformRiskkHivTrans: \"\",\r\n      clientInformPreventingsHivTrans: \"\",\r\n      clientInformPossibleTestResult: \"\",\r\n      informConsentHivTest: \"\",\r\n    });\r\n \r\n    const [riskAssessment, setRiskAssessment]= useState(\r\n        {\r\n            everHadSexualIntercourse:\"\",\r\n            bloodtransInlastThreeMonths:\"\",\r\n            uprotectedSexWithCasualLastThreeMonths:\"\",\r\n            uprotectedSexWithRegularPartnerLastThreeMonths:\"\",\r\n            unprotectedVaginalSex:\"\",\r\n            uprotectedAnalSex:\"\",\r\n            stiLastThreeMonths:\"\",\r\n            sexUnderInfluence :\"\",\r\n            moreThanOneSexPartnerLastThreeMonths:\"\",\r\n            experiencePain:\"\",\r\n            haveSexWithoutCondom:\"\",\r\n            abuseDrug:\"\",\r\n            bloodTransfusion:\"\",\r\n            consistentWeightFeverNightCough:\"\",\r\n            soldPaidVaginalSex:\"\",\r\n        }\r\n    )\r\n    const [stiScreening, setStiScreening]= useState(\r\n        {\r\n            vaginalDischarge:\"\",\r\n            lowerAbdominalPains :\"\",\r\n            urethralDischarge :\"\",\r\n            complaintsOfScrotal:\"\",\r\n            complaintsGenitalSore  :\"\",\r\n\r\n        }\r\n    )\r\n    const [tbScreening, setTbScreening]= useState(\r\n        {\r\n            currentCough :\"\",\r\n            weightLoss  :\"\",\r\n            lymphadenopathy :\"\",\r\n            fever :\"\",\r\n            nightSweats :\"\",\r\n        }\r\n    )\r\n    useEffect(() => {\r\n\r\n        if(props.patientObj){\r\n            setKnowledgeAssessment(props.patientObj.knowledgeAssessment  && props.patientObj.knowledgeAssessment!==null ? props.patientObj.knowledgeAssessment : {})\r\n            setRiskAssessment(props.patientObj.riskAssessment  && props.patientObj.riskAssessment!==null ? props.patientObj.riskAssessment : {})\r\n            setRiskAssessmentPartner(props.patientObj.sexPartnerRiskAssessment && props.patientObj.sexPartnerRiskAssessment!==null ? props.patientObj.sexPartnerRiskAssessment : {})\r\n            setStiScreening(props.patientObj.stiScreening  && props.patientObj.stiScreening!==null? props.patientObj.stiScreening : {})\r\n            setTbScreening(props.patientObj.tbScreening  && props.patientObj.tbScreening!==null? props.patientObj.tbScreening : {})\r\n            //patientAge=calculate_age(moment(props.patientObj.personResponseDto.dateOfBirth).format(\"DD-MM-YYYY\"))\r\n           \r\n             if (props?.patientObj?.pregnant) {\r\n               checkPregnantPatient(props.patientObj.pregnant).then((res) => {\r\n                 console.log(\"my result\", res);\r\n                 setKnowledgeAssessment({\r\n                   ...knowledgeAssessment,\r\n                   clientPregnant: res ? \"true\" : \"false\",\r\n                 });\r\n               });\r\n             }\r\n            if(props.patientObj.riskStratificationResponseDto && Object.keys(props.patientObj.riskStratificationResponseDto.riskAssessment).length !== 0 && props.patientObj.riskAssessment===null){\r\n                //setRiskAssessment({...riskAssessment, ...props.patientObj.riskStratificationResponseDto.riskAssessment})\r\n                props.patientObj.riskStratificationResponseDto.riskAssessment.whatWasTheResult!==\"\" && props.patientObj.riskStratificationResponseDto.riskAssessment.whatWasTheResult==='Positive' ? knowledgeAssessment.previousTestedHIVNegative='false' :\r\n                knowledgeAssessment.previousTestedHIVNegative='true'\r\n            }else{\r\n                setRiskAssessment({...riskAssessment, ...props.patientObj.riskAssessment})\r\n            }\r\n            knowledgeAssessment.clientPregnant=props.patientObj.pregnant===73 ? \"true\" :\"\" ;\r\n        }\r\n    }, [props.patientObj]);\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        if(props.completed.includes(completedMenu)) {\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n        props.handleItemClick(page)\r\n    }\r\n\r\n    const handleInputChangeKnowledgeAssessment = e => {\r\n        //setErrors({...temp, [e.target.name]:\"\"})\r\n\r\n        setKnowledgeAssessment ({...knowledgeAssessment,  [e.target.name]: e.target.value});\r\n\r\n    }\r\n\r\n    const handleInputChangeRiskAssessment = e => {\r\n        setErrors({...temp, [e.target.name]:\"\"})\r\n        setRiskAssessment ({...riskAssessment,  [e.target.name]: e.target.value});\r\n    }\r\n    // Getting the number count of riskAssessment True\r\n    const actualRiskCountTrue=Object.values(riskAssessment)\r\n    const riskCount=actualRiskCountTrue.filter((x)=> x==='true')\r\n\r\n    const handleInputChangeRiskAssessmentPartner = e => {\r\n        //setErrors({...temp, [e.target.name]:\"\"})\r\n        setRiskAssessmentPartner ({...riskAssessmentPartner,  [e.target.name]: e.target.value});\r\n    }\r\n    // Getting the number count of sexPartRiskCount True\r\n    const actualSexPartRiskCountTrue=Object.values(riskAssessmentPartner)\r\n    const sexPartRiskCount=actualSexPartRiskCountTrue.filter((x)=> x==='true')\r\n\r\n    const handleInputChangeStiScreening = e => {\r\n        //setErrors({...temp, [e.target.name]:\"\"})\r\n        setStiScreening ({...stiScreening,  [e.target.name]: e.target.value});\r\n    }\r\n    // Getting the number count of STI True\r\n    const actualStiTrue=Object.values(stiScreening)\r\n    const stiCount=actualStiTrue.filter((x)=> x==='true')\r\n\r\n    const [tbCount, settbCount] = useState(0);\r\n    const handleInputChangeTbScreening = e => {\r\n        //setErrors({...temp, [e.target.name]:\"\"})\r\n\r\n        if(e.target.value==='true') {\r\n            const newcount = tbCount +1\r\n            if(newcount>=0 && newcount <=5){\r\n                settbCount(newcount)\r\n            }\r\n        }\r\n        if(e.target.value==='false') {\r\n            const newcount = tbCount -1\r\n           \r\n            if(newcount <=0 ){\r\n\r\n                settbCount(0)\r\n            }else{\r\n                settbCount(newcount)\r\n            }\r\n        }\r\n        setTbScreening ({...tbScreening,  [e.target.name]: e.target.value});\r\n    }\r\n     /*****  Validation  */\r\n     /*****  Validation  */\r\n     const validate = () => {\r\n        //HTS FORM VALIDATION\r\n           //temp.previousTestedHIVNegative = knowledgeAssessment.previousTestedHIVNegative ? \"\" : \"This field is required.\"\r\n        //    {knowledgeAssessment.previousTestedHIVNegative==='true' && ( temp.timeLastHIVNegativeTestResult = knowledgeAssessment.timeLastHIVNegativeTestResult ? \"\" : \"This field is required.\")}\r\n        //    temp.clientPregnant = knowledgeAssessment.clientPregnant ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformHivTransRoutes = knowledgeAssessment.clientInformHivTransRoutes ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformRiskkHivTrans = knowledgeAssessment.clientInformRiskkHivTrans ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformPreventingsHivTrans = knowledgeAssessment.clientInformPreventingsHivTrans ? \"\" : \"This field is required.\"\r\n        //    temp.clientInformPossibleTestResult = knowledgeAssessment.clientInformPossibleTestResult ? \"\" : \"This field is required.\"\r\n        //    temp.informConsentHivTest = knowledgeAssessment.informConsentHivTest ? \"\" : \"This field is required.\"\r\n\r\n        //     temp.currentCough = tbScreening.currentCough ? \"\" : \"This field is required.\"\r\n        //     temp.weightLoss = tbScreening.weightLoss ? \"\" : \"This field is required.\"\r\n        //     temp.lymphadenopathy = tbScreening.lymphadenopathy ? \"\" : \"This field is required.\"\r\n        //     temp.fever = tbScreening.fever ? \"\" : \"This field is required.\"\r\n        //     temp.nightSweats = tbScreening.nightSweats ? \"\" : \"This field is required.\"\r\n\r\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.vaginalDischarge = stiScreening.vaginalDischarge ? \"\" : \"This field is required.\" )\r\n            // props.patientObj && props.patientObj.personResponseDto.sex==='Female' && (temp.lowerAbdominalPains = stiScreening.lowerAbdominalPains ? \"\" : \"This field is required.\")\r\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.urethralDischarge = stiScreening.urethralDischarge ? \"\" : \"This field is required.\")\r\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsOfScrotal = stiScreening.complaintsOfScrotal ? \"\" : \"This field is required.\")\r\n            // props.patientObj.personResponseDto && props.patientObj.personResponseDto.sex==='Male' && (temp.complaintsGenitalSore = stiScreening.complaintsGenitalSore ? \"\" : \"This field is required.\")\r\n\r\n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.everHadSexualIntercourse = riskAssessment.everHadSexualIntercourse ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.bloodtransInlastThreeMonths = riskAssessment.bloodtransInlastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithRegularPartnerLastThreeMonths = riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.unprotectedVaginalSex = riskAssessment.unprotectedVaginalSex ? \"\" : \"This field is required.\")\r\n\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedAnalSex = riskAssessment.uprotectedAnalSex ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.sexUnderInfluence = riskAssessment.sexUnderInfluence ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.uprotectedSexWithCasualLastThreeMonths = riskAssessment.uprotectedSexWithCasualLastThreeMonths ? \"\" : \"This field is required.\")\r\n            // props.patientObj.targetGroup===\"TARGET_GROUP_GEN_POP\" && (temp.moreThanOneSexPartnerLastThreeMonths = riskAssessment.moreThanOneSexPartnerLastThreeMonths ? \"\" : \"This field is required.\")\r\n\r\n\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.experiencePain = riskAssessment.experiencePain ? \"\" : \"This field is required.\")\r\n\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.haveSexWithoutCondom = riskAssessment.haveSexWithoutCondom ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.abuseDrug = riskAssessment.abuseDrug ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.bloodTransfusion = riskAssessment.bloodTransfusion ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.consistentWeightFeverNightCough = riskAssessment.consistentWeightFeverNightCough ? \"\" : \"This field is required.\")\r\n            props.patientObj.targetGroup!==\"TARGET_GROUP_GEN_POP\" && (temp.soldPaidVaginalSex = riskAssessment.soldPaidVaginalSex ? \"\" : \"This field is required.\")\r\n\r\n            // temp.sexPartnerHivPositive = tbScreening.sexPartnerHivPositive ? \"\" : \"This field is required.\"\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.newDiagnosedHivlastThreeMonths = tbScreening.newDiagnosedHivlastThreeMonths ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.currentlyArvForPmtct = tbScreening.currentlyArvForPmtct ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && ( temp.knowHivPositiveOnArv = tbScreening.knowHivPositiveOnArv ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.knowHivPositiveAfterLostToFollowUp = tbScreening.knowHivPositiveAfterLostToFollowUp ? \"\" : \"This field is required.\")}\r\n            // {riskAssessmentPartner.sexPartnerHivPositive==='true' && (temp.uprotectedAnalSex = tbScreening.uprotectedAnalSex ? \"\" : \"This field is required.\")}\r\n\r\n            setErrors({ ...temp })\r\n        return Object.values(temp).every(x => x === \"\")\r\n    }\r\n    const handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n\r\n       let modality = getCheckModality(\r\n         props.patientObj?.riskStratificationResponseDto?.testingSetting\r\n       );    \r\n            let latestForm = getNextForm(\r\n              \"pre_test_counseling\",\r\n              props.patientAge,\r\n              modality,\r\n              \"unknown\"\r\n            );\r\n        if(validate()){\r\n            setSaving(true);\r\n            objValues.htsClientId= clientId\r\n            objValues.knowledgeAssessment= knowledgeAssessment\r\n            objValues.personId= patientID\r\n            objValues.riskAssessment= riskAssessment\r\n            objValues.stiScreening=stiScreening\r\n            objValues.tbScreening=tbScreening\r\n            objValues.sexPartnerRiskAssessment=riskAssessmentPartner\r\n            axios.put(`${baseUrl}hts/${clientId}/pre-test-counseling`,objValues,\r\n            { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n\r\n            )\r\n            .then(response => {\r\n                setSaving(false);\r\n                props.setPatientObj(response.data)\r\n                //toast.success(\"Risk Assesment successful\");\r\n                handleItemClick(latestForm[0], latestForm[1]);\r\n\r\n            })\r\n            .catch(error => {\r\n                setSaving(false);\r\n                if(error.response && error.response.data){\r\n                    let errorMessage = error.response.data.apierror && error.response.data.apierror.message!==\"\" ? error.response.data.apierror.message :  \"Something went wrong, please try again\";\r\n                    toast.error(errorMessage);\r\n                }\r\n                else{\r\n                    toast.error(\"Something went wrong. Please try again...\");\r\n                }\r\n            });\r\n        }else{\r\n            toast.error(\"All fields are required\",  {position: toast.POSITION.BOTTOM_CENTER});\r\n\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n      <>\r\n        <Card className={classes.root}>\r\n          <CardBody>\r\n            <h2>PRE TEST COUNSELING</h2>\r\n            <form>\r\n              <div className=\"row\">\r\n                <div\r\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                  style={{\r\n                    backgroundColor: \"rgb(0,181,173)\",\r\n                    width: \"125%\",\r\n                    height: \"35px\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                >\r\n                  Knowledge Assessment\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Previously tested HIV negative{\" \"}\r\n                      <span style={{ color: \"red\" }}> *</span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"previousTestedHIVNegative\"\r\n                      id=\"previousTestedHIVNegative\"\r\n                      value={knowledgeAssessment.previousTestedHIVNegative}\r\n                      onChange={handleInputChangeKnowledgeAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.previousTestedHIVNegative !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.previousTestedHIVNegative}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {knowledgeAssessment.previousTestedHIVNegative === \"true\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Time of last HIV Negative test Result</Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"timeLastHIVNegativeTestResult\"\r\n                        id=\"timeLastHIVNegativeTestResult\"\r\n                        value={\r\n                          knowledgeAssessment.timeLastHIVNegativeTestResult\r\n                        }\r\n                        onChange={handleInputChangeKnowledgeAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={props.activePage.actionType === \"view\"}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"<1\"> {\"< 1\"} month</option>\r\n                        <option value=\"1-3 Months\">1-3 Months</option>\r\n                        <option value=\"4-6 Months\">4-6 Months</option>\r\n                        <option value=\">6 Months\"> {\">6\"} Months</option>\r\n                        {knowledgeAssessment.previousTestedHIVNegative !==\r\n                          \"true\" && <option value=\"Never\"> Never</option>}\r\n                      </select>\r\n                      {errors.timeLastHIVNegativeTestResult !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.timeLastHIVNegativeTestResult}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n                {sex === \"Female\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>Client pregnant </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"clientPregnant\"\r\n                        id=\"clientPregnant\"\r\n                        value={knowledgeAssessment.clientPregnant}\r\n                        onChange={handleInputChangeKnowledgeAssessment}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                        disabled={true}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                      </select>\r\n                      {errors.clientPregnant !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.clientPregnant}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Client informed about HIV transmission routes{\" \"}\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"clientInformHivTransRoutes\"\r\n                      id=\"clientInformHivTransRoutes\"\r\n                      value={knowledgeAssessment.clientInformHivTransRoutes}\r\n                      onChange={handleInputChangeKnowledgeAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.clientInformHivTransRoutes !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.clientInformHivTransRoutes}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Client informed about risk factors for HIV transmission{\" \"}\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"clientInformRiskkHivTrans\"\r\n                      id=\"clientInformRiskkHivTrans\"\r\n                      value={knowledgeAssessment.clientInformRiskkHivTrans}\r\n                      onChange={handleInputChangeKnowledgeAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.clientInformRiskkHivTrans !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.clientInformRiskkHivTrans}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Client informed on preventing HIV transmission methods{\" \"}\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"clientInformPreventingsHivTrans\"\r\n                      id=\"clientInformPreventingsHivTrans\"\r\n                      value={\r\n                        knowledgeAssessment.clientInformPreventingsHivTrans\r\n                      }\r\n                      onChange={handleInputChangeKnowledgeAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.clientInformPreventingsHivTrans !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.clientInformPreventingsHivTrans}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Client informed about possible test results </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"clientInformPossibleTestResult\"\r\n                      id=\"clientInformPossibleTestResult\"\r\n                      value={knowledgeAssessment.clientInformPossibleTestResult}\r\n                      onChange={handleInputChangeKnowledgeAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.clientInformPossibleTestResult !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.clientInformPossibleTestResult}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Informed consent for HIV testing given </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"informConsentHivTest\"\r\n                      id=\"informConsentHivTest\"\r\n                      value={knowledgeAssessment.informConsentHivTest}\r\n                      onChange={handleInputChangeKnowledgeAssessment}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.informConsentHivTest !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.informConsentHivTest}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <hr />\r\n                <br />\r\n                <div\r\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                  style={{\r\n                    backgroundColor: \"#000\",\r\n                    width: \"125%\",\r\n                    height: \"35px\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                >\r\n                  Clinical TB screening\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Current cough </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"currentCough\"\r\n                      id=\"currentCough\"\r\n                      value={tbScreening.currentCough}\r\n                      onChange={handleInputChangeTbScreening}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.currentCough !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.currentCough}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Weight loss </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"weightLoss\"\r\n                      id=\"weightLoss\"\r\n                      value={tbScreening.weightLoss}\r\n                      onChange={handleInputChangeTbScreening}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.weightLoss !== \"\" ? (\r\n                      <span className={classes.error}>{errors.weightLoss}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Lymphadenopathy (swelling of the lymph nodes){\" \"}\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"lymphadenopathy\"\r\n                      id=\"lymphadenopathy\"\r\n                      value={tbScreening.lymphadenopathy}\r\n                      onChange={handleInputChangeTbScreening}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.lymphadenopathy !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.lymphadenopathy}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Fever </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"fever\"\r\n                      id=\"fever\"\r\n                      value={tbScreening.fever}\r\n                      onChange={handleInputChangeTbScreening}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.fever !== \"\" ? (\r\n                      <span className={classes.error}>{errors.fever}</span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>Night sweats</Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"nightSweats\"\r\n                      id=\"nightSweats\"\r\n                      value={tbScreening.nightSweats}\r\n                      onChange={handleInputChangeTbScreening}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.nightSweats !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.nightSweats}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                <Message warning>\r\n                  <h4>\r\n                    TB Screening score (calculate the sum of the TB assessment)\r\n                    If score {\">= 1\"}, test for Xper MTB RIF or refer to TB\r\n                    service{\" \"}\r\n                  </h4>\r\n                  <b>Score : {tbCount}</b>\r\n                </Message>\r\n                <hr />\r\n                <br />\r\n                {props.patientObj.targetGroup === \"TARGET_GROUP_GEN_POP\" && (\r\n                  <>\r\n                    <div\r\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                      style={{\r\n                        backgroundColor: \"#992E62\",\r\n                        width: \"125%\",\r\n                        height: \"35px\",\r\n                        color: \"#fff\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      HIV Risk Assessment (Last 3 months)\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Ever had sexual intercourse{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"everHadSexualIntercourse\"\r\n                          id=\"everHadSexualIntercourse\"\r\n                          value={riskAssessment.everHadSexualIntercourse}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.everHadSexualIntercourse !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.everHadSexualIntercourse}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Blood transfusion in last 3 months{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"bloodtransInlastThreeMonths\"\r\n                          id=\"bloodtransInlastThreeMonths\"\r\n                          value={riskAssessment.bloodtransInlastThreeMonths}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.bloodtransInlastThreeMonths !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.bloodtransInlastThreeMonths}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Unprotected sex with casual partner in last 3\r\n                              months <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"uprotectedSexWithCasualLastThreeMonths\"\r\n                              id=\"uprotectedSexWithCasualLastThreeMonths\"\r\n                              value={\r\n                                riskAssessment.uprotectedSexWithCasualLastThreeMonths\r\n                              }\r\n                              onChange={handleInputChangeRiskAssessment}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                            {errors.uprotectedSexWithCasualLastThreeMonths !==\r\n                            \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.uprotectedSexWithCasualLastThreeMonths}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Unprotected sex with regular partner in the last\r\n                              3months <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\r\n                              id=\"uprotectedSexWithRegularPartnerLastThreeMonths\"\r\n                              value={\r\n                                riskAssessment.uprotectedSexWithRegularPartnerLastThreeMonths\r\n                              }\r\n                              onChange={handleInputChangeRiskAssessment}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                            {errors.uprotectedSexWithRegularPartnerLastThreeMonths !==\r\n                            \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {\r\n                                  errors.uprotectedSexWithRegularPartnerLastThreeMonths\r\n                                }\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Unprotected vaginal sex{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"unprotectedVaginalSex\"\r\n                              id=\"unprotectedVaginalSex\"\r\n                              value={riskAssessment.unprotectedVaginalSex}\r\n                              onChange={handleInputChangeRiskAssessment}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                            {errors.unprotectedVaginalSex !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.unprotectedVaginalSex}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Unprotected Anal sex{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"uprotectedAnalSex\"\r\n                              id=\"uprotectedAnalSex\"\r\n                              value={riskAssessment.uprotectedAnalSex}\r\n                              onChange={handleInputChangeRiskAssessment}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                            {errors.uprotectedAnalSex !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.uprotectedAnalSex}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              STI in last 3 months{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"stiLastThreeMonths\"\r\n                              id=\"stiLastThreeMonths\"\r\n                              value={riskAssessment.stiLastThreeMonths}\r\n                              onChange={handleInputChangeRiskAssessment}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                            {errors.stiLastThreeMonths !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.stiLastThreeMonths}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              Sex under the influence of drugs or alcohol{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"sexUnderInfluence\"\r\n                              id=\"sexUnderInfluence\"\r\n                              value={riskAssessment.sexUnderInfluence}\r\n                              onChange={handleInputChangeRiskAssessment}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                            {errors.sexUnderInfluence !== \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.sexUnderInfluence}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    {riskAssessment.everHadSexualIntercourse !== \"\" &&\r\n                      riskAssessment.everHadSexualIntercourse === \"true\" && (\r\n                        <div className=\"form-group  col-md-4\">\r\n                          <FormGroup>\r\n                            <Label>\r\n                              More than 1 sex partner during last 3 months{\" \"}\r\n                              <span style={{ color: \"red\" }}> *</span>\r\n                            </Label>\r\n                            <select\r\n                              className=\"form-control\"\r\n                              name=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                              id=\"moreThanOneSexPartnerLastThreeMonths\"\r\n                              value={\r\n                                riskAssessment.moreThanOneSexPartnerLastThreeMonths\r\n                              }\r\n                              onChange={handleInputChangeRiskAssessment}\r\n                              style={{\r\n                                border: \"1px solid #014D88\",\r\n                                borderRadius: \"0.2rem\",\r\n                              }}\r\n                              disabled={props.activePage.actionType === \"view\"}\r\n                            >\r\n                              <option value={\"\"}></option>\r\n                              <option value=\"true\">Yes</option>\r\n                              <option value=\"false\">No</option>\r\n                            </select>\r\n                            {errors.moreThanOneSexPartnerLastThreeMonths !==\r\n                            \"\" ? (\r\n                              <span className={classes.error}>\r\n                                {errors.moreThanOneSexPartnerLastThreeMonths}\r\n                              </span>\r\n                            ) : (\r\n                              \"\"\r\n                            )}\r\n                          </FormGroup>\r\n                        </div>\r\n                      )}\r\n                    <Message warning>\r\n                      <h4> Risk assessment score (sum of all 7 answers)</h4>\r\n                      <b>Score : {riskCount.length}</b>\r\n                    </Message>\r\n                    <hr />\r\n                    <br />\r\n                  </>\r\n                )}\r\n                {props.patientObj.targetGroup !== \"TARGET_GROUP_GEN_POP\" && (\r\n                  <>\r\n                    <div\r\n                      className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                      style={{\r\n                        backgroundColor: \"#992E62\",\r\n                        width: \"125%\",\r\n                        height: \"35px\",\r\n                        color: \"#fff\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      HIV Risk Assessment (Last 3 months)\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Have you/your partner experienced lower abdominal\r\n                          pain, smelly discharge, blisters and wounds around\r\n                          you/partner vagina, penis anus or mouth?{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"experiencePain\"\r\n                          id=\"experiencePain\"\r\n                          value={riskAssessment.experiencePain}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.experiencePain !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.experiencePain}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Have you/partner had sex without a condom with someone\r\n                          of unknown HIV status, or you/partner raped by person\r\n                          with unknown HIV status?{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"haveSexWithoutCondom\"\r\n                          id=\"haveSexWithoutCondom\"\r\n                          value={riskAssessment.haveSexWithoutCondom}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.haveSexWithoutCondom !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.haveSexWithoutCondom}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Have you had a condom burst with your partner during\r\n                          sexual intercourse?{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>{\" \"}\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"haveCondomBurst\"\r\n                          id=\"haveCondomBurst\"\r\n                          value={riskAssessment.haveCondomBurst}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.haveCondomBurst !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.haveCondomBurst}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Do you/partner share needles/syringes, other sharp\r\n                          objects or used abuse drug substances of any kind?{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"abuseDrug\"\r\n                          id=\"abuseDrug\"\r\n                          value={riskAssessment.abuseDrug}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.abuseDrug !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.abuseDrug}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Have you/partner had any blood or blood product\r\n                          transfusion? <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"bloodTransfusion\"\r\n                          id=\"bloodTransfusion\"\r\n                          value={riskAssessment.bloodTransfusion}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.bloodTransfusion !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.bloodTransfusion}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Have you/partner experienced coughing, weight loss,\r\n                          fever, night sweats consistently?{\" \"}\r\n                          <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"consistentWeightFeverNightCough\"\r\n                          id=\"consistentWeightFeverNightCough\"\r\n                          value={riskAssessment.consistentWeightFeverNightCough}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.consistentWeightFeverNightCough !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.consistentWeightFeverNightCough}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Have you/partner paid or sold vaginal, anal or oral\r\n                          sex? <span style={{ color: \"red\" }}> *</span>\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"soldPaidVaginalSex\"\r\n                          id=\"soldPaidVaginalSex\"\r\n                          value={riskAssessment.soldPaidVaginalSex}\r\n                          onChange={handleInputChangeRiskAssessment}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.soldPaidVaginalSex !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.soldPaidVaginalSex}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <Message warning>\r\n                      <h4> Risk assessment score (sum of all 7 answers)</h4>\r\n                      <b>Score :{riskCount.length}</b>\r\n                    </Message>\r\n                    <hr />\r\n                    <br />\r\n                  </>\r\n                )}\r\n                <div\r\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                  style={{\r\n                    backgroundColor: \"#992E62\",\r\n                    width: \"125%\",\r\n                    height: \"35px\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                >\r\n                  Sex Partner Risk Assessment (Last 3 months)\r\n                </div>\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Have you had sex with a partner who is HIV positive?{\" \"}\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"sexPartnerHivPositive\"\r\n                      id=\"sexPartnerHivPositive\"\r\n                      value={riskAssessmentPartner.sexPartnerHivPositive}\r\n                      onChange={handleInputChangeRiskAssessmentPartner}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                      disabled={props.activePage.actionType === \"view\"}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      <option value=\"true\">Yes</option>\r\n                      <option value=\"false\">No</option>\r\n                    </select>\r\n                    {errors.sexPartnerHivPositive !== \"\" ? (\r\n                      <span className={classes.error}>\r\n                        {errors.sexPartnerHivPositive}\r\n                      </span>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </FormGroup>\r\n                </div>\r\n                {riskAssessmentPartner.sexPartnerHivPositive === \"true\" && (\r\n                  <>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Is sex partner newly diagnosed with HIV and started\r\n                          treatment less than 3-6 months ago?\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"newDiagnosedHivlastThreeMonths\"\r\n                          id=\"newDiagnosedHivlastThreeMonths\"\r\n                          value={\r\n                            riskAssessmentPartner.newDiagnosedHivlastThreeMonths\r\n                          }\r\n                          onChange={handleInputChangeRiskAssessmentPartner}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.newDiagnosedHivlastThreeMonths !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.newDiagnosedHivlastThreeMonths}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Is sex partner pregnant and currently receiving ARV\r\n                          for PMTCT?\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"currentlyArvForPmtct\"\r\n                          id=\"currentlyArvForPmtct\"\r\n                          value={riskAssessmentPartner.currentlyArvForPmtct}\r\n                          onChange={handleInputChangeRiskAssessmentPartner}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.currentlyArvForPmtct !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.currentlyArvForPmtct}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Known HIV positive partner on ARV with an unsurpressed\r\n                          VL\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"knowHivPositiveOnArv\"\r\n                          id=\"knowHivPositiveOnArv\"\r\n                          value={riskAssessmentPartner.knowHivPositiveOnArv}\r\n                          onChange={handleInputChangeRiskAssessmentPartner}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.knowHivPositiveOnArv !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.knowHivPositiveOnArv}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>\r\n                          Known HIV positive recently returned to treatment\r\n                          after being lost to follow up\r\n                        </Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"knowHivPositiveAfterLostToFollowUp\"\r\n                          id=\"knowHivPositiveAfterLostToFollowUp\"\r\n                          value={\r\n                            riskAssessmentPartner.knowHivPositiveAfterLostToFollowUp\r\n                          }\r\n                          onChange={handleInputChangeRiskAssessmentPartner}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.knowHivPositiveAfterLostToFollowUp !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.knowHivPositiveAfterLostToFollowUp}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                      <FormGroup>\r\n                        <Label>Unprotected Anal sex</Label>\r\n                        <select\r\n                          className=\"form-control\"\r\n                          name=\"uprotectedAnalSex\"\r\n                          id=\"uprotectedAnalSex\"\r\n                          value={riskAssessmentPartner.uprotectedAnalSex}\r\n                          onChange={handleInputChangeRiskAssessmentPartner}\r\n                          style={{\r\n                            border: \"1px solid #014D88\",\r\n                            borderRadius: \"0.2rem\",\r\n                          }}\r\n                          disabled={props.activePage.actionType === \"view\"}\r\n                        >\r\n                          <option value={\"\"}></option>\r\n                          <option value=\"true\">Yes</option>\r\n                          <option value=\"false\">No</option>\r\n                        </select>\r\n                        {errors.uprotectedAnalSex !== \"\" ? (\r\n                          <span className={classes.error}>\r\n                            {errors.uprotectedAnalSex}\r\n                          </span>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </FormGroup>\r\n                    </div>\r\n                  </>\r\n                )}\r\n                <Message warning>\r\n                  <h4>\r\n                    Sex Partner Risk Assessment score (sum of all 6 answers)\r\n                  </h4>\r\n                  <b>Score :{sexPartRiskCount.length}</b>\r\n                </Message>\r\n\r\n                <hr />\r\n                <br />\r\n                <div\r\n                  className=\"form-group  col-md-12 text-center pt-2 mb-4\"\r\n                  style={{\r\n                    backgroundColor: \"#014D88\",\r\n                    width: \"125%\",\r\n                    height: \"35px\",\r\n                    color: \"#fff\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                >\r\n                  Syndromic STI Screening\r\n                </div>\r\n                {props.patientObj &&\r\n                  props.patientObj.personResponseDto.sex === \"Female\" && (\r\n                    <>\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Complaints of vaginal discharge or burning when\r\n                            urinating?\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"vaginalDischarge\"\r\n                            id=\"vaginalDischarge\"\r\n                            value={stiScreening.vaginalDischarge}\r\n                            onChange={handleInputChangeStiScreening}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                            disabled={props.activePage.actionType === \"view\"}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.vaginalDischarge !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.vaginalDischarge}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Complaints of lower abdominal pains with or without\r\n                            vaginal discharge?\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"lowerAbdominalPains\"\r\n                            id=\"lowerAbdominalPains\"\r\n                            value={stiScreening.lowerAbdominalPains}\r\n                            onChange={handleInputChangeStiScreening}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                            disabled={props.activePage.actionType === \"view\"}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.lowerAbdominalPains !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.lowerAbdominalPains}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                {props.patientObj.personResponseDto &&\r\n                  props.patientObj.personResponseDto.sex === \"Male\" && (\r\n                    <>\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Complaints of urethral discharge or burning when\r\n                            urinating?\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"urethralDischarge\"\r\n                            id=\"urethralDischarge\"\r\n                            value={stiScreening.urethralDischarge}\r\n                            onChange={handleInputChangeStiScreening}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                            disabled={props.activePage.actionType === \"view\"}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.urethralDischarge !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.urethralDischarge}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>Complaints of scrotal swelling and pain</Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"complaintsOfScrotal\"\r\n                            id=\"complaintsOfScrotal\"\r\n                            value={stiScreening.complaintsOfScrotal}\r\n                            onChange={handleInputChangeStiScreening}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                            disabled={props.activePage.actionType === \"view\"}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.complaintsOfScrotal !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.complaintsOfScrotal}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                      <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label>\r\n                            Complaints of genital sore(s) or swollen inguinal\r\n                            lymph nodes with or without pains?\r\n                          </Label>\r\n                          <select\r\n                            className=\"form-control\"\r\n                            name=\"complaintsGenitalSore\"\r\n                            id=\"complaintsGenitalSore\"\r\n                            value={stiScreening.complaintsGenitalSore}\r\n                            onChange={handleInputChangeStiScreening}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                            disabled={props.activePage.actionType === \"view\"}\r\n                          >\r\n                            <option value={\"\"}></option>\r\n                            <option value=\"true\">Yes</option>\r\n                            <option value=\"false\">No</option>\r\n                          </select>\r\n                          {errors.complaintsGenitalSore !== \"\" ? (\r\n                            <span className={classes.error}>\r\n                              {errors.complaintsGenitalSore}\r\n                            </span>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </FormGroup>\r\n                      </div>\r\n                    </>\r\n                  )}\r\n                <Message warning>\r\n                  <h4>\r\n                    Calculate the sum of the STI screening. If {\">= \"}1, should\r\n                    be referred for STI test{\" \"}\r\n                  </h4>\r\n                  <b>Score :{stiCount.length}</b>\r\n                </Message>\r\n\r\n                {saving ? <Spinner /> : \"\"}\r\n                <br />\r\n                <div className=\"row\">\r\n                  <div className=\"form-group mb-3 col-md-12\">\r\n                    {/* <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('basic','basic')}/> */}\r\n                    <Button\r\n                      content=\"Save & Continue\"\r\n                      icon=\"right arrow\"\r\n                      labelPosition=\"right\"\r\n                      style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                      onClick={handleSubmit}\r\n                      disabled={saving}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </CardBody>\r\n        </Card>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default BasicInfo","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Index.js",["1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262","1263","1264","1265"],"import React, { useState } from 'react';\r\n\r\nimport { Col, Form,CardBody,  Row,CardTitle, CardText,\r\n   } from \"reactstrap\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Highcharts from 'highcharts';\r\n import HighchartsReact from 'highcharts-react-official';\r\nimport {NewlyEnrolledArtBySex} from './Highcharts/NewlyEnrolledArtBySex';\r\nimport {NewlyEnrolledArtByAge} from './Highcharts/NewlyEnrolledArtByAge';\r\nimport {ReceivingArtByAge}  from './Highcharts/ReceivingArtByAge';\r\nimport {ReceivingArtBySex} from './Highcharts/ReceivingArtBySex';\r\nimport { Progress } from 'reactstrap';\r\n\r\n\r\n// Load Highcharts modules\r\n//require(\"highcharts/modules/exporting\")(Highcharts);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    \"& .MuiTextField-root\": {\r\n        margin: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n},\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nconst SummaryView = (props) => {\r\n  const classes = useStyles();\r\n  const [chartValue, setChartValue] = useState(\"\");\r\n  const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n  const toggle = () => setDropdownOpen(!dropdownOpen);\r\n  const [state, setState] = useState({ activeItem: 'gamepad' })\r\n\r\n  const handleItemClick = (e, { name }) => setState({ activeItem: name })\r\n  const { activeItem } = state\r\n  const chartPage  = e => {\r\n\r\n    setChartValue(e)\r\n  }\r\n\r\n  //Menu Icon \r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div  spacing={5} style={{ padding: 20 }} >\r\n      <Row>\r\n        <Col md={12}>\r\n          {/* The second Column Card Layout  */}\r\n        <Row>\r\n                 \r\n                  <Col  lg={6} md={6} sm={12} xs={12} className=\"mb-4\">\r\n                  <Card><CardBody>\r\n                    <HighchartsReact highcharts={Highcharts} options={ReceivingArtBySex} />\r\n                  </CardBody></Card>\r\n                  </Col>\r\n                  <Col  lg={6} md={6} sm={12} xs={12} className=\"mb-4\">\r\n                  <Card><CardBody>\r\n                    <HighchartsReact highcharts={Highcharts} options={ReceivingArtByAge} />\r\n                  </CardBody></Card>\r\n                  </Col>\r\n              </Row>\r\n\r\n           \r\n        </Col>\r\n      </Row>\r\n\r\n      \r\n\r\n      \r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SummaryView;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtBySex.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Elicitation\\Index.js",["1266","1267","1268","1269"],"import React, {useState, Fragment } from \"react\";\r\n\r\nimport { Row, Col, Card, } from \"react-bootstrap\";\r\nimport AddIndexContact from './AddIndexContact';\r\nimport IndexContactList from './IndexContactList'\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport { Link } from 'react-router-dom';\r\n//import Button from '@material-ui/core/Button';\r\nimport {Label as LabelRibbon, Button} from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\n\r\nconst Elicitation = (props) => {\r\n    const [activePage, setActivePage]= useState('list')\r\n    const handleIClickPage =(activeItem)=>{\r\n        setActivePage(activeItem)\r\n    }\r\n    const handleItemClick =(page, completedMenu)=>{\r\n        props.handleItemClick(page)\r\n        if(props.completed.includes(completedMenu)) {\r\n\r\n        }else{\r\n            props.setCompleted([...props.completed, completedMenu])\r\n        }\r\n    }\r\n    const handleDone=(row, actionType)=>{\r\n\r\n      props.setActivePage({...props.activePage, activePage:\"home\", activeObject:row, actionType:actionType})\r\n    }\r\n    \r\n\r\n  return (\r\n    <Fragment>  \r\n     \r\n      <Row>       \r\n        <Col md={12}>\r\n            {activePage==='list' &&\r\n                (\r\n                    <IndexContactList activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>\r\n                )\r\n            }\r\n            {activePage==='add' && (\r\n                <AddIndexContact activePage={activePage} setActivePage={setActivePage} handleIClickPage={handleIClickPage} patientObj={props.patientObj}/>        \r\n            )}\r\n            <br />\r\n                <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-12\">\r\n                <Button content='Back' icon='left arrow' labelPosition='left' style={{backgroundColor:\"#992E62\", color:'#fff'}} onClick={()=>handleItemClick('recency-testing','recency-testing')}/>\r\n                <Button content='Done' icon='list' labelPosition='left' style={{backgroundColor:\"#014d88\", color:'#fff'}} onClick={()=>handleDone()}/>\r\n                \r\n                </div>\r\n                </div>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Elicitation;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\BasicInfo.js",["1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284"],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Elicitation\\AddIndexContact.js",["1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { FormGroup, Label, CardBody, Spinner, Input, Form } from \"reactstrap\";\r\nimport * as moment from \"moment\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { token, url as baseUrl } from \"../../../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\n// import {Link, useHistory, useLocation} from \"react-router-dom\";\r\n// import {TiArrowBack} from 'react-icons/ti'\r\n// import {token, url as baseUrl } from \"../../../api\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\n// import 'semantic-ui-css/semantic.min.css';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport PersonIcon from \"@mui/icons-material/Person\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 300,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n    \"& .card-title\": {\r\n      color: \"#fff\",\r\n      fontWeight: \"bold\",\r\n    },\r\n    \"& .form-control\": {\r\n      borderRadius: \"0.25rem\",\r\n      height: \"41px\",\r\n    },\r\n    \"& .card-header:first-child\": {\r\n      borderRadius: \"calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0\",\r\n    },\r\n    \"& .dropdown-toggle::after\": {\r\n      display: \" block !important\",\r\n    },\r\n    \"& select\": {\r\n      \"-webkit-appearance\": \"listbox !important\",\r\n    },\r\n    \"& p\": {\r\n      color: \"red\",\r\n    },\r\n    \"& label\": {\r\n      fontSize: \"14px\",\r\n      color: \"#014d88\",\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"12.8px\",\r\n  },\r\n}));\r\n\r\nconst AddIndexContact = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [saving, setSaving] = useState(false);\r\n  const [sexs, setSexs] = useState([]);\r\n  const [notificationContact, setNotificationContact] = useState([]);\r\n  const [ageDisabled, setAgeDisabled] = useState(true);\r\n  const [indexTesting, setIndexTesting] = useState([]);\r\n  const [consent, setConsent] = useState([]);\r\n  const [errors, setErrors] = useState({});\r\n  const [stateUnitOptions, setStateUnitOptions] = useState([]);\r\n  const [districtUnitOptions, setDistrictUnitOptions] = useState([]);\r\n  const [states, setStates] = useState([]);\r\n  const [provinces, setProvinces] = useState([]);\r\n  const [elicitedCount, setElicitedCount] = useState(0);\r\n\r\n  let temp = { ...errors };\r\n  const handleItemClick = (page, completedMenu) => {\r\n    props.handleItemClick(page);\r\n    if (props.completed.includes(completedMenu)) {\r\n    } else {\r\n      props.setCompleted([...props.completed, completedMenu]);\r\n    }\r\n  };\r\n  const [objValuesIndex, setObjValuesIndex] = useState({\r\n    htsClientId: null,\r\n    indexNotificationServicesElicitation: {},\r\n    personId: null,\r\n  });\r\n  const handleItemClickPage = (page) => {\r\n    props.handleIClickPage(page);\r\n  };\r\n  const [objValues, setObjValues] = useState({\r\n    firstName: \"\",\r\n    middleName: \"\",\r\n    lastName: \"\",\r\n    dob: \"\",\r\n    phoneNumber: \"\",\r\n    altPhoneNumber: \"\",\r\n    sex: \"\",\r\n    htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\r\n    physicalHurt: \"\",\r\n    threatenToHurt: \"\",\r\n    address: \"\",\r\n    hangOutSpots: \"\",\r\n    relativeToIndexClient: \"\",\r\n    currentlyLiveWithPartner: \"\",\r\n    partnerTestedPositive: \"\",\r\n    sexuallyUncomfortable: \"\",\r\n    notificationMethod: \"\",\r\n    datePartnerCameForTesting: \"\",\r\n    offeredIns: \"\",\r\n    acceptedIns: \"\",\r\n    elicited: \"\",\r\n    stateId: \"\",\r\n    lga: \"\",\r\n    dateTested: \"\",\r\n    currentHivStatus: \"\",\r\n  });\r\n  useEffect(() => {\r\n    getStates();\r\n    Sex();\r\n    NotificationContact();\r\n    IndexTesting();\r\n    Consent();\r\n  }, []);\r\n\r\n  function getStateByCountryId(getCountryId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getCountryId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setStates(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n\r\n  function getProvincesId(getStateId) {\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${getStateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  }\r\n\r\n  const getProvinces = (e) => {\r\n    const stateId = e.target.value;\r\n    setObjValues({ ...objValues, stateId: e.target.value });\r\n    axios\r\n      .get(\r\n        `${baseUrl}organisation-units/parent-organisation-units/${stateId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      )\r\n      .then((response) => {\r\n        setProvinces(\r\n          response.data.sort((x, y) => {\r\n            return x.id - y.id;\r\n          })\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n\r\n  const getStates = () => {\r\n    getStateByCountryId(\"1\");\r\n    setObjValues({ ...objValues, countryId: 1 });\r\n  };\r\n\r\n  //Get list of Genders from\r\n  const Sex = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/SEX`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        \r\n        setSexs(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  ///CONSENT\tYes\t\ten\tCONSENT\r\n  const Consent = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/CONSENT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setConsent(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  //Get list of IndexTesting\r\n  const IndexTesting = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/INDEX_TESTING`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setIndexTesting(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  const NotificationContact = () => {\r\n    axios\r\n      .get(`${baseUrl}application-codesets/v2/NOTIFICATION_CONTACT`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        \r\n        setNotificationContact(response.data);\r\n      })\r\n      .catch((error) => {\r\n        ;\r\n      });\r\n  };\r\n  const handleInputChange = (e) => {\r\n    //setErrors({...temp, [e.target.name]:\"\"})\r\n    if (e.target.name === \"firstName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    if (e.target.name === \"lastName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    if (e.target.name === \"middleName\" && e.target.value !== \"\") {\r\n      const name = alphabetOnly(e.target.value);\r\n      setObjValues({ ...objValues, [e.target.name]: name });\r\n    }\r\n    // if((e.target.name !=='maritalStatusId' && e.target.value!=='5' )){//logic for marital status\r\n    //     setHideNumChild(true)\r\n    // }else{\r\n    //     setHideNumChild(false)\r\n    // }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n  };\r\n  //Date of Birth and Age handle\r\n  const handleDobChange = (e) => {\r\n    if (e.target.value) {\r\n      const today = new Date();\r\n      const birthDate = new Date(e.target.value);\r\n      let age_now = today.getFullYear() - birthDate.getFullYear();\r\n      const m = today.getMonth() - birthDate.getMonth();\r\n      // if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      //     age_now--;\r\n      // }\r\n      objValues.age = age_now;\r\n\r\n      //setBasicInfo({...basicInfo, age: age_now});\r\n    } else {\r\n      setObjValues({ ...objValues, age: \"\" });\r\n    }\r\n    setObjValues({ ...objValues, [e.target.name]: e.target.value });\r\n\r\n    setObjValues({ ...objValues, dob: e.target.value });\r\n  };\r\n  const handleDateOfBirthChange = (e) => {\r\n    if (e.target.value == \"Actual\") {\r\n      objValues.isDateOfBirthEstimated = false;\r\n      setAgeDisabled(true);\r\n    } else if (e.target.value == \"Estimated\") {\r\n      objValues.isDateOfBirthEstimated = true;\r\n      setAgeDisabled(false);\r\n    }\r\n  };\r\n  const handleAgeChange = (e) => {\r\n    if (!ageDisabled && e.target.value) {\r\n      const currentDate = new Date();\r\n      currentDate.setDate(15);\r\n      currentDate.setMonth(5);\r\n      const estDob = moment(currentDate.toISOString());\r\n      const dobNew = estDob.add(e.target.value * -1, \"years\");\r\n      setObjValues({ ...objValues, dob: moment(dobNew).format(\"YYYY-MM-DD\") });\r\n      objValues.dob = moment(dobNew).format(\"YYYY-MM-DD\");\r\n    }\r\n    setObjValues({ ...objValues, age: e.target.value });\r\n  };\r\n  //End of Date of Birth and Age handling\r\n  const checkPhoneNumberBasic = (e, inputName) => {\r\n    const limit = 10;\r\n    setObjValues({ ...objValues, [inputName]: e.slice(0, limit) });\r\n  };\r\n  const alphabetOnly = (value) => {\r\n    const result = value.replace(/[^a-z]/gi, \"\");\r\n    return result;\r\n  };\r\n  const validate = () => {\r\n    //HTS FORM VALIDATION\r\n    //temp.acceptedIns = objValues.acceptedIns ? \"\" : \"This field is required.\"\r\n    temp.offeredIns = objValues.offeredIns ? \"\" : \"This field is required.\";\r\n\r\n    setErrors({ ...temp });\r\n    return Object.values(temp).every((x) => x == \"\");\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (validate()) {\r\n      setSaving(true);\r\n      objValues.isDateOfBirthEstimated =\r\n        objValues.isDateOfBirthEstimated == true ? 1 : 0;\r\n\r\n      axios\r\n        .post(`${baseUrl}index-elicitation`, objValues, {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        })\r\n        .then((response) => {\r\n          setSaving(false);\r\n          toast.success(\"Record save successfully\");\r\n\r\n          if (\r\n            objValues.offeredIns !== \"No\" &&\r\n            objValues.acceptedIns !== \"No\" &&\r\n            objValues.elicited !== \"No\"\r\n          ) {\r\n            setElicitedCount(elicitedCount + 1);\r\n            setObjValues({\r\n              firstName: \"\",\r\n              middleName: \"\",\r\n              lastName: \"\",\r\n              dob: \"\",\r\n              phoneNumber: \"\",\r\n              altPhoneNumber: \"\",\r\n              sex: \"\",\r\n              htsClientId: props && props.patientObj ? props.patientObj.id : \"\",\r\n              physicalHurt: \"\",\r\n              threatenToHurt: \"\",\r\n              address: \"\",\r\n              hangOutSpots: \"\",\r\n              relativeToIndexClient: \"\",\r\n              currentlyLiveWithPartner: \"\",\r\n              partnerTestedPositive: \"\",\r\n              sexuallyUncomfortable: \"\",\r\n              notificationMethod: \"\",\r\n              datePartnerCameForTesting: \"\",\r\n              age: \"\",\r\n              isDateOfBirthEstimated: false,\r\n              //offeredIns:\"\",\r\n              //acceptedIns:\"\",\r\n              //elicited: \"\",\r\n              stateId: \"\",\r\n              lga: \"\",\r\n              dateTested: \"\",\r\n              currentHivStatus: \"\",\r\n            });\r\n          }\r\n\r\n          // handleItemClickPage('list')\r\n        })\r\n        .catch((error) => {\r\n          setSaving(false);\r\n          if (error.response && error.response.data) {\r\n            let errorMessage =\r\n              error.response.data.apierror &&\r\n              error.response.data.apierror.message !== \"\"\r\n                ? error.response.data.apierror.message\r\n                : \"Something went wrong, please try again\";\r\n            toast.error(errorMessage);\r\n          } else {\r\n            toast.error(\"Something went wrong. Please try again...\");\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardBody>\r\n          <h2 style={{ color: \"#000\" }}>\r\n            Index Notification Services - Elicitation\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className=\" float-end  mr-2 mt-2\"\r\n              onClick={() => handleItemClickPage(\"list\")}\r\n              //startIcon={<FaUserPlus size=\"10\"/>}\r\n            >\r\n              <span style={{ textTransform: \"capitalize\" }}>\r\n                {\" \"}\r\n                Back To Client Index List\r\n              </span>\r\n            </Button>\r\n          </h2>\r\n          {elicitedCount === 0 ? (\r\n            \"\"\r\n          ) : (\r\n            <Badge badgeContent={elicitedCount} color=\"primary\">\r\n              Elicited Clients\r\n              <PersonIcon color=\"action\" />\r\n            </Badge>\r\n          )}\r\n          <br />\r\n          <br />\r\n          <form>\r\n            <div className=\"row\">\r\n              <div className=\"form-group  col-md-4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Offered INS ? <span style={{ color: \"red\" }}> *</span>\r\n                  </Label>\r\n                  <select\r\n                    className=\"form-control\"\r\n                    name=\"offeredIns\"\r\n                    id=\"offeredIns\"\r\n                    value={objValues.offeredIns}\r\n                    onChange={handleInputChange}\r\n                    style={{\r\n                      border: \"1px solid #014D88\",\r\n                      borderRadius: \"0.2rem\",\r\n                    }}\r\n                  >\r\n                    <option value={\"\"}></option>\r\n                    {consent.map((value) => (\r\n                      <option key={value.id} value={value.display}>\r\n                        {value.display}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                  {errors.offeredIns !== \"\" ? (\r\n                    <span className={classes.error}>{errors.offeredIns}</span>\r\n                  ) : (\r\n                    \"\"\r\n                  )}\r\n                </FormGroup>\r\n              </div>\r\n              {objValues.offeredIns !== \"\" && objValues.offeredIns !== \"No\" && (\r\n                <div className=\"form-group  col-md-4\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      Accepted INS ? <span style={{ color: \"red\" }}> </span>\r\n                    </Label>\r\n                    <select\r\n                      className=\"form-control\"\r\n                      name=\"acceptedIns\"\r\n                      id=\"acceptedIns\"\r\n                      value={objValues.acceptedIns}\r\n                      onChange={handleInputChange}\r\n                      style={{\r\n                        border: \"1px solid #014D88\",\r\n                        borderRadius: \"0.2rem\",\r\n                      }}\r\n                    >\r\n                      <option value={\"\"}></option>\r\n                      {consent.map((value) => (\r\n                        <option key={value.id} value={value.display}>\r\n                          {value.display}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </FormGroup>\r\n                </div>\r\n              )}\r\n              {objValues.acceptedIns !== \"\" &&\r\n                objValues.acceptedIns !== \"No\" && (\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Elicited ? <span style={{ color: \"red\" }}> </span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"elicited\"\r\n                        id=\"elicited\"\r\n                        value={objValues.elicited}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.display}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              {objValues.elicited !== \"\" && objValues.elicited !== \"No\" && (\r\n                <>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">First Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"firstName\"\r\n                        id=\"firstName\"\r\n                        value={objValues.firstName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Middle Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"middleName\"\r\n                        id=\"middleName\"\r\n                        value={objValues.middleName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Last Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"lastName\"\r\n                        id=\"lastName\"\r\n                        value={objValues.lastName}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-2 col-md-2\">\r\n                    <FormGroup>\r\n                      <Label>Date Of Birth</Label>\r\n                      <div className=\"radio\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            value=\"Actual\"\r\n                            name=\"dateOfBirth\"\r\n                            defaultChecked\r\n                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />{\" \"}\r\n                          Actual\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"radio\">\r\n                        <label>\r\n                          <input\r\n                            type=\"radio\"\r\n                            value=\"Estimated\"\r\n                            name=\"dateOfBirth\"\r\n                            onChange={(e) => handleDateOfBirthChange(e)}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.2rem\",\r\n                            }}\r\n                          />{\" \"}\r\n                          Estimated\r\n                        </label>\r\n                      </div>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                      <Label>Date</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"dob\"\r\n                        id=\"dob\"\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        value={objValues.dob}\r\n                        onChange={handleDobChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-3\">\r\n                    <FormGroup>\r\n                      <Label>Age</Label>\r\n                      <input\r\n                        className=\"form-control\"\r\n                        type=\"number\"\r\n                        name=\"age\"\r\n                        id=\"age\"\r\n                        value={objValues.age}\r\n                        disabled={ageDisabled}\r\n                        onChange={handleAgeChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Phone Number</Label>\r\n\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014D88\",\r\n                        }}\r\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                        country={\"ng\"}\r\n                        placeholder=\"(234)7099999999\"\r\n                        minLength={10}\r\n                        name=\"phoneNumber\"\r\n                        id=\"phoneNumber\"\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        value={objValues.phoneNumber}\r\n                        onChange={(e) => {\r\n                          checkPhoneNumberBasic(e, \"phoneNumber\");\r\n                        }}\r\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                      />\r\n                      {errors.phoneNumber !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.phoneNumber}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Alternative Phone Number</Label>\r\n                      <PhoneInput\r\n                        containerStyle={{\r\n                          width: \"100%\",\r\n                          border: \"1px solid #014D88\",\r\n                        }}\r\n                        inputStyle={{ width: \"100%\", borderRadius: \"0px\" }}\r\n                        country={\"ng\"}\r\n                        placeholder=\"(234)7099999999\"\r\n                        minLength={10}\r\n                        name=\"altPhoneNumber\"\r\n                        id=\"altPhoneNumber\"\r\n                        masks={{ ng: \"...-...-....\", at: \"(....) ...-....\" }}\r\n                        value={objValues.altPhoneNumber}\r\n                        onChange={(e) => {\r\n                          checkPhoneNumberBasic(e, \"altPhoneNumber\");\r\n                        }}\r\n                        //onChange={(e)=>{handleInputChangeBasic(e,'phoneNumber')}}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Sex <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sex\"\r\n                        id=\"sex\"\r\n                        value={objValues.sex}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {sexs.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        State <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"state\"\r\n                        id=\"state\"\r\n                        onChange={getProvinces}\r\n                        value={objValues.stateId}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {states.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.stateId !== \"\" ? (\r\n                        <span className={classes.error}>{errors.stateId}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        LGA <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"lga\"\r\n                        id=\"lga\"\r\n                        value={objValues.lga}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {provinces.map((value, index) => (\r\n                          <option key={index} value={value.id}>\r\n                            {value.name}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                      {errors.lga !== \"\" ? (\r\n                        <span className={classes.error}>{errors.lga}</span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">\r\n                        Address <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"address\"\r\n                        id=\"address\"\r\n                        value={objValues.address}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">Hang-out spots</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"hangOutSpots\"\r\n                        id=\"hangOutSpots\"\r\n                        value={objValues.hangOutSpots}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Relationship to Index Client{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"relativeToIndexClient\"\r\n                        id=\"relativeToIndexClient\"\r\n                        value={objValues.relativeToIndexClient}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {indexTesting.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Do you currently live with this partner?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"currentlyLiveWithPartner\"\r\n                        id=\"currentlyLiveWithPartner\"\r\n                        value={objValues.currentlyLiveWithPartner}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value={\"true\"}>Yes</option>\r\n                        <option value={\"false\"}>No</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        As far as you know, has this partner ever tested\r\n                        positive for HIV{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"partnerTestedPositive\"\r\n                        id=\"partnerTestedPositive\"\r\n                        value={objValues.partnerTestedPositive}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever hit, kick, slapped or otherwise\r\n                        physical hurt you?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"physicalHurt\"\r\n                        id=\"physicalHurt\"\r\n                        value={objValues.physicalHurt}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever threatened to hurt you?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"threatenToHurt\"\r\n                        id=\"threatenToHurt\"\r\n                        value={objValues.threatenToHurt}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Has this partner ever threatened to force you to do\r\n                        something sexually that made you uncomfortable ?{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"sexuallyUncomfortable\"\r\n                        id=\"sexuallyUncomfortable\"\r\n                        value={objValues.sexuallyUncomfortable}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {consent.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        Notification Method selected{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"notificationMethod\"\r\n                        id=\"notificationMethod\"\r\n                        value={objValues.notificationMethod}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        {notificationContact.map((value) => (\r\n                          <option key={value.id} value={value.id}>\r\n                            {value.display}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group mb-3 col-md-4\">\r\n                    <FormGroup>\r\n                      <Label for=\"\">\r\n                        If contract by which date will partner come for testing?\r\n                      </Label>\r\n                      <Input\r\n                        type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                        name=\"datePartnerCameForTesting\"\r\n                        id=\"datePartnerCameForTesting\"\r\n                        value={objValues.datePartnerCameForTesting}\r\n                        onChange={handleInputChange}\r\n                        max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.25rem\",\r\n                        }}\r\n                      />\r\n                      {errors.datePartnerComeForTesting !== \"\" ? (\r\n                        <span className={classes.error}>\r\n                          {errors.datePartnerComeForTesting}\r\n                        </span>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <div className=\"form-group  col-md-4\">\r\n                    <FormGroup>\r\n                      <Label>\r\n                        HIV Status of Index Client{\" \"}\r\n                        <span style={{ color: \"red\" }}> *</span>\r\n                      </Label>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        name=\"currentHivStatus\"\r\n                        id=\"currentHivStatus\"\r\n                        value={objValues.currentHivStatus}\r\n                        onChange={handleInputChange}\r\n                        style={{\r\n                          border: \"1px solid #014D88\",\r\n                          borderRadius: \"0.2rem\",\r\n                        }}\r\n                      >\r\n                        <option value={\"\"}></option>\r\n                        <option value=\"negative\">Negative</option>\r\n                        <option value=\"positive\">Positive</option>\r\n                        <option value=\"unknown\">Unknown</option>\r\n                      </select>\r\n                    </FormGroup>\r\n                  </div>\r\n                  {objValues.currentHivStatus !== \"\" &&\r\n                    objValues.currentHivStatus === \"positive\" && (\r\n                      <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"\">\r\n                            Date Tested?{\" \"}\r\n                            <span style={{ color: \"red\" }}> *</span>\r\n                          </Label>\r\n                          <Input\r\n                            type=\"date\"                       onKeyPress={(e)=>{e.preventDefault()}}\r\n\r\n                            name=\"dateTested\"\r\n                            id=\"dateTested\"\r\n                            value={objValues.dateTested}\r\n                            onChange={handleInputChange}\r\n                            max={moment(new Date()).format(\"YYYY-MM-DD\")}\r\n                            style={{\r\n                              border: \"1px solid #014D88\",\r\n                              borderRadius: \"0.25rem\",\r\n                            }}\r\n                          />\r\n                        </FormGroup>\r\n                      </div>\r\n                    )}\r\n                </>\r\n              )}\r\n\r\n              {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"form-group mb-3 col-md-6\">\r\n                  <Button\r\n                    content=\"Save\"\r\n                    icon=\"save\"\r\n                    labelPosition=\"left\"\r\n                    style={{ backgroundColor: \"#014d88\", color: \"#fff\" }}\r\n                    onClick={handleSubmit}\r\n                    disabled={saving}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </CardBody>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddIndexContact;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\NewRegistrationEnrollement\\Elicitation\\IndexContactList.js",["1302","1303","1304","1305","1306","1307","1308","1309"],"import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport axios from \"axios\";\r\nimport { url as baseUrl, token } from \"./../../../../../api\";\r\n//import { token as token } from \"./../../../api\";\r\nimport { forwardRef } from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Dropdown, Button, Menu, Icon } from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    margin: theme.spacing(20),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  cardBottom: {\r\n    marginBottom: 20,\r\n  },\r\n  Select: {\r\n    height: 45,\r\n    width: 350,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  error: {\r\n    color: \"#f85032\",\r\n    fontSize: \"11px\",\r\n  },\r\n  success: {\r\n    color: \"#4BB543 \",\r\n    fontSize: \"11px\",\r\n  },\r\n}));\r\n\r\nconst PatientnHistory = (props) => {\r\n  const [indexClientList, setIndexClientList] = useState([]);\r\n  //const [patientObj, setpatientObj] = useState([])\r\n  const patientId =\r\n    props.patientObj && props.patientObj.id ? props.patientObj.id : null;\r\n  //const [key, setKey] = useState('home');\r\n  \r\n  useEffect(() => {\r\n    patients();\r\n  }, []);\r\n  ///GET LIST OF Patients\r\n  async function patients() {\r\n    axios\r\n      .get(`${baseUrl}hts/${props.patientObj.id}/index-elicitation`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      })\r\n      .then((response) => {\r\n        setIndexClientList(response.data);\r\n      })\r\n      .catch((error) => {});\r\n  }\r\n  const handleItemClickPage = (page) => {\r\n    props.handleIClickPage(page);\r\n  };\r\n  const handleIEditIndex = (page, activePage) => {\r\n\r\n    //props.setActivePage({...props.activePage, activePage:\"activePage\", activeObject:row, actionType:actionType})\r\n    //props.handleIClickPage(page)\r\n  };\r\n\r\n  const calculate_age = (dob) => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n      age_now--;\r\n    }\r\n    if (age_now === 0) {\r\n      return m + \" month(s)\";\r\n    }\r\n    return age_now + \" year(s)\";\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className=\" float-end  mr-2 mt-2\"\r\n        onClick={() => handleItemClickPage(\"add\")}\r\n        //startIcon={<FaUserPlus size=\"10\"/>}\r\n      >\r\n        <span style={{ textTransform: \"capitalize\" }}>New Index Client </span>\r\n      </Button>\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <MaterialTable\r\n        icons={tableIcons}\r\n        title=\"List of  client contact\"\r\n        columns={[\r\n          { title: \"Name\", field: \"name\" },\r\n          { title: \"Age\", field: \"age\" },\r\n          { title: \"Phone Number\", field: \"phone\" },\r\n          { title: \"Adress\", field: \"address\" },\r\n          //{ title: \"Actions\", field: \"actions\", filtering: false },\r\n        ]}\r\n        data={indexClientList\r\n          .filter((b) => b.firstName !== \"\")\r\n          .map((row) => ({\r\n            name: row.firstName + \" \" + row.lastName,\r\n            age: calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n            phone: row.phoneNumber,\r\n            address: row.address,\r\n            actions: (\r\n              <>\r\n                {/* <Menu.Menu position='right'  >\r\n                            <Menu.Item >\r\n                                <Button style={{backgroundColor:'rgb(153,46,98)'}} primary>\r\n                                <Dropdown item text='Action'>\r\n\r\n                                <Dropdown.Menu style={{ marginTop:\"10px\", }}>\r\n                                \r\n                                <Dropdown.Item  \r\n                                //onClick={()=>handleIEditIndex(row, 'update')}\r\n                                >\r\n                                    <Icon name='edit' />Edit</Dropdown.Item>\r\n                                <Dropdown.Item  \r\n                                //onClick={()=>LoadDeletePage(row, 'delete')}\r\n                                > <Icon name='trash' /> Delete</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                                </Button>\r\n                            </Menu.Item>\r\n                        </Menu.Menu> */}\r\n              </>\r\n            ),\r\n          }))}\r\n        options={{\r\n          headerStyle: {\r\n            //backgroundColor: \"#9F9FA5\",\r\n            color: \"#000\",\r\n          },\r\n          searchFieldStyle: {\r\n            width: \"200%\",\r\n            margingLeft: \"250px\",\r\n          },\r\n          filtering: false,\r\n          exportButton: false,\r\n          searchFieldAlignment: \"left\",\r\n          pageSizeOptions: [10, 20, 100],\r\n          pageSize: 10,\r\n          debounceInterval: 400,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientnHistory;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtBySex.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\NewlyEnrolledArtByAge.js",["1310","1311"],"import Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\n\r\n\r\nexport const NewlyEnrolledArtByAge = {\r\n    chart: {\r\n        \r\n        plotBackgroundColor: null,\r\n        plotBorderWidth: null,\r\n        plotShadow: false,\r\n        type: 'pie'\r\n    },\r\n    title: {\r\n        text: 'Number of Adults and Children newly enrolled on ART '\r\n    },\r\n    tooltip: {\r\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\r\n    },\r\n    accessibility: {\r\n        point: {\r\n            valueSuffix: '%'\r\n        }\r\n    },\r\n    plotOptions: {\r\n        pie: {\r\n            allowPointSelect: true,\r\n            cursor: 'pointer',\r\n            dataLabels: {\r\n                enabled: true,\r\n                format: '<b>{point.name}</b>: {point.percentage:.1f} %',\r\n                connectorColor: 'black'\r\n            },\r\n            showInLegend: true\r\n        }\r\n    },\r\n    series: [{\r\n        name: 'Newly Enrolled on ART by Age',\r\n        data: [\r\n            \r\n            { name: '25 + ', sliced: true, y: 61.41 },\r\n            { name: '20-24 ', y: 11.84 },\r\n            { name: '10-19 ', y: 10.85 },\r\n            { name: '≤ 9 ', y: 4.67 },\r\n        ]\r\n    }]\r\n};","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Visualisation\\DashboardAnalytics\\SummaryView\\Highcharts\\ReceivingArtByAge.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\reuseables\\Loading.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\hooks\\useCheckedInPatientData.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\hooks\\usePermissions.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\reuseables\\CustomTable.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utils\\index.js",["1312","1313","1314","1315"],"export const calculate_age = (dob) => {\r\n  if (dob !== null && dob != \"\") {\r\n    //Check if the DOB is not null or empty\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob);\r\n\r\n    // get the day, month and year of today\r\n    let todayMonth = today.getMonth();\r\n    let todayYear = today.getFullYear();\r\n    let todayDate = today.getDate();\r\n\r\n    // get the day, month and year from date of birth\r\n    let birthDateMonth = birthDate.getMonth();\r\n    let birthDateYear = birthDate.getFullYear();\r\n    let birthdateDate = birthDate.getDate();\r\n\r\n    // substract birthdate year from today year  ie todayYear - birthdateYear which  will give  \"AssumedAge\" is the age  we assume the patient will clock this year\r\n\r\n    let assumedAge = todayYear - birthDateYear;\r\n    if (assumedAge > 0) {\r\n      //Checking the month to confirm if the age has been cloocked\r\n\r\n      let monthGap = todayMonth - birthDateMonth;\r\n\r\n      // If 'monthGap'> 0, the age has been clocked, 'monthGap'< 0, the age has not been clocked, 'monthGap'= 0, we are in the month then check date to confirm clocked age\r\n\r\n      if (monthGap > 0) {\r\n        return assumedAge + \" year(s)\";\r\n      } else if (monthGap < 0) {\r\n        let confirmedAge = assumedAge - 1;\r\n        return confirmedAge + \" year(s)\";\r\n      } else if (monthGap === 0) {\r\n        let dateGap = todayDate - birthdateDate;\r\n\r\n        if (dateGap > 0) {\r\n          return assumedAge + \" year(s)\";\r\n        } else if (dateGap < 0) {\r\n          let confirmedAge = assumedAge - 1;\r\n          return confirmedAge + \" year(s)\";\r\n        }\r\n      }\r\n    } else {\r\n      let monthGap = todayMonth - birthDateMonth;\r\n      let dateGap = todayDate - birthdateDate;\r\n\r\n      let monthOld = monthGap > 0 ? monthGap : 0;\r\n      let DayOld = dateGap > 0 ? dateGap : 0;\r\n\r\n      let result = monthOld ? monthOld + \"month(s)\" : DayOld + \"day(s)\";\r\n      return result;\r\n    }\r\n  }\r\n};\r\n\r\nexport const calculate_age_to_number = (dob) => {\r\n  if (dob !== null && dob != \"\") {\r\n    //Check if the DOB is not null or empty\r\n    const today = new Date();\r\n    const dateParts = dob.split(\"-\");\r\n    const birthDate = new Date(dob);\r\n\r\n    // get the day, month and year of today\r\n    let todayMonth = today.getMonth();\r\n    let todayYear = today.getFullYear();\r\n    let todayDate = today.getDate();\r\n\r\n    // get the day, month and year from date of birth\r\n    let birthDateMonth = birthDate.getMonth();\r\n    let birthDateYear = birthDate.getFullYear();\r\n    let birthdateDate = birthDate.getDate();\r\n\r\n    // substract birthdate year from today year  ie todayYear - birthdateYear which  will give  \"AssumedAge\" is the age  we assume the patient will clock this year\r\n\r\n    let assumedAge = todayYear - birthDateYear;\r\n    if (assumedAge > 0) {\r\n      //Checking the month to confirm if the age has been cloocked\r\n\r\n      let monthGap = todayMonth - birthDateMonth;\r\n\r\n      // If 'monthGap'> 0, the age has been clocked, 'monthGap'< 0, the age has not been clocked, 'monthGap'= 0, we are in the month then check date to confirm clocked age\r\n\r\n      if (monthGap > 0) {\r\n        return assumedAge;\r\n      } else if (monthGap < 0) {\r\n        let confirmedAge = assumedAge - 1;\r\n        return confirmedAge;\r\n      } else if (monthGap === 0) {\r\n        let dateGap = todayDate - birthdateDate;\r\n\r\n        if (dateGap > 0) {\r\n          return assumedAge;\r\n        } else if (dateGap < 0) {\r\n          let confirmedAge = assumedAge - 1;\r\n          return confirmedAge;\r\n        }\r\n      }\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n};\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utils\\localstorage.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Patient\\PatientVisits.js",["1316","1317","1318","1319","1320","1321"],"import { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport { usePermissions } from \"../../../hooks/usePermissions\";\r\nimport ButtonMui from \"@material-ui/core/Button\";\r\nimport axios from \"axios\";\r\nimport { forwardRef } from \"react\";\r\nimport { Grid, Paper, TextField,Button } from \"@mui/material\";\r\nimport DualListBox from \"react-dual-listbox\";\r\nimport { Modal, ModalBody, ModalHeader, FormGroup } from \"reactstrap\";\r\nimport moment from \"moment\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from \"semantic-ui-react\";\r\nimport CustomTable from \"../../../reuseables/CustomTable\";\r\nimport { token as token, url as baseUrl } from \"./../../../api\";\r\nimport { toast } from \"react-toastify\";\r\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\r\nimport { DesktopDateTimePicker } from \"@mui/x-date-pickers/DesktopDateTimePicker\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { useGetCodesets } from \"../../hooks/useGetCodesets.hook\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\n\r\nconst PatientVisits = (props) => {\r\n  const { patientObj } = props;\r\n  let history = useHistory();\r\n\r\n  \r\n  const { hasAnyPermission } = usePermissions();\r\n  const [checkinStatus, setCheckinStatus] = useState(false);\r\n  const [isCheckinModalOpen, setIsCheckinModalOpen] = useState(false);\r\n  const [isCheckoutModalOpen, setIsCheckoutModalOpen] = useState(false);\r\n  const [checkinDate, setCheckinDate] = useState(new Date());\r\n  const [checkoutDate, setCheckoutDate] = useState(new Date());\r\n  const [selectedServices, setSelectedServices] = useState({ selected: [] });\r\n  const [services, setServices] = useState([]);\r\n  const [patientVisits, setPatientVisits] = useState([]);\r\n  const [allServices, setAllServices] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showPPI, setShowPPI] = useState(true);\r\n  const [pregnancyStatusPregnant, setPregnancyStatusPregnant] = useState(null);\r\n\r\n\r\n\r\n\r\n  // Check if there is any visit not completed\r\nconst hasIncompleteVisit = patientVisits.some(visit => visit.status?.toLowerCase() !== 'pending');\r\n\r\n// Example: disable the \"Complete All\" button if any visit is not completed\r\nconst isCompleteButtonDisabled = hasIncompleteVisit;\r\n\r\n  const permissions = useMemo(\r\n    () => ({\r\n      view_patient: hasAnyPermission(\"view_patient\", \"all_permissions\"),\r\n    }),\r\n    [hasAnyPermission]\r\n  );\r\n\r\n  const filterPregnancyCodeId = (data) => {\r\n    const pregnancyCode = data?.filter?.(item =>\r\n      item.code === \"PREGANACY_STATUS_PREGNANT\"\r\n      )[0]?.id;\r\n      console.log(data, pregnancyCode)\r\n\r\n    setPregnancyStatusPregnant(pregnancyCode)\r\n  }\r\n\r\n  useGetCodesets({\r\n    codesetsKeys: [\"PREGANACY_STATUS\"],\r\n    patientId: props.patientInfo?.id || props?.patientInfo?.patientId,\r\n    onSuccess: filterPregnancyCodeId\r\n  })\r\n\r\n  \r\n\r\n  const fetchServices = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await axios.get(`${baseUrl}patient/post-service`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n  \r\n      const allServices = response.data;\r\n      setAllServices(allServices); // still store all, if needed\r\n  \r\n      // Determine the relevant service based on patient status\r\n      const patientStatus =  props.patientInfo?.hivTestResult?.toLowerCase();\r\n     \r\n      \r\n      let matchedService = [];\r\n\r\n      if (patientStatus === \"negative\" && props.patientInfo?.pregnant === (\"PREGANACY_STATUS_PREGNANT\" || pregnancyStatusPregnant || \"Pregnant\")) {\r\n        matchedService = allServices.filter(item =>\r\n          item.moduleServiceName.toLowerCase().includes(\"pmtct\")\r\n        );\r\n      } else if (patientStatus === \"positive\") {\r\n        matchedService = allServices.filter(item =>\r\n          item.moduleServiceName.toLowerCase().includes(\"hiv\")\r\n        );\r\n      }\r\n      else if (patientStatus === \"negative\" ) {\r\n        matchedService = allServices.filter(item =>\r\n          item.moduleServiceName.toLowerCase().includes(\"prep\")\r\n        );\r\n      }\r\n\r\n\r\n      setServices(\r\n        matchedService.map((service) => ({\r\n          label: service.moduleServiceName,\r\n          value: service.moduleServiceCode,\r\n        }))\r\n      );\r\n  \r\n    } catch (error) {\r\n      toast.error(\"Failed to fetch services\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [baseUrl, token, props?.patientInfo?.hivTestResult]);\r\n  \r\n\r\n  const fetchPatientVisits = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${baseUrl}patient/visit/visit-by-patient/${patientObj?.id || patientObj?.personId}`,\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n\r\n      const htsVisits = response?.data?.filter((visit) => visit?.service?.toLowerCase() === \"hts_code\" || visit?.service === \"HTS_code\")\r\n\r\n      setPatientVisits(htsVisits);\r\n      const hasActiveVisit = response.data.some(\r\n        (visit) => !visit.checkOutTime || visit.status === \"PENDING\"\r\n      );\r\n      setCheckinStatus(hasActiveVisit);\r\n      setCheckinStatus(hasActiveVisit);\r\n    } catch (error) {\r\n      toast.error(\"Failed to fetch patient visits\");\r\n    }\r\n  }, [patientObj.id]);\r\n\r\n  useEffect(() => {\r\n    fetchServices();\r\n    fetchPatientVisits();\r\n  }, [fetchServices, fetchPatientVisits]);\r\n\r\n\r\n  const handleCheckin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    await handleCheckout()\r\n\r\n    if (!selectedServices.selected.length) {\r\n      toast.error(\"Please select at least one service\");\r\n      return;\r\n    }\r\n\r\n    const serviceIds = selectedServices.selected\r\n      .map((code) => {\r\n        const service = allServices.find((s) => s.moduleServiceCode === code);\r\n        return service ? service.id : null;\r\n      })\r\n      .filter((id) => id !== null);\r\n\r\n    try {\r\n      await axios.post(\r\n        `${baseUrl}patient/visit/checkin`,\r\n        {\r\n          serviceIds,\r\n          visitDto: {\r\n            personId: patientObj.id,\r\n            checkInDate: moment(checkinDate).format(\"YYYY-MM-DD HH:mm\"),\r\n          },\r\n        },\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      toast.success(\"Check-in successful\");\r\n      setCheckinStatus(true);\r\n      setIsCheckinModalOpen(false);\r\n      fetchPatientVisits();\r\n    } catch (error) {\r\n      if (error.response?.data?.apierror) {\r\n        const apiError = error.response.data.apierror;\r\n        // Check if it's a service already exists error\r\n        if (apiError.message?.includes(\"VisitService already exist\")) {\r\n          toast.error(\r\n            \"Could not check-in. Patient already has an active visit\"\r\n          );\r\n        }\r\n        // Generic error message for other API errors\r\n        else {\r\n          toast.error(apiError.message || \"Check-in failed. Please try again.\");\r\n        }\r\n      }\r\n\r\n      console.error(\"Check-in error details:\", error.response?.data);\r\n    }\r\n  };\r\n\r\n  // const handleCheckout = async () => {\r\n  //   const activeVisit = patientVisits.find(\r\n  //     (visit) => visit.status === \"PENDING\"\r\n  //   );\r\n  //   if (!activeVisit) {\r\n  //     toast.error(\"No Pending visit found\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   try {\r\n  //     await axios.put(\r\n  //       `${baseUrl}patient/visit/checkout/${activeVisit.id}`,\r\n  //       { checkOutDate: moment(checkoutDate).format(\"YYYY-MM-DD HH:mm\") },\r\n  //       { headers: { Authorization: `Bearer ${token}` } }\r\n  //     );\r\n\r\n  //     toast.success(\"Check-out successful\");\r\n  //     setCheckinStatus(false);\r\n  //     setIsCheckoutModalOpen(false);\r\n  //     fetchPatientVisits();\r\n  //   } catch (error) {\r\n  //     toast.error(\"Check-out failed\");\r\n  //   }\r\n  // };\r\n\r\n  const handleCheckout = async () => {\r\n    const activeVisit = patientVisits.find(\r\n      (visit) => visit.status === \"PENDING\" && visit.service === \"HTS_code\"\r\n    );\r\n    if (!activeVisit) {\r\n      toast.error(\"No pending HTS visit found\");\r\n      return;\r\n    }\r\n    if (activeVisit.service !== \"HTS_code\") {\r\n      toast.error(\"Can only checkout HTS services\");\r\n      return;\r\n    }\r\n    try {\r\n      await axios.put(\r\n        `${baseUrl}patient/visit/checkout/${activeVisit.id}`,\r\n        { checkOutDate: moment(checkoutDate).format(\"YYYY-MM-DD HH:mm\") },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      toast.success(\"Check-out successful\")\r\n      setCheckinStatus(false);\r\n      setIsCheckoutModalOpen(false);\r\n      fetchPatientVisits();\r\n    } catch (error) {\r\n      toast.error(\"Check-out failed\");\r\n    }\r\n  };\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Check In Date\",\r\n        field: \"checkInDate\",\r\n        render: (rowData) =>\r\n          moment(rowData.checkInDate).format(\"YYYY-MM-DD HH:mm\"),\r\n      },\r\n      {\r\n        title: \"Check Out Date\",\r\n        field: \"checkOutDate\",\r\n        render: (rowData) =>\r\n          rowData.checkOutDate\r\n            ? moment(rowData.checkOutDate).format(\"YYYY-MM-DD HH:mm\")\r\n            : \"N/A\",\r\n      },\r\n      { title: \"Service\", field: \"service\" },\r\n      { title: \"Status\", field: \"status\" },\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-end mb-3\">\r\n\r\n      {patientVisits.some(\r\n          (visit) => visit.service === \"HTS_code\" && visit.status === \"PENDING\" && props?.patientInfo?.hivTestResult !== null\r\n        ) &&\r\n        // (\r\n        //   <>\r\n        //   {permissions.view_patient && checkinStatus && (\r\n        //     <ButtonMui\r\n        //       variant=\"contained\"\r\n        //       style={{\r\n        //         backgroundColor: \"green\",\r\n        //         color: \"white\",\r\n        //         marginLeft: \"10px\",\r\n        //       }}\r\n        //       onClick={() => setIsCheckoutModalOpen(true)}\r\n        //       disabled={isCompleteButtonDisabled}\r\n        //     >\r\n        //       Check Out\r\n        //     </ButtonMui>\r\n        //   )}\r\n        //   </>\r\n        //   ): \r\n            <>\r\n            {\r\n            permissions.view_patient && (\r\n              <ButtonMui\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setIsCheckinModalOpen(true)}\r\n              >\r\n                Post Patient\r\n              </ButtonMui>)\r\n            }\r\n            </>\r\n      }\r\n      </div>\r\n\r\n      <CustomTable\r\n        title=\"Patient Visits\"\r\n        columns={columns}\r\n        data={patientVisits}\r\n        icons={tableIcons}\r\n        showPPI={showPPI}\r\n        isLoading={isLoading}\r\n        onPPIChange={(e) => setShowPPI(!e.target.checked)}\r\n      />\r\n\r\n\r\n      <Modal\r\n        size=\"lg\"\r\n        style={{ maxWidth: \"900px\" }}\r\n        isOpen={isCheckinModalOpen}\r\n        toggle={() => setIsCheckinModalOpen(false)}\r\n      >\r\n        <ModalHeader toggle={() => setIsCheckinModalOpen(false)}>\r\n          <h5\r\n            style={{ fontWeight: \"bold\", fontSize: \"30px\", color: \"#992E62\" }}\r\n          >\r\n            Select Check-In Service\r\n          </h5>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <form onSubmit={handleCheckin}>\r\n            <Paper\r\n              style={{\r\n                display: \"grid\",\r\n                gridRowGap: \"20px\",\r\n                padding: \"20px\",\r\n                margin: \"10px 10px\",\r\n              }}\r\n            >\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <FormGroup style={{ width: \"100%\" }}>\r\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                      <Label\r\n                        for=\"post-services\"\r\n                        style={{\r\n                          color: \"#014d88\",\r\n                          fontWeight: \"bolder\",\r\n                          fontSize: \"18px\",\r\n                        }}\r\n                      >\r\n                        Check-In Date *\r\n                      </Label>\r\n                      <DesktopDateTimePicker\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            sx={{\r\n                              input: { fontSize: \"14px\" },\r\n                            }}\r\n                            fullWidth\r\n                          />\r\n                        )}\r\n                        value={checkinDate}\r\n                        onChange={(newValue) => {\r\n                          setCheckinDate(newValue);\r\n                        }}\r\n                        maxDate={new Date()}\r\n                        maxTime={new Date()}\r\n                        style={{ width: \"100%\" }}\r\n                      />\r\n                    </LocalizationProvider>\r\n                  </FormGroup>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormGroup>\r\n                    <Label\r\n                      for=\"post-services\"\r\n                      style={{\r\n                        color: \"#014d88\",\r\n                        fontWeight: \"bolder\",\r\n                        fontSize: \"18px\",\r\n                      }}\r\n                    >\r\n                      <h5\r\n                        style={{\r\n                          fontWeight: \"bold\",\r\n                          fontSize: \"30px\",\r\n                          color: \"#992E62\",\r\n                        }}\r\n                      >\r\n                        Check-In Service *\r\n                      </h5>\r\n                    </Label>\r\n                    <DualListBox\r\n                      options={services}\r\n                      onChange={(selected) =>\r\n                        setSelectedServices({ ...selectedServices, selected })\r\n                      }\r\n                      selected={selectedServices.selected}\r\n                    />\r\n                  </FormGroup>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </form>\r\n        </ModalBody>\r\n      </Modal>\r\n\r\n\r\n      {/* Checkout Modal */}\r\n      <Modal\r\n        isOpen={isCheckoutModalOpen}\r\n        toggle={() => setIsCheckoutModalOpen(false)}\r\n        size=\"lg\"\r\n      >\r\n        <ModalHeader toggle={() => setIsCheckoutModalOpen(false)}>\r\n          <h5 style={{ fontWeight: \"bold\", color: \"#014d88\" }}>Check Out</h5>\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Paper style={{ padding: \"20px\" }}>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={12}>\r\n                <FormGroup>\r\n                  <Label style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n                    Check-out Date *\r\n                  </Label>\r\n                  <input\r\n                    type=\"datetime-local\"\r\n                    className=\"form-control\"\r\n                    value={moment(checkoutDate).format(\"YYYY-MM-DDTHH:mm\")}\r\n                    onChange={(e) => setCheckoutDate(new Date(e.target.value))}\r\n                    max={moment().format(\"YYYY-MM-DDTHH:mm\")}\r\n                  />\r\n                </FormGroup>\r\n              </Grid>\r\n\r\n              <Grid item xs={12}>\r\n                <ButtonMui\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleCheckout}\r\n                >\r\n                  Confirm Check Out\r\n                </ButtonMui>\r\n                <ButtonMui\r\n                  variant=\"contained\"\r\n                  style={{\r\n                    backgroundColor: \"#992E62\",\r\n                    marginLeft: \"10px\",\r\n                    color: \"white\",\r\n                  }}\r\n                  onClick={() => setIsCheckoutModalOpen(false)}\r\n                >\r\n                  Cancel\r\n                </ButtonMui>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </ModalBody>\r\n      </Modal>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientVisits;\r\n\r\n// const PatientVisits = (props) => {\r\n//   const { patientObj } = props;\r\n//   const { hasAnyPermission } = usePermissions();\r\n//   const [checkinStatus, setCheckinStatus] = useState(false);\r\n  // const [isCheckinModalOpen, setIsCheckinModalOpen] = useState(false);\r\n//   const [isCheckoutModalOpen, setIsCheckoutModalOpen] = useState(false);\r\n//   const [checkinDate, setCheckinDate] = useState(new Date());\r\n//   const [checkoutDate, setCheckoutDate] = useState(new Date());\r\n//   const [selectedServices, setSelectedServices] = useState({ selected: [] });\r\n//   const [services, setServices] = useState([]);\r\n//   const [patientVisits, setPatientVisits] = useState([]);\r\n//   const [allServices, setAllServices] = useState([]);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n\r\n//   const permissions = useMemo(\r\n//     () => ({\r\n//       view_patient: hasAnyPermission(\"view_patient\", \"all_permissions\"),\r\n//     }),\r\n//     [hasAnyPermission]\r\n//   );\r\n\r\n//   const fetchServices = useCallback(async () => {\r\n//     setIsLoading(true);\r\n//     try {\r\n//       const response = await axios.get(`${baseUrl}patient/post-service`, {\r\n//         headers: { Authorization: `Bearer ${token}` },\r\n//       });\r\n\r\n//       setAllServices(response.data);\r\n//       setServices(\r\n//         response.data.map((service) => ({\r\n//           label: service.moduleServiceName,\r\n//           value: service.moduleServiceCode,\r\n//         }))\r\n//       );\r\n//     } catch (error) {\r\n//       toast.error(\"Failed to fetch services\");\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   }, []);\r\n\r\n// const fetchPatientVisits = useCallback(async () => {\r\n//   try {\r\n//     const response = await axios.get(\r\n//       `${baseUrl}patient/visit/visit-by-patient/${patientObj.id}`,\r\n//       { headers: { Authorization: `Bearer ${token}` } }\r\n//     );\r\n\r\n//     const hivVisits = response.data.filter(\r\n//       (visit) => visit.service === \"HIV_code\"\r\n//     );\r\n\r\n\r\n//     setPatientVisits(hivVisits);\r\n  \r\n\r\n//     // Update checkinStatus based on pending HIV visits\r\n//     const hasActiveHIVVisit = hivVisits.some(\r\n//       (visit) => visit.service === \"HIV_code\" && visit.status === \"PENDING\"\r\n//     );\r\n//     setCheckinStatus(hasActiveHIVVisit);\r\n//   } catch (error) {\r\n//     toast.error(\"Failed to fetch patient visits\");\r\n//   }\r\n// }, [patientObj.id]);\r\n\r\n//   useEffect(() => {\r\n//     fetchServices();\r\n//     fetchPatientVisits();\r\n//   }, [fetchServices, fetchPatientVisits]);\r\n\r\n  // const handleCheckin = async (e) => {\r\n  //   e.preventDefault();\r\n\r\n  //   if (!selectedServices.selected.length) {\r\n  //     toast.error(\"Please select at least one service\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   const serviceIds = selectedServices.selected\r\n  //     .map((code) => {\r\n  //       const service = allServices.find((s) => s.moduleServiceCode === code);\r\n  //       return service ? service.id : null;\r\n  //     })\r\n  //     .filter((id) => id !== null);\r\n\r\n  //   try {\r\n  //     await axios.post(\r\n  //       `${baseUrl}patient/visit/checkin`,\r\n  //       {\r\n  //         serviceIds,\r\n  //         visitDto: {\r\n  //           personId: patientObj.id,\r\n  //           checkInDate: moment(checkinDate).format(\"YYYY-MM-DD HH:mm\"),\r\n  //         },\r\n  //       },\r\n  //       {\r\n  //         headers: { Authorization: `Bearer ${token}` },\r\n  //       }\r\n  //     );\r\n\r\n  //     toast.success(\"Check-in successful\");\r\n  //     setCheckinStatus(true);\r\n  //     setIsCheckinModalOpen(false);\r\n  //     fetchPatientVisits();\r\n  //   } catch (error) {\r\n  //     if (error.response?.data?.apierror) {\r\n  //       const apiError = error.response.data.apierror;\r\n  //       // Check if it's a service already exists error\r\n  //       if (apiError.message?.includes(\"VisitService already exist\")) {\r\n  //         toast.error(\r\n  //           \"Could not check-in. Patient already has an active visit\"\r\n  //         );\r\n  //       }\r\n  //       // Generic error message for other API errors\r\n  //       else {\r\n  //         toast.error(apiError.message || \"Check-in failed. Please try again.\");\r\n  //       }\r\n  //     }\r\n\r\n  //     console.error(\"Check-in error details:\", error.response?.data);\r\n  //   }\r\n  // };\r\n\r\n//   const handleCheckout = async () => {\r\n//     const activeVisit = patientVisits.find(\r\n//       (visit) => visit.status === \"PENDING\" && visit.service === \"HIV_code\"\r\n//     );\r\n//     if (!activeVisit) {\r\n//       toast.error(\"No pending HIV visit found\");\r\n//       return;\r\n//     }\r\n//     if (activeVisit.service !== \"HIV_code\") {\r\n//       toast.error(\"Can only checkout HIV services\");\r\n//       return;\r\n//     }\r\n//     try {\r\n//       await axios.put(\r\n//         `${baseUrl}patient/visit/checkout/${activeVisit.id}`,\r\n//         { checkOutDate: moment(checkoutDate).format(\"YYYY-MM-DD HH:mm\") },\r\n//         { headers: { Authorization: `Bearer ${token}` } }\r\n//       );\r\n//       toast.success(\"Check-out successful\");\r\n//       setCheckinStatus(false);\r\n//       setIsCheckoutModalOpen(false);\r\n//       fetchPatientVisits();\r\n//     } catch (error) {\r\n//       toast.error(\"Check-out failed\");\r\n//     }\r\n//   };\r\n\r\n//   const columns = useMemo(\r\n//     () => [\r\n//       {\r\n//         title: \"Check In Date\",\r\n//         field: \"checkInDate\",\r\n//         render: (rowData) =>\r\n//           moment(rowData.checkInDate).format(\"YYYY-MM-DD HH:mm\"),\r\n//       },\r\n//       {\r\n//         title: \"Check Out Date\",\r\n//         field: \"checkOutDate\",\r\n//         render: (rowData) =>\r\n//           rowData.checkOutDate\r\n//             ? moment(rowData.checkOutDate).format(\"YYYY-MM-DD HH:mm\")\r\n//             : \"N/A\",\r\n//       },\r\n//       { title: \"Service\", field: \"service\" },\r\n//       { title: \"Status\", field: \"status\" },\r\n//     ],\r\n//     []\r\n//   );\r\n\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"d-flex justify-content-end mb-3\">\r\n        // {patientVisits.some(\r\n        //   (visit) => visit.service === \"HIV_code\" && visit.status === \"PENDING\"\r\n        // )\r\n//           ? // Check Out button only for pending HIV visits\r\n//             permissions.view_patient && (\r\n//               <ButtonMui\r\n//                 variant=\"contained\"\r\n//                 style={{\r\n//                   backgroundColor: \"green\",\r\n//                   color: \"white\",\r\n//                   marginLeft: \"10px\",\r\n//                 }}\r\n//                 onClick={() => setIsCheckoutModalOpen(true)}\r\n//               >\r\n//                 Check Out\r\n//               </ButtonMui>\r\n//             )\r\n//           : // Check In button when no pending HIV visits\r\n//             permissions.view_patient && (\r\n//               <ButtonMui\r\n//                 variant=\"contained\"\r\n//                 color=\"primary\"\r\n//                 onClick={() => setIsCheckinModalOpen(true)}\r\n//               >\r\n//                 Check In\r\n//               </ButtonMui>\r\n//             )}\r\n//       </div>\r\n\r\n//       <CustomTable\r\n//         title=\"Patient Visits\"\r\n//         columns={columns}\r\n//         data={patientVisits} \r\n//         icons={tableIcons}\r\n//         isLoading={isLoading}\r\n//         onPPIChange={(e) => setShowPPI(!e.target.checked)}\r\n//       />\r\n\r\n      // <Modal\r\n      //   size=\"lg\"\r\n      //   style={{ maxWidth: \"900px\" }}\r\n      //   isOpen={isCheckinModalOpen}\r\n      //   toggle={() => setIsCheckinModalOpen(false)}\r\n      // >\r\n      //   <ModalHeader toggle={() => setIsCheckinModalOpen(false)}>\r\n      //     <h5\r\n      //       style={{ fontWeight: \"bold\", fontSize: \"30px\", color: \"#992E62\" }}\r\n      //     >\r\n      //       Select Check-In Service\r\n      //     </h5>\r\n      //   </ModalHeader>\r\n      //   <ModalBody>\r\n      //     <form onSubmit={handleCheckin}>\r\n      //       <Paper\r\n      //         style={{\r\n      //           display: \"grid\",\r\n      //           gridRowGap: \"20px\",\r\n      //           padding: \"20px\",\r\n      //           margin: \"10px 10px\",\r\n      //         }}\r\n      //       >\r\n      //         <Grid container spacing={2}>\r\n      //           <Grid item xs={12}>\r\n      //             <FormGroup style={{ width: \"100%\" }}>\r\n      //               <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      //                 <Label\r\n      //                   for=\"post-services\"\r\n      //                   style={{\r\n      //                     color: \"#014d88\",\r\n      //                     fontWeight: \"bolder\",\r\n      //                     fontSize: \"18px\",\r\n      //                   }}\r\n      //                 >\r\n      //                   Check-In Date *\r\n      //                 </Label>\r\n      //                 <DesktopDateTimePicker\r\n      //                   renderInput={(params) => (\r\n      //                     <TextField\r\n      //                       {...params}\r\n      //                       sx={{\r\n      //                         input: { fontSize: \"14px\" },\r\n      //                       }}\r\n      //                       fullWidth\r\n      //                     />\r\n      //                   )}\r\n      //                   value={checkinDate}\r\n      //                   onChange={(newValue) => {\r\n      //                     setCheckinDate(newValue);\r\n      //                   }}\r\n      //                   maxDate={new Date()}\r\n      //                   maxTime={new Date()}\r\n      //                   style={{ width: \"100%\" }}\r\n      //                 />\r\n      //               </LocalizationProvider>\r\n      //             </FormGroup>\r\n      //           </Grid>\r\n      //           <Grid item xs={12}>\r\n      //             <FormGroup>\r\n      //               <Label\r\n      //                 for=\"post-services\"\r\n      //                 style={{\r\n      //                   color: \"#014d88\",\r\n      //                   fontWeight: \"bolder\",\r\n      //                   fontSize: \"18px\",\r\n      //                 }}\r\n      //               >\r\n      //                 <h5\r\n      //                   style={{\r\n      //                     fontWeight: \"bold\",\r\n      //                     fontSize: \"30px\",\r\n      //                     color: \"#992E62\",\r\n      //                   }}\r\n      //                 >\r\n      //                   Check-In Service *\r\n      //                 </h5>\r\n      //               </Label>\r\n      //               <DualListBox\r\n      //                 options={services}\r\n      //                 onChange={(selected) =>\r\n      //                   setSelectedServices({ ...selectedServices, selected })\r\n      //                 }\r\n      //                 selected={selectedServices.selected}\r\n      //               />\r\n      //             </FormGroup>\r\n      //           </Grid>\r\n      //         </Grid>\r\n      //         <Grid container spacing={2}>\r\n      //           <Grid item xs={12}>\r\n      //             <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n      //               Submit\r\n      //             </Button>\r\n      //           </Grid>\r\n      //         </Grid>\r\n      //       </Paper>\r\n      //     </form>\r\n      //   </ModalBody>\r\n      // </Modal>\r\n\r\n//       {/* Checkout Modal */}\r\n//       <Modal\r\n//         isOpen={isCheckoutModalOpen}\r\n//         toggle={() => setIsCheckoutModalOpen(false)}\r\n//         size=\"lg\"\r\n//       >\r\n//         <ModalHeader toggle={() => setIsCheckoutModalOpen(false)}>\r\n//           <h5 style={{ fontWeight: \"bold\", color: \"#014d88\" }}>Check Out</h5>\r\n//         </ModalHeader>\r\n//         <ModalBody>\r\n//           <Paper style={{ padding: \"20px\" }}>\r\n//             <Grid container spacing={3}>\r\n//               <Grid item xs={12}>\r\n//                 <FormGroup>\r\n//                   <Label style={{ color: \"#014d88\", fontWeight: \"bold\" }}>\r\n//                     Check-out Date *\r\n//                   </Label>\r\n//                   <input\r\n//                     type=\"datetime-local\"\r\n//                     className=\"form-control\"\r\n//                     value={moment(checkoutDate).format(\"YYYY-MM-DDTHH:mm\")}\r\n//                     onChange={(e) => setCheckoutDate(new Date(e.target.value))}\r\n//                     max={moment().format(\"YYYY-MM-DDTHH:mm\")}\r\n//                   />\r\n//                 </FormGroup>\r\n//               </Grid>\r\n\r\n//               <Grid item xs={12}>\r\n//                 <ButtonMui\r\n//                   variant=\"contained\"\r\n//                   color=\"primary\"\r\n//                   onClick={handleCheckout}\r\n//                 >\r\n//                   Confirm Check Out\r\n//                 </ButtonMui>\r\n//                 <ButtonMui\r\n//                   variant=\"contained\"\r\n//                   style={{\r\n//                     backgroundColor: \"#992E62\",\r\n//                     marginLeft: \"10px\",\r\n//                     color: \"white\",\r\n//                   }}\r\n//                   onClick={() => setIsCheckoutModalOpen(false)}\r\n//                 >\r\n//                   Cancel\r\n//                 </ButtonMui>\r\n//               </Grid>\r\n//             </Grid>\r\n//           </Paper>\r\n//         </ModalBody>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PatientVisits;\r\n","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\hooks\\usePatientData.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\PatientName.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\PatientActions.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\CheckinPatientsAlert.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\components\\Globals\\useLocalStorage.js",["1322","1323","1324"],"import { useEffect, useState, useMemo, memo } from \"react\";\r\n\r\nexport function useLocalStorage(key, initialValue) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {\r\n        // Get from local storage by key\r\n        const item = window.localStorage.getItem(key);\r\n        // Parse stored json or if none return initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        // If error also return initialValue\r\n        return initialValue;\r\n      }\r\n    });\r\n  \r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = value => {\r\n      try {\r\n        // Allow value to be a function so we have same API as useState\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value;\r\n        // Save state\r\n        setStoredValue(valueToStore);\r\n        // Save to local storage\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      } catch (error) {\r\n        // A more advanced implementation would handle the error case\r\n    \r\n      }\r\n    };\r\n  \r\n    return [storedValue, setValue];\r\n  }","C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\utils\\queryClient.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\hooks\\useGetCodesets.hook.js",[],"C:\\Users\\user\\Desktop\\Projects\\DataFi\\HTS\\src\\main\\webapp\\jsx\\services\\getCodesets.service.js",[],{"ruleId":"1325","severity":1,"message":"1326","line":4,"column":10,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":23},{"ruleId":"1329","replacedBy":"1330"},{"ruleId":"1331","replacedBy":"1332"},{"ruleId":"1325","severity":1,"message":"1333","line":2,"column":26,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1334","line":3,"column":8,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1336","line":3,"column":8,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1337","line":6,"column":26,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":31},{"ruleId":"1325","severity":1,"message":"1338","line":9,"column":10,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1339","line":13,"column":22,"nodeType":"1327","messageId":"1328","endLine":13,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1340","line":23,"column":8,"nodeType":"1327","messageId":"1328","endLine":23,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1341","line":24,"column":21,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1342","line":37,"column":7,"nodeType":"1327","messageId":"1328","endLine":37,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1343","line":53,"column":10,"nodeType":"1327","messageId":"1328","endLine":53,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1344","line":53,"column":18,"nodeType":"1327","messageId":"1328","endLine":53,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1345","line":58,"column":10,"nodeType":"1327","messageId":"1328","endLine":58,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1346","line":61,"column":26,"nodeType":"1327","messageId":"1328","endLine":61,"endColumn":43},{"ruleId":"1325","severity":1,"message":"1347","line":62,"column":21,"nodeType":"1327","messageId":"1328","endLine":62,"endColumn":33},{"ruleId":"1348","severity":1,"message":"1349","line":290,"column":6,"nodeType":"1350","endLine":290,"endColumn":8,"suggestions":"1351"},{"ruleId":"1352","severity":1,"message":"1353","line":626,"column":34,"nodeType":"1354","messageId":"1355","endLine":626,"endColumn":36},{"ruleId":"1352","severity":1,"message":"1353","line":647,"column":39,"nodeType":"1354","messageId":"1355","endLine":647,"endColumn":41},{"ruleId":"1329","replacedBy":"1356"},{"ruleId":"1331","replacedBy":"1357"},{"ruleId":"1325","severity":1,"message":"1358","line":10,"column":10,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1359","line":10,"column":15,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1361","line":2,"column":8,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1362","line":2,"column":25,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1363","line":5,"column":10,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":20},{"ruleId":"1364","severity":1,"message":"1365","line":3,"column":10,"nodeType":"1366","messageId":"1367","endLine":3,"endColumn":24,"fix":"1368"},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":26},{"ruleId":"1364","severity":1,"message":"1365","line":3,"column":10,"nodeType":"1366","messageId":"1367","endLine":3,"endColumn":24,"fix":"1369"},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":38,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1370","line":2,"column":8,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1371","line":4,"column":38,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1372","line":4,"column":47,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":52},{"ruleId":"1325","severity":1,"message":"1373","line":4,"column":54,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1374","line":5,"column":13,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1375","line":8,"column":8,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1337","line":9,"column":10,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1376","line":12,"column":10,"nodeType":"1327","messageId":"1328","endLine":12,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1377","line":12,"column":24,"nodeType":"1327","messageId":"1328","endLine":12,"endColumn":31},{"ruleId":"1325","severity":1,"message":"1378","line":15,"column":40,"nodeType":"1327","messageId":"1328","endLine":15,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1379","line":16,"column":10,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1344","line":92,"column":18,"nodeType":"1327","messageId":"1328","endLine":92,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1380","line":114,"column":7,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":15},{"ruleId":"1352","severity":1,"message":"1353","line":125,"column":45,"nodeType":"1354","messageId":"1355","endLine":125,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1381","line":36,"column":10,"nodeType":"1327","messageId":"1328","endLine":36,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1382","line":116,"column":33,"nodeType":"1327","messageId":"1328","endLine":116,"endColumn":57},{"ruleId":"1352","severity":1,"message":"1353","line":177,"column":26,"nodeType":"1354","messageId":"1355","endLine":177,"endColumn":28},{"ruleId":"1348","severity":1,"message":"1383","line":349,"column":6,"nodeType":"1350","endLine":349,"endColumn":8,"suggestions":"1384"},{"ruleId":"1325","severity":1,"message":"1385","line":67,"column":10,"nodeType":"1327","messageId":"1328","endLine":67,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1386","line":67,"column":21,"nodeType":"1327","messageId":"1328","endLine":67,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1387","line":70,"column":10,"nodeType":"1327","messageId":"1328","endLine":70,"endColumn":20},{"ruleId":"1348","severity":1,"message":"1388","line":74,"column":6,"nodeType":"1350","endLine":74,"endColumn":8,"suggestions":"1389"},{"ruleId":"1352","severity":1,"message":"1353","line":109,"column":25,"nodeType":"1354","messageId":"1355","endLine":109,"endColumn":27},{"ruleId":"1352","severity":1,"message":"1353","line":116,"column":25,"nodeType":"1354","messageId":"1355","endLine":116,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1390","line":4,"column":15,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1391","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1375","line":10,"column":8,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1392","line":13,"column":9,"nodeType":"1327","messageId":"1328","endLine":13,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1338","line":16,"column":9,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1393","line":16,"column":27,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1394","line":24,"column":8,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1395","line":107,"column":11,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1396","line":114,"column":26,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1397","line":119,"column":12,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1398","line":119,"column":43,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":72},{"ruleId":"1325","severity":1,"message":"1399","line":120,"column":12,"nodeType":"1327","messageId":"1328","endLine":120,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1400","line":120,"column":32,"nodeType":"1327","messageId":"1328","endLine":120,"endColumn":53},{"ruleId":"1325","severity":1,"message":"1401","line":121,"column":12,"nodeType":"1327","messageId":"1328","endLine":121,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1402","line":122,"column":12,"nodeType":"1327","messageId":"1328","endLine":122,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1403","line":122,"column":31,"nodeType":"1327","messageId":"1328","endLine":122,"endColumn":51},{"ruleId":"1325","severity":1,"message":"1404","line":219,"column":11,"nodeType":"1327","messageId":"1328","endLine":219,"endColumn":16},{"ruleId":"1352","severity":1,"message":"1353","line":272,"column":51,"nodeType":"1354","messageId":"1355","endLine":272,"endColumn":53},{"ruleId":"1352","severity":1,"message":"1353","line":292,"column":51,"nodeType":"1354","messageId":"1355","endLine":292,"endColumn":53},{"ruleId":"1325","severity":1,"message":"1405","line":542,"column":11,"nodeType":"1327","messageId":"1328","endLine":542,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1406","line":551,"column":11,"nodeType":"1327","messageId":"1328","endLine":551,"endColumn":35},{"ruleId":"1325","severity":1,"message":"1407","line":595,"column":19,"nodeType":"1327","messageId":"1328","endLine":595,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1408","line":642,"column":11,"nodeType":"1327","messageId":"1328","endLine":642,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1409","line":654,"column":11,"nodeType":"1327","messageId":"1328","endLine":654,"endColumn":35},{"ruleId":"1352","severity":1,"message":"1353","line":720,"column":28,"nodeType":"1354","messageId":"1355","endLine":720,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":723,"column":35,"nodeType":"1354","messageId":"1355","endLine":723,"endColumn":37},{"ruleId":"1410","severity":1,"message":"1411","line":1902,"column":45,"nodeType":"1412","messageId":"1413","endLine":1902,"endColumn":47},{"ruleId":"1410","severity":1,"message":"1411","line":1903,"column":45,"nodeType":"1412","messageId":"1413","endLine":1903,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1339","line":12,"column":22,"nodeType":"1327","messageId":"1328","endLine":12,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1414","line":46,"column":9,"nodeType":"1327","messageId":"1328","endLine":46,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1415","line":52,"column":10,"nodeType":"1327","messageId":"1328","endLine":52,"endColumn":11},{"ruleId":"1325","severity":1,"message":"1346","line":64,"column":26,"nodeType":"1327","messageId":"1328","endLine":64,"endColumn":43},{"ruleId":"1352","severity":1,"message":"1353","line":209,"column":60,"nodeType":"1354","messageId":"1355","endLine":209,"endColumn":62},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1416","line":114,"column":10,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1417","line":114,"column":23,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1418","line":117,"column":21,"nodeType":"1327","messageId":"1328","endLine":117,"endColumn":33},{"ruleId":"1419","severity":1,"message":"1420","line":246,"column":32,"nodeType":"1421","messageId":"1422","endLine":246,"endColumn":76,"fix":"1423"},{"ruleId":"1419","severity":1,"message":"1420","line":253,"column":32,"nodeType":"1421","messageId":"1422","endLine":253,"endColumn":73,"fix":"1424"},{"ruleId":"1419","severity":1,"message":"1420","line":261,"column":32,"nodeType":"1421","messageId":"1422","endLine":261,"endColumn":70,"fix":"1425"},{"ruleId":"1419","severity":1,"message":"1420","line":268,"column":32,"nodeType":"1421","messageId":"1422","endLine":268,"endColumn":69,"fix":"1426"},{"ruleId":"1419","severity":1,"message":"1420","line":275,"column":32,"nodeType":"1421","messageId":"1422","endLine":275,"endColumn":69,"fix":"1427"},{"ruleId":"1419","severity":1,"message":"1420","line":277,"column":32,"nodeType":"1421","messageId":"1422","endLine":277,"endColumn":62,"fix":"1428"},{"ruleId":"1348","severity":1,"message":"1429","line":305,"column":6,"nodeType":"1350","endLine":310,"endColumn":4,"suggestions":"1430"},{"ruleId":"1352","severity":1,"message":"1353","line":454,"column":28,"nodeType":"1354","messageId":"1355","endLine":454,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":461,"column":34,"nodeType":"1354","messageId":"1355","endLine":461,"endColumn":36},{"ruleId":"1352","severity":1,"message":"1353","line":470,"column":47,"nodeType":"1354","messageId":"1355","endLine":470,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1431","line":88,"column":9,"nodeType":"1327","messageId":"1328","endLine":88,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1416","line":96,"column":10,"nodeType":"1327","messageId":"1328","endLine":96,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1417","line":96,"column":23,"nodeType":"1327","messageId":"1328","endLine":96,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1432","line":99,"column":10,"nodeType":"1327","messageId":"1328","endLine":99,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1433","line":99,"column":20,"nodeType":"1327","messageId":"1328","endLine":99,"endColumn":31},{"ruleId":"1325","severity":1,"message":"1418","line":101,"column":21,"nodeType":"1327","messageId":"1328","endLine":101,"endColumn":33},{"ruleId":"1348","severity":1,"message":"1434","line":175,"column":6,"nodeType":"1350","endLine":175,"endColumn":48,"suggestions":"1435"},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":6,"column":16,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1375","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1392","line":10,"column":10,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1394","line":20,"column":8,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1436","line":24,"column":10,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1437","line":26,"column":10,"nodeType":"1327","messageId":"1328","endLine":26,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1431","line":103,"column":9,"nodeType":"1327","messageId":"1328","endLine":103,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1438","line":107,"column":10,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1439","line":107,"column":24,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1440","line":111,"column":10,"nodeType":"1327","messageId":"1328","endLine":111,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1441","line":129,"column":10,"nodeType":"1327","messageId":"1328","endLine":129,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1442","line":130,"column":10,"nodeType":"1327","messageId":"1328","endLine":130,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1443","line":130,"column":25,"nodeType":"1327","messageId":"1328","endLine":130,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1416","line":132,"column":10,"nodeType":"1327","messageId":"1328","endLine":132,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1417","line":132,"column":23,"nodeType":"1327","messageId":"1328","endLine":132,"endColumn":36},{"ruleId":"1352","severity":1,"message":"1353","line":141,"column":25,"nodeType":"1354","messageId":"1355","endLine":141,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1444","line":174,"column":9,"nodeType":"1327","messageId":"1328","endLine":174,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1445","line":179,"column":25,"nodeType":"1327","messageId":"1328","endLine":179,"endColumn":40},{"ruleId":"1325","severity":1,"message":"1446","line":339,"column":7,"nodeType":"1327","messageId":"1328","endLine":339,"endColumn":24},{"ruleId":"1348","severity":1,"message":"1447","line":495,"column":6,"nodeType":"1350","endLine":495,"endColumn":70,"suggestions":"1448"},{"ruleId":"1325","severity":1,"message":"1449","line":573,"column":15,"nodeType":"1327","messageId":"1328","endLine":573,"endColumn":27},{"ruleId":"1352","severity":1,"message":"1353","line":868,"column":24,"nodeType":"1354","messageId":"1355","endLine":868,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":871,"column":31,"nodeType":"1354","messageId":"1355","endLine":871,"endColumn":33},{"ruleId":"1450","severity":1,"message":"1451","line":882,"column":31,"nodeType":"1452","messageId":"1453","endLine":882,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1454","line":929,"column":9,"nodeType":"1327","messageId":"1328","endLine":929,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":984,"column":47,"nodeType":"1354","messageId":"1355","endLine":984,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1455","line":1000,"column":11,"nodeType":"1327","messageId":"1328","endLine":1000,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1456","line":3,"column":10,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1457","line":3,"column":20,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1358","line":3,"column":25,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1458","line":5,"column":8,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1338","line":6,"column":10,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1459","line":9,"column":8,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1460","line":10,"column":8,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1461","line":11,"column":9,"nodeType":"1327","messageId":"1328","endLine":11,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1462","line":13,"column":7,"nodeType":"1327","messageId":"1328","endLine":13,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1463","line":91,"column":7,"nodeType":"1327","messageId":"1328","endLine":91,"endColumn":15},{"ruleId":"1329","replacedBy":"1464"},{"ruleId":"1331","replacedBy":"1465"},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":6,"column":16,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1466","line":98,"column":10,"nodeType":"1327","messageId":"1328","endLine":98,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1416","line":100,"column":10,"nodeType":"1327","messageId":"1328","endLine":100,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1417","line":100,"column":23,"nodeType":"1327","messageId":"1328","endLine":100,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1432","line":103,"column":10,"nodeType":"1327","messageId":"1328","endLine":103,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1433","line":103,"column":20,"nodeType":"1327","messageId":"1328","endLine":103,"endColumn":31},{"ruleId":"1325","severity":1,"message":"1444","line":119,"column":9,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1467","line":518,"column":12,"nodeType":"1327","messageId":"1328","endLine":518,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1468","line":524,"column":12,"nodeType":"1327","messageId":"1328","endLine":524,"endColumn":28},{"ruleId":"1352","severity":1,"message":"1353","line":619,"column":47,"nodeType":"1354","messageId":"1355","endLine":619,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":16,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":29,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1370","line":2,"column":8,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1469","line":4,"column":8,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1373","line":5,"column":52,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":56},{"ruleId":"1325","severity":1,"message":"1374","line":6,"column":13,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1390","line":8,"column":15,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1344","line":95,"column":20,"nodeType":"1327","messageId":"1328","endLine":95,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1470","line":96,"column":12,"nodeType":"1327","messageId":"1328","endLine":96,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1471","line":96,"column":20,"nodeType":"1327","messageId":"1328","endLine":96,"endColumn":29},{"ruleId":"1364","severity":1,"message":"1365","line":5,"column":10,"nodeType":"1366","messageId":"1367","endLine":5,"endColumn":24,"fix":"1472"},{"ruleId":"1325","severity":1,"message":"1473","line":28,"column":10,"nodeType":"1327","messageId":"1328","endLine":28,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1342","line":57,"column":7,"nodeType":"1327","messageId":"1328","endLine":57,"endColumn":16},{"ruleId":"1348","severity":1,"message":"1474","line":191,"column":6,"nodeType":"1350","endLine":191,"endColumn":24,"suggestions":"1475"},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1372","line":10,"column":3,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":8},{"ruleId":"1325","severity":1,"message":"1373","line":11,"column":3,"nodeType":"1327","messageId":"1328","endLine":11,"endColumn":7},{"ruleId":"1325","severity":1,"message":"1390","line":14,"column":16,"nodeType":"1327","messageId":"1328","endLine":14,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1476","line":23,"column":19,"nodeType":"1327","messageId":"1328","endLine":23,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1416","line":142,"column":10,"nodeType":"1327","messageId":"1328","endLine":142,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1417","line":142,"column":23,"nodeType":"1327","messageId":"1328","endLine":142,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1418","line":155,"column":21,"nodeType":"1327","messageId":"1328","endLine":155,"endColumn":33},{"ruleId":"1477","severity":1,"message":"1478","line":181,"column":5,"nodeType":"1479","messageId":"1355","endLine":181,"endColumn":36},{"ruleId":"1477","severity":1,"message":"1480","line":182,"column":5,"nodeType":"1479","messageId":"1355","endLine":182,"endColumn":23},{"ruleId":"1348","severity":1,"message":"1481","line":289,"column":6,"nodeType":"1350","endLine":289,"endColumn":24,"suggestions":"1482"},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":38,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1370","line":2,"column":8,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1372","line":3,"column":47,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":52},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1374","line":4,"column":13,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1375","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1337","line":8,"column":10,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1376","line":11,"column":10,"nodeType":"1327","messageId":"1328","endLine":11,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1377","line":11,"column":24,"nodeType":"1327","messageId":"1328","endLine":11,"endColumn":31},{"ruleId":"1325","severity":1,"message":"1476","line":19,"column":19,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1378","line":19,"column":32,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":20,"column":8,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1483","line":23,"column":8,"nodeType":"1327","messageId":"1328","endLine":23,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1484","line":103,"column":10,"nodeType":"1327","messageId":"1328","endLine":103,"endColumn":12},{"ruleId":"1325","severity":1,"message":"1485","line":103,"column":14,"nodeType":"1327","messageId":"1328","endLine":103,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1471","line":104,"column":18,"nodeType":"1327","messageId":"1328","endLine":104,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1486","line":105,"column":10,"nodeType":"1327","messageId":"1328","endLine":105,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1487","line":105,"column":23,"nodeType":"1327","messageId":"1328","endLine":105,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1343","line":106,"column":10,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1344","line":106,"column":18,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1488","line":107,"column":7,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":11},{"ruleId":"1325","severity":1,"message":"1489","line":110,"column":10,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1490","line":110,"column":19,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1491","line":111,"column":10,"nodeType":"1327","messageId":"1328","endLine":111,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1492","line":111,"column":29,"nodeType":"1327","messageId":"1328","endLine":111,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1493","line":112,"column":10,"nodeType":"1327","messageId":"1328","endLine":112,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1494","line":112,"column":21,"nodeType":"1327","messageId":"1328","endLine":112,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1495","line":113,"column":10,"nodeType":"1327","messageId":"1328","endLine":113,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1496","line":113,"column":18,"nodeType":"1327","messageId":"1328","endLine":113,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1497","line":114,"column":10,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1498","line":114,"column":19,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1499","line":115,"column":10,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1500","line":115,"column":28,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1501","line":118,"column":10,"nodeType":"1327","messageId":"1328","endLine":118,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1371","line":4,"column":38,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":4,"column":54,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1502","line":119,"column":12,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":35},{"ruleId":"1325","severity":1,"message":"1386","line":122,"column":12,"nodeType":"1327","messageId":"1328","endLine":122,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1503","line":126,"column":12,"nodeType":"1327","messageId":"1328","endLine":126,"endColumn":34},{"ruleId":"1325","severity":1,"message":"1487","line":133,"column":23,"nodeType":"1327","messageId":"1328","endLine":133,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1504","line":136,"column":21,"nodeType":"1327","messageId":"1328","endLine":136,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1505","line":145,"column":19,"nodeType":"1327","messageId":"1328","endLine":145,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1506","line":150,"column":12,"nodeType":"1327","messageId":"1328","endLine":150,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1507","line":173,"column":10,"nodeType":"1327","messageId":"1328","endLine":173,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1508","line":173,"column":38,"nodeType":"1327","messageId":"1328","endLine":173,"endColumn":67},{"ruleId":"1325","severity":1,"message":"1509","line":177,"column":5,"nodeType":"1327","messageId":"1328","endLine":177,"endColumn":40},{"ruleId":"1325","severity":1,"message":"1510","line":178,"column":5,"nodeType":"1327","messageId":"1328","endLine":178,"endColumn":43},{"ruleId":"1325","severity":1,"message":"1511","line":307,"column":9,"nodeType":"1327","messageId":"1328","endLine":307,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1512","line":379,"column":5,"nodeType":"1327","messageId":"1328","endLine":379,"endColumn":9},{"ruleId":"1450","severity":1,"message":"1451","line":379,"column":42,"nodeType":"1452","messageId":"1453","endLine":379,"endColumn":44},{"ruleId":"1325","severity":1,"message":"1513","line":414,"column":9,"nodeType":"1327","messageId":"1328","endLine":414,"endColumn":31},{"ruleId":"1348","severity":1,"message":"1514","line":592,"column":6,"nodeType":"1350","endLine":592,"endColumn":8,"suggestions":"1515"},{"ruleId":"1325","severity":1,"message":"1454","line":603,"column":9,"nodeType":"1327","messageId":"1328","endLine":603,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1516","line":624,"column":9,"nodeType":"1327","messageId":"1328","endLine":624,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1517","line":788,"column":9,"nodeType":"1327","messageId":"1328","endLine":788,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1518","line":811,"column":9,"nodeType":"1327","messageId":"1328","endLine":811,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1519","line":857,"column":9,"nodeType":"1327","messageId":"1328","endLine":857,"endColumn":29},{"ruleId":"1450","severity":1,"message":"1520","line":860,"column":47,"nodeType":"1452","messageId":"1521","endLine":860,"endColumn":49},{"ruleId":"1450","severity":1,"message":"1520","line":869,"column":44,"nodeType":"1452","messageId":"1521","endLine":869,"endColumn":46},{"ruleId":"1450","severity":1,"message":"1520","line":878,"column":44,"nodeType":"1452","messageId":"1521","endLine":878,"endColumn":46},{"ruleId":"1352","severity":1,"message":"1353","line":1046,"column":24,"nodeType":"1354","messageId":"1355","endLine":1046,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":1049,"column":31,"nodeType":"1354","messageId":"1355","endLine":1049,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":1188,"column":47,"nodeType":"1354","messageId":"1355","endLine":1188,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1455","line":1247,"column":11,"nodeType":"1327","messageId":"1328","endLine":1247,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1416","line":1258,"column":9,"nodeType":"1327","messageId":"1328","endLine":1258,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1375","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1522","line":12,"column":10,"nodeType":"1327","messageId":"1328","endLine":12,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1476","line":24,"column":19,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1523","line":103,"column":10,"nodeType":"1327","messageId":"1328","endLine":103,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1524","line":105,"column":10,"nodeType":"1327","messageId":"1328","endLine":105,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1525","line":105,"column":31,"nodeType":"1327","messageId":"1328","endLine":105,"endColumn":53},{"ruleId":"1325","severity":1,"message":"1489","line":116,"column":10,"nodeType":"1327","messageId":"1328","endLine":116,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1416","line":120,"column":10,"nodeType":"1327","messageId":"1328","endLine":120,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1417","line":120,"column":23,"nodeType":"1327","messageId":"1328","endLine":120,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1432","line":126,"column":10,"nodeType":"1327","messageId":"1328","endLine":126,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1433","line":126,"column":20,"nodeType":"1327","messageId":"1328","endLine":126,"endColumn":31},{"ruleId":"1348","severity":1,"message":"1526","line":181,"column":6,"nodeType":"1350","endLine":181,"endColumn":21,"suggestions":"1527"},{"ruleId":"1348","severity":1,"message":"1528","line":189,"column":6,"nodeType":"1350","endLine":189,"endColumn":8,"suggestions":"1529"},{"ruleId":"1325","severity":1,"message":"1530","line":191,"column":9,"nodeType":"1327","messageId":"1328","endLine":191,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1449","line":254,"column":15,"nodeType":"1327","messageId":"1328","endLine":254,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1531","line":433,"column":7,"nodeType":"1327","messageId":"1328","endLine":433,"endColumn":10},{"ruleId":"1352","severity":1,"message":"1353","line":460,"column":24,"nodeType":"1354","messageId":"1355","endLine":460,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":463,"column":31,"nodeType":"1354","messageId":"1355","endLine":463,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":588,"column":47,"nodeType":"1354","messageId":"1355","endLine":588,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1373","line":2,"column":54,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1466","line":98,"column":10,"nodeType":"1327","messageId":"1328","endLine":98,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1532","line":98,"column":23,"nodeType":"1327","messageId":"1328","endLine":98,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1533","line":102,"column":10,"nodeType":"1327","messageId":"1328","endLine":102,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1534","line":102,"column":25,"nodeType":"1327","messageId":"1328","endLine":102,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1535","line":104,"column":10,"nodeType":"1327","messageId":"1328","endLine":104,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1536","line":104,"column":34,"nodeType":"1327","messageId":"1328","endLine":104,"endColumn":59},{"ruleId":"1325","severity":1,"message":"1504","line":110,"column":21,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1505","line":116,"column":19,"nodeType":"1327","messageId":"1328","endLine":116,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1537","line":121,"column":10,"nodeType":"1327","messageId":"1328","endLine":121,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1538","line":124,"column":10,"nodeType":"1327","messageId":"1328","endLine":124,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1539","line":124,"column":26,"nodeType":"1327","messageId":"1328","endLine":124,"endColumn":43},{"ruleId":"1477","severity":1,"message":"1540","line":198,"column":7,"nodeType":"1479","messageId":"1355","endLine":198,"endColumn":47},{"ruleId":"1477","severity":1,"message":"1540","line":231,"column":5,"nodeType":"1479","messageId":"1355","endLine":231,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1455","line":252,"column":11,"nodeType":"1327","messageId":"1328","endLine":252,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1541","line":279,"column":9,"nodeType":"1327","messageId":"1328","endLine":279,"endColumn":21},{"ruleId":"1348","severity":1,"message":"1542","line":355,"column":6,"nodeType":"1350","endLine":355,"endColumn":24,"suggestions":"1543"},{"ruleId":"1348","severity":1,"message":"1544","line":359,"column":6,"nodeType":"1350","endLine":359,"endColumn":8,"suggestions":"1545"},{"ruleId":"1325","severity":1,"message":"1546","line":516,"column":9,"nodeType":"1327","messageId":"1328","endLine":516,"endColumn":34},{"ruleId":"1325","severity":1,"message":"1547","line":573,"column":9,"nodeType":"1327","messageId":"1328","endLine":573,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1548","line":644,"column":9,"nodeType":"1327","messageId":"1328","endLine":644,"endColumn":32},{"ruleId":"1352","severity":1,"message":"1353","line":701,"column":47,"nodeType":"1354","messageId":"1355","endLine":701,"endColumn":49},{"ruleId":"1352","severity":1,"message":"1353","line":720,"column":42,"nodeType":"1354","messageId":"1355","endLine":720,"endColumn":44},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1375","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1476","line":19,"column":19,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1378","line":19,"column":32,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":20,"column":8,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1391","line":21,"column":8,"nodeType":"1327","messageId":"1328","endLine":21,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1549","line":107,"column":9,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1489","line":115,"column":10,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1490","line":115,"column":19,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1385","line":122,"column":10,"nodeType":"1327","messageId":"1328","endLine":122,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1386","line":122,"column":21,"nodeType":"1327","messageId":"1328","endLine":122,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1550","line":124,"column":10,"nodeType":"1327","messageId":"1328","endLine":124,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1506","line":124,"column":24,"nodeType":"1327","messageId":"1328","endLine":124,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1551","line":125,"column":10,"nodeType":"1327","messageId":"1328","endLine":125,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1552","line":125,"column":25,"nodeType":"1327","messageId":"1328","endLine":125,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1553","line":132,"column":10,"nodeType":"1327","messageId":"1328","endLine":132,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1554","line":132,"column":29,"nodeType":"1327","messageId":"1328","endLine":132,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1555","line":133,"column":10,"nodeType":"1327","messageId":"1328","endLine":133,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1556","line":134,"column":10,"nodeType":"1327","messageId":"1328","endLine":134,"endColumn":35},{"ruleId":"1325","severity":1,"message":"1557","line":137,"column":10,"nodeType":"1327","messageId":"1328","endLine":137,"endColumn":30},{"ruleId":"1348","severity":1,"message":"1558","line":223,"column":6,"nodeType":"1350","endLine":223,"endColumn":8,"suggestions":"1559"},{"ruleId":"1325","severity":1,"message":"1560","line":225,"column":9,"nodeType":"1327","messageId":"1328","endLine":225,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1454","line":244,"column":9,"nodeType":"1327","messageId":"1328","endLine":244,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1516","line":263,"column":9,"nodeType":"1327","messageId":"1328","endLine":263,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1455","line":302,"column":11,"nodeType":"1327","messageId":"1328","endLine":302,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1548","line":481,"column":9,"nodeType":"1327","messageId":"1328","endLine":481,"endColumn":32},{"ruleId":"1352","severity":1,"message":"1353","line":482,"column":24,"nodeType":"1354","messageId":"1355","endLine":482,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":485,"column":31,"nodeType":"1354","messageId":"1355","endLine":485,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":578,"column":47,"nodeType":"1354","messageId":"1355","endLine":578,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":2,"column":54,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":5,"column":16,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1394","line":19,"column":8,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1561","line":21,"column":8,"nodeType":"1327","messageId":"1328","endLine":21,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1562","line":26,"column":8,"nodeType":"1327","messageId":"1328","endLine":26,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1466","line":102,"column":10,"nodeType":"1327","messageId":"1328","endLine":102,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1533","line":108,"column":10,"nodeType":"1327","messageId":"1328","endLine":108,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1534","line":108,"column":25,"nodeType":"1327","messageId":"1328","endLine":108,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1535","line":110,"column":10,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1536","line":110,"column":34,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":59},{"ruleId":"1325","severity":1,"message":"1416","line":119,"column":10,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1417","line":119,"column":23,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1504","line":124,"column":21,"nodeType":"1327","messageId":"1328","endLine":124,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1505","line":130,"column":19,"nodeType":"1327","messageId":"1328","endLine":130,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1538","line":138,"column":10,"nodeType":"1327","messageId":"1328","endLine":138,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1539","line":138,"column":26,"nodeType":"1327","messageId":"1328","endLine":138,"endColumn":43},{"ruleId":"1325","severity":1,"message":"1563","line":255,"column":9,"nodeType":"1327","messageId":"1328","endLine":255,"endColumn":19},{"ruleId":"1348","severity":1,"message":"1564","line":361,"column":6,"nodeType":"1350","endLine":361,"endColumn":24,"suggestions":"1565"},{"ruleId":"1348","severity":1,"message":"1544","line":365,"column":6,"nodeType":"1350","endLine":365,"endColumn":8,"suggestions":"1566"},{"ruleId":"1325","severity":1,"message":"1546","line":521,"column":9,"nodeType":"1327","messageId":"1328","endLine":521,"endColumn":34},{"ruleId":"1325","severity":1,"message":"1567","line":534,"column":9,"nodeType":"1327","messageId":"1328","endLine":534,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1547","line":576,"column":9,"nodeType":"1327","messageId":"1328","endLine":576,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1548","line":649,"column":9,"nodeType":"1327","messageId":"1328","endLine":649,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1454","line":672,"column":9,"nodeType":"1327","messageId":"1328","endLine":672,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1455","line":683,"column":11,"nodeType":"1327","messageId":"1328","endLine":683,"endColumn":16},{"ruleId":"1352","severity":1,"message":"1353","line":724,"column":47,"nodeType":"1354","messageId":"1355","endLine":724,"endColumn":49},{"ruleId":"1352","severity":1,"message":"1353","line":753,"column":42,"nodeType":"1354","messageId":"1355","endLine":753,"endColumn":44},{"ruleId":"1325","severity":1,"message":"1568","line":3,"column":20,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1569","line":4,"column":8,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1473","line":6,"column":10,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1338","line":7,"column":10,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1476","line":9,"column":19,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1568","line":3,"column":20,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1476","line":8,"column":18,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":29},{"ruleId":"1364","severity":1,"message":"1365","line":4,"column":10,"nodeType":"1366","messageId":"1367","endLine":4,"endColumn":24,"fix":"1570"},{"ruleId":"1325","severity":1,"message":"1571","line":27,"column":10,"nodeType":"1327","messageId":"1328","endLine":27,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1572","line":28,"column":11,"nodeType":"1327","messageId":"1328","endLine":28,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1573","line":41,"column":10,"nodeType":"1327","messageId":"1328","endLine":41,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1574","line":47,"column":10,"nodeType":"1327","messageId":"1328","endLine":47,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1575","line":48,"column":10,"nodeType":"1327","messageId":"1328","endLine":48,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1576","line":66,"column":9,"nodeType":"1327","messageId":"1328","endLine":66,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1577","line":85,"column":23,"nodeType":"1327","messageId":"1328","endLine":85,"endColumn":30},{"ruleId":"1348","severity":1,"message":"1578","line":150,"column":6,"nodeType":"1350","endLine":150,"endColumn":42,"suggestions":"1579"},{"ruleId":"1348","severity":1,"message":"1580","line":217,"column":5,"nodeType":"1350","endLine":217,"endColumn":42,"suggestions":"1581"},{"ruleId":"1325","severity":1,"message":"1371","line":4,"column":38,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":4,"column":54,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1375","line":8,"column":8,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1476","line":20,"column":19,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1378","line":20,"column":32,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":21,"column":8,"nodeType":"1327","messageId":"1328","endLine":21,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1582","line":26,"column":8,"nodeType":"1327","messageId":"1328","endLine":26,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1583","line":28,"column":8,"nodeType":"1327","messageId":"1328","endLine":28,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1391","line":31,"column":8,"nodeType":"1327","messageId":"1328","endLine":31,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1584","line":43,"column":10,"nodeType":"1327","messageId":"1328","endLine":43,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1491","line":128,"column":10,"nodeType":"1327","messageId":"1328","endLine":128,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1493","line":129,"column":10,"nodeType":"1327","messageId":"1328","endLine":129,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1585","line":130,"column":10,"nodeType":"1327","messageId":"1328","endLine":130,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1535","line":131,"column":10,"nodeType":"1327","messageId":"1328","endLine":131,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1502","line":131,"column":34,"nodeType":"1327","messageId":"1328","endLine":131,"endColumn":57},{"ruleId":"1325","severity":1,"message":"1385","line":134,"column":10,"nodeType":"1327","messageId":"1328","endLine":134,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1386","line":134,"column":21,"nodeType":"1327","messageId":"1328","endLine":134,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1586","line":138,"column":10,"nodeType":"1327","messageId":"1328","endLine":138,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1587","line":145,"column":10,"nodeType":"1327","messageId":"1328","endLine":145,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1588","line":145,"column":41,"nodeType":"1327","messageId":"1328","endLine":145,"endColumn":73},{"ruleId":"1325","severity":1,"message":"1487","line":147,"column":23,"nodeType":"1327","messageId":"1328","endLine":147,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1504","line":155,"column":21,"nodeType":"1327","messageId":"1328","endLine":155,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1505","line":163,"column":19,"nodeType":"1327","messageId":"1328","endLine":163,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1550","line":168,"column":10,"nodeType":"1327","messageId":"1328","endLine":168,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1506","line":168,"column":24,"nodeType":"1327","messageId":"1328","endLine":168,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1507","line":193,"column":10,"nodeType":"1327","messageId":"1328","endLine":193,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1589","line":203,"column":10,"nodeType":"1327","messageId":"1328","endLine":203,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1590","line":204,"column":10,"nodeType":"1327","messageId":"1328","endLine":204,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1591","line":303,"column":10,"nodeType":"1327","messageId":"1328","endLine":303,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1592","line":304,"column":10,"nodeType":"1327","messageId":"1328","endLine":304,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1593","line":305,"column":10,"nodeType":"1327","messageId":"1328","endLine":305,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1594","line":306,"column":10,"nodeType":"1327","messageId":"1328","endLine":306,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1511","line":334,"column":9,"nodeType":"1327","messageId":"1328","endLine":334,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1595","line":364,"column":9,"nodeType":"1327","messageId":"1328","endLine":364,"endColumn":34},{"ruleId":"1352","severity":1,"message":"1353","line":377,"column":47,"nodeType":"1354","messageId":"1355","endLine":377,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1596","line":551,"column":7,"nodeType":"1327","messageId":"1328","endLine":551,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1513","line":699,"column":9,"nodeType":"1327","messageId":"1328","endLine":699,"endColumn":31},{"ruleId":"1348","severity":1,"message":"1597","line":886,"column":6,"nodeType":"1350","endLine":886,"endColumn":8,"suggestions":"1598"},{"ruleId":"1325","severity":1,"message":"1512","line":943,"column":6,"nodeType":"1327","messageId":"1328","endLine":943,"endColumn":10},{"ruleId":"1450","severity":1,"message":"1451","line":943,"column":43,"nodeType":"1452","messageId":"1453","endLine":943,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1454","line":980,"column":9,"nodeType":"1327","messageId":"1328","endLine":980,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1516","line":1001,"column":9,"nodeType":"1327","messageId":"1328","endLine":1001,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1517","line":1165,"column":9,"nodeType":"1327","messageId":"1328","endLine":1165,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1518","line":1189,"column":9,"nodeType":"1327","messageId":"1328","endLine":1189,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1519","line":1235,"column":9,"nodeType":"1327","messageId":"1328","endLine":1235,"endColumn":29},{"ruleId":"1450","severity":1,"message":"1520","line":1238,"column":47,"nodeType":"1452","messageId":"1521","endLine":1238,"endColumn":49},{"ruleId":"1450","severity":1,"message":"1520","line":1247,"column":44,"nodeType":"1452","messageId":"1521","endLine":1247,"endColumn":46},{"ruleId":"1450","severity":1,"message":"1520","line":1256,"column":44,"nodeType":"1452","messageId":"1521","endLine":1256,"endColumn":46},{"ruleId":"1325","severity":1,"message":"1599","line":1270,"column":9,"nodeType":"1327","messageId":"1328","endLine":1270,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1600","line":1274,"column":9,"nodeType":"1327","messageId":"1328","endLine":1274,"endColumn":22},{"ruleId":"1352","severity":1,"message":"1353","line":1437,"column":24,"nodeType":"1354","messageId":"1355","endLine":1437,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":1440,"column":31,"nodeType":"1354","messageId":"1355","endLine":1440,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":1518,"column":47,"nodeType":"1354","messageId":"1355","endLine":1518,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1455","line":1615,"column":11,"nodeType":"1327","messageId":"1328","endLine":1615,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1601","line":3,"column":8,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":38,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1372","line":3,"column":47,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":52},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1374","line":4,"column":13,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1375","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1337","line":8,"column":10,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1476","line":19,"column":19,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1378","line":19,"column":32,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":20,"column":8,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1602","line":22,"column":8,"nodeType":"1327","messageId":"1328","endLine":22,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1484","line":105,"column":10,"nodeType":"1327","messageId":"1328","endLine":105,"endColumn":12},{"ruleId":"1325","severity":1,"message":"1485","line":105,"column":14,"nodeType":"1327","messageId":"1328","endLine":105,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1471","line":106,"column":18,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1486","line":107,"column":10,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1487","line":107,"column":23,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1343","line":108,"column":10,"nodeType":"1327","messageId":"1328","endLine":108,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1344","line":108,"column":18,"nodeType":"1327","messageId":"1328","endLine":108,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1488","line":109,"column":7,"nodeType":"1327","messageId":"1328","endLine":109,"endColumn":11},{"ruleId":"1325","severity":1,"message":"1489","line":112,"column":10,"nodeType":"1327","messageId":"1328","endLine":112,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1490","line":112,"column":19,"nodeType":"1327","messageId":"1328","endLine":112,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1491","line":113,"column":10,"nodeType":"1327","messageId":"1328","endLine":113,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1492","line":113,"column":29,"nodeType":"1327","messageId":"1328","endLine":113,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1493","line":114,"column":10,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1494","line":114,"column":21,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1495","line":115,"column":10,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1496","line":115,"column":18,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1497","line":116,"column":10,"nodeType":"1327","messageId":"1328","endLine":116,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1498","line":116,"column":19,"nodeType":"1327","messageId":"1328","endLine":116,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1499","line":117,"column":10,"nodeType":"1327","messageId":"1328","endLine":117,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1500","line":117,"column":28,"nodeType":"1327","messageId":"1328","endLine":117,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1501","line":119,"column":10,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":25},{"ruleId":"1348","severity":1,"message":"1603","line":178,"column":6,"nodeType":"1350","endLine":178,"endColumn":8,"suggestions":"1604"},{"ruleId":"1352","severity":1,"message":"1605","line":3,"column":27,"nodeType":"1354","messageId":"1355","endLine":3,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1606","line":6,"column":11,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":20},{"ruleId":"1607","severity":1,"message":"1608","line":143,"column":3,"nodeType":"1609","messageId":"1610","endLine":207,"endColumn":4},{"ruleId":"1611","severity":1,"message":"1612","line":151,"column":7,"nodeType":"1613","messageId":"1614","endLine":151,"endColumn":13},{"ruleId":"1611","severity":1,"message":"1612","line":159,"column":7,"nodeType":"1613","messageId":"1614","endLine":159,"endColumn":13},{"ruleId":"1611","severity":1,"message":"1612","line":167,"column":7,"nodeType":"1613","messageId":"1614","endLine":167,"endColumn":13},{"ruleId":"1611","severity":1,"message":"1612","line":175,"column":7,"nodeType":"1613","messageId":"1614","endLine":175,"endColumn":13},{"ruleId":"1611","severity":1,"message":"1612","line":183,"column":7,"nodeType":"1613","messageId":"1614","endLine":183,"endColumn":13},{"ruleId":"1611","severity":1,"message":"1612","line":191,"column":7,"nodeType":"1613","messageId":"1614","endLine":191,"endColumn":13},{"ruleId":"1611","severity":1,"message":"1612","line":199,"column":7,"nodeType":"1613","messageId":"1614","endLine":199,"endColumn":13},{"ruleId":"1450","severity":1,"message":"1451","line":275,"column":39,"nodeType":"1452","messageId":"1453","endLine":275,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1615","line":293,"column":7,"nodeType":"1327","messageId":"1328","endLine":293,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1616","line":294,"column":7,"nodeType":"1327","messageId":"1328","endLine":294,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1617","line":295,"column":7,"nodeType":"1327","messageId":"1328","endLine":295,"endColumn":25},{"ruleId":"1450","severity":1,"message":"1451","line":392,"column":41,"nodeType":"1452","messageId":"1453","endLine":392,"endColumn":43},{"ruleId":"1325","severity":1,"message":"1618","line":443,"column":5,"nodeType":"1327","messageId":"1328","endLine":443,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1615","line":503,"column":7,"nodeType":"1327","messageId":"1328","endLine":503,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1616","line":504,"column":7,"nodeType":"1327","messageId":"1328","endLine":504,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1617","line":505,"column":7,"nodeType":"1327","messageId":"1328","endLine":505,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1619","line":512,"column":7,"nodeType":"1327","messageId":"1328","endLine":512,"endColumn":23},{"ruleId":"1611","severity":1,"message":"1612","line":556,"column":5,"nodeType":"1613","messageId":"1614","endLine":556,"endColumn":11},{"ruleId":"1325","severity":1,"message":"1473","line":27,"column":10,"nodeType":"1327","messageId":"1328","endLine":27,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1342","line":55,"column":7,"nodeType":"1327","messageId":"1328","endLine":55,"endColumn":16},{"ruleId":"1348","severity":1,"message":"1620","line":105,"column":6,"nodeType":"1350","endLine":105,"endColumn":24,"suggestions":"1621"},{"ruleId":"1325","severity":1,"message":"1342","line":49,"column":7,"nodeType":"1327","messageId":"1328","endLine":49,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1622","line":96,"column":10,"nodeType":"1327","messageId":"1328","endLine":96,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1401","line":97,"column":10,"nodeType":"1327","messageId":"1328","endLine":97,"endColumn":23},{"ruleId":"1348","severity":1,"message":"1623","line":107,"column":6,"nodeType":"1350","endLine":107,"endColumn":8,"suggestions":"1624"},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1375","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1476","line":20,"column":19,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1378","line":20,"column":32,"nodeType":"1327","messageId":"1328","endLine":20,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":21,"column":8,"nodeType":"1327","messageId":"1328","endLine":21,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1391","line":22,"column":8,"nodeType":"1327","messageId":"1328","endLine":22,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1549","line":110,"column":9,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1489","line":118,"column":10,"nodeType":"1327","messageId":"1328","endLine":118,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1490","line":118,"column":19,"nodeType":"1327","messageId":"1328","endLine":118,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1385","line":125,"column":10,"nodeType":"1327","messageId":"1328","endLine":125,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1386","line":125,"column":21,"nodeType":"1327","messageId":"1328","endLine":125,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1550","line":128,"column":10,"nodeType":"1327","messageId":"1328","endLine":128,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1506","line":128,"column":24,"nodeType":"1327","messageId":"1328","endLine":128,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1551","line":129,"column":10,"nodeType":"1327","messageId":"1328","endLine":129,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1552","line":129,"column":25,"nodeType":"1327","messageId":"1328","endLine":129,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1553","line":137,"column":10,"nodeType":"1327","messageId":"1328","endLine":137,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1554","line":137,"column":29,"nodeType":"1327","messageId":"1328","endLine":137,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1555","line":138,"column":10,"nodeType":"1327","messageId":"1328","endLine":138,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1556","line":139,"column":10,"nodeType":"1327","messageId":"1328","endLine":139,"endColumn":35},{"ruleId":"1325","severity":1,"message":"1625","line":139,"column":37,"nodeType":"1327","messageId":"1328","endLine":139,"endColumn":65},{"ruleId":"1325","severity":1,"message":"1557","line":142,"column":10,"nodeType":"1327","messageId":"1328","endLine":142,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1431","line":143,"column":9,"nodeType":"1327","messageId":"1328","endLine":143,"endColumn":16},{"ruleId":"1348","severity":1,"message":"1626","line":225,"column":6,"nodeType":"1350","endLine":225,"endColumn":8,"suggestions":"1627"},{"ruleId":"1325","severity":1,"message":"1454","line":244,"column":9,"nodeType":"1327","messageId":"1328","endLine":244,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1516","line":263,"column":9,"nodeType":"1327","messageId":"1328","endLine":263,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1455","line":307,"column":11,"nodeType":"1327","messageId":"1328","endLine":307,"endColumn":16},{"ruleId":"1348","severity":1,"message":"1628","line":404,"column":6,"nodeType":"1350","endLine":404,"endColumn":8,"suggestions":"1629"},{"ruleId":"1325","severity":1,"message":"1548","line":503,"column":9,"nodeType":"1327","messageId":"1328","endLine":503,"endColumn":32},{"ruleId":"1352","severity":1,"message":"1353","line":504,"column":24,"nodeType":"1354","messageId":"1355","endLine":504,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":507,"column":31,"nodeType":"1354","messageId":"1355","endLine":507,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":593,"column":47,"nodeType":"1354","messageId":"1355","endLine":593,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1630","line":596,"column":9,"nodeType":"1327","messageId":"1328","endLine":596,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":38,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1631","line":3,"column":28,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":36},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1568","line":6,"column":10,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1375","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1394","line":19,"column":8,"nodeType":"1327","messageId":"1328","endLine":19,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1486","line":100,"column":10,"nodeType":"1327","messageId":"1328","endLine":100,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1487","line":100,"column":23,"nodeType":"1327","messageId":"1328","endLine":100,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1632","line":104,"column":9,"nodeType":"1327","messageId":"1328","endLine":104,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1497","line":105,"column":10,"nodeType":"1327","messageId":"1328","endLine":105,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1431","line":126,"column":8,"nodeType":"1327","messageId":"1328","endLine":126,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1633","line":129,"column":10,"nodeType":"1327","messageId":"1328","endLine":129,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1591","line":130,"column":10,"nodeType":"1327","messageId":"1328","endLine":130,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1634","line":130,"column":25,"nodeType":"1327","messageId":"1328","endLine":130,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1592","line":131,"column":10,"nodeType":"1327","messageId":"1328","endLine":131,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1635","line":131,"column":28,"nodeType":"1327","messageId":"1328","endLine":131,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1593","line":132,"column":10,"nodeType":"1327","messageId":"1328","endLine":132,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1636","line":132,"column":23,"nodeType":"1327","messageId":"1328","endLine":132,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1637","line":134,"column":11,"nodeType":"1327","messageId":"1328","endLine":134,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1455","line":148,"column":15,"nodeType":"1327","messageId":"1328","endLine":148,"endColumn":20},{"ruleId":"1348","severity":1,"message":"1628","line":196,"column":8,"nodeType":"1350","endLine":196,"endColumn":10,"suggestions":"1638"},{"ruleId":"1325","severity":1,"message":"1639","line":253,"column":9,"nodeType":"1327","messageId":"1328","endLine":253,"endColumn":34},{"ruleId":"1325","severity":1,"message":"1454","line":292,"column":9,"nodeType":"1327","messageId":"1328","endLine":292,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":361,"column":47,"nodeType":"1354","messageId":"1355","endLine":361,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1473","line":29,"column":10,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1374","line":32,"column":8,"nodeType":"1327","messageId":"1328","endLine":32,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1342","line":60,"column":7,"nodeType":"1327","messageId":"1328","endLine":60,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1640","line":112,"column":9,"nodeType":"1327","messageId":"1328","endLine":112,"endColumn":18},{"ruleId":"1348","severity":1,"message":"1623","line":118,"column":6,"nodeType":"1350","endLine":118,"endColumn":8,"suggestions":"1641"},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":30,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1469","line":2,"column":10,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1642","line":4,"column":10,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1337","line":5,"column":26,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":31},{"ruleId":"1325","severity":1,"message":"1338","line":8,"column":10,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1522","line":8,"column":16,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1339","line":11,"column":22,"nodeType":"1327","messageId":"1328","endLine":11,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1643","line":32,"column":12,"nodeType":"1327","messageId":"1328","endLine":32,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1337","line":6,"column":26,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":31},{"ruleId":"1325","severity":1,"message":"1338","line":9,"column":10,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1339","line":12,"column":22,"nodeType":"1327","messageId":"1328","endLine":12,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1644","line":25,"column":8,"nodeType":"1327","messageId":"1328","endLine":25,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1645","line":29,"column":10,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1342","line":35,"column":7,"nodeType":"1327","messageId":"1328","endLine":35,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1346","line":55,"column":26,"nodeType":"1327","messageId":"1328","endLine":55,"endColumn":43},{"ruleId":"1325","severity":1,"message":"1646","line":66,"column":10,"nodeType":"1327","messageId":"1328","endLine":66,"endColumn":16},{"ruleId":"1352","severity":1,"message":"1353","line":611,"column":39,"nodeType":"1354","messageId":"1355","endLine":611,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":2,"column":54,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":5,"column":16,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1466","line":99,"column":10,"nodeType":"1327","messageId":"1328","endLine":99,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1538","line":106,"column":10,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1539","line":106,"column":26,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":43},{"ruleId":"1348","severity":1,"message":"1647","line":153,"column":6,"nodeType":"1350","endLine":153,"endColumn":24,"suggestions":"1648"},{"ruleId":"1325","severity":1,"message":"1649","line":169,"column":12,"nodeType":"1327","messageId":"1328","endLine":169,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1637","line":261,"column":9,"nodeType":"1327","messageId":"1328","endLine":261,"endColumn":24},{"ruleId":"1352","severity":1,"message":"1353","line":345,"column":47,"nodeType":"1354","messageId":"1355","endLine":345,"endColumn":49},{"ruleId":"1352","severity":1,"message":"1353","line":352,"column":42,"nodeType":"1354","messageId":"1355","endLine":352,"endColumn":44},{"ruleId":"1325","severity":1,"message":"1650","line":1,"column":28,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":36},{"ruleId":"1364","severity":1,"message":"1365","line":5,"column":10,"nodeType":"1366","messageId":"1367","endLine":5,"endColumn":24,"fix":"1651"},{"ruleId":"1325","severity":1,"message":"1473","line":28,"column":10,"nodeType":"1327","messageId":"1328","endLine":28,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1342","line":56,"column":7,"nodeType":"1327","messageId":"1328","endLine":56,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1473","line":27,"column":10,"nodeType":"1327","messageId":"1328","endLine":27,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1456","line":29,"column":10,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1652","line":29,"column":28,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1653","line":29,"column":34,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1342","line":56,"column":7,"nodeType":"1327","messageId":"1328","endLine":56,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1640","line":102,"column":9,"nodeType":"1327","messageId":"1328","endLine":102,"endColumn":18},{"ruleId":"1348","severity":1,"message":"1623","line":108,"column":6,"nodeType":"1350","endLine":108,"endColumn":8,"suggestions":"1654"},{"ruleId":"1325","severity":1,"message":"1655","line":124,"column":9,"nodeType":"1327","messageId":"1328","endLine":124,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":2,"column":54,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":5,"column":16,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1466","line":99,"column":10,"nodeType":"1327","messageId":"1328","endLine":99,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1538","line":106,"column":10,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1539","line":106,"column":26,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":43},{"ruleId":"1348","severity":1,"message":"1647","line":153,"column":6,"nodeType":"1350","endLine":153,"endColumn":24,"suggestions":"1656"},{"ruleId":"1325","severity":1,"message":"1649","line":169,"column":12,"nodeType":"1327","messageId":"1328","endLine":169,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1637","line":259,"column":9,"nodeType":"1327","messageId":"1328","endLine":259,"endColumn":24},{"ruleId":"1352","severity":1,"message":"1353","line":311,"column":24,"nodeType":"1354","messageId":"1355","endLine":311,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":314,"column":31,"nodeType":"1354","messageId":"1355","endLine":314,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":343,"column":47,"nodeType":"1354","messageId":"1355","endLine":343,"endColumn":49},{"ruleId":"1352","severity":1,"message":"1353","line":350,"column":42,"nodeType":"1354","messageId":"1355","endLine":350,"endColumn":44},{"ruleId":"1325","severity":1,"message":"1390","line":4,"column":15,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1391","line":7,"column":8,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1375","line":10,"column":8,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1392","line":13,"column":9,"nodeType":"1327","messageId":"1328","endLine":13,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1338","line":16,"column":9,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1393","line":16,"column":27,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1394","line":24,"column":8,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1657","line":30,"column":8,"nodeType":"1327","messageId":"1328","endLine":30,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1396","line":112,"column":26,"nodeType":"1327","messageId":"1328","endLine":112,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1397","line":117,"column":12,"nodeType":"1327","messageId":"1328","endLine":117,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1398","line":117,"column":43,"nodeType":"1327","messageId":"1328","endLine":117,"endColumn":72},{"ruleId":"1325","severity":1,"message":"1399","line":118,"column":12,"nodeType":"1327","messageId":"1328","endLine":118,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1400","line":118,"column":32,"nodeType":"1327","messageId":"1328","endLine":118,"endColumn":53},{"ruleId":"1325","severity":1,"message":"1401","line":119,"column":12,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1402","line":120,"column":12,"nodeType":"1327","messageId":"1328","endLine":120,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1403","line":120,"column":31,"nodeType":"1327","messageId":"1328","endLine":120,"endColumn":51},{"ruleId":"1325","severity":1,"message":"1404","line":211,"column":11,"nodeType":"1327","messageId":"1328","endLine":211,"endColumn":16},{"ruleId":"1352","severity":1,"message":"1353","line":263,"column":51,"nodeType":"1354","messageId":"1355","endLine":263,"endColumn":53},{"ruleId":"1352","severity":1,"message":"1353","line":283,"column":55,"nodeType":"1354","messageId":"1355","endLine":283,"endColumn":57},{"ruleId":"1325","severity":1,"message":"1405","line":532,"column":11,"nodeType":"1327","messageId":"1328","endLine":532,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1406","line":541,"column":11,"nodeType":"1327","messageId":"1328","endLine":541,"endColumn":35},{"ruleId":"1325","severity":1,"message":"1407","line":592,"column":19,"nodeType":"1327","messageId":"1328","endLine":592,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1408","line":641,"column":11,"nodeType":"1327","messageId":"1328","endLine":641,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1409","line":653,"column":11,"nodeType":"1327","messageId":"1328","endLine":653,"endColumn":35},{"ruleId":"1325","severity":1,"message":"1658","line":670,"column":19,"nodeType":"1327","messageId":"1328","endLine":670,"endColumn":31},{"ruleId":"1352","severity":1,"message":"1353","line":715,"column":28,"nodeType":"1354","messageId":"1355","endLine":715,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":724,"column":35,"nodeType":"1354","messageId":"1355","endLine":724,"endColumn":37},{"ruleId":"1410","severity":1,"message":"1411","line":1852,"column":45,"nodeType":"1412","messageId":"1413","endLine":1852,"endColumn":47},{"ruleId":"1410","severity":1,"message":"1411","line":1853,"column":45,"nodeType":"1412","messageId":"1413","endLine":1853,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1476","line":24,"column":19,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1431","line":106,"column":9,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1523","line":107,"column":10,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1524","line":109,"column":10,"nodeType":"1327","messageId":"1328","endLine":109,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1525","line":109,"column":31,"nodeType":"1327","messageId":"1328","endLine":109,"endColumn":53},{"ruleId":"1348","severity":1,"message":"1659","line":192,"column":6,"nodeType":"1350","endLine":192,"endColumn":34,"suggestions":"1660"},{"ruleId":"1348","severity":1,"message":"1661","line":198,"column":6,"nodeType":"1350","endLine":198,"endColumn":55,"suggestions":"1662"},{"ruleId":"1450","severity":1,"message":"1451","line":227,"column":57,"nodeType":"1452","messageId":"1453","endLine":227,"endColumn":59},{"ruleId":"1450","severity":1,"message":"1451","line":234,"column":57,"nodeType":"1452","messageId":"1453","endLine":234,"endColumn":59},{"ruleId":"1325","severity":1,"message":"1531","line":391,"column":7,"nodeType":"1327","messageId":"1328","endLine":391,"endColumn":10},{"ruleId":"1352","severity":1,"message":"1353","line":497,"column":47,"nodeType":"1354","messageId":"1355","endLine":497,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":16,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":29,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1370","line":2,"column":8,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1469","line":4,"column":8,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1373","line":5,"column":52,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":56},{"ruleId":"1325","severity":1,"message":"1374","line":6,"column":13,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1390","line":8,"column":15,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1344","line":95,"column":20,"nodeType":"1327","messageId":"1328","endLine":95,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1470","line":96,"column":12,"nodeType":"1327","messageId":"1328","endLine":96,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1471","line":96,"column":20,"nodeType":"1327","messageId":"1328","endLine":96,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1418","line":107,"column":21,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":33},{"ruleId":"1419","severity":1,"message":"1420","line":242,"column":32,"nodeType":"1421","messageId":"1422","endLine":242,"endColumn":76,"fix":"1663"},{"ruleId":"1419","severity":1,"message":"1420","line":249,"column":32,"nodeType":"1421","messageId":"1422","endLine":249,"endColumn":73,"fix":"1664"},{"ruleId":"1419","severity":1,"message":"1420","line":257,"column":32,"nodeType":"1421","messageId":"1422","endLine":257,"endColumn":70,"fix":"1665"},{"ruleId":"1419","severity":1,"message":"1420","line":264,"column":32,"nodeType":"1421","messageId":"1422","endLine":264,"endColumn":69,"fix":"1666"},{"ruleId":"1419","severity":1,"message":"1420","line":271,"column":32,"nodeType":"1421","messageId":"1422","endLine":271,"endColumn":69,"fix":"1667"},{"ruleId":"1419","severity":1,"message":"1420","line":273,"column":32,"nodeType":"1421","messageId":"1422","endLine":273,"endColumn":62,"fix":"1668"},{"ruleId":"1348","severity":1,"message":"1429","line":275,"column":6,"nodeType":"1350","endLine":280,"endColumn":4,"suggestions":"1669"},{"ruleId":"1352","severity":1,"message":"1353","line":422,"column":28,"nodeType":"1354","messageId":"1355","endLine":422,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":429,"column":28,"nodeType":"1354","messageId":"1355","endLine":429,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":440,"column":47,"nodeType":"1354","messageId":"1355","endLine":440,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1416","line":486,"column":9,"nodeType":"1327","messageId":"1328","endLine":486,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1431","line":89,"column":9,"nodeType":"1327","messageId":"1328","endLine":89,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1418","line":99,"column":21,"nodeType":"1327","messageId":"1328","endLine":99,"endColumn":33},{"ruleId":"1348","severity":1,"message":"1434","line":178,"column":6,"nodeType":"1350","endLine":178,"endColumn":48,"suggestions":"1670"},{"ruleId":"1325","severity":1,"message":"1568","line":3,"column":20,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1473","line":6,"column":10,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1338","line":7,"column":10,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1476","line":9,"column":18,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1671","line":3,"column":8,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1371","line":4,"column":38,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":4,"column":54,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":7,"column":16,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1375","line":8,"column":8,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1392","line":11,"column":10,"nodeType":"1327","messageId":"1328","endLine":11,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1338","line":14,"column":10,"nodeType":"1327","messageId":"1328","endLine":14,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1393","line":14,"column":28,"nodeType":"1327","messageId":"1328","endLine":14,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":22,"column":8,"nodeType":"1327","messageId":"1328","endLine":22,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1672","line":24,"column":10,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1379","line":27,"column":10,"nodeType":"1327","messageId":"1328","endLine":27,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1431","line":104,"column":9,"nodeType":"1327","messageId":"1328","endLine":104,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1440","line":111,"column":10,"nodeType":"1327","messageId":"1328","endLine":111,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1673","line":116,"column":25,"nodeType":"1327","messageId":"1328","endLine":116,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1674","line":118,"column":10,"nodeType":"1327","messageId":"1328","endLine":118,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1675","line":119,"column":10,"nodeType":"1327","messageId":"1328","endLine":119,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1676","line":121,"column":23,"nodeType":"1327","messageId":"1328","endLine":121,"endColumn":37},{"ruleId":"1325","severity":1,"message":"1677","line":123,"column":24,"nodeType":"1327","messageId":"1328","endLine":123,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1678","line":125,"column":27,"nodeType":"1327","messageId":"1328","endLine":125,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1679","line":126,"column":10,"nodeType":"1327","messageId":"1328","endLine":126,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1441","line":128,"column":10,"nodeType":"1327","messageId":"1328","endLine":128,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1680","line":128,"column":24,"nodeType":"1327","messageId":"1328","endLine":128,"endColumn":40},{"ruleId":"1348","severity":1,"message":"1681","line":213,"column":6,"nodeType":"1350","endLine":213,"endColumn":38,"suggestions":"1682"},{"ruleId":"1352","severity":1,"message":"1353","line":390,"column":47,"nodeType":"1354","messageId":"1355","endLine":390,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":16,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1372","line":4,"column":46,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":51},{"ruleId":"1325","severity":1,"message":"1373","line":4,"column":52,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":56},{"ruleId":"1325","severity":1,"message":"1390","line":6,"column":15,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1476","line":16,"column":18,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1418","line":109,"column":23,"nodeType":"1327","messageId":"1328","endLine":109,"endColumn":35},{"ruleId":"1348","severity":1,"message":"1481","line":244,"column":8,"nodeType":"1350","endLine":244,"endColumn":26,"suggestions":"1683"},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":6,"column":16,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1466","line":99,"column":10,"nodeType":"1327","messageId":"1328","endLine":99,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1444","line":117,"column":9,"nodeType":"1327","messageId":"1328","endLine":117,"endColumn":19},{"ruleId":"1352","severity":1,"message":"1353","line":565,"column":47,"nodeType":"1354","messageId":"1355","endLine":565,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1375","line":4,"column":8,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1476","line":16,"column":19,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1378","line":16,"column":32,"nodeType":"1327","messageId":"1328","endLine":16,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":17,"column":8,"nodeType":"1327","messageId":"1328","endLine":17,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1391","line":18,"column":8,"nodeType":"1327","messageId":"1328","endLine":18,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1549","line":107,"column":9,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1489","line":115,"column":10,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1490","line":115,"column":19,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1385","line":122,"column":10,"nodeType":"1327","messageId":"1328","endLine":122,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1386","line":122,"column":21,"nodeType":"1327","messageId":"1328","endLine":122,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1550","line":125,"column":10,"nodeType":"1327","messageId":"1328","endLine":125,"endColumn":22},{"ruleId":"1325","severity":1,"message":"1506","line":125,"column":24,"nodeType":"1327","messageId":"1328","endLine":125,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1551","line":126,"column":10,"nodeType":"1327","messageId":"1328","endLine":126,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1552","line":126,"column":25,"nodeType":"1327","messageId":"1328","endLine":126,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1553","line":134,"column":10,"nodeType":"1327","messageId":"1328","endLine":134,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1554","line":134,"column":29,"nodeType":"1327","messageId":"1328","endLine":134,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1555","line":135,"column":10,"nodeType":"1327","messageId":"1328","endLine":135,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1556","line":136,"column":10,"nodeType":"1327","messageId":"1328","endLine":136,"endColumn":35},{"ruleId":"1325","severity":1,"message":"1557","line":139,"column":10,"nodeType":"1327","messageId":"1328","endLine":139,"endColumn":30},{"ruleId":"1348","severity":1,"message":"1684","line":213,"column":6,"nodeType":"1350","endLine":213,"endColumn":8,"suggestions":"1685"},{"ruleId":"1325","severity":1,"message":"1454","line":223,"column":9,"nodeType":"1327","messageId":"1328","endLine":223,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1516","line":242,"column":9,"nodeType":"1327","messageId":"1328","endLine":242,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1455","line":286,"column":11,"nodeType":"1327","messageId":"1328","endLine":286,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1548","line":455,"column":9,"nodeType":"1327","messageId":"1328","endLine":455,"endColumn":32},{"ruleId":"1352","severity":1,"message":"1353","line":456,"column":24,"nodeType":"1354","messageId":"1355","endLine":456,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":459,"column":31,"nodeType":"1354","messageId":"1355","endLine":459,"endColumn":33},{"ruleId":"1325","severity":1,"message":"1637","line":490,"column":9,"nodeType":"1327","messageId":"1328","endLine":490,"endColumn":24},{"ruleId":"1352","severity":1,"message":"1353","line":550,"column":47,"nodeType":"1354","messageId":"1355","endLine":550,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1473","line":27,"column":10,"nodeType":"1327","messageId":"1328","endLine":27,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1456","line":29,"column":10,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1652","line":29,"column":28,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1653","line":29,"column":34,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1342","line":56,"column":7,"nodeType":"1327","messageId":"1328","endLine":56,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1640","line":102,"column":9,"nodeType":"1327","messageId":"1328","endLine":102,"endColumn":18},{"ruleId":"1348","severity":1,"message":"1623","line":108,"column":6,"nodeType":"1350","endLine":108,"endColumn":8,"suggestions":"1686"},{"ruleId":"1325","severity":1,"message":"1655","line":123,"column":9,"nodeType":"1327","messageId":"1328","endLine":123,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1372","line":5,"column":47,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":52},{"ruleId":"1325","severity":1,"message":"1373","line":5,"column":54,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1378","line":7,"column":40,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1380","line":115,"column":9,"nodeType":"1327","messageId":"1328","endLine":115,"endColumn":17},{"ruleId":"1352","severity":1,"message":"1353","line":162,"column":47,"nodeType":"1354","messageId":"1355","endLine":162,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":6,"column":16,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1418","line":106,"column":21,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":33},{"ruleId":"1419","severity":1,"message":"1420","line":220,"column":32,"nodeType":"1421","messageId":"1422","endLine":220,"endColumn":76,"fix":"1687"},{"ruleId":"1419","severity":1,"message":"1420","line":227,"column":32,"nodeType":"1421","messageId":"1422","endLine":227,"endColumn":73,"fix":"1688"},{"ruleId":"1419","severity":1,"message":"1420","line":235,"column":32,"nodeType":"1421","messageId":"1422","endLine":235,"endColumn":70,"fix":"1689"},{"ruleId":"1419","severity":1,"message":"1420","line":242,"column":32,"nodeType":"1421","messageId":"1422","endLine":242,"endColumn":69,"fix":"1690"},{"ruleId":"1419","severity":1,"message":"1420","line":249,"column":32,"nodeType":"1421","messageId":"1422","endLine":249,"endColumn":69,"fix":"1691"},{"ruleId":"1419","severity":1,"message":"1420","line":251,"column":32,"nodeType":"1421","messageId":"1422","endLine":251,"endColumn":62,"fix":"1692"},{"ruleId":"1348","severity":1,"message":"1429","line":281,"column":6,"nodeType":"1350","endLine":286,"endColumn":4,"suggestions":"1693"},{"ruleId":"1352","severity":1,"message":"1353","line":427,"column":28,"nodeType":"1354","messageId":"1355","endLine":427,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":434,"column":28,"nodeType":"1354","messageId":"1355","endLine":434,"endColumn":30},{"ruleId":"1352","severity":1,"message":"1353","line":444,"column":47,"nodeType":"1354","messageId":"1355","endLine":444,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1694","line":449,"column":11,"nodeType":"1327","messageId":"1328","endLine":449,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1431","line":92,"column":9,"nodeType":"1327","messageId":"1328","endLine":92,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1418","line":103,"column":21,"nodeType":"1327","messageId":"1328","endLine":103,"endColumn":33},{"ruleId":"1348","severity":1,"message":"1434","line":205,"column":6,"nodeType":"1350","endLine":205,"endColumn":24,"suggestions":"1695"},{"ruleId":"1325","severity":1,"message":"1371","line":3,"column":38,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":54,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1476","line":24,"column":19,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1431","line":104,"column":9,"nodeType":"1327","messageId":"1328","endLine":104,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1523","line":108,"column":10,"nodeType":"1327","messageId":"1328","endLine":108,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1524","line":110,"column":10,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1525","line":110,"column":31,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":53},{"ruleId":"1325","severity":1,"message":"1679","line":123,"column":10,"nodeType":"1327","messageId":"1328","endLine":123,"endColumn":18},{"ruleId":"1348","severity":1,"message":"1696","line":184,"column":6,"nodeType":"1350","endLine":184,"endColumn":24,"suggestions":"1697"},{"ruleId":"1450","severity":1,"message":"1451","line":216,"column":45,"nodeType":"1452","messageId":"1453","endLine":216,"endColumn":47},{"ruleId":"1450","severity":1,"message":"1451","line":225,"column":45,"nodeType":"1452","messageId":"1453","endLine":225,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1531","line":408,"column":7,"nodeType":"1327","messageId":"1328","endLine":408,"endColumn":10},{"ruleId":"1352","severity":1,"message":"1353","line":508,"column":47,"nodeType":"1354","messageId":"1355","endLine":508,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":16,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":29,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1370","line":2,"column":8,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1469","line":4,"column":8,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1373","line":5,"column":52,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":56},{"ruleId":"1325","severity":1,"message":"1374","line":6,"column":13,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1390","line":8,"column":15,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1344","line":88,"column":20,"nodeType":"1327","messageId":"1328","endLine":88,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1470","line":89,"column":12,"nodeType":"1327","messageId":"1328","endLine":89,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1471","line":89,"column":20,"nodeType":"1327","messageId":"1328","endLine":89,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":16,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":53,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":57},{"ruleId":"1325","severity":1,"message":"1390","line":6,"column":15,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1698","line":89,"column":12,"nodeType":"1327","messageId":"1328","endLine":89,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1699","line":89,"column":26,"nodeType":"1327","messageId":"1328","endLine":89,"endColumn":41},{"ruleId":"1325","severity":1,"message":"1444","line":117,"column":11,"nodeType":"1327","messageId":"1328","endLine":117,"endColumn":21},{"ruleId":"1352","severity":1,"message":"1353","line":572,"column":51,"nodeType":"1354","messageId":"1355","endLine":572,"endColumn":53},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":16,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1372","line":3,"column":46,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":51},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":52,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":56},{"ruleId":"1325","severity":1,"message":"1390","line":6,"column":15,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1700","line":12,"column":10,"nodeType":"1327","messageId":"1328","endLine":12,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1476","line":17,"column":18,"nodeType":"1327","messageId":"1328","endLine":17,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1418","line":107,"column":23,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":35},{"ruleId":"1348","severity":1,"message":"1701","line":195,"column":8,"nodeType":"1350","endLine":195,"endColumn":26,"suggestions":"1702"},{"ruleId":"1325","severity":1,"message":"1373","line":3,"column":15,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1703","line":3,"column":35,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":44},{"ruleId":"1325","severity":1,"message":"1704","line":3,"column":46,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":54},{"ruleId":"1325","severity":1,"message":"1390","line":5,"column":16,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1461","line":9,"column":9,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1705","line":10,"column":9,"nodeType":"1327","messageId":"1328","endLine":10,"endColumn":30},{"ruleId":"1325","severity":1,"message":"1706","line":13,"column":10,"nodeType":"1327","messageId":"1328","endLine":13,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1414","line":35,"column":9,"nodeType":"1327","messageId":"1328","endLine":35,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1707","line":36,"column":10,"nodeType":"1327","messageId":"1328","endLine":36,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1632","line":39,"column":9,"nodeType":"1327","messageId":"1328","endLine":39,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1637","line":42,"column":9,"nodeType":"1327","messageId":"1328","endLine":42,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1708","line":43,"column":11,"nodeType":"1327","messageId":"1328","endLine":43,"endColumn":21},{"ruleId":"1325","severity":1,"message":"1709","line":44,"column":9,"nodeType":"1327","messageId":"1328","endLine":44,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1710","line":51,"column":9,"nodeType":"1327","messageId":"1328","endLine":51,"endColumn":13},{"ruleId":"1325","severity":1,"message":"1711","line":53,"column":9,"nodeType":"1327","messageId":"1328","endLine":53,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1712","line":57,"column":9,"nodeType":"1327","messageId":"1328","endLine":57,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1568","line":3,"column":20,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1473","line":6,"column":10,"nodeType":"1327","messageId":"1328","endLine":6,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1338","line":7,"column":10,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1476","line":9,"column":18,"nodeType":"1327","messageId":"1328","endLine":9,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1671","line":3,"column":8,"nodeType":"1327","messageId":"1328","endLine":3,"endColumn":17},{"ruleId":"1325","severity":1,"message":"1371","line":4,"column":38,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":45},{"ruleId":"1325","severity":1,"message":"1373","line":4,"column":54,"nodeType":"1327","messageId":"1328","endLine":4,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":7,"column":16,"nodeType":"1327","messageId":"1328","endLine":7,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1375","line":8,"column":8,"nodeType":"1327","messageId":"1328","endLine":8,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1392","line":11,"column":10,"nodeType":"1327","messageId":"1328","endLine":11,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1338","line":14,"column":10,"nodeType":"1327","messageId":"1328","endLine":14,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1393","line":14,"column":28,"nodeType":"1327","messageId":"1328","endLine":14,"endColumn":39},{"ruleId":"1325","severity":1,"message":"1394","line":22,"column":8,"nodeType":"1327","messageId":"1328","endLine":22,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1672","line":24,"column":10,"nodeType":"1327","messageId":"1328","endLine":24,"endColumn":15},{"ruleId":"1325","severity":1,"message":"1431","line":99,"column":9,"nodeType":"1327","messageId":"1328","endLine":99,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1440","line":106,"column":10,"nodeType":"1327","messageId":"1328","endLine":106,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1679","line":110,"column":10,"nodeType":"1327","messageId":"1328","endLine":110,"endColumn":18},{"ruleId":"1348","severity":1,"message":"1713","line":167,"column":6,"nodeType":"1350","endLine":167,"endColumn":24,"suggestions":"1714"},{"ruleId":"1352","severity":1,"message":"1353","line":246,"column":47,"nodeType":"1354","messageId":"1355","endLine":246,"endColumn":49},{"ruleId":"1325","severity":1,"message":"1335","line":1,"column":17,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":28},{"ruleId":"1325","severity":1,"message":"1373","line":2,"column":54,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":58},{"ruleId":"1325","severity":1,"message":"1390","line":5,"column":16,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":27},{"ruleId":"1325","severity":1,"message":"1715","line":100,"column":10,"nodeType":"1327","messageId":"1328","endLine":100,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1716","line":100,"column":28,"nodeType":"1327","messageId":"1328","endLine":100,"endColumn":47},{"ruleId":"1325","severity":1,"message":"1717","line":101,"column":10,"nodeType":"1327","messageId":"1328","endLine":101,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1718","line":101,"column":31,"nodeType":"1327","messageId":"1328","endLine":101,"endColumn":53},{"ruleId":"1325","severity":1,"message":"1637","line":107,"column":9,"nodeType":"1327","messageId":"1328","endLine":107,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1538","line":114,"column":10,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":24},{"ruleId":"1325","severity":1,"message":"1539","line":114,"column":26,"nodeType":"1327","messageId":"1328","endLine":114,"endColumn":43},{"ruleId":"1348","severity":1,"message":"1647","line":155,"column":6,"nodeType":"1350","endLine":155,"endColumn":8,"suggestions":"1719"},{"ruleId":"1325","severity":1,"message":"1649","line":171,"column":12,"nodeType":"1327","messageId":"1328","endLine":171,"endColumn":26},{"ruleId":"1325","severity":1,"message":"1720","line":290,"column":13,"nodeType":"1327","messageId":"1328","endLine":290,"endColumn":14},{"ruleId":"1352","severity":1,"message":"1353","line":305,"column":24,"nodeType":"1354","messageId":"1355","endLine":305,"endColumn":26},{"ruleId":"1352","severity":1,"message":"1353","line":308,"column":31,"nodeType":"1354","messageId":"1355","endLine":308,"endColumn":33},{"ruleId":"1352","severity":1,"message":"1353","line":340,"column":47,"nodeType":"1354","messageId":"1355","endLine":340,"endColumn":49},{"ruleId":"1352","severity":1,"message":"1353","line":347,"column":42,"nodeType":"1354","messageId":"1355","endLine":347,"endColumn":44},{"ruleId":"1325","severity":1,"message":"1473","line":27,"column":10,"nodeType":"1327","messageId":"1328","endLine":27,"endColumn":20},{"ruleId":"1325","severity":1,"message":"1456","line":29,"column":10,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1652","line":29,"column":28,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":32},{"ruleId":"1325","severity":1,"message":"1653","line":29,"column":34,"nodeType":"1327","messageId":"1328","endLine":29,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1342","line":56,"column":7,"nodeType":"1327","messageId":"1328","endLine":56,"endColumn":16},{"ruleId":"1325","severity":1,"message":"1640","line":102,"column":9,"nodeType":"1327","messageId":"1328","endLine":102,"endColumn":18},{"ruleId":"1348","severity":1,"message":"1623","line":108,"column":6,"nodeType":"1350","endLine":108,"endColumn":8,"suggestions":"1721"},{"ruleId":"1325","severity":1,"message":"1655","line":123,"column":9,"nodeType":"1327","messageId":"1328","endLine":123,"endColumn":25},{"ruleId":"1325","severity":1,"message":"1459","line":1,"column":8,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":18},{"ruleId":"1325","severity":1,"message":"1460","line":2,"column":8,"nodeType":"1327","messageId":"1328","endLine":2,"endColumn":23},{"ruleId":"1352","severity":1,"message":"1605","line":2,"column":27,"nodeType":"1354","messageId":"1355","endLine":2,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1606","line":5,"column":11,"nodeType":"1327","messageId":"1328","endLine":5,"endColumn":20},{"ruleId":"1352","severity":1,"message":"1605","line":57,"column":27,"nodeType":"1354","messageId":"1355","endLine":57,"endColumn":29},{"ruleId":"1325","severity":1,"message":"1606","line":60,"column":11,"nodeType":"1327","messageId":"1328","endLine":60,"endColumn":20},{"ruleId":"1364","severity":1,"message":"1365","line":31,"column":10,"nodeType":"1366","messageId":"1367","endLine":31,"endColumn":24,"fix":"1722"},{"ruleId":"1325","severity":1,"message":"1431","line":65,"column":7,"nodeType":"1327","messageId":"1328","endLine":65,"endColumn":14},{"ruleId":"1325","severity":1,"message":"1723","line":69,"column":10,"nodeType":"1327","messageId":"1328","endLine":69,"endColumn":23},{"ruleId":"1325","severity":1,"message":"1724","line":89,"column":7,"nodeType":"1327","messageId":"1328","endLine":89,"endColumn":31},{"ruleId":"1348","severity":1,"message":"1725","line":159,"column":6,"nodeType":"1350","endLine":159,"endColumn":57,"suggestions":"1726"},{"ruleId":"1348","severity":1,"message":"1727","line":180,"column":6,"nodeType":"1350","endLine":180,"endColumn":21,"suggestions":"1728"},{"ruleId":"1325","severity":1,"message":"1360","line":1,"column":10,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":19},{"ruleId":"1325","severity":1,"message":"1729","line":1,"column":31,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":38},{"ruleId":"1325","severity":1,"message":"1730","line":1,"column":40,"nodeType":"1327","messageId":"1328","endLine":1,"endColumn":44},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["1731"],"no-negated-in-lhs",["1732"],"'Router' is defined but never used.","'Dashboard' is defined but never used.","'useCallback' is defined but never used.","'ViewPNSForm' is defined but never used.","'toast' is defined but never used.","'Link' is defined but never used.","'Sticky' is defined but never used.","'ClientRefferalForm' is defined but never used.","'getNextForm' is defined but never used.","'useStyles' is assigned a value but never used.","'saving' is assigned a value but never used.","'setSaving' is assigned a value but never used.","'patientObjAge' is assigned a value but never used.","'setShowBackButton' is assigned a value but never used.","'setIndexInfo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'locationState'. Either include it or remove the dependency array.","ArrayExpression",["1733"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["1731"],["1732"],"'Tab' is defined but never used.","'Tabs' is defined but never used.","'useEffect' is defined but never used.","'MaterialTable' is defined but never used.","'MTableToolbar' is defined but never used.","'forwardRef' is defined but never used.","no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"1734","text":"1735"},{"range":"1736","text":"1735"},"'axios' is defined but never used.","'Spinner' is defined but never used.","'Input' is defined but never used.","'Form' is defined but never used.","'moment' is defined but never used.","'SaveIcon' is defined but never used.","'token' is defined but never used.","'baseUrl' is defined but never used.","'Message' is defined but never used.","'error' is defined but never used.","'validate' is assigned a value but never used.","'useLocalStorage' is defined but never used.","'setAlertThresholdMinutes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'alertThresholdMinutes'. Either include it or remove the dependency array.",["1737"],"'hivStatus' is assigned a value but never used.","'setHivStatus' is assigned a value but never used.","'htsResult2' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'PatientCurrentObject'. Either include it or remove the dependency array.",["1738"],"'CardContent' is defined but never used.","'Select' is defined but never used.","'ToastContainer' is defined but never used.","'useLocation' is defined but never used.","'PhoneInput' is defined but never used.","'patient' is assigned a value but never used.","'setSerialNumber' is assigned a value but never used.","'otherTestKitUserInfoAvailable' is assigned a value but never used.","'setIsUserInformationAvailable' is assigned a value but never used.","'kitUserInformation' is assigned a value but never used.","'setKitUserInformation' is assigned a value but never used.","'serviceNeeded' is assigned a value but never used.","'hasConductedHIVST' is assigned a value but never used.","'setHasConductedHIVST' is assigned a value but never used.","'style' is assigned a value but never used.","'updateUserInformation' is assigned a value but never used.","'clearUserInformationList' is assigned a value but never used.","'response' is assigned a value but never used.","'setAge' is assigned a value but never used.","'handleDateOfBirthChange1' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'classes' is assigned a value but never used.","'_' is assigned a value but never used.","'permissions' is assigned a value but never used.","'setPermission' is assigned a value but never used.","'setObjValues' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property [\"rencencyInterpretation\"] found.","Property","unnecessarilyComputedProperty",{"range":"1739","text":"1740"},{"range":"1741","text":"1740"},{"range":"1742","text":"1740"},{"range":"1743","text":"1740"},{"range":"1744","text":"1740"},{"range":"1745","text":"1740"},"React Hook useEffect has a missing dependency: 'recency'. Either include it or remove the dependency array. You can also do a functional update 'setRecency(r => ...)' if you only need 'recency' in the 'setRecency' call.",["1746"],"'history' is assigned a value but never used.","'nextForm' is assigned a value but never used.","'setNextForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'postTest'. Either include it or remove the dependency array. You can also do a functional update 'setPostTest(p => ...)' if you only need 'postTest' in the 'setPostTest' call.",["1747"],"'fontWeight' is defined but never used.","'getDoubleSkipForm' is defined but never used.","'hideNumChild' is assigned a value but never used.","'setHideNumChild' is assigned a value but never used.","'gender' is assigned a value but never used.","'showPregancy' is assigned a value but never used.","'pregnancyCode' is assigned a value but never used.","'setPregnancyCode' is assigned a value but never used.","'patientAge' is assigned a value but never used.","'setPmtctSetting' is assigned a value but never used.","'facilityShortCode' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'CreateClientCode', 'EnrollmentSetting', 'PregnancyStatus', 'convertFromIdToDisplay', 'country', 'determinSex', 'getStates', 'objValues', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1748"],"'facilityList' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'checkPhoneNumberBasic' is assigned a value but never used.","'limit' is assigned a value but never used.","'Dropdown' is defined but never used.","'Nav' is defined but never used.","'PerfectScrollbar' is defined but never used.","'Highcharts' is defined but never used.","'HighchartsReact' is defined but never used.","'NewlyEnrolledArtBySex' is defined but never used.","'options' is assigned a value but never used.","'options2' is assigned a value but never used.",["1731"],["1732"],"'hivTestDate' is assigned a value but never used.","'CheckTestResult' is defined but never used.","'CheckTestResult2' is defined but never used.","'Button' is defined but never used.","'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.",{"range":"1749","text":"1735"},"'FaUserPlus' is defined but never used.","React Hook useEffect has a missing dependency: 'getListoFFamilyIndexInfo'. Either include it or remove the dependency array.",["1750"],"'LabelRibbon' is defined but never used.","no-dupe-keys","Duplicate key 'consistentWeightFeverNightCough'.","ObjectExpression","Duplicate key 'soldPaidVaginalSex'.","React Hook useEffect has missing dependencies: 'knowledgeAssessment' and 'riskAssessment'. Either include them or remove the dependency array. You can also do a functional update 'setRiskAssessment(r => ...)' if you only need 'riskAssessment' in the 'setRiskAssessment' call.",["1751"],"'Cookies' is defined but never used.","'kP' is assigned a value but never used.","'setKP' is assigned a value but never used.","'ageDisabled' is assigned a value but never used.","'setAgeDisabled' is assigned a value but never used.","'temp' is assigned a value but never used.","'setting' is assigned a value but never used.","'setSetting' is assigned a value but never used.","'hospitalNumStatus' is assigned a value but never used.","'setHospitalNumStatus' is assigned a value but never used.","'countries' is assigned a value but never used.","'setCountries' is assigned a value but never used.","'states' is assigned a value but never used.","'setStates' is assigned a value but never used.","'genders' is assigned a value but never used.","'setGenders' is assigned a value but never used.","'targetGroupValue' is assigned a value but never used.","'setTargetGroupValue' is assigned a value but never used.","'contentDropDown' is assigned a value but never used.","'setClientCurrentlyOnHiv' is assigned a value but never used.","'setSelectedFamilyIndex' is assigned a value but never used.","'setStateInfo' is assigned a value but never used.","'setLgaInfo' is assigned a value but never used.","'setFacilityName' is assigned a value but never used.","'arrayFamilyIndexRequestDto' is assigned a value but never used.","'setArrayFamilyIndexRequestDto' is assigned a value but never used.","'arrayFamilyTestingTrackerRequestDTO' is assigned a value but never used.","'setArrayFamilyTestingTrackerRequestDTO' is assigned a value but never used.","'loadOtherForm' is assigned a value but never used.","'main' is assigned a value but never used.","'loadFamilyIndexSetting' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCurrentTreatment', 'getSettings', 'getVL', 'loadGenders', 'props?.basicInfo?.personResponseDto?.address?.address', 'props.organizationInfo', and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1752"],"'handleInputChangeObject' is assigned a value but never used.","'getProvinces' is assigned a value but never used.","'handleFamilyRelationshipChange' is assigned a value but never used.","'convertCodeToDisplay' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'useHistory' is defined but never used.","'enrollSetting' is assigned a value but never used.","'entryPointCommunity' is assigned a value but never used.","'setEntryPointCommunity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1753"],"React Hook useEffect has missing dependencies: 'EntryPoint' and 'TargetGroupSetup'. Either include them or remove the dependency array.",["1754"],"'EnrollmentSetting' is assigned a value but never used.","'ans' is assigned a value but never used.","'setHivTestDate' is assigned a value but never used.","'elicitedCount' is assigned a value but never used.","'setElicitedCount' is assigned a value but never used.","'isClientCurrentlyOnHiv' is assigned a value but never used.","'setIsClientCurrentlyOnHiv' is assigned a value but never used.","'partnerId' is assigned a value but never used.","'objValuesIndex' is assigned a value but never used.","'setObjValuesIndex' is assigned a value but never used.","Duplicate key 'numberOfPartnerIdentifiedFromClientIndex'.","'getPartnerId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStates', 'props?.basicInfo?.personResponseDto?.address?.address', 'props.organizationInfo', and 'viewPnIsnfo'. Either include them or remove the dependency array.",["1755"],"React Hook useEffect has a missing dependency: 'loadFamilyIndexSetting'. Either include it or remove the dependency array.",["1756"],"'getAllRecordByHTSClientId' is assigned a value but never used.","'handleItemClickPage' is assigned a value but never used.","'handleDateOfBirthChange' is assigned a value but never used.","'patientObj' is assigned a value but never used.","'facilityName' is assigned a value but never used.","'allFacilities' is assigned a value but never used.","'setAllFacilities' is assigned a value but never used.","'receivingFacility' is assigned a value but never used.","'setReceivingFacility' is assigned a value but never used.","'selectedReceivingState' is assigned a value but never used.","'selectedReceivingFacility' is assigned a value but never used.","'selectedReceivingLga' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getProvincesWithId', 'loadGenders', and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1757"],"'getSex' is assigned a value but never used.","'Badge' is defined but never used.","'PersonIcon' is defined but never used.","'getPNSInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getPartnerId', 'getStates', 'htsClientInformation', 'objValues', 'props?.basicInfo?.personResponseDto?.address?.address', and 'props.organizationInfo'. Either include them or remove the dependency array. You can also do a functional update 'setObjValues(o => ...)' if you only need 'objValues' in the 'setObjValues' call.",["1758"],["1759"],"'viewPnsInfo' is assigned a value but never used.","'Card' is defined but never used.","'AddIndexContact' is defined but never used.",{"range":"1760","text":"1735"},"'LMP' is assigned a value but never used.","'hasPermission' is assigned a value but never used.","'lastHts' is assigned a value but never used.","'lastVisitCount' is assigned a value but never used.","'checkModality' is assigned a value but never used.","'weekRange' is assigned a value but never used.","'lmpDate' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'patients' and 'patientsCurrentHts'. Either include them or remove the dependency array.",["1761"],"React Hook useMemo has an unnecessary dependency: 'props.patientObj'. Either exclude it or remove the dependency array.",["1762"],"'ModeEditIcon' is defined but never used.","'VisibilityOffIcon' is defined but never used.","'LiveHelp' is defined but never used.","'provinces' is assigned a value but never used.","'selectedFamilyIndex' is assigned a value but never used.","'isWillingToHaveChildrenTested' is assigned a value but never used.","'setIsWillingToHaveChildrenTested' is assigned a value but never used.","'addIndexTracker' is assigned a value but never used.","'addIndexTracker2' is assigned a value but never used.","'selectedState' is assigned a value but never used.","'selectedFacility' is assigned a value but never used.","'selectedLga' is assigned a value but never used.","'retrieveFromIdToCode' is assigned a value but never used.","'validateAddFamilyINdexDTO' is assigned a value but never used.","'updateFamilyIndexDTO' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFamilyIndexRequestList', 'getListOfFamilyTracker', 'getListoFFamilyIndexInfo', 'getSettings', 'loadGenders', 'props?.basicInfo?.personResponseDto?.address?.address', 'props.organizationInfo', 'props?.patientObj?.personResponseDto?.address?.address', and 'props.selectedRow'. Either include them or remove the dependency array. If 'setFamilyIndexRequestDto' needs the current value of 'props.selectedRow', you can also switch to useReducer instead of useState and read 'props.selectedRow' in the reducer.",["1763"],"'hideFamilyIndex' is assigned a value but never used.","'selectAMember' is assigned a value but never used.","'PNSList' is defined but never used.","'RefferalForm' is defined but never used.","React Hook useEffect has a missing dependency: 'viewReferralInfo'. Either include it or remove the dependency array.",["1764"],"Expected '!==' and instead saw '!='.","'dateParts' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'ageCondition' is assigned a value but never used.","'pmctctModalityCondition' is assigned a value but never used.","'HivStatuscondition' is assigned a value but never used.","'latestNextForm' is assigned a value but never used.","'lengthOfAuthForm' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'FetchHivstHistory'. Either include it or remove the dependency array.",["1765"],"'serviceMapping' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'patients'. Either include it or remove the dependency array.",["1766"],"'setSelectedReceivingFacility' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStateByCountryId', 'loadGenders', and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1767"],"React Hook useEffect has a missing dependency: 'props.row.row.id'. Either include it or remove the dependency array.",["1768"],"'postPayload' is assigned a value but never used.","'CardBody' is defined but never used.","'toggle' is assigned a value but never used.","'facilities1' is assigned a value but never used.","'setSelectedState' is assigned a value but never used.","'setSelectedFacility' is assigned a value but never used.","'setSelectedLga' is assigned a value but never used.","'handleItemClick' is assigned a value but never used.",["1769"],"'handleInputChangeLocation' is assigned a value but never used.","'patientId' is assigned a value but never used.",["1770"],"'makeStyles' is defined but never used.","'hideOtherMenu' is assigned a value but never used.","'ReferralUnit' is defined but never used.","'set' is defined but never used.","'action' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStates'. Either include it or remove the dependency array.",["1771"],"'getProvincesId' is defined but never used.","'useState' is defined but never used.",{"range":"1772","text":"1735"},"'Menu' is defined but never used.","'Icon' is defined but never used.",["1773"],"'handleIEditIndex' is assigned a value but never used.",["1774"],"'EditIcon' is defined but never used.","'userInfoList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'KP' and 'props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint'. Either include them or remove the dependency array.",["1775"],"React Hook useEffect has a missing dependency: 'retestingInfo'. Either include it or remove the dependency array.",["1776"],{"range":"1777","text":"1740"},{"range":"1778","text":"1740"},{"range":"1779","text":"1740"},{"range":"1780","text":"1740"},{"range":"1781","text":"1740"},{"range":"1782","text":"1740"},["1783"],["1784"],"'MatButton' is defined but never used.","'Modal' is defined but never used.","'setDisableVitals' is assigned a value but never used.","'clientCodeetail' is assigned a value but never used.","'clientCodeetail2' is assigned a value but never used.","'setCreatedCode' is assigned a value but never used.","'setFacilityCode' is assigned a value but never used.","'setDisableModality' is assigned a value but never used.","'codesets' is assigned a value but never used.","'setShowPregnancy' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSettingList'. Either include it or remove the dependency array.",["1785"],["1786"],"React Hook useEffect has missing dependencies: 'loadGenders' and 'props?.patientObj?.personResponseDto?.address?.address'. Either include them or remove the dependency array.",["1787"],["1788"],{"range":"1789","text":"1740"},{"range":"1790","text":"1740"},{"range":"1791","text":"1740"},{"range":"1792","text":"1740"},{"range":"1793","text":"1740"},{"range":"1794","text":"1740"},["1795"],"'latestForm' is assigned a value but never used.",["1796"],"React Hook useEffect has missing dependencies: 'KP' and 'props.activePage.activeObject.riskStratificationResponseDto'. Either include them or remove the dependency array. If 'setObjValues' needs the current value of 'props.activePage.activeObject.riskStratificationResponseDto', you can also switch to useReducer instead of useState and read 'props.activePage.activeObject.riskStratificationResponseDto' in the reducer.",["1797"],"'resultStatus' is assigned a value but never used.","'setResultStatus' is assigned a value but never used.","'getPregnantCodeSet' is defined but never used.","React Hook useEffect has missing dependencies: 'knowledgeAssessment' and 'riskAssessment'. Either include them or remove the dependency array. You can also do a functional update 'setKnowledgeAssessment(k => ...)' if you only need 'knowledgeAssessment' in the 'setKnowledgeAssessment' call.",["1798"],"'CardTitle' is defined but never used.","'CardText' is defined but never used.","'NewlyEnrolledArtByAge' is defined but never used.","'Progress' is defined but never used.","'chartValue' is assigned a value but never used.","'activeItem' is assigned a value but never used.","'chartPage' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.activePage.activeObject'. Either include it or remove the dependency array. If 'setObjValues' needs the current value of 'props.activePage.activeObject', you can also switch to useReducer instead of useState and read 'props.activePage.activeObject' in the reducer.",["1799"],"'stateUnitOptions' is assigned a value but never used.","'setStateUnitOptions' is assigned a value but never used.","'districtUnitOptions' is assigned a value but never used.","'setDistrictUnitOptions' is assigned a value but never used.",["1800"],"'m' is assigned a value but never used.",["1801"],{"range":"1802","text":"1735"},"'checkinStatus' is assigned a value but never used.","'isCompleteButtonDisabled' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'pregnancyStatusPregnant' and 'props.patientInfo?.pregnant'. Either include them or remove the dependency array. Outer scope values like 'baseUrl' aren't valid dependencies because mutating them doesn't re-render the component.",["1803"],"React Hook useCallback has a missing dependency: 'patientObj?.personId'. Either include it or remove the dependency array.",["1804"],"'useMemo' is defined but never used.","'memo' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1805","fix":"1806"},[79,93],"token",[90,104],{"desc":"1807","fix":"1808"},{"desc":"1809","fix":"1810"},[7793,7819],"\"rencencyInterpretation\"",[8083,8109],[8431,8457],[8711,8737],[8990,9016],[9078,9104],{"desc":"1811","fix":"1812"},{"desc":"1813","fix":"1814"},{"desc":"1815","fix":"1816"},[191,205],{"desc":"1817","fix":"1818"},{"desc":"1819","fix":"1820"},{"desc":"1821","fix":"1822"},{"desc":"1823","fix":"1824"},{"desc":"1825","fix":"1826"},{"desc":"1827","fix":"1828"},{"desc":"1829","fix":"1830"},{"desc":"1831","fix":"1832"},{"desc":"1833","fix":"1834"},{"desc":"1829","fix":"1835"},[169,183],{"desc":"1836","fix":"1837"},{"desc":"1838","fix":"1839"},{"desc":"1840","fix":"1841"},{"desc":"1842","fix":"1843"},{"desc":"1844","fix":"1845"},{"desc":"1846","fix":"1847"},{"desc":"1848","fix":"1849"},{"desc":"1850","fix":"1851"},{"desc":"1850","fix":"1852"},{"desc":"1846","fix":"1853"},{"desc":"1854","fix":"1855"},[185,199],{"desc":"1846","fix":"1856"},{"desc":"1854","fix":"1857"},{"desc":"1858","fix":"1859"},{"desc":"1860","fix":"1861"},[7886,7912],[8176,8202],[8524,8550],[8804,8830],[9083,9109],[9171,9197],{"desc":"1811","fix":"1862"},{"desc":"1813","fix":"1863"},{"desc":"1864","fix":"1865"},{"desc":"1819","fix":"1866"},{"desc":"1867","fix":"1868"},{"desc":"1846","fix":"1869"},[7169,7195],[7459,7485],[7807,7833],[8087,8113],[8366,8392],[8454,8480],{"desc":"1811","fix":"1870"},{"desc":"1871","fix":"1872"},{"desc":"1873","fix":"1874"},{"desc":"1819","fix":"1875"},{"desc":"1876","fix":"1877"},{"desc":"1878","fix":"1879"},{"desc":"1846","fix":"1880"},[1562,1576],{"desc":"1881","fix":"1882"},{"desc":"1883","fix":"1884"},"Update the dependencies array to be: [locationState]",{"range":"1885","text":"1886"},"Update the dependencies array to be: [alertThresholdMinutes]",{"range":"1887","text":"1888"},"Update the dependencies array to be: [PatientCurrentObject]",{"range":"1889","text":"1890"},"Update the dependencies array to be: [recency.longTermLine, recency.verififcationLine, recency.controlLine, props.patientObj, recency]",{"range":"1891","text":"1892"},"Update the dependencies array to be: [props.patientObj, postTest.hivTestResult, postTest]",{"range":"1893","text":"1894"},"Update the dependencies array to be: [objValues.age, props.patientObj, props.extra.age, facilityCode, EnrollmentSetting, getStates, determinSex, PregnancyStatus, CreateClientCode, props, objValues, country, convertFromIdToDisplay]",{"range":"1895","text":"1896"},"Update the dependencies array to be: [getListoFFamilyIndexInfo, props.patientObj]",{"range":"1897","text":"1898"},"Update the dependencies array to be: [knowledgeAssessment, props.patientObj, riskAssessment]",{"range":"1899","text":"1900"},"Update the dependencies array to be: [getCurrentTreatment, getSettings, getVL, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1901","text":"1902"},"Update the dependencies array to be: [objValues.age, props]",{"range":"1903","text":"1904"},"Update the dependencies array to be: [EntryPoint, TargetGroupSetup]",{"range":"1905","text":"1906"},"Update the dependencies array to be: [getStates, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj, viewPnIsnfo]",{"range":"1907","text":"1908"},"Update the dependencies array to be: [loadFamilyIndexSetting]",{"range":"1909","text":"1910"},"Update the dependencies array to be: [getProvincesWithId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1911","text":"1912"},"Update the dependencies array to be: [getPartnerId, getStates, htsClientInformation, objValues, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props.patientObj]",{"range":"1913","text":"1914"},{"range":"1915","text":"1910"},"Update the dependencies array to be: [props.patientObj, props.activePage, patients, patientsCurrentHts]",{"range":"1916","text":"1917"},"Update the dependencies array to be: [hasAnyPermission]",{"range":"1918","text":"1919"},"Update the dependencies array to be: [getFamilyIndexRequestList, getListOfFamilyTracker, getListoFFamilyIndexInfo, getSettings, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address, props.selectedRow]",{"range":"1920","text":"1921"},"Update the dependencies array to be: [viewReferralInfo]",{"range":"1922","text":"1923"},"Update the dependencies array to be: [FetchHivstHistory, props.patientObj]",{"range":"1924","text":"1925"},"Update the dependencies array to be: [patients]",{"range":"1926","text":"1927"},"Update the dependencies array to be: [getStateByCountryId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1928","text":"1929"},"Update the dependencies array to be: [props.row.row.id]",{"range":"1930","text":"1931"},{"range":"1932","text":"1931"},{"range":"1933","text":"1927"},"Update the dependencies array to be: [getStates, props.patientObj]",{"range":"1934","text":"1935"},{"range":"1936","text":"1927"},{"range":"1937","text":"1935"},"Update the dependencies array to be: [props.patientObj, codesets, KP, props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint]",{"range":"1938","text":"1939"},"Update the dependencies array to be: [entryPointSetting, entryPoint, props.newHTSType, retestingInfo]",{"range":"1940","text":"1941"},{"range":"1942","text":"1892"},{"range":"1943","text":"1894"},"Update the dependencies array to be: [props.patientObj, facilityCode, getSettingList]",{"range":"1944","text":"1945"},{"range":"1946","text":"1900"},"Update the dependencies array to be: [loadGenders, props?.patientObj?.personResponseDto?.address?.address]",{"range":"1947","text":"1948"},{"range":"1949","text":"1927"},{"range":"1950","text":"1892"},"Update the dependencies array to be: [postTest, props.patientObj]",{"range":"1951","text":"1952"},"Update the dependencies array to be: [KP, props.activePage.activeObject.riskStratificationResponseDto, props.patientObj]",{"range":"1953","text":"1954"},{"range":"1955","text":"1900"},"Update the dependencies array to be: [props.activePage.activeObject, props?.patientObj]",{"range":"1956","text":"1957"},"Update the dependencies array to be: [getStates]",{"range":"1958","text":"1959"},{"range":"1960","text":"1927"},"Update the dependencies array to be: [props.patientInfo?.hivTestResult, props.patientInfo?.pregnant, pregnancyStatusPregnant]",{"range":"1961","text":"1962"},"Update the dependencies array to be: [patientObj?.id, patientObj?.personId]",{"range":"1963","text":"1964"},[8978,8980],"[locationState]",[12070,12072],"[alertThresholdMinutes]",[2409,2411],"[PatientCurrentObject]",[9940,10054],"[recency.longTermLine, recency.verififcationLine, recency.controlLine, props.patientObj, recency]",[5693,5735],"[props.patientObj, postTest.hivTestResult, postTest]",[16889,16953],"[objValues.age, props.patientObj, props.extra.age, facilityCode, EnrollmentSetting, getStates, determinSex, PregnancyStatus, CreateClientCode, props, objValues, country, convertFromIdToDisplay]",[6050,6068],"[getListoFFamilyIndexInfo, props.patientObj]",[8707,8725],"[knowledgeAssessment, props.patientObj, riskAssessment]",[17495,17497],"[getCurrentTreatment, getSettings, getVL, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address]",[5301,5316],"[objValues.age, props]",[5405,5407],"[EntryPoint, TargetGroupSetup]",[11126,11144],"[getStates, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj, viewPnIsnfo]",[11207,11209],"[loadFamilyIndexSetting]",[7198,7200],"[getProvincesWithId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",[11541,11559],"[getPartnerId, getStates, htsClientInformation, objValues, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props.patientObj]",[11622,11624],[4758,4794],"[props.patientObj, props.activePage, patients, patientsCurrentHts]",[6721,6758],"[hasAnyPermission]",[26351,26353],"[getFamilyIndexRequestList, getListOfFamilyTracker, getListoFFamilyIndexInfo, getSettings, loadGenders, props?.basicInfo?.personResponseDto?.address?.address, props.organizationInfo, props?.patientObj?.personResponseDto?.address?.address, props.selectedRow]",[5784,5786],"[viewReferralInfo]",[3739,3757],"[FetchHivstHistory, props.patientObj]",[3894,3896],"[patients]",[7842,7844],"[getStateByCountryId, loadGenders, props?.patientObj?.personResponseDto?.address?.address]",[12997,12999],"[props.row.row.id]",[6733,6735],[4239,4241],[4368,4386],"[getStates, props.patientObj]",[3928,3930],[4368,4386],[6288,6316],"[props.patientObj, codesets, KP, props?.activePage?.activeObject?.riskStratificationResponseDto?.entryPoint]",[6373,6422],"[entryPointSetting, entryPoint, props.newHTSType, retestingInfo]",[9219,9333],[5573,5615],[6947,6979],"[props.patientObj, facilityCode, getSettingList]",[8233,8251],[6828,6830],"[loadGenders, props?.patientObj?.personResponseDto?.address?.address]",[3926,3928],[9351,9465],[7156,7174],"[postTest, props.patientObj]",[6198,6216],"[KP, props.activePage.activeObject.riskStratificationResponseDto, props.patientObj]",[7729,7747],[4964,4982],"[props.activePage.activeObject, props?.patientObj]",[4485,4487],"[getStates]",[3928,3930],[6704,6755],"[props.patientInfo?.hivTestResult, props.patientInfo?.pregnant, pregnancyStatusPregnant]",[7516,7531],"[patientObj?.id, patientObj?.personId]"]